
PEDALERA_beta_V04_STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc08  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00033f34  0800bd90  0800bd90  0001bd90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803fcc4  0803fcc4  00050318  2**0
                  CONTENTS
  4 .ARM          00000008  0803fcc4  0803fcc4  0004fcc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803fccc  0803fccc  00050318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803fccc  0803fccc  0004fccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803fcd0  0803fcd0  0004fcd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000318  20000000  0803fcd4  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fa8  20000318  0803ffec  00050318  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  200012c0  0803ffec  000512c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050318  2**0
                  CONTENTS, READONLY
 12 .debug_info   000235c8  00000000  00000000  00050348  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004d31  00000000  00000000  00073910  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a08  00000000  00000000  00078648  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000017c0  00000000  00000000  0007a050  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00027d76  00000000  00000000  0007b810  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001a687  00000000  00000000  000a3586  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d7786  00000000  00000000  000bdc0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00195393  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c3c  00000000  00000000  00195410  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000318 	.word	0x20000318
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800bd78 	.word	0x0800bd78

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000031c 	.word	0x2000031c
 80001c4:	0800bd78 	.word	0x0800bd78

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <makeChord>:

	Parameter: fchord		Number of the chord sent. It was made by setChord() and store in "chordSet[]" vector.

	Returns:	unsigned long	(0xXXXXXX) A 3-byte number that contains the fundamental note in the least significant byte, followed by the 2nd and 3rd notes of the chord.
*/
unsigned long makeChord(unsigned long bnote, uint8_t fchord){
 80004c8:	b480      	push	{r7}
 80004ca:	b085      	sub	sp, #20
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	460b      	mov	r3, r1
 80004d2:	70fb      	strb	r3, [r7, #3]

	unsigned long notes;

	notes = bnote;
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	60fb      	str	r3, [r7, #12]
	notes += (bnote << 8);
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	021b      	lsls	r3, r3, #8
 80004dc:	68fa      	ldr	r2, [r7, #12]
 80004de:	4413      	add	r3, r2
 80004e0:	60fb      	str	r3, [r7, #12]
	notes += (bnote << 16);
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	041b      	lsls	r3, r3, #16
 80004e6:	68fa      	ldr	r2, [r7, #12]
 80004e8:	4413      	add	r3, r2
 80004ea:	60fb      	str	r3, [r7, #12]


	notes += chordSet[fchord];
 80004ec:	78fb      	ldrb	r3, [r7, #3]
 80004ee:	4a06      	ldr	r2, [pc, #24]	; (8000508 <makeChord+0x40>)
 80004f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004f4:	68fa      	ldr	r2, [r7, #12]
 80004f6:	4413      	add	r3, r2
 80004f8:	60fb      	str	r3, [r7, #12]


	return notes;
 80004fa:	68fb      	ldr	r3, [r7, #12]
}
 80004fc:	4618      	mov	r0, r3
 80004fe:	3714      	adds	r7, #20
 8000500:	46bd      	mov	sp, r7
 8000502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000506:	4770      	bx	lr
 8000508:	20000338 	.word	0x20000338

0800050c <setChord>:

	Parameter: fnote		id of the pressed note.

	Returns:	void
*/
void setChord(uint8_t fnote){
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	71fb      	strb	r3, [r7, #7]

chordSet[fnote] = hex_chord[chord] - hex_chordInv[chordInv];
 8000516:	4b0a      	ldr	r3, [pc, #40]	; (8000540 <setChord+0x34>)
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a0a      	ldr	r2, [pc, #40]	; (8000544 <setChord+0x38>)
 800051c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000520:	4b09      	ldr	r3, [pc, #36]	; (8000548 <setChord+0x3c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a09      	ldr	r2, [pc, #36]	; (800054c <setChord+0x40>)
 8000526:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800052a:	79fb      	ldrb	r3, [r7, #7]
 800052c:	1a8a      	subs	r2, r1, r2
 800052e:	4908      	ldr	r1, [pc, #32]	; (8000550 <setChord+0x44>)
 8000530:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

}
 8000534:	bf00      	nop
 8000536:	370c      	adds	r7, #12
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr
 8000540:	200003e4 	.word	0x200003e4
 8000544:	0800bf9c 	.word	0x0800bf9c
 8000548:	200003e8 	.word	0x200003e8
 800054c:	0800bfbc 	.word	0x0800bfbc
 8000550:	20000338 	.word	0x20000338

08000554 <turnOnScreen>:
	Parameters: void

	Returns:	void
*/

void turnOnScreen(void){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0

	/////////////CARACTERES ESPECIALES

	lcd_cursor_buff(5, 2);
 8000558:	2102      	movs	r1, #2
 800055a:	2005      	movs	r0, #5
 800055c:	f000 fca0 	bl	8000ea0 <lcd_cursor_buff>
	lcd_string_buff("BASS  PEDAL");
 8000560:	4808      	ldr	r0, [pc, #32]	; (8000584 <turnOnScreen+0x30>)
 8000562:	f000 fd21 	bl	8000fa8 <lcd_string_buff>
	lcd_cursor_buff(5, 3);
 8000566:	2103      	movs	r1, #3
 8000568:	2005      	movs	r0, #5
 800056a:	f000 fc99 	bl	8000ea0 <lcd_cursor_buff>
	lcd_string_buff("SYNTHESIZER");
 800056e:	4806      	ldr	r0, [pc, #24]	; (8000588 <turnOnScreen+0x34>)
 8000570:	f000 fd1a 	bl	8000fa8 <lcd_string_buff>
	lcd_upDate_IT();
 8000574:	f000 fdc4 	bl	8001100 <lcd_upDate_IT>


	HAL_Delay(3000);
 8000578:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800057c:	f002 f87e 	bl	800267c <HAL_Delay>
}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}
 8000584:	0800be3c 	.word	0x0800be3c
 8000588:	0800be48 	.word	0x0800be48

0800058c <chordScreen>:
	Parameters: void

	Returns:	void
*/

void chordScreen(void){
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	lcd_clearScreen_buff();
 8000590:	f000 fc70 	bl	8000e74 <lcd_clearScreen_buff>
	lcd_cursor_buff(1,0);
 8000594:	2100      	movs	r1, #0
 8000596:	2001      	movs	r0, #1
 8000598:	f000 fc82 	bl	8000ea0 <lcd_cursor_buff>
	lcd_string_buff("Acorde: ");
 800059c:	4815      	ldr	r0, [pc, #84]	; (80005f4 <chordScreen+0x68>)
 800059e:	f000 fd03 	bl	8000fa8 <lcd_string_buff>
	lcd_string_buff( str_chord[chord]);
 80005a2:	4b15      	ldr	r3, [pc, #84]	; (80005f8 <chordScreen+0x6c>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a15      	ldr	r2, [pc, #84]	; (80005fc <chordScreen+0x70>)
 80005a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 fcfb 	bl	8000fa8 <lcd_string_buff>
	lcd_cursor_buff(1,1);
 80005b2:	2101      	movs	r1, #1
 80005b4:	2001      	movs	r0, #1
 80005b6:	f000 fc73 	bl	8000ea0 <lcd_cursor_buff>
	lcd_string_buff("Pos:");
 80005ba:	4811      	ldr	r0, [pc, #68]	; (8000600 <chordScreen+0x74>)
 80005bc:	f000 fcf4 	bl	8000fa8 <lcd_string_buff>
	lcd_string_buff( str_chordInv[chordInv]);
 80005c0:	4b10      	ldr	r3, [pc, #64]	; (8000604 <chordScreen+0x78>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a10      	ldr	r2, [pc, #64]	; (8000608 <chordScreen+0x7c>)
 80005c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 fcec 	bl	8000fa8 <lcd_string_buff>
	lcd_cursor_buff(1,2);
 80005d0:	2102      	movs	r1, #2
 80005d2:	2001      	movs	r0, #1
 80005d4:	f000 fc64 	bl	8000ea0 <lcd_cursor_buff>
	lcd_string_buff("Grabar acorde");
 80005d8:	480c      	ldr	r0, [pc, #48]	; (800060c <chordScreen+0x80>)
 80005da:	f000 fce5 	bl	8000fa8 <lcd_string_buff>

	lcd_cursor_buff(0, chordSelect_cursor);
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <chordScreen+0x84>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4619      	mov	r1, r3
 80005e4:	2000      	movs	r0, #0
 80005e6:	f000 fc5b 	bl	8000ea0 <lcd_cursor_buff>
	lcd_string_buff(">");
 80005ea:	480a      	ldr	r0, [pc, #40]	; (8000614 <chordScreen+0x88>)
 80005ec:	f000 fcdc 	bl	8000fa8 <lcd_string_buff>

}
 80005f0:	bf00      	nop
 80005f2:	bd80      	pop	{r7, pc}
 80005f4:	0800be54 	.word	0x0800be54
 80005f8:	200003e4 	.word	0x200003e4
 80005fc:	20000030 	.word	0x20000030
 8000600:	0800be60 	.word	0x0800be60
 8000604:	200003e8 	.word	0x200003e8
 8000608:	20000050 	.word	0x20000050
 800060c:	0800be68 	.word	0x0800be68
 8000610:	200003dc 	.word	0x200003dc
 8000614:	0800be78 	.word	0x0800be78

08000618 <mainScreen>:
	Parameters: void

	Returns:	void
*/

void mainScreen(void){
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0

	extern uint8_t sustainMode;
	extern uint8_t acorde;

  	lcd_clearScreen_buff();
 800061c:	f000 fc2a 	bl	8000e74 <lcd_clearScreen_buff>
	lcd_cursor_buff(0,0);
 8000620:	2100      	movs	r1, #0
 8000622:	2000      	movs	r0, #0
 8000624:	f000 fc3c 	bl	8000ea0 <lcd_cursor_buff>
	lcd_string_buff("Afinacion: ");
 8000628:	4827      	ldr	r0, [pc, #156]	; (80006c8 <mainScreen+0xb0>)
 800062a:	f000 fcbd 	bl	8000fa8 <lcd_string_buff>
	lcd_string_buff(str_tunne[firstDoTunning - 48]);
 800062e:	4b27      	ldr	r3, [pc, #156]	; (80006cc <mainScreen+0xb4>)
 8000630:	781b      	ldrb	r3, [r3, #0]
 8000632:	3b30      	subs	r3, #48	; 0x30
 8000634:	4a26      	ldr	r2, [pc, #152]	; (80006d0 <mainScreen+0xb8>)
 8000636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800063a:	4618      	mov	r0, r3
 800063c:	f000 fcb4 	bl	8000fa8 <lcd_string_buff>
	lcd_cursor_buff(0,1);
 8000640:	2101      	movs	r1, #1
 8000642:	2000      	movs	r0, #0
 8000644:	f000 fc2c 	bl	8000ea0 <lcd_cursor_buff>
	lcd_string_buff("Octava: ");
 8000648:	4822      	ldr	r0, [pc, #136]	; (80006d4 <mainScreen+0xbc>)
 800064a:	f000 fcad 	bl	8000fa8 <lcd_string_buff>
	lcd_string_buff(str_octava[octava + 1]);
 800064e:	4b22      	ldr	r3, [pc, #136]	; (80006d8 <mainScreen+0xc0>)
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	3301      	adds	r3, #1
 8000654:	4a21      	ldr	r2, [pc, #132]	; (80006dc <mainScreen+0xc4>)
 8000656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800065a:	4618      	mov	r0, r3
 800065c:	f000 fca4 	bl	8000fa8 <lcd_string_buff>
	lcd_cursor_buff(0,2);
 8000660:	2102      	movs	r1, #2
 8000662:	2000      	movs	r0, #0
 8000664:	f000 fc1c 	bl	8000ea0 <lcd_cursor_buff>
	lcd_string_buff("Sustain: ");
 8000668:	481d      	ldr	r0, [pc, #116]	; (80006e0 <mainScreen+0xc8>)
 800066a:	f000 fc9d 	bl	8000fa8 <lcd_string_buff>
	switch (sustainMode){
 800066e:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <mainScreen+0xcc>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d007      	beq.n	8000686 <mainScreen+0x6e>
 8000676:	2b02      	cmp	r3, #2
 8000678:	d009      	beq.n	800068e <mainScreen+0x76>
 800067a:	2b00      	cmp	r3, #0
 800067c:	d10b      	bne.n	8000696 <mainScreen+0x7e>
		case 0:
			lcd_string_buff("OFF");
 800067e:	481a      	ldr	r0, [pc, #104]	; (80006e8 <mainScreen+0xd0>)
 8000680:	f000 fc92 	bl	8000fa8 <lcd_string_buff>
		break;
 8000684:	e007      	b.n	8000696 <mainScreen+0x7e>
		case 1:
			lcd_string_buff("smart");
 8000686:	4819      	ldr	r0, [pc, #100]	; (80006ec <mainScreen+0xd4>)
 8000688:	f000 fc8e 	bl	8000fa8 <lcd_string_buff>
		break;
 800068c:	e003      	b.n	8000696 <mainScreen+0x7e>
		case 2:
			lcd_string_buff("clasico");
 800068e:	4818      	ldr	r0, [pc, #96]	; (80006f0 <mainScreen+0xd8>)
 8000690:	f000 fc8a 	bl	8000fa8 <lcd_string_buff>
		break;
 8000694:	bf00      	nop
	}//end switch.
	lcd_cursor_buff(0,3);
 8000696:	2103      	movs	r1, #3
 8000698:	2000      	movs	r0, #0
 800069a:	f000 fc01 	bl	8000ea0 <lcd_cursor_buff>
	lcd_string_buff("Acordes: ");
 800069e:	4815      	ldr	r0, [pc, #84]	; (80006f4 <mainScreen+0xdc>)
 80006a0:	f000 fc82 	bl	8000fa8 <lcd_string_buff>
	switch (acorde){
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <mainScreen+0xe0>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d002      	beq.n	80006b2 <mainScreen+0x9a>
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d004      	beq.n	80006ba <mainScreen+0xa2>
			lcd_string_buff("ON");
		break;
	}//end switch.


}
 80006b0:	e007      	b.n	80006c2 <mainScreen+0xaa>
			lcd_string_buff("OFF");
 80006b2:	480d      	ldr	r0, [pc, #52]	; (80006e8 <mainScreen+0xd0>)
 80006b4:	f000 fc78 	bl	8000fa8 <lcd_string_buff>
		break;
 80006b8:	e003      	b.n	80006c2 <mainScreen+0xaa>
			lcd_string_buff("ON");
 80006ba:	4810      	ldr	r0, [pc, #64]	; (80006fc <mainScreen+0xe4>)
 80006bc:	f000 fc74 	bl	8000fa8 <lcd_string_buff>
		break;
 80006c0:	bf00      	nop
}
 80006c2:	bf00      	nop
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	0800be7c 	.word	0x0800be7c
 80006cc:	200003e0 	.word	0x200003e0
 80006d0:	20000000 	.word	0x20000000
 80006d4:	0800be88 	.word	0x0800be88
 80006d8:	20000334 	.word	0x20000334
 80006dc:	2000005c 	.word	0x2000005c
 80006e0:	0800be94 	.word	0x0800be94
 80006e4:	200003ac 	.word	0x200003ac
 80006e8:	0800bea0 	.word	0x0800bea0
 80006ec:	0800bea4 	.word	0x0800bea4
 80006f0:	0800beac 	.word	0x0800beac
 80006f4:	0800beb4 	.word	0x0800beb4
 80006f8:	200003ad 	.word	0x200003ad
 80006fc:	0800bec0 	.word	0x0800bec0

08000700 <tunneScreen>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void tunneScreen(void){
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 8000704:	f000 fbb6 	bl	8000e74 <lcd_clearScreen_buff>
	lcd_cursor_buff(0,0);
 8000708:	2100      	movs	r1, #0
 800070a:	2000      	movs	r0, #0
 800070c:	f000 fbc8 	bl	8000ea0 <lcd_cursor_buff>
	lcd_string_buff("AFINACION: ");
 8000710:	4806      	ldr	r0, [pc, #24]	; (800072c <tunneScreen+0x2c>)
 8000712:	f000 fc49 	bl	8000fa8 <lcd_string_buff>
	lcd_string_buff(str_tunne[firstDoTunning - 48]);
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <tunneScreen+0x30>)
 8000718:	781b      	ldrb	r3, [r3, #0]
 800071a:	3b30      	subs	r3, #48	; 0x30
 800071c:	4a05      	ldr	r2, [pc, #20]	; (8000734 <tunneScreen+0x34>)
 800071e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000722:	4618      	mov	r0, r3
 8000724:	f000 fc40 	bl	8000fa8 <lcd_string_buff>
}
 8000728:	bf00      	nop
 800072a:	bd80      	pop	{r7, pc}
 800072c:	0800bec4 	.word	0x0800bec4
 8000730:	200003e0 	.word	0x200003e0
 8000734:	20000000 	.word	0x20000000

08000738 <on_off_octave>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void on_off_octave (void){
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 800073c:	f000 fb9a 	bl	8000e74 <lcd_clearScreen_buff>
	lcd_cursor_buff(3,2);
 8000740:	2102      	movs	r1, #2
 8000742:	2003      	movs	r0, #3
 8000744:	f000 fbac 	bl	8000ea0 <lcd_cursor_buff>
	lcd_string_buff("Octava:  ");
 8000748:	4806      	ldr	r0, [pc, #24]	; (8000764 <on_off_octave+0x2c>)
 800074a:	f000 fc2d 	bl	8000fa8 <lcd_string_buff>
	lcd_string_buff(str_octava[octava + 1]);
 800074e:	4b06      	ldr	r3, [pc, #24]	; (8000768 <on_off_octave+0x30>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	3301      	adds	r3, #1
 8000754:	4a05      	ldr	r2, [pc, #20]	; (800076c <on_off_octave+0x34>)
 8000756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800075a:	4618      	mov	r0, r3
 800075c:	f000 fc24 	bl	8000fa8 <lcd_string_buff>

}
 8000760:	bf00      	nop
 8000762:	bd80      	pop	{r7, pc}
 8000764:	0800bee8 	.word	0x0800bee8
 8000768:	20000334 	.word	0x20000334
 800076c:	2000005c 	.word	0x2000005c

08000770 <recuest_footkey>:
	Parameter: void

	Returns:	void
*/

void recuest_footkey (void){
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 8000774:	f000 fb7e 	bl	8000e74 <lcd_clearScreen_buff>
	lcd_cursor_buff(0,0);
 8000778:	2100      	movs	r1, #0
 800077a:	2000      	movs	r0, #0
 800077c:	f000 fb90 	bl	8000ea0 <lcd_cursor_buff>
	lcd_string_buff("Pulse una tecla para");
 8000780:	4805      	ldr	r0, [pc, #20]	; (8000798 <recuest_footkey+0x28>)
 8000782:	f000 fc11 	bl	8000fa8 <lcd_string_buff>
	lcd_cursor_buff(0,1);
 8000786:	2101      	movs	r1, #1
 8000788:	2000      	movs	r0, #0
 800078a:	f000 fb89 	bl	8000ea0 <lcd_cursor_buff>
	lcd_string_buff("grabar el acorde...");
 800078e:	4803      	ldr	r0, [pc, #12]	; (800079c <recuest_footkey+0x2c>)
 8000790:	f000 fc0a 	bl	8000fa8 <lcd_string_buff>

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	0800bef4 	.word	0x0800bef4
 800079c:	0800bf0c 	.word	0x0800bf0c

080007a0 <pop_up_savedChord>:
	Parameter: void

	Returns:	void
*/

void pop_up_savedChord (uint8_t fk){
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	4603      	mov	r3, r0
 80007a8:	71fb      	strb	r3, [r7, #7]

	lcd_clearScreen_buff();
 80007aa:	f000 fb63 	bl	8000e74 <lcd_clearScreen_buff>
	lcd_cursor_buff(0,1);
 80007ae:	2101      	movs	r1, #1
 80007b0:	2000      	movs	r0, #0
 80007b2:	f000 fb75 	bl	8000ea0 <lcd_cursor_buff>
	lcd_string_buff("ACORDE GRABADO EN LA");
 80007b6:	480a      	ldr	r0, [pc, #40]	; (80007e0 <pop_up_savedChord+0x40>)
 80007b8:	f000 fbf6 	bl	8000fa8 <lcd_string_buff>
	lcd_cursor_buff(0,2);
 80007bc:	2102      	movs	r1, #2
 80007be:	2000      	movs	r0, #0
 80007c0:	f000 fb6e 	bl	8000ea0 <lcd_cursor_buff>
	lcd_string_buff("TECLA ");
 80007c4:	4807      	ldr	r0, [pc, #28]	; (80007e4 <pop_up_savedChord+0x44>)
 80007c6:	f000 fbef 	bl	8000fa8 <lcd_string_buff>
	lcd_string_buff(str_tunne[fk]);
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	4a06      	ldr	r2, [pc, #24]	; (80007e8 <pop_up_savedChord+0x48>)
 80007ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f000 fbe8 	bl	8000fa8 <lcd_string_buff>

}
 80007d8:	bf00      	nop
 80007da:	3708      	adds	r7, #8
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	0800bf20 	.word	0x0800bf20
 80007e4:	0800bf38 	.word	0x0800bf38
 80007e8:	20000000 	.word	0x20000000

080007ec <pop_up_sustain>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void pop_up_sustain (void){
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0

	extern uint8_t sustainMode;

	lcd_clearScreen_buff();
 80007f0:	f000 fb40 	bl	8000e74 <lcd_clearScreen_buff>
	lcd_cursor_buff(2,1);
 80007f4:	2101      	movs	r1, #1
 80007f6:	2002      	movs	r0, #2
 80007f8:	f000 fb52 	bl	8000ea0 <lcd_cursor_buff>
	lcd_string_buff("Sustain: ");
 80007fc:	480c      	ldr	r0, [pc, #48]	; (8000830 <pop_up_sustain+0x44>)
 80007fe:	f000 fbd3 	bl	8000fa8 <lcd_string_buff>
	switch (sustainMode){
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <pop_up_sustain+0x48>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d008      	beq.n	800081c <pop_up_sustain+0x30>
 800080a:	2b02      	cmp	r3, #2
 800080c:	d00a      	beq.n	8000824 <pop_up_sustain+0x38>
 800080e:	2b00      	cmp	r3, #0
 8000810:	d000      	beq.n	8000814 <pop_up_sustain+0x28>
		case 2:
			lcd_string_buff("clasico");
		break;
	}//end switch.

}
 8000812:	e00b      	b.n	800082c <pop_up_sustain+0x40>
			lcd_string_buff("OFF");
 8000814:	4808      	ldr	r0, [pc, #32]	; (8000838 <pop_up_sustain+0x4c>)
 8000816:	f000 fbc7 	bl	8000fa8 <lcd_string_buff>
		break;
 800081a:	e007      	b.n	800082c <pop_up_sustain+0x40>
			lcd_string_buff("smart");
 800081c:	4807      	ldr	r0, [pc, #28]	; (800083c <pop_up_sustain+0x50>)
 800081e:	f000 fbc3 	bl	8000fa8 <lcd_string_buff>
		break;
 8000822:	e003      	b.n	800082c <pop_up_sustain+0x40>
			lcd_string_buff("clasico");
 8000824:	4806      	ldr	r0, [pc, #24]	; (8000840 <pop_up_sustain+0x54>)
 8000826:	f000 fbbf 	bl	8000fa8 <lcd_string_buff>
		break;
 800082a:	bf00      	nop
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	0800be94 	.word	0x0800be94
 8000834:	200003ac 	.word	0x200003ac
 8000838:	0800bea0 	.word	0x0800bea0
 800083c:	0800bea4 	.word	0x0800bea4
 8000840:	0800beac 	.word	0x0800beac

08000844 <pop_up_cancel>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void pop_up_cancel (void){
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0

	lcd_clearScreen_buff();
 8000848:	f000 fb14 	bl	8000e74 <lcd_clearScreen_buff>
	lcd_cursor_buff(2,1);
 800084c:	2101      	movs	r1, #1
 800084e:	2002      	movs	r0, #2
 8000850:	f000 fb26 	bl	8000ea0 <lcd_cursor_buff>
	lcd_string_buff("ACCION CANCELADA");
 8000854:	4802      	ldr	r0, [pc, #8]	; (8000860 <pop_up_cancel+0x1c>)
 8000856:	f000 fba7 	bl	8000fa8 <lcd_string_buff>

}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	0800bf40 	.word	0x0800bf40

08000864 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b084      	sub	sp, #16
 8000868:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800086a:	463b      	mov	r3, r7
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000876:	4b21      	ldr	r3, [pc, #132]	; (80008fc <MX_ADC1_Init+0x98>)
 8000878:	4a21      	ldr	r2, [pc, #132]	; (8000900 <MX_ADC1_Init+0x9c>)
 800087a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800087c:	4b1f      	ldr	r3, [pc, #124]	; (80008fc <MX_ADC1_Init+0x98>)
 800087e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000882:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000884:	4b1d      	ldr	r3, [pc, #116]	; (80008fc <MX_ADC1_Init+0x98>)
 8000886:	2200      	movs	r2, #0
 8000888:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800088a:	4b1c      	ldr	r3, [pc, #112]	; (80008fc <MX_ADC1_Init+0x98>)
 800088c:	2200      	movs	r2, #0
 800088e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000890:	4b1a      	ldr	r3, [pc, #104]	; (80008fc <MX_ADC1_Init+0x98>)
 8000892:	2200      	movs	r2, #0
 8000894:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000896:	4b19      	ldr	r3, [pc, #100]	; (80008fc <MX_ADC1_Init+0x98>)
 8000898:	2200      	movs	r2, #0
 800089a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800089e:	4b17      	ldr	r3, [pc, #92]	; (80008fc <MX_ADC1_Init+0x98>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008a4:	4b15      	ldr	r3, [pc, #84]	; (80008fc <MX_ADC1_Init+0x98>)
 80008a6:	4a17      	ldr	r2, [pc, #92]	; (8000904 <MX_ADC1_Init+0xa0>)
 80008a8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008aa:	4b14      	ldr	r3, [pc, #80]	; (80008fc <MX_ADC1_Init+0x98>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008b0:	4b12      	ldr	r3, [pc, #72]	; (80008fc <MX_ADC1_Init+0x98>)
 80008b2:	2201      	movs	r2, #1
 80008b4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008b6:	4b11      	ldr	r3, [pc, #68]	; (80008fc <MX_ADC1_Init+0x98>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008be:	4b0f      	ldr	r3, [pc, #60]	; (80008fc <MX_ADC1_Init+0x98>)
 80008c0:	2201      	movs	r2, #1
 80008c2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008c4:	480d      	ldr	r0, [pc, #52]	; (80008fc <MX_ADC1_Init+0x98>)
 80008c6:	f001 fefb 	bl	80026c0 <HAL_ADC_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008d0:	f001 fab4 	bl	8001e3c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80008d4:	2308      	movs	r3, #8
 80008d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008d8:	2301      	movs	r3, #1
 80008da:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008dc:	2300      	movs	r3, #0
 80008de:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008e0:	463b      	mov	r3, r7
 80008e2:	4619      	mov	r1, r3
 80008e4:	4805      	ldr	r0, [pc, #20]	; (80008fc <MX_ADC1_Init+0x98>)
 80008e6:	f001 ff2f 	bl	8002748 <HAL_ADC_ConfigChannel>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80008f0:	f001 faa4 	bl	8001e3c <Error_Handler>
  }

}
 80008f4:	bf00      	nop
 80008f6:	3710      	adds	r7, #16
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200003f0 	.word	0x200003f0
 8000900:	40012000 	.word	0x40012000
 8000904:	0f000001 	.word	0x0f000001

08000908 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08a      	sub	sp, #40	; 0x28
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 0314 	add.w	r3, r7, #20
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a24      	ldr	r2, [pc, #144]	; (80009b8 <HAL_ADC_MspInit+0xb0>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d141      	bne.n	80009ae <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	613b      	str	r3, [r7, #16]
 800092e:	4b23      	ldr	r3, [pc, #140]	; (80009bc <HAL_ADC_MspInit+0xb4>)
 8000930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000932:	4a22      	ldr	r2, [pc, #136]	; (80009bc <HAL_ADC_MspInit+0xb4>)
 8000934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000938:	6453      	str	r3, [r2, #68]	; 0x44
 800093a:	4b20      	ldr	r3, [pc, #128]	; (80009bc <HAL_ADC_MspInit+0xb4>)
 800093c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000942:	613b      	str	r3, [r7, #16]
 8000944:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	4b1c      	ldr	r3, [pc, #112]	; (80009bc <HAL_ADC_MspInit+0xb4>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a1b      	ldr	r2, [pc, #108]	; (80009bc <HAL_ADC_MspInit+0xb4>)
 8000950:	f043 0304 	orr.w	r3, r3, #4
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b19      	ldr	r3, [pc, #100]	; (80009bc <HAL_ADC_MspInit+0xb4>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0304 	and.w	r3, r3, #4
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60bb      	str	r3, [r7, #8]
 8000966:	4b15      	ldr	r3, [pc, #84]	; (80009bc <HAL_ADC_MspInit+0xb4>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a14      	ldr	r2, [pc, #80]	; (80009bc <HAL_ADC_MspInit+0xb4>)
 800096c:	f043 0302 	orr.w	r3, r3, #2
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b12      	ldr	r3, [pc, #72]	; (80009bc <HAL_ADC_MspInit+0xb4>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0302 	and.w	r3, r3, #2
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800097e:	2303      	movs	r3, #3
 8000980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000982:	2303      	movs	r3, #3
 8000984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098a:	f107 0314 	add.w	r3, r7, #20
 800098e:	4619      	mov	r1, r3
 8000990:	480b      	ldr	r0, [pc, #44]	; (80009c0 <HAL_ADC_MspInit+0xb8>)
 8000992:	f002 fb33 	bl	8002ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000996:	2303      	movs	r3, #3
 8000998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800099a:	2303      	movs	r3, #3
 800099c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	4806      	ldr	r0, [pc, #24]	; (80009c4 <HAL_ADC_MspInit+0xbc>)
 80009aa:	f002 fb27 	bl	8002ffc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80009ae:	bf00      	nop
 80009b0:	3728      	adds	r7, #40	; 0x28
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40012000 	.word	0x40012000
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020800 	.word	0x40020800
 80009c4:	40020400 	.word	0x40020400

080009c8 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80009ce:	463b      	mov	r3, r7
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MX_DAC_Init+0x60>)
 80009d8:	4a14      	ldr	r2, [pc, #80]	; (8000a2c <MX_DAC_Init+0x64>)
 80009da:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80009dc:	4812      	ldr	r0, [pc, #72]	; (8000a28 <MX_DAC_Init+0x60>)
 80009de:	f002 f9e2 	bl	8002da6 <HAL_DAC_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80009e8:	f001 fa28 	bl	8001e3c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80009f0:	2300      	movs	r3, #0
 80009f2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80009f4:	463b      	mov	r3, r7
 80009f6:	2200      	movs	r2, #0
 80009f8:	4619      	mov	r1, r3
 80009fa:	480b      	ldr	r0, [pc, #44]	; (8000a28 <MX_DAC_Init+0x60>)
 80009fc:	f002 fa5b 	bl	8002eb6 <HAL_DAC_ConfigChannel>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d001      	beq.n	8000a0a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000a06:	f001 fa19 	bl	8001e3c <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000a0a:	463b      	mov	r3, r7
 8000a0c:	2210      	movs	r2, #16
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <MX_DAC_Init+0x60>)
 8000a12:	f002 fa50 	bl	8002eb6 <HAL_DAC_ConfigChannel>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8000a1c:	f001 fa0e 	bl	8001e3c <Error_Handler>
  }

}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000438 	.word	0x20000438
 8000a2c:	40007400 	.word	0x40007400

08000a30 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b08a      	sub	sp, #40	; 0x28
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a38:	f107 0314 	add.w	r3, r7, #20
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	601a      	str	r2, [r3, #0]
 8000a40:	605a      	str	r2, [r3, #4]
 8000a42:	609a      	str	r2, [r3, #8]
 8000a44:	60da      	str	r2, [r3, #12]
 8000a46:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a17      	ldr	r2, [pc, #92]	; (8000aac <HAL_DAC_MspInit+0x7c>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d127      	bne.n	8000aa2 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]
 8000a56:	4b16      	ldr	r3, [pc, #88]	; (8000ab0 <HAL_DAC_MspInit+0x80>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5a:	4a15      	ldr	r2, [pc, #84]	; (8000ab0 <HAL_DAC_MspInit+0x80>)
 8000a5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000a60:	6413      	str	r3, [r2, #64]	; 0x40
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <HAL_DAC_MspInit+0x80>)
 8000a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a6a:	613b      	str	r3, [r7, #16]
 8000a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
 8000a72:	4b0f      	ldr	r3, [pc, #60]	; (8000ab0 <HAL_DAC_MspInit+0x80>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a0e      	ldr	r2, [pc, #56]	; (8000ab0 <HAL_DAC_MspInit+0x80>)
 8000a78:	f043 0301 	orr.w	r3, r3, #1
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	; (8000ab0 <HAL_DAC_MspInit+0x80>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0301 	and.w	r3, r3, #1
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a8a:	2330      	movs	r3, #48	; 0x30
 8000a8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a8e:	2303      	movs	r3, #3
 8000a90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <HAL_DAC_MspInit+0x84>)
 8000a9e:	f002 faad 	bl	8002ffc <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000aa2:	bf00      	nop
 8000aa4:	3728      	adds	r7, #40	; 0x28
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40007400 	.word	0x40007400
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40020000 	.word	0x40020000

08000ab8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08c      	sub	sp, #48	; 0x30
 8000abc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	f107 031c 	add.w	r3, r7, #28
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	601a      	str	r2, [r3, #0]
 8000ac6:	605a      	str	r2, [r3, #4]
 8000ac8:	609a      	str	r2, [r3, #8]
 8000aca:	60da      	str	r2, [r3, #12]
 8000acc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ace:	2300      	movs	r3, #0
 8000ad0:	61bb      	str	r3, [r7, #24]
 8000ad2:	4b5b      	ldr	r3, [pc, #364]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	4a5a      	ldr	r2, [pc, #360]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000ad8:	f043 0310 	orr.w	r3, r3, #16
 8000adc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ade:	4b58      	ldr	r3, [pc, #352]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	f003 0310 	and.w	r3, r3, #16
 8000ae6:	61bb      	str	r3, [r7, #24]
 8000ae8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aea:	2300      	movs	r3, #0
 8000aec:	617b      	str	r3, [r7, #20]
 8000aee:	4b54      	ldr	r3, [pc, #336]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af2:	4a53      	ldr	r2, [pc, #332]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000af4:	f043 0304 	orr.w	r3, r3, #4
 8000af8:	6313      	str	r3, [r2, #48]	; 0x30
 8000afa:	4b51      	ldr	r3, [pc, #324]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afe:	f003 0304 	and.w	r3, r3, #4
 8000b02:	617b      	str	r3, [r7, #20]
 8000b04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	613b      	str	r3, [r7, #16]
 8000b0a:	4b4d      	ldr	r3, [pc, #308]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	4a4c      	ldr	r2, [pc, #304]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b14:	6313      	str	r3, [r2, #48]	; 0x30
 8000b16:	4b4a      	ldr	r3, [pc, #296]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	60fb      	str	r3, [r7, #12]
 8000b26:	4b46      	ldr	r3, [pc, #280]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	4a45      	ldr	r2, [pc, #276]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6313      	str	r3, [r2, #48]	; 0x30
 8000b32:	4b43      	ldr	r3, [pc, #268]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60bb      	str	r3, [r7, #8]
 8000b42:	4b3f      	ldr	r3, [pc, #252]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	4a3e      	ldr	r2, [pc, #248]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000b48:	f043 0302 	orr.w	r3, r3, #2
 8000b4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4e:	4b3c      	ldr	r3, [pc, #240]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	f003 0302 	and.w	r3, r3, #2
 8000b56:	60bb      	str	r3, [r7, #8]
 8000b58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	607b      	str	r3, [r7, #4]
 8000b5e:	4b38      	ldr	r3, [pc, #224]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a37      	ldr	r2, [pc, #220]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000b64:	f043 0308 	orr.w	r3, r3, #8
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b35      	ldr	r3, [pc, #212]	; (8000c40 <MX_GPIO_Init+0x188>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0308 	and.w	r3, r3, #8
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SCLK_leds_Pin|ST_leds_Pin|SD_leds_Pin|LED_VERDE_Pin
 8000b76:	2200      	movs	r2, #0
 8000b78:	f44f 417e 	mov.w	r1, #65024	; 0xfe00
 8000b7c:	4831      	ldr	r0, [pc, #196]	; (8000c44 <MX_GPIO_Init+0x18c>)
 8000b7e:	f002 fbef 	bl	8003360 <HAL_GPIO_WritePin>
                          |LED_NARANJA_Pin|LED_ROJO_Pin|LED_AZUL_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = MIb_Pin|LA_Pin|RE_Pin|LAb_Pin
 8000b82:	237f      	movs	r3, #127	; 0x7f
 8000b84:	61fb      	str	r3, [r7, #28]
                          |REb_Pin|MI_Pin|SIb_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b86:	2300      	movs	r3, #0
 8000b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b8a:	2301      	movs	r3, #1
 8000b8c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b8e:	f107 031c 	add.w	r3, r7, #28
 8000b92:	4619      	mov	r1, r3
 8000b94:	482c      	ldr	r0, [pc, #176]	; (8000c48 <MX_GPIO_Init+0x190>)
 8000b96:	f002 fa31 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = SOL_Pin|DO_Pin|SOLb_Pin|CHORD_Pin
 8000b9a:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8000b9e:	61fb      	str	r3, [r7, #28]
                          |PRESET0_Pin|PRESET1_Pin|LEFT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba8:	f107 031c 	add.w	r3, r7, #28
 8000bac:	4619      	mov	r1, r3
 8000bae:	4827      	ldr	r0, [pc, #156]	; (8000c4c <MX_GPIO_Init+0x194>)
 8000bb0:	f002 fa24 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOTON_AZUL_Pin;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOTON_AZUL_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 031c 	add.w	r3, r7, #28
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4822      	ldr	r0, [pc, #136]	; (8000c50 <MX_GPIO_Init+0x198>)
 8000bc8:	f002 fa18 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = SCLK_leds_Pin|ST_leds_Pin|SD_leds_Pin|LED_VERDE_Pin
 8000bcc:	f44f 437e 	mov.w	r3, #65024	; 0xfe00
 8000bd0:	61fb      	str	r3, [r7, #28]
                          |LED_NARANJA_Pin|LED_ROJO_Pin|LED_AZUL_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bde:	f107 031c 	add.w	r3, r7, #28
 8000be2:	4619      	mov	r1, r3
 8000be4:	4817      	ldr	r0, [pc, #92]	; (8000c44 <MX_GPIO_Init+0x18c>)
 8000be6:	f002 fa09 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = PRESET5_Pin|PRESET4_Pin|PRESET3_Pin|PRESET2_Pin;
 8000bea:	f44f 4307 	mov.w	r3, #34560	; 0x8700
 8000bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bf8:	f107 031c 	add.w	r3, r7, #28
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4814      	ldr	r0, [pc, #80]	; (8000c50 <MX_GPIO_Init+0x198>)
 8000c00:	f002 f9fc 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = RIGHT_Pin|UP_Pin|DOWN_Pin|TUNNE_Pin
 8000c04:	23ef      	movs	r3, #239	; 0xef
 8000c06:	61fb      	str	r3, [r7, #28]
                          |SUST_MIDI_Pin|OCT_A_Pin|SUST_PROP_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c10:	f107 031c 	add.w	r3, r7, #28
 8000c14:	4619      	mov	r1, r3
 8000c16:	480b      	ldr	r0, [pc, #44]	; (8000c44 <MX_GPIO_Init+0x18c>)
 8000c18:	f002 f9f0 	bl	8002ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = OCT_M_Pin|DO8_Pin|OCT_G_Pin|FA_Pin
 8000c1c:	f44f 734e 	mov.w	r3, #824	; 0x338
 8000c20:	61fb      	str	r3, [r7, #28]
                          |SI_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c22:	2300      	movs	r3, #0
 8000c24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c2a:	f107 031c 	add.w	r3, r7, #28
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4808      	ldr	r0, [pc, #32]	; (8000c54 <MX_GPIO_Init+0x19c>)
 8000c32:	f002 f9e3 	bl	8002ffc <HAL_GPIO_Init>

}
 8000c36:	bf00      	nop
 8000c38:	3730      	adds	r7, #48	; 0x30
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020c00 	.word	0x40020c00
 8000c48:	40021000 	.word	0x40021000
 8000c4c:	40020800 	.word	0x40020800
 8000c50:	40020000 	.word	0x40020000
 8000c54:	40020400 	.word	0x40020400

08000c58 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c5e:	4a13      	ldr	r2, [pc, #76]	; (8000cac <MX_I2C1_Init+0x54>)
 8000c60:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000c62:	4b11      	ldr	r3, [pc, #68]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c64:	4a12      	ldr	r2, [pc, #72]	; (8000cb0 <MX_I2C1_Init+0x58>)
 8000c66:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c68:	4b0f      	ldr	r3, [pc, #60]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c7a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c7c:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c88:	4b07      	ldr	r3, [pc, #28]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c8e:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c94:	4804      	ldr	r0, [pc, #16]	; (8000ca8 <MX_I2C1_Init+0x50>)
 8000c96:	f002 fb7d 	bl	8003394 <HAL_I2C_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000ca0:	f001 f8cc 	bl	8001e3c <Error_Handler>
  }

}
 8000ca4:	bf00      	nop
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	2000044c 	.word	0x2000044c
 8000cac:	40005400 	.word	0x40005400
 8000cb0:	00061a80 	.word	0x00061a80

08000cb4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b08a      	sub	sp, #40	; 0x28
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	f107 0314 	add.w	r3, r7, #20
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a21      	ldr	r2, [pc, #132]	; (8000d58 <HAL_I2C_MspInit+0xa4>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d13b      	bne.n	8000d4e <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	613b      	str	r3, [r7, #16]
 8000cda:	4b20      	ldr	r3, [pc, #128]	; (8000d5c <HAL_I2C_MspInit+0xa8>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	4a1f      	ldr	r2, [pc, #124]	; (8000d5c <HAL_I2C_MspInit+0xa8>)
 8000ce0:	f043 0302 	orr.w	r3, r3, #2
 8000ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce6:	4b1d      	ldr	r3, [pc, #116]	; (8000d5c <HAL_I2C_MspInit+0xa8>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	f003 0302 	and.w	r3, r3, #2
 8000cee:	613b      	str	r3, [r7, #16]
 8000cf0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cf2:	23c0      	movs	r3, #192	; 0xc0
 8000cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cf6:	2312      	movs	r3, #18
 8000cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfe:	2303      	movs	r3, #3
 8000d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d02:	2304      	movs	r3, #4
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d06:	f107 0314 	add.w	r3, r7, #20
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	4814      	ldr	r0, [pc, #80]	; (8000d60 <HAL_I2C_MspInit+0xac>)
 8000d0e:	f002 f975 	bl	8002ffc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d12:	2300      	movs	r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <HAL_I2C_MspInit+0xa8>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1a:	4a10      	ldr	r2, [pc, #64]	; (8000d5c <HAL_I2C_MspInit+0xa8>)
 8000d1c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d20:	6413      	str	r3, [r2, #64]	; 0x40
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <HAL_I2C_MspInit+0xa8>)
 8000d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2100      	movs	r1, #0
 8000d32:	201f      	movs	r0, #31
 8000d34:	f002 f801 	bl	8002d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000d38:	201f      	movs	r0, #31
 8000d3a:	f002 f81a 	bl	8002d72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	2100      	movs	r1, #0
 8000d42:	2020      	movs	r0, #32
 8000d44:	f001 fff9 	bl	8002d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000d48:	2020      	movs	r0, #32
 8000d4a:	f002 f812 	bl	8002d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d4e:	bf00      	nop
 8000d50:	3728      	adds	r7, #40	; 0x28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40005400 	.word	0x40005400
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40020400 	.word	0x40020400

08000d64 <__lcd_send_cmd>:
uint8_t flag_sendLcd = 1;
uint8_t I2CtxComplete = 1;

/*Used by lcd_init() only*/
void __lcd_send_cmd (char cmd)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af02      	add	r7, sp, #8
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	f023 030f 	bic.w	r3, r3, #15
 8000d74:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	011b      	lsls	r3, r3, #4
 8000d7a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000d7c:	7bfb      	ldrb	r3, [r7, #15]
 8000d7e:	f043 030c 	orr.w	r3, r3, #12
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000d86:	7bfb      	ldrb	r3, [r7, #15]
 8000d88:	f043 0308 	orr.w	r3, r3, #8
 8000d8c:	b2db      	uxtb	r3, r3
 8000d8e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000d90:	7bbb      	ldrb	r3, [r7, #14]
 8000d92:	f043 030c 	orr.w	r3, r3, #12
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000d9a:	7bbb      	ldrb	r3, [r7, #14]
 8000d9c:	f043 0308 	orr.w	r3, r3, #8
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000da4:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <__lcd_send_cmd+0x60>)
 8000da6:	6818      	ldr	r0, [r3, #0]
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <__lcd_send_cmd+0x64>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	b299      	uxth	r1, r3
 8000dae:	f107 0208 	add.w	r2, r7, #8
 8000db2:	2364      	movs	r3, #100	; 0x64
 8000db4:	9300      	str	r3, [sp, #0]
 8000db6:	2304      	movs	r3, #4
 8000db8:	f002 fc24 	bl	8003604 <HAL_I2C_Master_Transmit>
}
 8000dbc:	bf00      	nop
 8000dbe:	3710      	adds	r7, #16
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	2000074c 	.word	0x2000074c
 8000dc8:	20000748 	.word	0x20000748

08000dcc <__lcd_send_cmd_buff>:

void __lcd_send_cmd_buff (char cmd)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	f023 030f 	bic.w	r3, r3, #15
 8000ddc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000dde:	79fb      	ldrb	r3, [r7, #7]
 8000de0:	011b      	lsls	r3, r3, #4
 8000de2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000de4:	7bfb      	ldrb	r3, [r7, #15]
 8000de6:	f043 030c 	orr.w	r3, r3, #12
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000dee:	7bfb      	ldrb	r3, [r7, #15]
 8000df0:	f043 0308 	orr.w	r3, r3, #8
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000df8:	7bbb      	ldrb	r3, [r7, #14]
 8000dfa:	f043 030c 	orr.w	r3, r3, #12
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000e02:	7bbb      	ldrb	r3, [r7, #14]
 8000e04:	f043 0308 	orr.w	r3, r3, #8
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	72fb      	strb	r3, [r7, #11]
//	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
	__add_to_lcdBuff((uint8_t*)data_t,4);
 8000e0c:	f107 0308 	add.w	r3, r7, #8
 8000e10:	2104      	movs	r1, #4
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 f8dc 	bl	8000fd0 <__add_to_lcdBuff>
}
 8000e18:	bf00      	nop
 8000e1a:	3710      	adds	r7, #16
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <__lcd_send_data_buff>:


void __lcd_send_data_buff (char data)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	f023 030f 	bic.w	r3, r3, #15
 8000e30:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000e32:	79fb      	ldrb	r3, [r7, #7]
 8000e34:	011b      	lsls	r3, r3, #4
 8000e36:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000e38:	7bfb      	ldrb	r3, [r7, #15]
 8000e3a:	f043 030d 	orr.w	r3, r3, #13
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000e42:	7bfb      	ldrb	r3, [r7, #15]
 8000e44:	f043 0309 	orr.w	r3, r3, #9
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000e4c:	7bbb      	ldrb	r3, [r7, #14]
 8000e4e:	f043 030d 	orr.w	r3, r3, #13
 8000e52:	b2db      	uxtb	r3, r3
 8000e54:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000e56:	7bbb      	ldrb	r3, [r7, #14]
 8000e58:	f043 0309 	orr.w	r3, r3, #9
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	72fb      	strb	r3, [r7, #11]
//	HAL_I2C_Master_Transmit (i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
	__add_to_lcdBuff((uint8_t*)data_t,4);
 8000e60:	f107 0308 	add.w	r3, r7, #8
 8000e64:	2104      	movs	r1, #4
 8000e66:	4618      	mov	r0, r3
 8000e68:	f000 f8b2 	bl	8000fd0 <__add_to_lcdBuff>
}
 8000e6c:	bf00      	nop
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <lcd_clearScreen_buff>:


void lcd_clearScreen_buff (void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
	__lcd_send_cmd_buff (0x80);
 8000e7a:	2080      	movs	r0, #128	; 0x80
 8000e7c:	f7ff ffa6 	bl	8000dcc <__lcd_send_cmd_buff>
	for (int i=0; i<80; i++)
 8000e80:	2300      	movs	r3, #0
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	e005      	b.n	8000e92 <lcd_clearScreen_buff+0x1e>
	{
		__lcd_send_data_buff (' ');
 8000e86:	2020      	movs	r0, #32
 8000e88:	f7ff ffca 	bl	8000e20 <__lcd_send_data_buff>
	for (int i=0; i<80; i++)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3301      	adds	r3, #1
 8000e90:	607b      	str	r3, [r7, #4]
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	2b4f      	cmp	r3, #79	; 0x4f
 8000e96:	ddf6      	ble.n	8000e86 <lcd_clearScreen_buff+0x12>
	}
}
 8000e98:	bf00      	nop
 8000e9a:	3708      	adds	r7, #8
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <lcd_cursor_buff>:


void lcd_cursor_buff(int x, int y)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
 8000ea8:	6039      	str	r1, [r7, #0]
    switch (y){
 8000eaa:	683b      	ldr	r3, [r7, #0]
 8000eac:	2b03      	cmp	r3, #3
 8000eae:	d82b      	bhi.n	8000f08 <lcd_cursor_buff+0x68>
 8000eb0:	a201      	add	r2, pc, #4	; (adr r2, 8000eb8 <lcd_cursor_buff+0x18>)
 8000eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eb6:	bf00      	nop
 8000eb8:	08000ec9 	.word	0x08000ec9
 8000ebc:	08000ed9 	.word	0x08000ed9
 8000ec0:	08000ee9 	.word	0x08000ee9
 8000ec4:	08000ef9 	.word	0x08000ef9
    	case 0:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE1 + x);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	3b80      	subs	r3, #128	; 0x80
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff7b 	bl	8000dcc <__lcd_send_cmd_buff>
    	break;
 8000ed6:	e017      	b.n	8000f08 <lcd_cursor_buff+0x68>
    	case 1:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE2 + x);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	3b40      	subs	r3, #64	; 0x40
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f7ff ff73 	bl	8000dcc <__lcd_send_cmd_buff>
    	break;
 8000ee6:	e00f      	b.n	8000f08 <lcd_cursor_buff+0x68>
    	case 2:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE3 + x);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	b2db      	uxtb	r3, r3
 8000eec:	3b6c      	subs	r3, #108	; 0x6c
 8000eee:	b2db      	uxtb	r3, r3
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff ff6b 	bl	8000dcc <__lcd_send_cmd_buff>
    	break;
 8000ef6:	e007      	b.n	8000f08 <lcd_cursor_buff+0x68>
    	case 3:
    		__lcd_send_cmd_buff(LCD_DDRAM_ADDRESS + LCD_START_LINE4 + x);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	3b2c      	subs	r3, #44	; 0x2c
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff ff63 	bl	8000dcc <__lcd_send_cmd_buff>
    	break;
 8000f06:	bf00      	nop
    }
}
 8000f08:	bf00      	nop
 8000f0a:	3708      	adds	r7, #8
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <lcd_init>:


void lcd_init (I2C_HandleTypeDef* hi2c, uint8_t i2c_address)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	460b      	mov	r3, r1
 8000f1a:	70fb      	strb	r3, [r7, #3]
	i2c_handler = hi2c; //set the i2c handler struct.
 8000f1c:	4a20      	ldr	r2, [pc, #128]	; (8000fa0 <lcd_init+0x90>)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	6013      	str	r3, [r2, #0]
	SLAVE_ADDRESS_LCD = (i2c_address << 1); //set the lcd i2c address (left alignment).
 8000f22:	78fb      	ldrb	r3, [r7, #3]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <lcd_init+0x94>)
 8000f2a:	701a      	strb	r2, [r3, #0]

	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000f2c:	2032      	movs	r0, #50	; 0x32
 8000f2e:	f001 fba5 	bl	800267c <HAL_Delay>
	__lcd_send_cmd (0x30);
 8000f32:	2030      	movs	r0, #48	; 0x30
 8000f34:	f7ff ff16 	bl	8000d64 <__lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000f38:	2005      	movs	r0, #5
 8000f3a:	f001 fb9f 	bl	800267c <HAL_Delay>
	__lcd_send_cmd (0x30);
 8000f3e:	2030      	movs	r0, #48	; 0x30
 8000f40:	f7ff ff10 	bl	8000d64 <__lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000f44:	2001      	movs	r0, #1
 8000f46:	f001 fb99 	bl	800267c <HAL_Delay>
	__lcd_send_cmd (0x30);
 8000f4a:	2030      	movs	r0, #48	; 0x30
 8000f4c:	f7ff ff0a 	bl	8000d64 <__lcd_send_cmd>
	HAL_Delay(10);
 8000f50:	200a      	movs	r0, #10
 8000f52:	f001 fb93 	bl	800267c <HAL_Delay>
	__lcd_send_cmd (0x20);  // 4bit mode
 8000f56:	2020      	movs	r0, #32
 8000f58:	f7ff ff04 	bl	8000d64 <__lcd_send_cmd>
	HAL_Delay(10);
 8000f5c:	200a      	movs	r0, #10
 8000f5e:	f001 fb8d 	bl	800267c <HAL_Delay>

  // dislay initialisation
	__lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000f62:	2028      	movs	r0, #40	; 0x28
 8000f64:	f7ff fefe 	bl	8000d64 <__lcd_send_cmd>
	HAL_Delay(1);
 8000f68:	2001      	movs	r0, #1
 8000f6a:	f001 fb87 	bl	800267c <HAL_Delay>
	__lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000f6e:	2008      	movs	r0, #8
 8000f70:	f7ff fef8 	bl	8000d64 <__lcd_send_cmd>
	HAL_Delay(1);
 8000f74:	2001      	movs	r0, #1
 8000f76:	f001 fb81 	bl	800267c <HAL_Delay>
	__lcd_send_cmd (0x01);  // clear display
 8000f7a:	2001      	movs	r0, #1
 8000f7c:	f7ff fef2 	bl	8000d64 <__lcd_send_cmd>
	HAL_Delay(2);
 8000f80:	2002      	movs	r0, #2
 8000f82:	f001 fb7b 	bl	800267c <HAL_Delay>
	__lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000f86:	2006      	movs	r0, #6
 8000f88:	f7ff feec 	bl	8000d64 <__lcd_send_cmd>
	HAL_Delay(1);
 8000f8c:	2001      	movs	r0, #1
 8000f8e:	f001 fb75 	bl	800267c <HAL_Delay>
	__lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000f92:	200c      	movs	r0, #12
 8000f94:	f7ff fee6 	bl	8000d64 <__lcd_send_cmd>
}
 8000f98:	bf00      	nop
 8000f9a:	3708      	adds	r7, #8
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	2000074c 	.word	0x2000074c
 8000fa4:	20000748 	.word	0x20000748

08000fa8 <lcd_string_buff>:


void lcd_string_buff (char *str)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
	while (*str) __lcd_send_data_buff(*str++);
 8000fb0:	e006      	b.n	8000fc0 <lcd_string_buff+0x18>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	1c5a      	adds	r2, r3, #1
 8000fb6:	607a      	str	r2, [r7, #4]
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff ff30 	bl	8000e20 <__lcd_send_data_buff>
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1f4      	bne.n	8000fb2 <lcd_string_buff+0xa>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <__add_to_lcdBuff>:


void __add_to_lcdBuff(uint8_t* data, uint8_t sizeData){
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	73fb      	strb	r3, [r7, #15]
	while (i < sizeData){
 8000fe0:	e018      	b.n	8001014 <__add_to_lcdBuff+0x44>
		lcd_circ_buffer[lcd_circ_buff_in] = *(data + i);
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	4413      	add	r3, r2
 8000fe8:	4a11      	ldr	r2, [pc, #68]	; (8001030 <__add_to_lcdBuff+0x60>)
 8000fea:	8812      	ldrh	r2, [r2, #0]
 8000fec:	7819      	ldrb	r1, [r3, #0]
 8000fee:	4b11      	ldr	r3, [pc, #68]	; (8001034 <__add_to_lcdBuff+0x64>)
 8000ff0:	5499      	strb	r1, [r3, r2]
		lcd_circ_buff_in++;
 8000ff2:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <__add_to_lcdBuff+0x60>)
 8000ff4:	881b      	ldrh	r3, [r3, #0]
 8000ff6:	3301      	adds	r3, #1
 8000ff8:	b29a      	uxth	r2, r3
 8000ffa:	4b0d      	ldr	r3, [pc, #52]	; (8001030 <__add_to_lcdBuff+0x60>)
 8000ffc:	801a      	strh	r2, [r3, #0]
		i++;
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	3301      	adds	r3, #1
 8001002:	73fb      	strb	r3, [r7, #15]
		if (lcd_circ_buff_in == LCD_CIRCBUFF_MAX){
 8001004:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <__add_to_lcdBuff+0x60>)
 8001006:	881b      	ldrh	r3, [r3, #0]
 8001008:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 800100c:	d102      	bne.n	8001014 <__add_to_lcdBuff+0x44>
			lcd_circ_buff_in = 0;
 800100e:	4b08      	ldr	r3, [pc, #32]	; (8001030 <__add_to_lcdBuff+0x60>)
 8001010:	2200      	movs	r2, #0
 8001012:	801a      	strh	r2, [r3, #0]
	while (i < sizeData){
 8001014:	7bfa      	ldrb	r2, [r7, #15]
 8001016:	78fb      	ldrb	r3, [r7, #3]
 8001018:	429a      	cmp	r2, r3
 800101a:	d3e2      	bcc.n	8000fe2 <__add_to_lcdBuff+0x12>
		}
	}
	flag_sendLcd = 1;
 800101c:	4b06      	ldr	r3, [pc, #24]	; (8001038 <__add_to_lcdBuff+0x68>)
 800101e:	2201      	movs	r2, #1
 8001020:	701a      	strb	r2, [r3, #0]
}
 8001022:	bf00      	nop
 8001024:	3714      	adds	r7, #20
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	2000036c 	.word	0x2000036c
 8001034:	200004a0 	.word	0x200004a0
 8001038:	20000068 	.word	0x20000068

0800103c <__lcd_sendBuff_IT>:


void __lcd_sendBuff_IT (void){
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
	extern uint8_t I2CtxComplete;

	uint16_t I2C_Tx_ptr;
	uint16_t I2C_Tx_length;

	if (I2CtxComplete != 0){ //si no termino la transmision anterior...
 8001042:	4b27      	ldr	r3, [pc, #156]	; (80010e0 <__lcd_sendBuff_IT+0xa4>)
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d046      	beq.n	80010d8 <__lcd_sendBuff_IT+0x9c>

		if (lcd_circ_buff_out == LCD_CIRCBUFF_MAX){
 800104a:	4b26      	ldr	r3, [pc, #152]	; (80010e4 <__lcd_sendBuff_IT+0xa8>)
 800104c:	881b      	ldrh	r3, [r3, #0]
 800104e:	f5b3 7f2a 	cmp.w	r3, #680	; 0x2a8
 8001052:	d102      	bne.n	800105a <__lcd_sendBuff_IT+0x1e>
			lcd_circ_buff_out = 0;
 8001054:	4b23      	ldr	r3, [pc, #140]	; (80010e4 <__lcd_sendBuff_IT+0xa8>)
 8001056:	2200      	movs	r2, #0
 8001058:	801a      	strh	r2, [r3, #0]
		}

		if (lcd_circ_buff_out == lcd_circ_buff_in){
 800105a:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <__lcd_sendBuff_IT+0xa8>)
 800105c:	881a      	ldrh	r2, [r3, #0]
 800105e:	4b22      	ldr	r3, [pc, #136]	; (80010e8 <__lcd_sendBuff_IT+0xac>)
 8001060:	881b      	ldrh	r3, [r3, #0]
 8001062:	429a      	cmp	r2, r3
 8001064:	d103      	bne.n	800106e <__lcd_sendBuff_IT+0x32>
			//no hay transmisión acá
			flag_sendLcd = 0;
 8001066:	4b21      	ldr	r3, [pc, #132]	; (80010ec <__lcd_sendBuff_IT+0xb0>)
 8001068:	2200      	movs	r2, #0
 800106a:	701a      	strb	r2, [r3, #0]
			return;
 800106c:	e034      	b.n	80010d8 <__lcd_sendBuff_IT+0x9c>
		}

		if (lcd_circ_buff_out > lcd_circ_buff_in){
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <__lcd_sendBuff_IT+0xa8>)
 8001070:	881a      	ldrh	r2, [r3, #0]
 8001072:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <__lcd_sendBuff_IT+0xac>)
 8001074:	881b      	ldrh	r3, [r3, #0]
 8001076:	429a      	cmp	r2, r3
 8001078:	d907      	bls.n	800108a <__lcd_sendBuff_IT+0x4e>
			lcd_tx_length = LCD_CIRCBUFF_MAX - lcd_circ_buff_out;//transmite solo hasta el final del buffer, para luego reacomodar los punteros.
 800107a:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <__lcd_sendBuff_IT+0xa8>)
 800107c:	881b      	ldrh	r3, [r3, #0]
 800107e:	f5c3 732a 	rsb	r3, r3, #680	; 0x2a8
 8001082:	b29a      	uxth	r2, r3
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <__lcd_sendBuff_IT+0xb4>)
 8001086:	801a      	strh	r2, [r3, #0]
 8001088:	e007      	b.n	800109a <__lcd_sendBuff_IT+0x5e>
		}else{
			lcd_tx_length = lcd_circ_buff_in - lcd_circ_buff_out;
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <__lcd_sendBuff_IT+0xac>)
 800108c:	881a      	ldrh	r2, [r3, #0]
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <__lcd_sendBuff_IT+0xa8>)
 8001090:	881b      	ldrh	r3, [r3, #0]
 8001092:	1ad3      	subs	r3, r2, r3
 8001094:	b29a      	uxth	r2, r3
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <__lcd_sendBuff_IT+0xb4>)
 8001098:	801a      	strh	r2, [r3, #0]
		}

		I2C_Tx_ptr = lcd_circ_buff_out;
 800109a:	4b12      	ldr	r3, [pc, #72]	; (80010e4 <__lcd_sendBuff_IT+0xa8>)
 800109c:	881b      	ldrh	r3, [r3, #0]
 800109e:	80fb      	strh	r3, [r7, #6]
		I2C_Tx_length = lcd_tx_length;
 80010a0:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <__lcd_sendBuff_IT+0xb4>)
 80010a2:	881b      	ldrh	r3, [r3, #0]
 80010a4:	80bb      	strh	r3, [r7, #4]
		lcd_circ_buff_out += lcd_tx_length;
 80010a6:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <__lcd_sendBuff_IT+0xa8>)
 80010a8:	881a      	ldrh	r2, [r3, #0]
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <__lcd_sendBuff_IT+0xb4>)
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	4413      	add	r3, r2
 80010b0:	b29a      	uxth	r2, r3
 80010b2:	4b0c      	ldr	r3, [pc, #48]	; (80010e4 <__lcd_sendBuff_IT+0xa8>)
 80010b4:	801a      	strh	r2, [r3, #0]
		lcd_tx_length = 0;
 80010b6:	4b0e      	ldr	r3, [pc, #56]	; (80010f0 <__lcd_sendBuff_IT+0xb4>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	801a      	strh	r2, [r3, #0]

		I2CtxComplete = 0;
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <__lcd_sendBuff_IT+0xa4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
		HAL_I2C_Master_Transmit_IT(i2c_handler, SLAVE_ADDRESS_LCD,(uint8_t *) &lcd_circ_buffer[I2C_Tx_ptr],I2C_Tx_length);
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <__lcd_sendBuff_IT+0xb8>)
 80010c4:	6818      	ldr	r0, [r3, #0]
 80010c6:	4b0c      	ldr	r3, [pc, #48]	; (80010f8 <__lcd_sendBuff_IT+0xbc>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	b299      	uxth	r1, r3
 80010cc:	88fb      	ldrh	r3, [r7, #6]
 80010ce:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <__lcd_sendBuff_IT+0xc0>)
 80010d0:	441a      	add	r2, r3
 80010d2:	88bb      	ldrh	r3, [r7, #4]
 80010d4:	f002 fb94 	bl	8003800 <HAL_I2C_Master_Transmit_IT>
	}

}
 80010d8:	3708      	adds	r7, #8
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	20000069 	.word	0x20000069
 80010e4:	2000036e 	.word	0x2000036e
 80010e8:	2000036c 	.word	0x2000036c
 80010ec:	20000068 	.word	0x20000068
 80010f0:	20000370 	.word	0x20000370
 80010f4:	2000074c 	.word	0x2000074c
 80010f8:	20000748 	.word	0x20000748
 80010fc:	200004a0 	.word	0x200004a0

08001100 <lcd_upDate_IT>:


void lcd_upDate_IT(void){
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
	if (flag_sendLcd) __lcd_sendBuff_IT();
 8001104:	4b03      	ldr	r3, [pc, #12]	; (8001114 <lcd_upDate_IT+0x14>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <lcd_upDate_IT+0x10>
 800110c:	f7ff ff96 	bl	800103c <__lcd_sendBuff_IT>
}
 8001110:	bf00      	nop
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000068 	.word	0x20000068

08001118 <_lcd_ISR>:


/* Insert the next function in your ISR*/
void _lcd_ISR (void){
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
	I2CtxComplete=1;
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <_lcd_ISR+0x14>)
 800111e:	2201      	movs	r2, #1
 8001120:	701a      	strb	r2, [r3, #0]
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	20000069 	.word	0x20000069

08001130 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001134:	f001 fa30 	bl	8002598 <HAL_Init>

  /* USER CODE BEGIN Init */
  firstDoTunning = 36;
 8001138:	4b7f      	ldr	r3, [pc, #508]	; (8001338 <main+0x208>)
 800113a:	2224      	movs	r2, #36	; 0x24
 800113c:	701a      	strb	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800113e:	f000 f917 	bl	8001370 <SystemClock_Config>
   */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001142:	f7ff fcb9 	bl	8000ab8 <MX_GPIO_Init>
  MX_DAC_Init();
 8001146:	f7ff fc3f 	bl	80009c8 <MX_DAC_Init>
  MX_I2C1_Init();
 800114a:	f7ff fd85 	bl	8000c58 <MX_I2C1_Init>
  MX_USB_DEVICE_Init();
 800114e:	f009 ffb3 	bl	800b0b8 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001152:	f001 f849 	bl	80021e8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001156:	f001 f893 	bl	8002280 <MX_TIM3_Init>
  MX_ADC1_Init();
 800115a:	f7ff fb83 	bl	8000864 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800115e:	f001 f91f 	bl	80023a0 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001162:	f001 f947 	bl	80023f4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2); // 1 ms tick timer.
 8001166:	4875      	ldr	r0, [pc, #468]	; (800133c <main+0x20c>)
 8001168:	f006 f80f 	bl	800718a <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim3); // 44100Hz timer.
 800116c:	4874      	ldr	r0, [pc, #464]	; (8001340 <main+0x210>)
 800116e:	f006 f80c 	bl	800718a <HAL_TIM_Base_Start_IT>

  osc_dac_init(&hdac, DAC_CHANNEL_1);
 8001172:	2100      	movs	r1, #0
 8001174:	4873      	ldr	r0, [pc, #460]	; (8001344 <main+0x214>)
 8001176:	f000 fe69 	bl	8001e4c <osc_dac_init>
  osc_setRatios(100, 100, 100);
 800117a:	2264      	movs	r2, #100	; 0x64
 800117c:	2164      	movs	r1, #100	; 0x64
 800117e:	2064      	movs	r0, #100	; 0x64
 8001180:	f000 ff32 	bl	8001fe8 <osc_setRatios>

  lcd_init(&hi2c1, 0x3f);
 8001184:	213f      	movs	r1, #63	; 0x3f
 8001186:	4870      	ldr	r0, [pc, #448]	; (8001348 <main+0x218>)
 8001188:	f7ff fec2 	bl	8000f10 <lcd_init>
  turnOnScreen();
 800118c:	f7ff f9e2 	bl	8000554 <turnOnScreen>
  mainScreen();
 8001190:	f7ff fa42 	bl	8000618 <mainScreen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	switch (screenNum){
 8001194:	4b6d      	ldr	r3, [pc, #436]	; (800134c <main+0x21c>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	3b03      	subs	r3, #3
 800119a:	2b08      	cmp	r3, #8
 800119c:	d855      	bhi.n	800124a <main+0x11a>
 800119e:	a201      	add	r2, pc, #4	; (adr r2, 80011a4 <main+0x74>)
 80011a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a4:	080011c9 	.word	0x080011c9
 80011a8:	080011d7 	.word	0x080011d7
 80011ac:	080011e5 	.word	0x080011e5
 80011b0:	0800124b 	.word	0x0800124b
 80011b4:	080011f3 	.word	0x080011f3
 80011b8:	0800120f 	.word	0x0800120f
 80011bc:	08001201 	.word	0x08001201
 80011c0:	08001229 	.word	0x08001229
 80011c4:	08001237 	.word	0x08001237
	  		case MAIN_SCREEN:
	  			mainScreen();
 80011c8:	f7ff fa26 	bl	8000618 <mainScreen>
	  			last_screenNum = screenNum;
 80011cc:	4b5f      	ldr	r3, [pc, #380]	; (800134c <main+0x21c>)
 80011ce:	781a      	ldrb	r2, [r3, #0]
 80011d0:	4b5f      	ldr	r3, [pc, #380]	; (8001350 <main+0x220>)
 80011d2:	701a      	strb	r2, [r3, #0]
	  		break;
 80011d4:	e03a      	b.n	800124c <main+0x11c>
	  		case CHORD_SCREEN:
	  			chordScreen();
 80011d6:	f7ff f9d9 	bl	800058c <chordScreen>
	  			last_screenNum = screenNum;
 80011da:	4b5c      	ldr	r3, [pc, #368]	; (800134c <main+0x21c>)
 80011dc:	781a      	ldrb	r2, [r3, #0]
 80011de:	4b5c      	ldr	r3, [pc, #368]	; (8001350 <main+0x220>)
 80011e0:	701a      	strb	r2, [r3, #0]
	  		break;
 80011e2:	e033      	b.n	800124c <main+0x11c>
	  		case TUNNE_SCREEN:
	  			tunneScreen();
 80011e4:	f7ff fa8c 	bl	8000700 <tunneScreen>
	  			last_screenNum = screenNum;
 80011e8:	4b58      	ldr	r3, [pc, #352]	; (800134c <main+0x21c>)
 80011ea:	781a      	ldrb	r2, [r3, #0]
 80011ec:	4b58      	ldr	r3, [pc, #352]	; (8001350 <main+0x220>)
 80011ee:	701a      	strb	r2, [r3, #0]
	  		break;
 80011f0:	e02c      	b.n	800124c <main+0x11c>
	  		case RECUEST_FOOTKEY_SCREEN:
	  			recuest_footkey();
 80011f2:	f7ff fabd 	bl	8000770 <recuest_footkey>
	  			last_screenNum = screenNum; //this variable must store the CHORD_SCREEN value, to use it as return point.
 80011f6:	4b55      	ldr	r3, [pc, #340]	; (800134c <main+0x21c>)
 80011f8:	781a      	ldrb	r2, [r3, #0]
 80011fa:	4b55      	ldr	r3, [pc, #340]	; (8001350 <main+0x220>)
 80011fc:	701a      	strb	r2, [r3, #0]
	  		break;
 80011fe:	e025      	b.n	800124c <main+0x11c>
	  		case POPUP_OCTAVE:
	  			on_off_octave();
 8001200:	f7ff fa9a 	bl	8000738 <on_off_octave>
	  			popup_time = 2000;
 8001204:	4b53      	ldr	r3, [pc, #332]	; (8001354 <main+0x224>)
 8001206:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800120a:	601a      	str	r2, [r3, #0]
	  		break;
 800120c:	e01e      	b.n	800124c <main+0x11c>
	  		case POPUP_SAVED_CHORD:
	  			pop_up_savedChord(lastKey_pos);
 800120e:	4b52      	ldr	r3, [pc, #328]	; (8001358 <main+0x228>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f7ff fac4 	bl	80007a0 <pop_up_savedChord>
	  			last_screenNum = CHORD_SCREEN;
 8001218:	4b4d      	ldr	r3, [pc, #308]	; (8001350 <main+0x220>)
 800121a:	2204      	movs	r2, #4
 800121c:	701a      	strb	r2, [r3, #0]
	  			popup_time = 2000;
 800121e:	4b4d      	ldr	r3, [pc, #308]	; (8001354 <main+0x224>)
 8001220:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001224:	601a      	str	r2, [r3, #0]
	  		break;
 8001226:	e011      	b.n	800124c <main+0x11c>
	  		case POPUP_SUSTAIN:
	  			pop_up_sustain();
 8001228:	f7ff fae0 	bl	80007ec <pop_up_sustain>
	  			popup_time = 2000;
 800122c:	4b49      	ldr	r3, [pc, #292]	; (8001354 <main+0x224>)
 800122e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001232:	601a      	str	r2, [r3, #0]
	  		break;
 8001234:	e00a      	b.n	800124c <main+0x11c>
	  		case POPUP_CANCEL:
	  			pop_up_cancel();
 8001236:	f7ff fb05 	bl	8000844 <pop_up_cancel>
	  			popup_time = 2000;
 800123a:	4b46      	ldr	r3, [pc, #280]	; (8001354 <main+0x224>)
 800123c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001240:	601a      	str	r2, [r3, #0]
	  			last_screenNum = CHORD_SCREEN;
 8001242:	4b43      	ldr	r3, [pc, #268]	; (8001350 <main+0x220>)
 8001244:	2204      	movs	r2, #4
 8001246:	701a      	strb	r2, [r3, #0]
	  		break;
 8001248:	e000      	b.n	800124c <main+0x11c>
	  		default:
	  		break;
 800124a:	bf00      	nop
	  	}
	  	screenNum = NO_SCREEN;
 800124c:	4b3f      	ldr	r3, [pc, #252]	; (800134c <main+0x21c>)
 800124e:	2200      	movs	r2, #0
 8001250:	701a      	strb	r2, [r3, #0]

	  	if (popup_timeUp){
 8001252:	4b42      	ldr	r3, [pc, #264]	; (800135c <main+0x22c>)
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	b2db      	uxtb	r3, r3
 8001258:	2b00      	cmp	r3, #0
 800125a:	d00a      	beq.n	8001272 <main+0x142>
	  		if (screenNum == NO_SCREEN) screenNum = last_screenNum;
 800125c:	4b3b      	ldr	r3, [pc, #236]	; (800134c <main+0x21c>)
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d103      	bne.n	800126c <main+0x13c>
 8001264:	4b3a      	ldr	r3, [pc, #232]	; (8001350 <main+0x220>)
 8001266:	781a      	ldrb	r2, [r3, #0]
 8001268:	4b38      	ldr	r3, [pc, #224]	; (800134c <main+0x21c>)
 800126a:	701a      	strb	r2, [r3, #0]
	  		popup_timeUp = 0;
 800126c:	4b3b      	ldr	r3, [pc, #236]	; (800135c <main+0x22c>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
	  	}


	  	inputCursor();
 8001272:	f000 f8e7 	bl	8001444 <inputCursor>
	  	inputSustains();
 8001276:	f000 f939 	bl	80014ec <inputSustains>
	  	inputChord();
 800127a:	f000 f9eb 	bl	8001654 <inputChord>
	  	inputOctave();
 800127e:	f000 fa29 	bl	80016d4 <inputOctave>
	  	inputTunne();
 8001282:	f000 fa87 	bl	8001794 <inputTunne>
	  	inputPresets();
 8001286:	f000 fac5 	bl	8001814 <inputPresets>
	  		default:
	  		break;
	  	}
	  	*/

	    switch (menu){ //manage the recuested menu function.
 800128a:	4b35      	ldr	r3, [pc, #212]	; (8001360 <main+0x230>)
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	3b03      	subs	r3, #3
 8001290:	2b04      	cmp	r3, #4
 8001292:	d81c      	bhi.n	80012ce <main+0x19e>
 8001294:	a201      	add	r2, pc, #4	; (adr r2, 800129c <main+0x16c>)
 8001296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800129a:	bf00      	nop
 800129c:	080012b1 	.word	0x080012b1
 80012a0:	080012b7 	.word	0x080012b7
 80012a4:	080012c1 	.word	0x080012c1
 80012a8:	080012cf 	.word	0x080012cf
 80012ac:	080012cb 	.word	0x080012cb
	    	case MAIN_SCREEN:
	    		inputNotes();
 80012b0:	f000 fb02 	bl	80018b8 <inputNotes>
	    	break;
 80012b4:	e00c      	b.n	80012d0 <main+0x1a0>
	  		case CHORD_SCREEN:
	  			chordSelect();
 80012b6:	f000 fc4f 	bl	8001b58 <chordSelect>
	  			inputNotes();
 80012ba:	f000 fafd 	bl	80018b8 <inputNotes>
	  		break;
 80012be:	e007      	b.n	80012d0 <main+0x1a0>
	  		case TUNNE_SCREEN:
	  			tunneSelect();
 80012c0:	f000 fcfc 	bl	8001cbc <tunneSelect>
	  			inputNotes();
 80012c4:	f000 faf8 	bl	80018b8 <inputNotes>
	  		break;
 80012c8:	e002      	b.n	80012d0 <main+0x1a0>
	  		case RECUEST_FOOTKEY_SCREEN:
	  			inputSaveChord(); // @suppress("No break at end of case")
 80012ca:	f000 fbc7 	bl	8001a5c <inputSaveChord>
	  		default:
	  		break;
 80012ce:	bf00      	nop

	    }

	    MIDI_SendCheck();
 80012d0:	f00a f944 	bl	800b55c <MIDI_SendCheck>

		if (flag_dac != 0){
 80012d4:	4b23      	ldr	r3, [pc, #140]	; (8001364 <main+0x234>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d004      	beq.n	80012e6 <main+0x1b6>
		  osc_dac_update();
 80012dc:	f000 fdd2 	bl	8001e84 <osc_dac_update>
		  flag_dac = 0;
 80012e0:	4b20      	ldr	r3, [pc, #128]	; (8001364 <main+0x234>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	701a      	strb	r2, [r3, #0]
		}

	    if (flag_tick != 0){
 80012e6:	4b20      	ldr	r3, [pc, #128]	; (8001368 <main+0x238>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	f43f af52 	beq.w	8001194 <main+0x64>

	    	if (lcd_refresh_time != 0){
 80012f0:	4b1e      	ldr	r3, [pc, #120]	; (800136c <main+0x23c>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d006      	beq.n	8001306 <main+0x1d6>
	    		lcd_refresh_time--;
 80012f8:	4b1c      	ldr	r3, [pc, #112]	; (800136c <main+0x23c>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	3b01      	subs	r3, #1
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	4b1a      	ldr	r3, [pc, #104]	; (800136c <main+0x23c>)
 8001302:	701a      	strb	r2, [r3, #0]
 8001304:	e004      	b.n	8001310 <main+0x1e0>
	    	}else{
	    		lcd_upDate_IT();
 8001306:	f7ff fefb 	bl	8001100 <lcd_upDate_IT>
	    		lcd_refresh_time = 25;
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <main+0x23c>)
 800130c:	2219      	movs	r2, #25
 800130e:	701a      	strb	r2, [r3, #0]
	    	}//end if lcd_refresh_time

	    	if (popup_time != 0){
 8001310:	4b10      	ldr	r3, [pc, #64]	; (8001354 <main+0x224>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	2b00      	cmp	r3, #0
 8001316:	d00b      	beq.n	8001330 <main+0x200>
				popup_time--;
 8001318:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <main+0x224>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	3b01      	subs	r3, #1
 800131e:	4a0d      	ldr	r2, [pc, #52]	; (8001354 <main+0x224>)
 8001320:	6013      	str	r3, [r2, #0]
				if (popup_time == 1) popup_timeUp = 1;
 8001322:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <main+0x224>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b01      	cmp	r3, #1
 8001328:	d102      	bne.n	8001330 <main+0x200>
 800132a:	4b0c      	ldr	r3, [pc, #48]	; (800135c <main+0x22c>)
 800132c:	2201      	movs	r2, #1
 800132e:	701a      	strb	r2, [r3, #0]
			}//end if popup_time

	    	flag_tick = 0;
 8001330:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <main+0x238>)
 8001332:	2200      	movs	r2, #0
 8001334:	701a      	strb	r2, [r3, #0]
	  	switch (screenNum){
 8001336:	e72d      	b.n	8001194 <main+0x64>
 8001338:	200003e0 	.word	0x200003e0
 800133c:	200007e0 	.word	0x200007e0
 8001340:	200007a0 	.word	0x200007a0
 8001344:	20000438 	.word	0x20000438
 8001348:	2000044c 	.word	0x2000044c
 800134c:	200003af 	.word	0x200003af
 8001350:	200000c9 	.word	0x200000c9
 8001354:	200003b0 	.word	0x200003b0
 8001358:	2000076f 	.word	0x2000076f
 800135c:	200003b4 	.word	0x200003b4
 8001360:	200000c8 	.word	0x200000c8
 8001364:	200003b7 	.word	0x200003b7
 8001368:	200003b6 	.word	0x200003b6
 800136c:	200000ca 	.word	0x200000ca

08001370 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b094      	sub	sp, #80	; 0x50
 8001374:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001376:	f107 0320 	add.w	r3, r7, #32
 800137a:	2230      	movs	r2, #48	; 0x30
 800137c:	2100      	movs	r1, #0
 800137e:	4618      	mov	r0, r3
 8001380:	f00a fc38 	bl	800bbf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001384:	f107 030c 	add.w	r3, r7, #12
 8001388:	2200      	movs	r2, #0
 800138a:	601a      	str	r2, [r3, #0]
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	609a      	str	r2, [r3, #8]
 8001390:	60da      	str	r2, [r3, #12]
 8001392:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	4b28      	ldr	r3, [pc, #160]	; (800143c <SystemClock_Config+0xcc>)
 800139a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139c:	4a27      	ldr	r2, [pc, #156]	; (800143c <SystemClock_Config+0xcc>)
 800139e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013a2:	6413      	str	r3, [r2, #64]	; 0x40
 80013a4:	4b25      	ldr	r3, [pc, #148]	; (800143c <SystemClock_Config+0xcc>)
 80013a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ac:	60bb      	str	r3, [r7, #8]
 80013ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013b0:	2300      	movs	r3, #0
 80013b2:	607b      	str	r3, [r7, #4]
 80013b4:	4b22      	ldr	r3, [pc, #136]	; (8001440 <SystemClock_Config+0xd0>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a21      	ldr	r2, [pc, #132]	; (8001440 <SystemClock_Config+0xd0>)
 80013ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013be:	6013      	str	r3, [r2, #0]
 80013c0:	4b1f      	ldr	r3, [pc, #124]	; (8001440 <SystemClock_Config+0xd0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013cc:	2301      	movs	r3, #1
 80013ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80013d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013d6:	2302      	movs	r3, #2
 80013d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013e0:	2304      	movs	r3, #4
 80013e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80013e4:	23a8      	movs	r3, #168	; 0xa8
 80013e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013e8:	2302      	movs	r3, #2
 80013ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013ec:	2307      	movs	r3, #7
 80013ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f0:	f107 0320 	add.w	r3, r7, #32
 80013f4:	4618      	mov	r0, r3
 80013f6:	f005 fa3b 	bl	8006870 <HAL_RCC_OscConfig>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001400:	f000 fd1c 	bl	8001e3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001404:	230f      	movs	r3, #15
 8001406:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001408:	2302      	movs	r3, #2
 800140a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800140c:	2300      	movs	r3, #0
 800140e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001410:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001414:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001416:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	2105      	movs	r1, #5
 8001422:	4618      	mov	r0, r3
 8001424:	f005 fc94 	bl	8006d50 <HAL_RCC_ClockConfig>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800142e:	f000 fd05 	bl	8001e3c <Error_Handler>
  }
}
 8001432:	bf00      	nop
 8001434:	3750      	adds	r7, #80	; 0x50
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40023800 	.word	0x40023800
 8001440:	40007000 	.word	0x40007000

08001444 <inputCursor>:

/* USER CODE BEGIN 4 */


void inputCursor(void){
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0


	for (int i = 0; i < 4; i++){     //from the lowest CURSOR value, to the highest one.                                    // 4 presets en total.
 800144a:	2300      	movs	r3, #0
 800144c:	607b      	str	r3, [r7, #4]
 800144e:	e03b      	b.n	80014c8 <inputCursor+0x84>
	buttonFlag = digitalRead(i + CURSOR_UP);

    //buttonState[1] = buttonFlag << (i + _UP);    //bit field method
	*/

	buttonState[i + _UP] = HAL_GPIO_ReadPin(cursorPort_list[i], cursorPin_list[i]);//digitalRead(i + CURSOR_UP);
 8001450:	4a21      	ldr	r2, [pc, #132]	; (80014d8 <inputCursor+0x94>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001458:	4a20      	ldr	r2, [pc, #128]	; (80014dc <inputCursor+0x98>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	f103 0413 	add.w	r4, r3, #19
 8001466:	4611      	mov	r1, r2
 8001468:	f001 ff62 	bl	8003330 <HAL_GPIO_ReadPin>
 800146c:	4603      	mov	r3, r0
 800146e:	461a      	mov	r2, r3
 8001470:	4b1b      	ldr	r3, [pc, #108]	; (80014e0 <inputCursor+0x9c>)
 8001472:	551a      	strb	r2, [r3, r4]

    if(!buttonState[i + _UP] && lastState[i + _UP]){                                // If we read 0, and the last time we read 1, means button was just pressed
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3313      	adds	r3, #19
 8001478:	4a19      	ldr	r2, [pc, #100]	; (80014e0 <inputCursor+0x9c>)
 800147a:	5cd3      	ldrb	r3, [r2, r3]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d114      	bne.n	80014aa <inputCursor+0x66>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3313      	adds	r3, #19
 8001484:	4a17      	ldr	r2, [pc, #92]	; (80014e4 <inputCursor+0xa0>)
 8001486:	5cd3      	ldrb	r3, [r2, r3]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d00e      	beq.n	80014aa <inputCursor+0x66>

		d_pad = i + _UP;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	3313      	adds	r3, #19
 8001490:	461a      	mov	r2, r3
 8001492:	4b15      	ldr	r3, [pc, #84]	; (80014e8 <inputCursor+0xa4>)
 8001494:	601a      	str	r2, [r3, #0]
        lastState[i + _UP] = buttonState[i + _UP];
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f103 0213 	add.w	r2, r3, #19
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3313      	adds	r3, #19
 80014a0:	490f      	ldr	r1, [pc, #60]	; (80014e0 <inputCursor+0x9c>)
 80014a2:	5c89      	ldrb	r1, [r1, r2]
 80014a4:	4a0f      	ldr	r2, [pc, #60]	; (80014e4 <inputCursor+0xa0>)
 80014a6:	54d1      	strb	r1, [r2, r3]
		break;
 80014a8:	e011      	b.n	80014ce <inputCursor+0x8a>
    }else{
		d_pad = 0;
 80014aa:	4b0f      	ldr	r3, [pc, #60]	; (80014e8 <inputCursor+0xa4>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
	}

    lastState[i + _UP] = buttonState[i + _UP];                                        // Update last button state.
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f103 0213 	add.w	r2, r3, #19
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3313      	adds	r3, #19
 80014ba:	4909      	ldr	r1, [pc, #36]	; (80014e0 <inputCursor+0x9c>)
 80014bc:	5c89      	ldrb	r1, [r1, r2]
 80014be:	4a09      	ldr	r2, [pc, #36]	; (80014e4 <inputCursor+0xa0>)
 80014c0:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 4; i++){     //from the lowest CURSOR value, to the highest one.                                    // 4 presets en total.
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3301      	adds	r3, #1
 80014c6:	607b      	str	r3, [r7, #4]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b03      	cmp	r3, #3
 80014cc:	ddc0      	ble.n	8001450 <inputCursor+0xc>
  }
}
 80014ce:	bf00      	nop
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd90      	pop	{r4, r7, pc}
 80014d6:	bf00      	nop
 80014d8:	2000006c 	.word	0x2000006c
 80014dc:	0800bfc8 	.word	0x0800bfc8
 80014e0:	20000750 	.word	0x20000750
 80014e4:	20000774 	.word	0x20000774
 80014e8:	20000770 	.word	0x20000770

080014ec <inputSustains>:


void inputSustains (void){
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0

	buttonState[_SUST_PROP] = HAL_GPIO_ReadPin(SUST_PROP_GPIO_Port, SUST_PROP_Pin);
 80014f2:	2180      	movs	r1, #128	; 0x80
 80014f4:	484e      	ldr	r0, [pc, #312]	; (8001630 <inputSustains+0x144>)
 80014f6:	f001 ff1b 	bl	8003330 <HAL_GPIO_ReadPin>
 80014fa:	4603      	mov	r3, r0
 80014fc:	461a      	mov	r2, r3
 80014fe:	4b4d      	ldr	r3, [pc, #308]	; (8001634 <inputSustains+0x148>)
 8001500:	741a      	strb	r2, [r3, #16]

	if(!buttonState[_SUST_PROP] && lastState[_SUST_PROP]){
 8001502:	4b4c      	ldr	r3, [pc, #304]	; (8001634 <inputSustains+0x148>)
 8001504:	7c1b      	ldrb	r3, [r3, #16]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d13f      	bne.n	800158a <inputSustains+0x9e>
 800150a:	4b4b      	ldr	r3, [pc, #300]	; (8001638 <inputSustains+0x14c>)
 800150c:	7c1b      	ldrb	r3, [r3, #16]
 800150e:	2b00      	cmp	r3, #0
 8001510:	d03b      	beq.n	800158a <inputSustains+0x9e>

		for (int j = 0; j <= 12; j++){
 8001512:	2300      	movs	r3, #0
 8001514:	607b      	str	r3, [r7, #4]
 8001516:	e00b      	b.n	8001530 <inputSustains+0x44>
			sendChord(lastSendNote[j], 0, 1); // silents all notes
 8001518:	4a48      	ldr	r2, [pc, #288]	; (800163c <inputSustains+0x150>)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001520:	2201      	movs	r2, #1
 8001522:	2100      	movs	r1, #0
 8001524:	4618      	mov	r0, r3
 8001526:	f000 fc07 	bl	8001d38 <sendChord>
		for (int j = 0; j <= 12; j++){
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3301      	adds	r3, #1
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b0c      	cmp	r3, #12
 8001534:	ddf0      	ble.n	8001518 <inputSustains+0x2c>
		}

		switch (sustainMode){
 8001536:	4b42      	ldr	r3, [pc, #264]	; (8001640 <inputSustains+0x154>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d01b      	beq.n	8001576 <inputSustains+0x8a>
 800153e:	2b02      	cmp	r3, #2
 8001540:	d002      	beq.n	8001548 <inputSustains+0x5c>
 8001542:	2b00      	cmp	r3, #0
 8001544:	d010      	beq.n	8001568 <inputSustains+0x7c>
 8001546:	e01d      	b.n	8001584 <inputSustains+0x98>
			case 2:
				//event = {0x0B, 0xB0 | MIDI_CHANNEL, 64, 0};
				//MidiUSB.sendMIDI(event);
				midi_msg[0] = 0x0B; //0x0B == type event (control change)
 8001548:	4b3e      	ldr	r3, [pc, #248]	; (8001644 <inputSustains+0x158>)
 800154a:	220b      	movs	r2, #11
 800154c:	701a      	strb	r2, [r3, #0]
				midi_msg[1] = 0xB0 | 1;
 800154e:	4b3d      	ldr	r3, [pc, #244]	; (8001644 <inputSustains+0x158>)
 8001550:	22b1      	movs	r2, #177	; 0xb1
 8001552:	705a      	strb	r2, [r3, #1]
				midi_msg[2] = 64;	// 64 == sustain.
 8001554:	4b3b      	ldr	r3, [pc, #236]	; (8001644 <inputSustains+0x158>)
 8001556:	2240      	movs	r2, #64	; 0x40
 8001558:	709a      	strb	r2, [r3, #2]
				midi_msg[3] = 0;
 800155a:	4b3a      	ldr	r3, [pc, #232]	; (8001644 <inputSustains+0x158>)
 800155c:	2200      	movs	r2, #0
 800155e:	70da      	strb	r2, [r3, #3]
				MIDI_SendBuffer(midi_msg, 4); // @suppress("No break at end of case")
 8001560:	2104      	movs	r1, #4
 8001562:	4838      	ldr	r0, [pc, #224]	; (8001644 <inputSustains+0x158>)
 8001564:	f009 ffc4 	bl	800b4f0 <MIDI_SendBuffer>
			case 0:
				lastSustainNote = 0;
 8001568:	4b37      	ldr	r3, [pc, #220]	; (8001648 <inputSustains+0x15c>)
 800156a:	2200      	movs	r2, #0
 800156c:	601a      	str	r2, [r3, #0]
				sustainMode = 1; //prop
 800156e:	4b34      	ldr	r3, [pc, #208]	; (8001640 <inputSustains+0x154>)
 8001570:	2201      	movs	r2, #1
 8001572:	701a      	strb	r2, [r3, #0]
			break;
 8001574:	e006      	b.n	8001584 <inputSustains+0x98>

			case 1:
				sustainFlag = 1;
 8001576:	4b35      	ldr	r3, [pc, #212]	; (800164c <inputSustains+0x160>)
 8001578:	2201      	movs	r2, #1
 800157a:	701a      	strb	r2, [r3, #0]
				sustainMode = 0;
 800157c:	4b30      	ldr	r3, [pc, #192]	; (8001640 <inputSustains+0x154>)
 800157e:	2200      	movs	r2, #0
 8001580:	701a      	strb	r2, [r3, #0]
			break;
 8001582:	bf00      	nop
		} //end switch

		screenNum = POPUP_SUSTAIN;
 8001584:	4b32      	ldr	r3, [pc, #200]	; (8001650 <inputSustains+0x164>)
 8001586:	220a      	movs	r2, #10
 8001588:	701a      	strb	r2, [r3, #0]
	}
	lastState[_SUST_PROP] = buttonState[_SUST_PROP];
 800158a:	4b2a      	ldr	r3, [pc, #168]	; (8001634 <inputSustains+0x148>)
 800158c:	7c1a      	ldrb	r2, [r3, #16]
 800158e:	4b2a      	ldr	r3, [pc, #168]	; (8001638 <inputSustains+0x14c>)
 8001590:	741a      	strb	r2, [r3, #16]


	buttonState[_SUST_MIDI] = HAL_GPIO_ReadPin(SUST_MIDI_GPIO_Port, SUST_MIDI_Pin);
 8001592:	2120      	movs	r1, #32
 8001594:	4826      	ldr	r0, [pc, #152]	; (8001630 <inputSustains+0x144>)
 8001596:	f001 fecb 	bl	8003330 <HAL_GPIO_ReadPin>
 800159a:	4603      	mov	r3, r0
 800159c:	461a      	mov	r2, r3
 800159e:	4b25      	ldr	r3, [pc, #148]	; (8001634 <inputSustains+0x148>)
 80015a0:	745a      	strb	r2, [r3, #17]

	if(!buttonState[_SUST_MIDI] && lastState[_SUST_MIDI]){
 80015a2:	4b24      	ldr	r3, [pc, #144]	; (8001634 <inputSustains+0x148>)
 80015a4:	7c5b      	ldrb	r3, [r3, #17]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d13a      	bne.n	8001620 <inputSustains+0x134>
 80015aa:	4b23      	ldr	r3, [pc, #140]	; (8001638 <inputSustains+0x14c>)
 80015ac:	7c5b      	ldrb	r3, [r3, #17]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d036      	beq.n	8001620 <inputSustains+0x134>

		switch (sustainMode){
 80015b2:	4b23      	ldr	r3, [pc, #140]	; (8001640 <inputSustains+0x154>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	db2f      	blt.n	800161a <inputSustains+0x12e>
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	dd02      	ble.n	80015c4 <inputSustains+0xd8>
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d017      	beq.n	80015f2 <inputSustains+0x106>
 80015c2:	e02a      	b.n	800161a <inputSustains+0x12e>
			case 0:
			case 1:
				sustainFlag = 1;	// needed to normal notes functioning.
 80015c4:	4b21      	ldr	r3, [pc, #132]	; (800164c <inputSustains+0x160>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	701a      	strb	r2, [r3, #0]
				//event = {0x0B, 0xB0 | MIDI_CHANNEL, 64, 127}; //64 == sustain.
				//MidiUSB.sendMIDI(event);
				midi_msg[0] = 0x0B;		//0x0B == type event (control change),
 80015ca:	4b1e      	ldr	r3, [pc, #120]	; (8001644 <inputSustains+0x158>)
 80015cc:	220b      	movs	r2, #11
 80015ce:	701a      	strb	r2, [r3, #0]
				midi_msg[1] = 0xB0 | 1;
 80015d0:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <inputSustains+0x158>)
 80015d2:	22b1      	movs	r2, #177	; 0xb1
 80015d4:	705a      	strb	r2, [r3, #1]
				midi_msg[2] = 64;	//64 == sustain.
 80015d6:	4b1b      	ldr	r3, [pc, #108]	; (8001644 <inputSustains+0x158>)
 80015d8:	2240      	movs	r2, #64	; 0x40
 80015da:	709a      	strb	r2, [r3, #2]
				midi_msg[3] = 127;
 80015dc:	4b19      	ldr	r3, [pc, #100]	; (8001644 <inputSustains+0x158>)
 80015de:	227f      	movs	r2, #127	; 0x7f
 80015e0:	70da      	strb	r2, [r3, #3]
				MIDI_SendBuffer(midi_msg, 4);
 80015e2:	2104      	movs	r1, #4
 80015e4:	4817      	ldr	r0, [pc, #92]	; (8001644 <inputSustains+0x158>)
 80015e6:	f009 ff83 	bl	800b4f0 <MIDI_SendBuffer>
				sustainMode = 2;
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <inputSustains+0x154>)
 80015ec:	2202      	movs	r2, #2
 80015ee:	701a      	strb	r2, [r3, #0]
			break;
 80015f0:	e013      	b.n	800161a <inputSustains+0x12e>
			case 2:
				//event = {0x0B, 0xB0 | MIDI_CHANNEL, 64, 0};
				//MidiUSB.sendMIDI(event);
				midi_msg[0] = 0x0B;	//0x0B == type event (control change)
 80015f2:	4b14      	ldr	r3, [pc, #80]	; (8001644 <inputSustains+0x158>)
 80015f4:	220b      	movs	r2, #11
 80015f6:	701a      	strb	r2, [r3, #0]
				midi_msg[1] = 0xB0 | 1;
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <inputSustains+0x158>)
 80015fa:	22b1      	movs	r2, #177	; 0xb1
 80015fc:	705a      	strb	r2, [r3, #1]
				midi_msg[2] = 64;	//64 == sustain.
 80015fe:	4b11      	ldr	r3, [pc, #68]	; (8001644 <inputSustains+0x158>)
 8001600:	2240      	movs	r2, #64	; 0x40
 8001602:	709a      	strb	r2, [r3, #2]
				midi_msg[3] = 0;
 8001604:	4b0f      	ldr	r3, [pc, #60]	; (8001644 <inputSustains+0x158>)
 8001606:	2200      	movs	r2, #0
 8001608:	70da      	strb	r2, [r3, #3]
				MIDI_SendBuffer(midi_msg, 4);
 800160a:	2104      	movs	r1, #4
 800160c:	480d      	ldr	r0, [pc, #52]	; (8001644 <inputSustains+0x158>)
 800160e:	f009 ff6f 	bl	800b4f0 <MIDI_SendBuffer>
				sustainMode = 0;
 8001612:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <inputSustains+0x154>)
 8001614:	2200      	movs	r2, #0
 8001616:	701a      	strb	r2, [r3, #0]
			break;
 8001618:	bf00      	nop
		} //end switch

		screenNum = POPUP_SUSTAIN;
 800161a:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <inputSustains+0x164>)
 800161c:	220a      	movs	r2, #10
 800161e:	701a      	strb	r2, [r3, #0]
	}
	lastState[_SUST_MIDI] = buttonState[_SUST_MIDI];
 8001620:	4b04      	ldr	r3, [pc, #16]	; (8001634 <inputSustains+0x148>)
 8001622:	7c5a      	ldrb	r2, [r3, #17]
 8001624:	4b04      	ldr	r3, [pc, #16]	; (8001638 <inputSustains+0x14c>)
 8001626:	745a      	strb	r2, [r3, #17]
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40020c00 	.word	0x40020c00
 8001634:	20000750 	.word	0x20000750
 8001638:	20000774 	.word	0x20000774
 800163c:	20000374 	.word	0x20000374
 8001640:	200003ac 	.word	0x200003ac
 8001644:	20000794 	.word	0x20000794
 8001648:	200003a8 	.word	0x200003a8
 800164c:	2000006a 	.word	0x2000006a
 8001650:	200003af 	.word	0x200003af

08001654 <inputChord>:


void inputChord (void){
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0

	buttonState[_CHORD] = HAL_GPIO_ReadPin(CHORD_GPIO_Port, CHORD_Pin);
 8001658:	f44f 7100 	mov.w	r1, #512	; 0x200
 800165c:	4817      	ldr	r0, [pc, #92]	; (80016bc <inputChord+0x68>)
 800165e:	f001 fe67 	bl	8003330 <HAL_GPIO_ReadPin>
 8001662:	4603      	mov	r3, r0
 8001664:	461a      	mov	r2, r3
 8001666:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <inputChord+0x6c>)
 8001668:	749a      	strb	r2, [r3, #18]

	if(!buttonState[_CHORD] && lastState[_CHORD]){
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <inputChord+0x6c>)
 800166c:	7c9b      	ldrb	r3, [r3, #18]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d11e      	bne.n	80016b0 <inputChord+0x5c>
 8001672:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <inputChord+0x70>)
 8001674:	7c9b      	ldrb	r3, [r3, #18]
 8001676:	2b00      	cmp	r3, #0
 8001678:	d01a      	beq.n	80016b0 <inputChord+0x5c>

      acorde = !acorde;
 800167a:	4b13      	ldr	r3, [pc, #76]	; (80016c8 <inputChord+0x74>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	bf0c      	ite	eq
 8001682:	2301      	moveq	r3, #1
 8001684:	2300      	movne	r3, #0
 8001686:	b2db      	uxtb	r3, r3
 8001688:	461a      	mov	r2, r3
 800168a:	4b0f      	ldr	r3, [pc, #60]	; (80016c8 <inputChord+0x74>)
 800168c:	701a      	strb	r2, [r3, #0]

	  if (acorde){
 800168e:	4b0e      	ldr	r3, [pc, #56]	; (80016c8 <inputChord+0x74>)
 8001690:	781b      	ldrb	r3, [r3, #0]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d006      	beq.n	80016a4 <inputChord+0x50>
		screenNum = CHORD_SCREEN;
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <inputChord+0x78>)
 8001698:	2204      	movs	r2, #4
 800169a:	701a      	strb	r2, [r3, #0]
		menu = CHORD_SCREEN;
 800169c:	4b0c      	ldr	r3, [pc, #48]	; (80016d0 <inputChord+0x7c>)
 800169e:	2204      	movs	r2, #4
 80016a0:	701a      	strb	r2, [r3, #0]
 80016a2:	e005      	b.n	80016b0 <inputChord+0x5c>
	  }else{
		screenNum = MAIN_SCREEN;
 80016a4:	4b09      	ldr	r3, [pc, #36]	; (80016cc <inputChord+0x78>)
 80016a6:	2203      	movs	r2, #3
 80016a8:	701a      	strb	r2, [r3, #0]
		menu = MAIN_SCREEN;
 80016aa:	4b09      	ldr	r3, [pc, #36]	; (80016d0 <inputChord+0x7c>)
 80016ac:	2203      	movs	r2, #3
 80016ae:	701a      	strb	r2, [r3, #0]
	/*
	if (acorde){
		chordSelect();
	}
*/
	lastState[_CHORD] = buttonState[_CHORD];
 80016b0:	4b03      	ldr	r3, [pc, #12]	; (80016c0 <inputChord+0x6c>)
 80016b2:	7c9a      	ldrb	r2, [r3, #18]
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <inputChord+0x70>)
 80016b6:	749a      	strb	r2, [r3, #18]
}
 80016b8:	bf00      	nop
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40020800 	.word	0x40020800
 80016c0:	20000750 	.word	0x20000750
 80016c4:	20000774 	.word	0x20000774
 80016c8:	200003ad 	.word	0x200003ad
 80016cc:	200003af 	.word	0x200003af
 80016d0:	200000c8 	.word	0x200000c8

080016d4 <inputOctave>:


void inputOctave (void){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0

  buttonState[_OCT_G] = HAL_GPIO_ReadPin(OCT_G_GPIO_Port, OCT_G_Pin); //octava grave
 80016d8:	2120      	movs	r1, #32
 80016da:	4828      	ldr	r0, [pc, #160]	; (800177c <inputOctave+0xa8>)
 80016dc:	f001 fe28 	bl	8003330 <HAL_GPIO_ReadPin>
 80016e0:	4603      	mov	r3, r0
 80016e2:	461a      	mov	r2, r3
 80016e4:	4b26      	ldr	r3, [pc, #152]	; (8001780 <inputOctave+0xac>)
 80016e6:	735a      	strb	r2, [r3, #13]
  if(!buttonState[_OCT_G] && lastState[_OCT_G]){
 80016e8:	4b25      	ldr	r3, [pc, #148]	; (8001780 <inputOctave+0xac>)
 80016ea:	7b5b      	ldrb	r3, [r3, #13]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d10a      	bne.n	8001706 <inputOctave+0x32>
 80016f0:	4b24      	ldr	r3, [pc, #144]	; (8001784 <inputOctave+0xb0>)
 80016f2:	7b5b      	ldrb	r3, [r3, #13]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d006      	beq.n	8001706 <inputOctave+0x32>
      octava = -1;
 80016f8:	4b23      	ldr	r3, [pc, #140]	; (8001788 <inputOctave+0xb4>)
 80016fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016fe:	601a      	str	r2, [r3, #0]
	  screenNum=POPUP_OCTAVE;
 8001700:	4b22      	ldr	r3, [pc, #136]	; (800178c <inputOctave+0xb8>)
 8001702:	2209      	movs	r2, #9
 8001704:	701a      	strb	r2, [r3, #0]
  }

  lastState[_OCT_G] = buttonState[_OCT_G];
 8001706:	4b1e      	ldr	r3, [pc, #120]	; (8001780 <inputOctave+0xac>)
 8001708:	7b5a      	ldrb	r2, [r3, #13]
 800170a:	4b1e      	ldr	r3, [pc, #120]	; (8001784 <inputOctave+0xb0>)
 800170c:	735a      	strb	r2, [r3, #13]


  buttonState[_OCT_M] = HAL_GPIO_ReadPin(OCT_M_GPIO_Port, OCT_M_Pin);//octava central
 800170e:	2108      	movs	r1, #8
 8001710:	481a      	ldr	r0, [pc, #104]	; (800177c <inputOctave+0xa8>)
 8001712:	f001 fe0d 	bl	8003330 <HAL_GPIO_ReadPin>
 8001716:	4603      	mov	r3, r0
 8001718:	461a      	mov	r2, r3
 800171a:	4b19      	ldr	r3, [pc, #100]	; (8001780 <inputOctave+0xac>)
 800171c:	739a      	strb	r2, [r3, #14]
  if(!buttonState[_OCT_M] && lastState[_OCT_M]){
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <inputOctave+0xac>)
 8001720:	7b9b      	ldrb	r3, [r3, #14]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d109      	bne.n	800173a <inputOctave+0x66>
 8001726:	4b17      	ldr	r3, [pc, #92]	; (8001784 <inputOctave+0xb0>)
 8001728:	7b9b      	ldrb	r3, [r3, #14]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d005      	beq.n	800173a <inputOctave+0x66>
      octava = 0;
 800172e:	4b16      	ldr	r3, [pc, #88]	; (8001788 <inputOctave+0xb4>)
 8001730:	2200      	movs	r2, #0
 8001732:	601a      	str	r2, [r3, #0]
	  screenNum=POPUP_OCTAVE;
 8001734:	4b15      	ldr	r3, [pc, #84]	; (800178c <inputOctave+0xb8>)
 8001736:	2209      	movs	r2, #9
 8001738:	701a      	strb	r2, [r3, #0]
  }

  lastState[_OCT_M] = buttonState[_OCT_M];
 800173a:	4b11      	ldr	r3, [pc, #68]	; (8001780 <inputOctave+0xac>)
 800173c:	7b9a      	ldrb	r2, [r3, #14]
 800173e:	4b11      	ldr	r3, [pc, #68]	; (8001784 <inputOctave+0xb0>)
 8001740:	739a      	strb	r2, [r3, #14]


  buttonState[_OCT_A] = HAL_GPIO_ReadPin(OCT_A_GPIO_Port, OCT_A_Pin);//octava aguda
 8001742:	2140      	movs	r1, #64	; 0x40
 8001744:	4812      	ldr	r0, [pc, #72]	; (8001790 <inputOctave+0xbc>)
 8001746:	f001 fdf3 	bl	8003330 <HAL_GPIO_ReadPin>
 800174a:	4603      	mov	r3, r0
 800174c:	461a      	mov	r2, r3
 800174e:	4b0c      	ldr	r3, [pc, #48]	; (8001780 <inputOctave+0xac>)
 8001750:	73da      	strb	r2, [r3, #15]
  if(!buttonState[_OCT_A] && lastState[_OCT_A]){
 8001752:	4b0b      	ldr	r3, [pc, #44]	; (8001780 <inputOctave+0xac>)
 8001754:	7bdb      	ldrb	r3, [r3, #15]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d109      	bne.n	800176e <inputOctave+0x9a>
 800175a:	4b0a      	ldr	r3, [pc, #40]	; (8001784 <inputOctave+0xb0>)
 800175c:	7bdb      	ldrb	r3, [r3, #15]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d005      	beq.n	800176e <inputOctave+0x9a>
      octava = 1;
 8001762:	4b09      	ldr	r3, [pc, #36]	; (8001788 <inputOctave+0xb4>)
 8001764:	2201      	movs	r2, #1
 8001766:	601a      	str	r2, [r3, #0]
      screenNum=POPUP_OCTAVE;
 8001768:	4b08      	ldr	r3, [pc, #32]	; (800178c <inputOctave+0xb8>)
 800176a:	2209      	movs	r2, #9
 800176c:	701a      	strb	r2, [r3, #0]
  }

  lastState[_OCT_A] = buttonState[_OCT_A];
 800176e:	4b04      	ldr	r3, [pc, #16]	; (8001780 <inputOctave+0xac>)
 8001770:	7bda      	ldrb	r2, [r3, #15]
 8001772:	4b04      	ldr	r3, [pc, #16]	; (8001784 <inputOctave+0xb0>)
 8001774:	73da      	strb	r2, [r3, #15]
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40020400 	.word	0x40020400
 8001780:	20000750 	.word	0x20000750
 8001784:	20000774 	.word	0x20000774
 8001788:	20000334 	.word	0x20000334
 800178c:	200003af 	.word	0x200003af
 8001790:	40020c00 	.word	0x40020c00

08001794 <inputTunne>:


void inputTunne(void){
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  	buttonState[_TUNNE] = HAL_GPIO_ReadPin(TUNNE_GPIO_Port, TUNNE_Pin);
 8001798:	2108      	movs	r1, #8
 800179a:	4818      	ldr	r0, [pc, #96]	; (80017fc <inputTunne+0x68>)
 800179c:	f001 fdc8 	bl	8003330 <HAL_GPIO_ReadPin>
 80017a0:	4603      	mov	r3, r0
 80017a2:	461a      	mov	r2, r3
 80017a4:	4b16      	ldr	r3, [pc, #88]	; (8001800 <inputTunne+0x6c>)
 80017a6:	779a      	strb	r2, [r3, #30]

	if(!buttonState[_TUNNE] && lastState[_TUNNE]){
 80017a8:	4b15      	ldr	r3, [pc, #84]	; (8001800 <inputTunne+0x6c>)
 80017aa:	7f9b      	ldrb	r3, [r3, #30]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d11e      	bne.n	80017ee <inputTunne+0x5a>
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <inputTunne+0x70>)
 80017b2:	7f9b      	ldrb	r3, [r3, #30]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d01a      	beq.n	80017ee <inputTunne+0x5a>
      tunne = !tunne;
 80017b8:	4b13      	ldr	r3, [pc, #76]	; (8001808 <inputTunne+0x74>)
 80017ba:	781b      	ldrb	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	bf0c      	ite	eq
 80017c0:	2301      	moveq	r3, #1
 80017c2:	2300      	movne	r3, #0
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	461a      	mov	r2, r3
 80017c8:	4b0f      	ldr	r3, [pc, #60]	; (8001808 <inputTunne+0x74>)
 80017ca:	701a      	strb	r2, [r3, #0]

	  if (tunne){
 80017cc:	4b0e      	ldr	r3, [pc, #56]	; (8001808 <inputTunne+0x74>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d006      	beq.n	80017e2 <inputTunne+0x4e>
		screenNum = TUNNE_SCREEN;
 80017d4:	4b0d      	ldr	r3, [pc, #52]	; (800180c <inputTunne+0x78>)
 80017d6:	2205      	movs	r2, #5
 80017d8:	701a      	strb	r2, [r3, #0]
		menu = TUNNE_SCREEN;
 80017da:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <inputTunne+0x7c>)
 80017dc:	2205      	movs	r2, #5
 80017de:	701a      	strb	r2, [r3, #0]
 80017e0:	e005      	b.n	80017ee <inputTunne+0x5a>
	  }else{
		screenNum = MAIN_SCREEN;
 80017e2:	4b0a      	ldr	r3, [pc, #40]	; (800180c <inputTunne+0x78>)
 80017e4:	2203      	movs	r2, #3
 80017e6:	701a      	strb	r2, [r3, #0]
		menu = MAIN_SCREEN;
 80017e8:	4b09      	ldr	r3, [pc, #36]	; (8001810 <inputTunne+0x7c>)
 80017ea:	2203      	movs	r2, #3
 80017ec:	701a      	strb	r2, [r3, #0]
	/*
	if (acorde){
		menu = TUNNE_SCREEN;
	}
*/
	lastState[_TUNNE] = buttonState[_TUNNE];
 80017ee:	4b04      	ldr	r3, [pc, #16]	; (8001800 <inputTunne+0x6c>)
 80017f0:	7f9a      	ldrb	r2, [r3, #30]
 80017f2:	4b04      	ldr	r3, [pc, #16]	; (8001804 <inputTunne+0x70>)
 80017f4:	779a      	strb	r2, [r3, #30]
}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40020c00 	.word	0x40020c00
 8001800:	20000750 	.word	0x20000750
 8001804:	20000774 	.word	0x20000774
 8001808:	200003ae 	.word	0x200003ae
 800180c:	200003af 	.word	0x200003af
 8001810:	200000c8 	.word	0x200000c8

08001814 <inputPresets>:


void inputPresets (void){
 8001814:	b590      	push	{r4, r7, lr}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0

  for (int i = 0; i < 6; i++){                                         // 6 presets en total.
 800181a:	2300      	movs	r3, #0
 800181c:	607b      	str	r3, [r7, #4]
 800181e:	e03a      	b.n	8001896 <inputPresets+0x82>

    buttonState[i + _PRESET0] = HAL_GPIO_ReadPin(presetPort_list[i], presetPin_list[i]);  //internal pullup
 8001820:	4a20      	ldr	r2, [pc, #128]	; (80018a4 <inputPresets+0x90>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001828:	4a1f      	ldr	r2, [pc, #124]	; (80018a8 <inputPresets+0x94>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f103 0418 	add.w	r4, r3, #24
 8001836:	4611      	mov	r1, r2
 8001838:	f001 fd7a 	bl	8003330 <HAL_GPIO_ReadPin>
 800183c:	4603      	mov	r3, r0
 800183e:	461a      	mov	r2, r3
 8001840:	4b1a      	ldr	r3, [pc, #104]	; (80018ac <inputPresets+0x98>)
 8001842:	551a      	strb	r2, [r3, r4]

    if(!buttonState[i + _PRESET0] && lastState[i + _PRESET0]){                                // If we read 0, and the last time we read 1, means button was just pressed
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3318      	adds	r3, #24
 8001848:	4a18      	ldr	r2, [pc, #96]	; (80018ac <inputPresets+0x98>)
 800184a:	5cd3      	ldrb	r3, [r2, r3]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d116      	bne.n	800187e <inputPresets+0x6a>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	3318      	adds	r3, #24
 8001854:	4a16      	ldr	r2, [pc, #88]	; (80018b0 <inputPresets+0x9c>)
 8001856:	5cd3      	ldrb	r3, [r2, r3]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d010      	beq.n	800187e <inputPresets+0x6a>

        //MIDI.sendProgramChange(i - PRESET0, MIDI_CHANNEL);

		//event = {0x0C, 0xC0 | MIDI_CHANNEL, i, 0};
		//MidiUSB.sendMIDI(event);
		midi_msg[0] = 0x0C;	//0x0C == type event (program change)
 800185c:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <inputPresets+0xa0>)
 800185e:	220c      	movs	r2, #12
 8001860:	701a      	strb	r2, [r3, #0]
		midi_msg[1] = 0xC0 | 1;
 8001862:	4b14      	ldr	r3, [pc, #80]	; (80018b4 <inputPresets+0xa0>)
 8001864:	22c1      	movs	r2, #193	; 0xc1
 8001866:	705a      	strb	r2, [r3, #1]
		midi_msg[2] = i;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	b2da      	uxtb	r2, r3
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <inputPresets+0xa0>)
 800186e:	709a      	strb	r2, [r3, #2]
		midi_msg[3] = 0;	//last param == 0 (unused in program change).
 8001870:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <inputPresets+0xa0>)
 8001872:	2200      	movs	r2, #0
 8001874:	70da      	strb	r2, [r3, #3]
		MIDI_SendBuffer(midi_msg, 4);
 8001876:	2104      	movs	r1, #4
 8001878:	480e      	ldr	r0, [pc, #56]	; (80018b4 <inputPresets+0xa0>)
 800187a:	f009 fe39 	bl	800b4f0 <MIDI_SendBuffer>

    } //end if

    lastState[i + _PRESET0] = buttonState[i + _PRESET0];                                        // Update last button state.
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	f103 0218 	add.w	r2, r3, #24
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	3318      	adds	r3, #24
 8001888:	4908      	ldr	r1, [pc, #32]	; (80018ac <inputPresets+0x98>)
 800188a:	5c89      	ldrb	r1, [r1, r2]
 800188c:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <inputPresets+0x9c>)
 800188e:	54d1      	strb	r1, [r2, r3]
  for (int i = 0; i < 6; i++){                                         // 6 presets en total.
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	3301      	adds	r3, #1
 8001894:	607b      	str	r3, [r7, #4]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2b05      	cmp	r3, #5
 800189a:	ddc1      	ble.n	8001820 <inputPresets+0xc>
  } //end for

} //end inputPresets
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd90      	pop	{r4, r7, pc}
 80018a4:	2000007c 	.word	0x2000007c
 80018a8:	0800bfd0 	.word	0x0800bfd0
 80018ac:	20000750 	.word	0x20000750
 80018b0:	20000774 	.word	0x20000774
 80018b4:	20000794 	.word	0x20000794

080018b8 <inputNotes>:


void inputNotes(void){
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0

  uint8_t pressedNote;

  for (int i = 0; i <= 12; i++){
 80018be:	2300      	movs	r3, #0
 80018c0:	607b      	str	r3, [r7, #4]
 80018c2:	e0ad      	b.n	8001a20 <inputNotes+0x168>

    buttonState[i + _DO] = HAL_GPIO_ReadPin(notePort_list[i], notePin_list[i]); //read current button pin.
 80018c4:	4a5a      	ldr	r2, [pc, #360]	; (8001a30 <inputNotes+0x178>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80018cc:	4a59      	ldr	r2, [pc, #356]	; (8001a34 <inputNotes+0x17c>)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80018d4:	4619      	mov	r1, r3
 80018d6:	f001 fd2b 	bl	8003330 <HAL_GPIO_ReadPin>
 80018da:	4603      	mov	r3, r0
 80018dc:	4619      	mov	r1, r3
 80018de:	4a56      	ldr	r2, [pc, #344]	; (8001a38 <inputNotes+0x180>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4413      	add	r3, r2
 80018e4:	460a      	mov	r2, r1
 80018e6:	701a      	strb	r2, [r3, #0]

    if(!buttonState[i + _DO] && lastState[i + _DO]){  // If we read 1, and the last time we read 0, means button was just pressed.
 80018e8:	4a53      	ldr	r2, [pc, #332]	; (8001a38 <inputNotes+0x180>)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d16d      	bne.n	80019d0 <inputNotes+0x118>
 80018f4:	4a51      	ldr	r2, [pc, #324]	; (8001a3c <inputNotes+0x184>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4413      	add	r3, r2
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d067      	beq.n	80019d0 <inputNotes+0x118>

        pressedNote = firstDoTunning + i + 12 * octava; //detects the pressed note.
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	b2da      	uxtb	r2, r3
 8001904:	4b4e      	ldr	r3, [pc, #312]	; (8001a40 <inputNotes+0x188>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	4413      	add	r3, r2
 800190a:	b2da      	uxtb	r2, r3
 800190c:	4b4d      	ldr	r3, [pc, #308]	; (8001a44 <inputNotes+0x18c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	b2db      	uxtb	r3, r3
 8001912:	4619      	mov	r1, r3
 8001914:	0049      	lsls	r1, r1, #1
 8001916:	440b      	add	r3, r1
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	b2db      	uxtb	r3, r3
 800191c:	4413      	add	r3, r2
 800191e:	70fb      	strb	r3, [r7, #3]

    	if (acorde){ //If chord mode is on...
 8001920:	4b49      	ldr	r3, [pc, #292]	; (8001a48 <inputNotes+0x190>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d00c      	beq.n	8001942 <inputNotes+0x8a>
            lastSendNote[i] = makeChord(pressedNote, i); // saves the current chord config. on pressed note.
 8001928:	78fb      	ldrb	r3, [r7, #3]
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	4611      	mov	r1, r2
 8001930:	4618      	mov	r0, r3
 8001932:	f7fe fdc9 	bl	80004c8 <makeChord>
 8001936:	4601      	mov	r1, r0
 8001938:	4a44      	ldr	r2, [pc, #272]	; (8001a4c <inputNotes+0x194>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001940:	e004      	b.n	800194c <inputNotes+0x94>

        }else{ //If chord mode is off...

            lastSendNote[i] = pressedNote; // saves nothing but pressed note.
 8001942:	78fa      	ldrb	r2, [r7, #3]
 8001944:	4941      	ldr	r1, [pc, #260]	; (8001a4c <inputNotes+0x194>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        } //end if acorde


        if (sustainMode == 1){ // If proprietary sustain mode on...
 800194c:	4b40      	ldr	r3, [pc, #256]	; (8001a50 <inputNotes+0x198>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b01      	cmp	r3, #1
 8001952:	d122      	bne.n	800199a <inputNotes+0xe2>

			if (lastSustainNote != lastSendNote[i]){ // If last sustained note differs from the current pressed one...
 8001954:	4a3d      	ldr	r2, [pc, #244]	; (8001a4c <inputNotes+0x194>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800195c:	4b3d      	ldr	r3, [pc, #244]	; (8001a54 <inputNotes+0x19c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	429a      	cmp	r2, r3
 8001962:	d010      	beq.n	8001986 <inputNotes+0xce>

				sendChord(lastSustainNote, 0, 1); // mute current chord. 0 in second param means "noteOff".
 8001964:	4b3b      	ldr	r3, [pc, #236]	; (8001a54 <inputNotes+0x19c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2201      	movs	r2, #1
 800196a:	2100      	movs	r1, #0
 800196c:	4618      	mov	r0, r3
 800196e:	f000 f9e3 	bl	8001d38 <sendChord>
				lastSustainNote = lastSendNote[i]; // and saves the current sustained note.
 8001972:	4a36      	ldr	r2, [pc, #216]	; (8001a4c <inputNotes+0x194>)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197a:	4a36      	ldr	r2, [pc, #216]	; (8001a54 <inputNotes+0x19c>)
 800197c:	6013      	str	r3, [r2, #0]
				sustainFlag = 1; // turn sustained note on
 800197e:	4b36      	ldr	r3, [pc, #216]	; (8001a58 <inputNotes+0x1a0>)
 8001980:	2201      	movs	r2, #1
 8001982:	701a      	strb	r2, [r3, #0]
 8001984:	e009      	b.n	800199a <inputNotes+0xe2>

			}else{ // If last sustained note and the current pressed one are the same...

				sustainFlag = !sustainFlag; // turn sustained note off.
 8001986:	4b34      	ldr	r3, [pc, #208]	; (8001a58 <inputNotes+0x1a0>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b00      	cmp	r3, #0
 800198c:	bf0c      	ite	eq
 800198e:	2301      	moveq	r3, #1
 8001990:	2300      	movne	r3, #0
 8001992:	b2db      	uxtb	r3, r3
 8001994:	461a      	mov	r2, r3
 8001996:	4b30      	ldr	r3, [pc, #192]	; (8001a58 <inputNotes+0x1a0>)
 8001998:	701a      	strb	r2, [r3, #0]

			}//end if lastSustainNote...
        }//end if sustainMode


        sendChord(lastSendNote[i], 127 * sustainFlag, 1); //send the appropriate midi message.
 800199a:	4a2c      	ldr	r2, [pc, #176]	; (8001a4c <inputNotes+0x194>)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80019a2:	4b2d      	ldr	r3, [pc, #180]	; (8001a58 <inputNotes+0x1a0>)
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	4613      	mov	r3, r2
 80019aa:	01db      	lsls	r3, r3, #7
 80019ac:	1a9b      	subs	r3, r3, r2
 80019ae:	2201      	movs	r2, #1
 80019b0:	4619      	mov	r1, r3
 80019b2:	f000 f9c1 	bl	8001d38 <sendChord>

        if (sustainFlag != 0){
 80019b6:	4b28      	ldr	r3, [pc, #160]	; (8001a58 <inputNotes+0x1a0>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d004      	beq.n	80019c8 <inputNotes+0x110>
        	osc_setNote(pressedNote);
 80019be:	78fb      	ldrb	r3, [r7, #3]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f000 faeb 	bl	8001f9c <osc_setNote>
        if (sustainFlag != 0){
 80019c6:	e01f      	b.n	8001a08 <inputNotes+0x150>
        }else{
        	osc_setNote(0);
 80019c8:	2000      	movs	r0, #0
 80019ca:	f000 fae7 	bl	8001f9c <osc_setNote>
        if (sustainFlag != 0){
 80019ce:	e01b      	b.n	8001a08 <inputNotes+0x150>
        }

    }
    else if(buttonState[i] && !lastState[i]){  // If we read 0, and the last time we read 1, means button was just released
 80019d0:	4a19      	ldr	r2, [pc, #100]	; (8001a38 <inputNotes+0x180>)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d015      	beq.n	8001a08 <inputNotes+0x150>
 80019dc:	4a17      	ldr	r2, [pc, #92]	; (8001a3c <inputNotes+0x184>)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10f      	bne.n	8001a08 <inputNotes+0x150>

    	if (sustainMode != 1){ // If proprietary sustain mode off...
 80019e8:	4b19      	ldr	r3, [pc, #100]	; (8001a50 <inputNotes+0x198>)
 80019ea:	781b      	ldrb	r3, [r3, #0]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d00b      	beq.n	8001a08 <inputNotes+0x150>
			sendChord(lastSendNote[i], 0, 1); // 0 in second param means "noteOff".
 80019f0:	4a16      	ldr	r2, [pc, #88]	; (8001a4c <inputNotes+0x194>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f8:	2201      	movs	r2, #1
 80019fa:	2100      	movs	r1, #0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f000 f99b 	bl	8001d38 <sendChord>
			osc_setNote(0); // turn DAC off.
 8001a02:	2000      	movs	r0, #0
 8001a04:	f000 faca 	bl	8001f9c <osc_setNote>
        }
    }

    lastState[i] = buttonState[i];  // Update last button state.
 8001a08:	4a0b      	ldr	r2, [pc, #44]	; (8001a38 <inputNotes+0x180>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4413      	add	r3, r2
 8001a0e:	7819      	ldrb	r1, [r3, #0]
 8001a10:	4a0a      	ldr	r2, [pc, #40]	; (8001a3c <inputNotes+0x184>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	460a      	mov	r2, r1
 8001a18:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i <= 12; i++){
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2b0c      	cmp	r3, #12
 8001a24:	f77f af4e 	ble.w	80018c4 <inputNotes+0xc>
  }
}
 8001a28:	bf00      	nop
 8001a2a:	3708      	adds	r7, #8
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20000094 	.word	0x20000094
 8001a34:	0800bfdc 	.word	0x0800bfdc
 8001a38:	20000750 	.word	0x20000750
 8001a3c:	20000774 	.word	0x20000774
 8001a40:	200003e0 	.word	0x200003e0
 8001a44:	20000334 	.word	0x20000334
 8001a48:	200003ad 	.word	0x200003ad
 8001a4c:	20000374 	.word	0x20000374
 8001a50:	200003ac 	.word	0x200003ac
 8001a54:	200003a8 	.word	0x200003a8
 8001a58:	2000006a 	.word	0x2000006a

08001a5c <inputSaveChord>:


void inputSaveChord(void){
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0

uint8_t flag = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	71fb      	strb	r3, [r7, #7]

	for (int i = 0; i <= 12; i++){
 8001a66:	2300      	movs	r3, #0
 8001a68:	603b      	str	r3, [r7, #0]
 8001a6a:	e04c      	b.n	8001b06 <inputSaveChord+0xaa>

		buttonState[i + _DO] = HAL_GPIO_ReadPin(notePort_list[i], notePin_list[i]);
 8001a6c:	4a31      	ldr	r2, [pc, #196]	; (8001b34 <inputSaveChord+0xd8>)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001a74:	4a30      	ldr	r2, [pc, #192]	; (8001b38 <inputSaveChord+0xdc>)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	f001 fc57 	bl	8003330 <HAL_GPIO_ReadPin>
 8001a82:	4603      	mov	r3, r0
 8001a84:	4619      	mov	r1, r3
 8001a86:	4a2d      	ldr	r2, [pc, #180]	; (8001b3c <inputSaveChord+0xe0>)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	460a      	mov	r2, r1
 8001a8e:	701a      	strb	r2, [r3, #0]

		if(!buttonState[i + _DO] && lastState[i + _DO]){       // If we read 1, and the last time we read 0, means button was just pressed
 8001a90:	4a2a      	ldr	r2, [pc, #168]	; (8001b3c <inputSaveChord+0xe0>)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	4413      	add	r3, r2
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d128      	bne.n	8001aee <inputSaveChord+0x92>
 8001a9c:	4a28      	ldr	r2, [pc, #160]	; (8001b40 <inputSaveChord+0xe4>)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d01d      	beq.n	8001ae4 <inputSaveChord+0x88>

			//storing the selected chord:
			setChord(i);
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7fe fd2d 	bl	800050c <setChord>
			footKey = NORMAL;
 8001ab2:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <inputSaveChord+0xe8>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
			screenNum = POPUP_SAVED_CHORD;
 8001ab8:	4b23      	ldr	r3, [pc, #140]	; (8001b48 <inputSaveChord+0xec>)
 8001aba:	2208      	movs	r2, #8
 8001abc:	701a      	strb	r2, [r3, #0]
			menu = CHORD_SCREEN; 				//return point to chordSelect().
 8001abe:	4b23      	ldr	r3, [pc, #140]	; (8001b4c <inputSaveChord+0xf0>)
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	701a      	strb	r2, [r3, #0]
			lastKey_pos = i; 					// to show in screen the foot key pressed.
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	b2da      	uxtb	r2, r3
 8001ac8:	4b21      	ldr	r3, [pc, #132]	; (8001b50 <inputSaveChord+0xf4>)
 8001aca:	701a      	strb	r2, [r3, #0]
			lastState[i] = buttonState[i];       // Update last button state.
 8001acc:	4a1b      	ldr	r2, [pc, #108]	; (8001b3c <inputSaveChord+0xe0>)
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	7819      	ldrb	r1, [r3, #0]
 8001ad4:	4a1a      	ldr	r2, [pc, #104]	; (8001b40 <inputSaveChord+0xe4>)
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	4413      	add	r3, r2
 8001ada:	460a      	mov	r2, r1
 8001adc:	701a      	strb	r2, [r3, #0]
			flag = 1;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	71fb      	strb	r3, [r7, #7]
			break; 								 //it must exit from function.
 8001ae2:	e013      	b.n	8001b0c <inputSaveChord+0xb0>
		}
		else if(buttonState[i] && !lastState[i]){                           // If we read 0, and the last time we read 1, means button was just released
 8001ae4:	4a15      	ldr	r2, [pc, #84]	; (8001b3c <inputSaveChord+0xe0>)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	4413      	add	r3, r2
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	2b00      	cmp	r3, #0
			//POR AHORA NADA
		}
		lastState[i] = buttonState[i];                                        // Update last button state.
 8001aee:	4a13      	ldr	r2, [pc, #76]	; (8001b3c <inputSaveChord+0xe0>)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	4413      	add	r3, r2
 8001af4:	7819      	ldrb	r1, [r3, #0]
 8001af6:	4a12      	ldr	r2, [pc, #72]	; (8001b40 <inputSaveChord+0xe4>)
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	4413      	add	r3, r2
 8001afc:	460a      	mov	r2, r1
 8001afe:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i <= 12; i++){
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	3301      	adds	r3, #1
 8001b04:	603b      	str	r3, [r7, #0]
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	2b0c      	cmp	r3, #12
 8001b0a:	ddaf      	ble.n	8001a6c <inputSaveChord+0x10>
	}

	if (!flag){
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d10c      	bne.n	8001b2c <inputSaveChord+0xd0>
		if (d_pad == _LEFT){
 8001b12:	4b10      	ldr	r3, [pc, #64]	; (8001b54 <inputSaveChord+0xf8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2b15      	cmp	r3, #21
 8001b18:	d108      	bne.n	8001b2c <inputSaveChord+0xd0>
			footKey = NORMAL;
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <inputSaveChord+0xe8>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
			screenNum = POPUP_CANCEL;
 8001b20:	4b09      	ldr	r3, [pc, #36]	; (8001b48 <inputSaveChord+0xec>)
 8001b22:	220b      	movs	r2, #11
 8001b24:	701a      	strb	r2, [r3, #0]
			menu = CHORD_SCREEN;
 8001b26:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <inputSaveChord+0xf0>)
 8001b28:	2204      	movs	r2, #4
 8001b2a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001b2c:	bf00      	nop
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000094 	.word	0x20000094
 8001b38:	0800bfdc 	.word	0x0800bfdc
 8001b3c:	20000750 	.word	0x20000750
 8001b40:	20000774 	.word	0x20000774
 8001b44:	200003b5 	.word	0x200003b5
 8001b48:	200003af 	.word	0x200003af
 8001b4c:	200000c8 	.word	0x200000c8
 8001b50:	2000076f 	.word	0x2000076f
 8001b54:	20000770 	.word	0x20000770

08001b58 <chordSelect>:

void chordSelect(void){
 8001b58:	b480      	push	{r7}
 8001b5a:	b083      	sub	sp, #12
 8001b5c:	af00      	add	r7, sp, #0

  uint8_t flag = 0;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	71fb      	strb	r3, [r7, #7]

  switch (chordSelect_cursor){
 8001b62:	4b4f      	ldr	r3, [pc, #316]	; (8001ca0 <chordSelect+0x148>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d034      	beq.n	8001bd4 <chordSelect+0x7c>
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d302      	bcc.n	8001b74 <chordSelect+0x1c>
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d06f      	beq.n	8001c52 <chordSelect+0xfa>
 8001b72:	e089      	b.n	8001c88 <chordSelect+0x130>

		case 0:

			switch (d_pad){
 8001b74:	4b4b      	ldr	r3, [pc, #300]	; (8001ca4 <chordSelect+0x14c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2b15      	cmp	r3, #21
 8001b7a:	d00c      	beq.n	8001b96 <chordSelect+0x3e>
 8001b7c:	2b16      	cmp	r3, #22
 8001b7e:	d019      	beq.n	8001bb4 <chordSelect+0x5c>
 8001b80:	2b14      	cmp	r3, #20
 8001b82:	d000      	beq.n	8001b86 <chordSelect+0x2e>
					if (chord > 7)
						chord = 0;
					flag = 1;
					break;
			}
			break;
 8001b84:	e080      	b.n	8001c88 <chordSelect+0x130>
					chordSelect_cursor++;
 8001b86:	4b46      	ldr	r3, [pc, #280]	; (8001ca0 <chordSelect+0x148>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	4a44      	ldr	r2, [pc, #272]	; (8001ca0 <chordSelect+0x148>)
 8001b8e:	6013      	str	r3, [r2, #0]
					flag = 1;
 8001b90:	2301      	movs	r3, #1
 8001b92:	71fb      	strb	r3, [r7, #7]
					break;
 8001b94:	e01d      	b.n	8001bd2 <chordSelect+0x7a>
					chord--;
 8001b96:	4b44      	ldr	r3, [pc, #272]	; (8001ca8 <chordSelect+0x150>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	4a42      	ldr	r2, [pc, #264]	; (8001ca8 <chordSelect+0x150>)
 8001b9e:	6013      	str	r3, [r2, #0]
					if (chord < 0)
 8001ba0:	4b41      	ldr	r3, [pc, #260]	; (8001ca8 <chordSelect+0x150>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	da02      	bge.n	8001bae <chordSelect+0x56>
						chord = 7;
 8001ba8:	4b3f      	ldr	r3, [pc, #252]	; (8001ca8 <chordSelect+0x150>)
 8001baa:	2207      	movs	r2, #7
 8001bac:	601a      	str	r2, [r3, #0]
					flag = 1;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	71fb      	strb	r3, [r7, #7]
					break;
 8001bb2:	e00e      	b.n	8001bd2 <chordSelect+0x7a>
					chord++;
 8001bb4:	4b3c      	ldr	r3, [pc, #240]	; (8001ca8 <chordSelect+0x150>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	3301      	adds	r3, #1
 8001bba:	4a3b      	ldr	r2, [pc, #236]	; (8001ca8 <chordSelect+0x150>)
 8001bbc:	6013      	str	r3, [r2, #0]
					if (chord > 7)
 8001bbe:	4b3a      	ldr	r3, [pc, #232]	; (8001ca8 <chordSelect+0x150>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b07      	cmp	r3, #7
 8001bc4:	dd02      	ble.n	8001bcc <chordSelect+0x74>
						chord = 0;
 8001bc6:	4b38      	ldr	r3, [pc, #224]	; (8001ca8 <chordSelect+0x150>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
					flag = 1;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	71fb      	strb	r3, [r7, #7]
					break;
 8001bd0:	bf00      	nop
			break;
 8001bd2:	e059      	b.n	8001c88 <chordSelect+0x130>
		case 1:

			switch (d_pad){
 8001bd4:	4b33      	ldr	r3, [pc, #204]	; (8001ca4 <chordSelect+0x14c>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	3b13      	subs	r3, #19
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d853      	bhi.n	8001c86 <chordSelect+0x12e>
 8001bde:	a201      	add	r2, pc, #4	; (adr r2, 8001be4 <chordSelect+0x8c>)
 8001be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001be4:	08001bf5 	.word	0x08001bf5
 8001be8:	08001c05 	.word	0x08001c05
 8001bec:	08001c15 	.word	0x08001c15
 8001bf0:	08001c33 	.word	0x08001c33
				case _UP:
					chordSelect_cursor--;
 8001bf4:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <chordSelect+0x148>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	4a29      	ldr	r2, [pc, #164]	; (8001ca0 <chordSelect+0x148>)
 8001bfc:	6013      	str	r3, [r2, #0]
					flag = 1;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	71fb      	strb	r3, [r7, #7]
					break;
 8001c02:	e025      	b.n	8001c50 <chordSelect+0xf8>
				case _DOWN:
					chordSelect_cursor++;
 8001c04:	4b26      	ldr	r3, [pc, #152]	; (8001ca0 <chordSelect+0x148>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	3301      	adds	r3, #1
 8001c0a:	4a25      	ldr	r2, [pc, #148]	; (8001ca0 <chordSelect+0x148>)
 8001c0c:	6013      	str	r3, [r2, #0]
					flag = 1;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	71fb      	strb	r3, [r7, #7]
					break;
 8001c12:	e01d      	b.n	8001c50 <chordSelect+0xf8>
				case _LEFT:
					chordInv--;
 8001c14:	4b25      	ldr	r3, [pc, #148]	; (8001cac <chordSelect+0x154>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	4a24      	ldr	r2, [pc, #144]	; (8001cac <chordSelect+0x154>)
 8001c1c:	6013      	str	r3, [r2, #0]
					if (chordInv < 0)
 8001c1e:	4b23      	ldr	r3, [pc, #140]	; (8001cac <chordSelect+0x154>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	da02      	bge.n	8001c2c <chordSelect+0xd4>
						chordInv = 2;
 8001c26:	4b21      	ldr	r3, [pc, #132]	; (8001cac <chordSelect+0x154>)
 8001c28:	2202      	movs	r2, #2
 8001c2a:	601a      	str	r2, [r3, #0]
					flag = 1;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	71fb      	strb	r3, [r7, #7]
					break;
 8001c30:	e00e      	b.n	8001c50 <chordSelect+0xf8>
				case _RIGHT:
					chordInv++;
 8001c32:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <chordSelect+0x154>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	3301      	adds	r3, #1
 8001c38:	4a1c      	ldr	r2, [pc, #112]	; (8001cac <chordSelect+0x154>)
 8001c3a:	6013      	str	r3, [r2, #0]
					if (chordInv > 2)
 8001c3c:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <chordSelect+0x154>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	dd02      	ble.n	8001c4a <chordSelect+0xf2>
						chordInv = 0;
 8001c44:	4b19      	ldr	r3, [pc, #100]	; (8001cac <chordSelect+0x154>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
					flag = 1;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	71fb      	strb	r3, [r7, #7]
					break;
 8001c4e:	bf00      	nop
			}
			break;
 8001c50:	e019      	b.n	8001c86 <chordSelect+0x12e>
		case 2:

			switch (d_pad){
 8001c52:	4b14      	ldr	r3, [pc, #80]	; (8001ca4 <chordSelect+0x14c>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	2b13      	cmp	r3, #19
 8001c58:	d002      	beq.n	8001c60 <chordSelect+0x108>
 8001c5a:	2b16      	cmp	r3, #22
 8001c5c:	d008      	beq.n	8001c70 <chordSelect+0x118>
					footKey = SAVE_CHORD; //
					menu = RECUEST_FOOTKEY_SCREEN;
					screenNum = RECUEST_FOOTKEY_SCREEN;
					break;
			}
			break;
 8001c5e:	e013      	b.n	8001c88 <chordSelect+0x130>
					chordSelect_cursor--;
 8001c60:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <chordSelect+0x148>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	3b01      	subs	r3, #1
 8001c66:	4a0e      	ldr	r2, [pc, #56]	; (8001ca0 <chordSelect+0x148>)
 8001c68:	6013      	str	r3, [r2, #0]
					flag = 1;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	71fb      	strb	r3, [r7, #7]
					break;
 8001c6e:	e009      	b.n	8001c84 <chordSelect+0x12c>
					footKey = SAVE_CHORD; //
 8001c70:	4b0f      	ldr	r3, [pc, #60]	; (8001cb0 <chordSelect+0x158>)
 8001c72:	2201      	movs	r2, #1
 8001c74:	701a      	strb	r2, [r3, #0]
					menu = RECUEST_FOOTKEY_SCREEN;
 8001c76:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <chordSelect+0x15c>)
 8001c78:	2207      	movs	r2, #7
 8001c7a:	701a      	strb	r2, [r3, #0]
					screenNum = RECUEST_FOOTKEY_SCREEN;
 8001c7c:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <chordSelect+0x160>)
 8001c7e:	2207      	movs	r2, #7
 8001c80:	701a      	strb	r2, [r3, #0]
					break;
 8001c82:	bf00      	nop
			break;
 8001c84:	e000      	b.n	8001c88 <chordSelect+0x130>
			break;
 8001c86:	bf00      	nop
	}

  if (flag){        ///flag de impresion
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <chordSelect+0x13c>

      screenNum = CHORD_SCREEN;
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <chordSelect+0x160>)
 8001c90:	2204      	movs	r2, #4
 8001c92:	701a      	strb	r2, [r3, #0]
  }
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	200003dc 	.word	0x200003dc
 8001ca4:	20000770 	.word	0x20000770
 8001ca8:	200003e4 	.word	0x200003e4
 8001cac:	200003e8 	.word	0x200003e8
 8001cb0:	200003b5 	.word	0x200003b5
 8001cb4:	200000c8 	.word	0x200000c8
 8001cb8:	200003af 	.word	0x200003af

08001cbc <tunneSelect>:


void tunneSelect(void){
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
	uint8_t flag = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	71fb      	strb	r3, [r7, #7]

	switch (d_pad){
 8001cc6:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <tunneSelect+0x70>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	2b15      	cmp	r3, #21
 8001ccc:	d011      	beq.n	8001cf2 <tunneSelect+0x36>
 8001cce:	2b16      	cmp	r3, #22
 8001cd0:	d11f      	bne.n	8001d12 <tunneSelect+0x56>
		case _RIGHT:
			firstDoTunning++;
 8001cd2:	4b17      	ldr	r3, [pc, #92]	; (8001d30 <tunneSelect+0x74>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	b2da      	uxtb	r2, r3
 8001cda:	4b15      	ldr	r3, [pc, #84]	; (8001d30 <tunneSelect+0x74>)
 8001cdc:	701a      	strb	r2, [r3, #0]
			if (firstDoTunning >MIDI_B2)
 8001cde:	4b14      	ldr	r3, [pc, #80]	; (8001d30 <tunneSelect+0x74>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	2b2f      	cmp	r3, #47	; 0x2f
 8001ce4:	d902      	bls.n	8001cec <tunneSelect+0x30>
				firstDoTunning = MIDI_C2;
 8001ce6:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <tunneSelect+0x74>)
 8001ce8:	2224      	movs	r2, #36	; 0x24
 8001cea:	701a      	strb	r2, [r3, #0]
			flag = 1;
 8001cec:	2301      	movs	r3, #1
 8001cee:	71fb      	strb	r3, [r7, #7]
			break;
 8001cf0:	e00f      	b.n	8001d12 <tunneSelect+0x56>
		case _LEFT:
			firstDoTunning--;
 8001cf2:	4b0f      	ldr	r3, [pc, #60]	; (8001d30 <tunneSelect+0x74>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <tunneSelect+0x74>)
 8001cfc:	701a      	strb	r2, [r3, #0]
			if (firstDoTunning < MIDI_C2)
 8001cfe:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <tunneSelect+0x74>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	2b23      	cmp	r3, #35	; 0x23
 8001d04:	d802      	bhi.n	8001d0c <tunneSelect+0x50>
				firstDoTunning = MIDI_B2;
 8001d06:	4b0a      	ldr	r3, [pc, #40]	; (8001d30 <tunneSelect+0x74>)
 8001d08:	222f      	movs	r2, #47	; 0x2f
 8001d0a:	701a      	strb	r2, [r3, #0]
			flag = 1;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	71fb      	strb	r3, [r7, #7]
			break;
 8001d10:	bf00      	nop
	}

	if (flag){
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d002      	beq.n	8001d1e <tunneSelect+0x62>
		screenNum = TUNNE_SCREEN;
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <tunneSelect+0x78>)
 8001d1a:	2205      	movs	r2, #5
 8001d1c:	701a      	strb	r2, [r3, #0]
	}
}
 8001d1e:	bf00      	nop
 8001d20:	370c      	adds	r7, #12
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	20000770 	.word	0x20000770
 8001d30:	200003e0 	.word	0x200003e0
 8001d34:	200003af 	.word	0x200003af

08001d38 <sendChord>:


void sendChord(unsigned long bnotes, int velocity, int channel){
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b086      	sub	sp, #24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]

  uint8_t note1;
  uint8_t note2;
  uint8_t note3;

  note1 = (bnotes & 0x7f);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d4c:	75fb      	strb	r3, [r7, #23]
  note2 = (bnotes >> 8) & 0x7f;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	0a1b      	lsrs	r3, r3, #8
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d58:	75bb      	strb	r3, [r7, #22]
  note3 = (bnotes >> 16) & 0x7f;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	0c1b      	lsrs	r3, r3, #16
 8001d5e:	b2db      	uxtb	r3, r3
 8001d60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d64:	757b      	strb	r3, [r7, #21]

  midi_msg[0] = 0x09;	//0x09 == type event (noteOn).
 8001d66:	4b1e      	ldr	r3, [pc, #120]	; (8001de0 <sendChord+0xa8>)
 8001d68:	2209      	movs	r2, #9
 8001d6a:	701a      	strb	r2, [r3, #0]
  midi_msg[1] = 0x90 | 1;
 8001d6c:	4b1c      	ldr	r3, [pc, #112]	; (8001de0 <sendChord+0xa8>)
 8001d6e:	2291      	movs	r2, #145	; 0x91
 8001d70:	705a      	strb	r2, [r3, #1]
  midi_msg[2] = note1;
 8001d72:	4a1b      	ldr	r2, [pc, #108]	; (8001de0 <sendChord+0xa8>)
 8001d74:	7dfb      	ldrb	r3, [r7, #23]
 8001d76:	7093      	strb	r3, [r2, #2]
  midi_msg[3] = velocity;
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	b2da      	uxtb	r2, r3
 8001d7c:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <sendChord+0xa8>)
 8001d7e:	70da      	strb	r2, [r3, #3]
  MIDI_SendBuffer(midi_msg, 4);
 8001d80:	2104      	movs	r1, #4
 8001d82:	4817      	ldr	r0, [pc, #92]	; (8001de0 <sendChord+0xa8>)
 8001d84:	f009 fbb4 	bl	800b4f0 <MIDI_SendBuffer>

  if (note2 && note3){
 8001d88:	7dbb      	ldrb	r3, [r7, #22]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d024      	beq.n	8001dd8 <sendChord+0xa0>
 8001d8e:	7d7b      	ldrb	r3, [r7, #21]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d021      	beq.n	8001dd8 <sendChord+0xa0>

	  midi_msg[0] = 0x09;	//0x09 == type event (noteOn).
 8001d94:	4b12      	ldr	r3, [pc, #72]	; (8001de0 <sendChord+0xa8>)
 8001d96:	2209      	movs	r2, #9
 8001d98:	701a      	strb	r2, [r3, #0]
	  midi_msg[1] = 0x90 | 1;
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <sendChord+0xa8>)
 8001d9c:	2291      	movs	r2, #145	; 0x91
 8001d9e:	705a      	strb	r2, [r3, #1]
	  midi_msg[2] = note2;
 8001da0:	4a0f      	ldr	r2, [pc, #60]	; (8001de0 <sendChord+0xa8>)
 8001da2:	7dbb      	ldrb	r3, [r7, #22]
 8001da4:	7093      	strb	r3, [r2, #2]
	  midi_msg[3] = velocity;
 8001da6:	68bb      	ldr	r3, [r7, #8]
 8001da8:	b2da      	uxtb	r2, r3
 8001daa:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <sendChord+0xa8>)
 8001dac:	70da      	strb	r2, [r3, #3]
	  MIDI_SendBuffer(midi_msg, 4);
 8001dae:	2104      	movs	r1, #4
 8001db0:	480b      	ldr	r0, [pc, #44]	; (8001de0 <sendChord+0xa8>)
 8001db2:	f009 fb9d 	bl	800b4f0 <MIDI_SendBuffer>

	  midi_msg[0] = 0x09;	//0x09 == type event (noteOn).
 8001db6:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <sendChord+0xa8>)
 8001db8:	2209      	movs	r2, #9
 8001dba:	701a      	strb	r2, [r3, #0]
	  midi_msg[1] = 0x90 | 1;
 8001dbc:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <sendChord+0xa8>)
 8001dbe:	2291      	movs	r2, #145	; 0x91
 8001dc0:	705a      	strb	r2, [r3, #1]
	  midi_msg[2] = note3;
 8001dc2:	4a07      	ldr	r2, [pc, #28]	; (8001de0 <sendChord+0xa8>)
 8001dc4:	7d7b      	ldrb	r3, [r7, #21]
 8001dc6:	7093      	strb	r3, [r2, #2]
	  midi_msg[3] = velocity;
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	b2da      	uxtb	r2, r3
 8001dcc:	4b04      	ldr	r3, [pc, #16]	; (8001de0 <sendChord+0xa8>)
 8001dce:	70da      	strb	r2, [r3, #3]
	  MIDI_SendBuffer(midi_msg, 4);
 8001dd0:	2104      	movs	r1, #4
 8001dd2:	4803      	ldr	r0, [pc, #12]	; (8001de0 <sendChord+0xa8>)
 8001dd4:	f009 fb8c 	bl	800b4f0 <MIDI_SendBuffer>
  }
}
 8001dd8:	bf00      	nop
 8001dda:	3718      	adds	r7, #24
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	20000794 	.word	0x20000794

08001de4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3){ // dac
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a0a      	ldr	r2, [pc, #40]	; (8001e1c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d103      	bne.n	8001dfe <HAL_TIM_PeriodElapsedCallback+0x1a>
		flag_dac = 1;
 8001df6:	4b0a      	ldr	r3, [pc, #40]	; (8001e20 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8001df8:	2201      	movs	r2, #1
 8001dfa:	701a      	strb	r2, [r3, #0]
	}else if (htim->Instance == TIM2){ //tick
		flag_tick = 1;
	}

}
 8001dfc:	e007      	b.n	8001e0e <HAL_TIM_PeriodElapsedCallback+0x2a>
	}else if (htim->Instance == TIM2){ //tick
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e06:	d102      	bne.n	8001e0e <HAL_TIM_PeriodElapsedCallback+0x2a>
		flag_tick = 1;
 8001e08:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	701a      	strb	r2, [r3, #0]
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40000400 	.word	0x40000400
 8001e20:	200003b7 	.word	0x200003b7
 8001e24:	200003b6 	.word	0x200003b6

08001e28 <HAL_I2C_MasterTxCpltCallback>:


void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
	_lcd_ISR();
 8001e30:	f7ff f972 	bl	8001118 <_lcd_ISR>
}
 8001e34:	bf00      	nop
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001e40:	bf00      	nop
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
	...

08001e4c <osc_dac_init>:
uint8_t ratio_sen = 100;
uint8_t ratio_cuad = 100;
uint8_t ratio_ramp = 100;


void osc_dac_init(DAC_HandleTypeDef *p_hdac, uint32_t ch){
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
	handler_dac = p_hdac;
 8001e56:	4a09      	ldr	r2, [pc, #36]	; (8001e7c <osc_dac_init+0x30>)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6013      	str	r3, [r2, #0]
	dac_ch = ch;
 8001e5c:	4a08      	ldr	r2, [pc, #32]	; (8001e80 <osc_dac_init+0x34>)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	6013      	str	r3, [r2, #0]

	HAL_DAC_Start(handler_dac, dac_ch);
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <osc_dac_init+0x30>)
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <osc_dac_init+0x34>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4610      	mov	r0, r2
 8001e6e:	f000 ffbc 	bl	8002dea <HAL_DAC_Start>
}
 8001e72:	bf00      	nop
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	2000079c 	.word	0x2000079c
 8001e80:	20000798 	.word	0x20000798

08001e84 <osc_dac_update>:

//must be handled with a 44100 Hz timer.
void osc_dac_update(void){
 8001e84:	b580      	push	{r7, lr}
 8001e86:	af00      	add	r7, sp, #0

	if (nota_activa!=-1){
 8001e88:	4b37      	ldr	r3, [pc, #220]	; (8001f68 <osc_dac_update+0xe4>)
 8001e8a:	f993 3000 	ldrsb.w	r3, [r3]
 8001e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e92:	d057      	beq.n	8001f44 <osc_dac_update+0xc0>
		phase+= nota_incrFase[nota_activa];
 8001e94:	4b34      	ldr	r3, [pc, #208]	; (8001f68 <osc_dac_update+0xe4>)
 8001e96:	f993 3000 	ldrsb.w	r3, [r3]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	4b33      	ldr	r3, [pc, #204]	; (8001f6c <osc_dac_update+0xe8>)
 8001e9e:	5c9b      	ldrb	r3, [r3, r2]
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	4b33      	ldr	r3, [pc, #204]	; (8001f70 <osc_dac_update+0xec>)
 8001ea4:	881b      	ldrh	r3, [r3, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	b29a      	uxth	r2, r3
 8001eaa:	4b31      	ldr	r3, [pc, #196]	; (8001f70 <osc_dac_update+0xec>)
 8001eac:	801a      	strh	r2, [r3, #0]
		if (phase>OSC_LAST) phase -= OSC_LAST;
 8001eae:	4b30      	ldr	r3, [pc, #192]	; (8001f70 <osc_dac_update+0xec>)
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	f244 520a 	movw	r2, #17674	; 0x450a
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d907      	bls.n	8001eca <osc_dac_update+0x46>
 8001eba:	4b2d      	ldr	r3, [pc, #180]	; (8001f70 <osc_dac_update+0xec>)
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	f5a3 438a 	sub.w	r3, r3, #17664	; 0x4500
 8001ec2:	3b0a      	subs	r3, #10
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	4b2a      	ldr	r3, [pc, #168]	; (8001f70 <osc_dac_update+0xec>)
 8001ec8:	801a      	strh	r2, [r3, #0]
		dac_out = ratio_sen/100*tabla_seno[phase] + ratio_cuad/100*tabla_cuadrada[phase] + ratio_ramp/100*tabla_sierra[phase];
 8001eca:	4b2a      	ldr	r3, [pc, #168]	; (8001f74 <osc_dac_update+0xf0>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	4a2a      	ldr	r2, [pc, #168]	; (8001f78 <osc_dac_update+0xf4>)
 8001ed0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ed4:	095b      	lsrs	r3, r3, #5
 8001ed6:	b2db      	uxtb	r3, r3
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	4b25      	ldr	r3, [pc, #148]	; (8001f70 <osc_dac_update+0xec>)
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	4619      	mov	r1, r3
 8001ee0:	4b26      	ldr	r3, [pc, #152]	; (8001f7c <osc_dac_update+0xf8>)
 8001ee2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001ee6:	b29b      	uxth	r3, r3
 8001ee8:	fb12 f303 	smulbb	r3, r2, r3
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	4b24      	ldr	r3, [pc, #144]	; (8001f80 <osc_dac_update+0xfc>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	4921      	ldr	r1, [pc, #132]	; (8001f78 <osc_dac_update+0xf4>)
 8001ef4:	fba1 1303 	umull	r1, r3, r1, r3
 8001ef8:	095b      	lsrs	r3, r3, #5
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	b299      	uxth	r1, r3
 8001efe:	4b1c      	ldr	r3, [pc, #112]	; (8001f70 <osc_dac_update+0xec>)
 8001f00:	881b      	ldrh	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	4b1f      	ldr	r3, [pc, #124]	; (8001f84 <osc_dac_update+0x100>)
 8001f06:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	fb11 f303 	smulbb	r3, r1, r3
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	4413      	add	r3, r2
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <osc_dac_update+0x104>)
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	4917      	ldr	r1, [pc, #92]	; (8001f78 <osc_dac_update+0xf4>)
 8001f1c:	fba1 1303 	umull	r1, r3, r1, r3
 8001f20:	095b      	lsrs	r3, r3, #5
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	b299      	uxth	r1, r3
 8001f26:	4b12      	ldr	r3, [pc, #72]	; (8001f70 <osc_dac_update+0xec>)
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	4b17      	ldr	r3, [pc, #92]	; (8001f8c <osc_dac_update+0x108>)
 8001f2e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	fb11 f303 	smulbb	r3, r1, r3
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	b29a      	uxth	r2, r3
 8001f3e:	4b14      	ldr	r3, [pc, #80]	; (8001f90 <osc_dac_update+0x10c>)
 8001f40:	801a      	strh	r2, [r3, #0]
 8001f42:	e005      	b.n	8001f50 <osc_dac_update+0xcc>
		//HAL_DAC_SetValue(handler_dac, dac_ch, DAC_ALIGN_12B_R, dac_out);
	}else{
		phase = 0;
 8001f44:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <osc_dac_update+0xec>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	801a      	strh	r2, [r3, #0]
		dac_out = 0;
 8001f4a:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <osc_dac_update+0x10c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	801a      	strh	r2, [r3, #0]
	}

	HAL_DAC_SetValue(handler_dac, dac_ch, DAC_ALIGN_12B_R, dac_out);
 8001f50:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <osc_dac_update+0x110>)
 8001f52:	6818      	ldr	r0, [r3, #0]
 8001f54:	4b10      	ldr	r3, [pc, #64]	; (8001f98 <osc_dac_update+0x114>)
 8001f56:	6819      	ldr	r1, [r3, #0]
 8001f58:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <osc_dac_update+0x10c>)
 8001f5a:	881b      	ldrh	r3, [r3, #0]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	f000 fff7 	bl	8002f50 <HAL_DAC_SetValue>

//	flag_dac = 0;
}
 8001f62:	bf00      	nop
 8001f64:	bd80      	pop	{r7, pc}
 8001f66:	bf00      	nop
 8001f68:	200000cb 	.word	0x200000cb
 8001f6c:	0803fc7c 	.word	0x0803fc7c
 8001f70:	200003b8 	.word	0x200003b8
 8001f74:	200000cc 	.word	0x200000cc
 8001f78:	51eb851f 	.word	0x51eb851f
 8001f7c:	0800bff8 	.word	0x0800bff8
 8001f80:	200000cd 	.word	0x200000cd
 8001f84:	0801d424 	.word	0x0801d424
 8001f88:	200000ce 	.word	0x200000ce
 8001f8c:	0802e850 	.word	0x0802e850
 8001f90:	200003ba 	.word	0x200003ba
 8001f94:	2000079c 	.word	0x2000079c
 8001f98:	20000798 	.word	0x20000798

08001f9c <osc_setNote>:


int8_t osc_setNote (uint8_t nn){
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	71fb      	strb	r3, [r7, #7]

	if (!nn){
 8001fa6:	79fb      	ldrb	r3, [r7, #7]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d104      	bne.n	8001fb6 <osc_setNote+0x1a>
		nota_activa = -1;
 8001fac:	4b0d      	ldr	r3, [pc, #52]	; (8001fe4 <osc_setNote+0x48>)
 8001fae:	22ff      	movs	r2, #255	; 0xff
 8001fb0:	701a      	strb	r2, [r3, #0]
		return 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	e00f      	b.n	8001fd6 <osc_setNote+0x3a>
	}

	if(nn<24 || nn>60){
 8001fb6:	79fb      	ldrb	r3, [r7, #7]
 8001fb8:	2b17      	cmp	r3, #23
 8001fba:	d902      	bls.n	8001fc2 <osc_setNote+0x26>
 8001fbc:	79fb      	ldrb	r3, [r7, #7]
 8001fbe:	2b3c      	cmp	r3, #60	; 0x3c
 8001fc0:	d902      	bls.n	8001fc8 <osc_setNote+0x2c>
		return -1;
 8001fc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fc6:	e006      	b.n	8001fd6 <osc_setNote+0x3a>
	}

	nota_activa = nn - NOTA_C1;
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	3b18      	subs	r3, #24
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	b25a      	sxtb	r2, r3
 8001fd0:	4b04      	ldr	r3, [pc, #16]	; (8001fe4 <osc_setNote+0x48>)
 8001fd2:	701a      	strb	r2, [r3, #0]
	return 0;
 8001fd4:	2300      	movs	r3, #0
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	370c      	adds	r7, #12
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr
 8001fe2:	bf00      	nop
 8001fe4:	200000cb 	.word	0x200000cb

08001fe8 <osc_setRatios>:

int8_t osc_setRatios(uint8_t rsen, uint8_t rcuad, uint8_t rsier){
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	4603      	mov	r3, r0
 8001ff0:	71fb      	strb	r3, [r7, #7]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	71bb      	strb	r3, [r7, #6]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	717b      	strb	r3, [r7, #5]

	if (rsen > 100 || rcuad > 100 || rsier > 100){
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	2b64      	cmp	r3, #100	; 0x64
 8001ffe:	d805      	bhi.n	800200c <osc_setRatios+0x24>
 8002000:	79bb      	ldrb	r3, [r7, #6]
 8002002:	2b64      	cmp	r3, #100	; 0x64
 8002004:	d802      	bhi.n	800200c <osc_setRatios+0x24>
 8002006:	797b      	ldrb	r3, [r7, #5]
 8002008:	2b64      	cmp	r3, #100	; 0x64
 800200a:	d902      	bls.n	8002012 <osc_setRatios+0x2a>
		return -1;
 800200c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002010:	e009      	b.n	8002026 <osc_setRatios+0x3e>
	}

	ratio_sen = rsen; ratio_cuad = rcuad; ratio_ramp = rsier;
 8002012:	4a08      	ldr	r2, [pc, #32]	; (8002034 <osc_setRatios+0x4c>)
 8002014:	79fb      	ldrb	r3, [r7, #7]
 8002016:	7013      	strb	r3, [r2, #0]
 8002018:	4a07      	ldr	r2, [pc, #28]	; (8002038 <osc_setRatios+0x50>)
 800201a:	79bb      	ldrb	r3, [r7, #6]
 800201c:	7013      	strb	r3, [r2, #0]
 800201e:	4a07      	ldr	r2, [pc, #28]	; (800203c <osc_setRatios+0x54>)
 8002020:	797b      	ldrb	r3, [r7, #5]
 8002022:	7013      	strb	r3, [r2, #0]
	return 0;
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	200000cc 	.word	0x200000cc
 8002038:	200000cd 	.word	0x200000cd
 800203c:	200000ce 	.word	0x200000ce

08002040 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	607b      	str	r3, [r7, #4]
 800204a:	4b10      	ldr	r3, [pc, #64]	; (800208c <HAL_MspInit+0x4c>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	4a0f      	ldr	r2, [pc, #60]	; (800208c <HAL_MspInit+0x4c>)
 8002050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002054:	6453      	str	r3, [r2, #68]	; 0x44
 8002056:	4b0d      	ldr	r3, [pc, #52]	; (800208c <HAL_MspInit+0x4c>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800205e:	607b      	str	r3, [r7, #4]
 8002060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	603b      	str	r3, [r7, #0]
 8002066:	4b09      	ldr	r3, [pc, #36]	; (800208c <HAL_MspInit+0x4c>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	4a08      	ldr	r2, [pc, #32]	; (800208c <HAL_MspInit+0x4c>)
 800206c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002070:	6413      	str	r3, [r2, #64]	; 0x40
 8002072:	4b06      	ldr	r3, [pc, #24]	; (800208c <HAL_MspInit+0x4c>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207a:	603b      	str	r3, [r7, #0]
 800207c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800207e:	2007      	movs	r0, #7
 8002080:	f000 fe50 	bl	8002d24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002084:	bf00      	nop
 8002086:	3708      	adds	r7, #8
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40023800 	.word	0x40023800

08002090 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr

0800209e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800209e:	b480      	push	{r7}
 80020a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020a2:	e7fe      	b.n	80020a2 <HardFault_Handler+0x4>

080020a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020a8:	e7fe      	b.n	80020a8 <MemManage_Handler+0x4>

080020aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020aa:	b480      	push	{r7}
 80020ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020ae:	e7fe      	b.n	80020ae <BusFault_Handler+0x4>

080020b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020b0:	b480      	push	{r7}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020b4:	e7fe      	b.n	80020b4 <UsageFault_Handler+0x4>

080020b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020b6:	b480      	push	{r7}
 80020b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020ba:	bf00      	nop
 80020bc:	46bd      	mov	sp, r7
 80020be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c2:	4770      	bx	lr

080020c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80020d2:	b480      	push	{r7}
 80020d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80020d6:	bf00      	nop
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020e4:	f000 faaa 	bl	800263c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	bd80      	pop	{r7, pc}

080020ec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80020f0:	4802      	ldr	r0, [pc, #8]	; (80020fc <TIM2_IRQHandler+0x10>)
 80020f2:	f005 f86e 	bl	80071d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80020f6:	bf00      	nop
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	200007e0 	.word	0x200007e0

08002100 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002104:	4802      	ldr	r0, [pc, #8]	; (8002110 <TIM3_IRQHandler+0x10>)
 8002106:	f005 f864 	bl	80071d2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800210a:	bf00      	nop
 800210c:	bd80      	pop	{r7, pc}
 800210e:	bf00      	nop
 8002110:	200007a0 	.word	0x200007a0

08002114 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002118:	4802      	ldr	r0, [pc, #8]	; (8002124 <I2C1_EV_IRQHandler+0x10>)
 800211a:	f001 fc17 	bl	800394c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800211e:	bf00      	nop
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	2000044c 	.word	0x2000044c

08002128 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800212c:	4802      	ldr	r0, [pc, #8]	; (8002138 <I2C1_ER_IRQHandler+0x10>)
 800212e:	f001 fd73 	bl	8003c18 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002132:	bf00      	nop
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	2000044c 	.word	0x2000044c

0800213c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002140:	4802      	ldr	r0, [pc, #8]	; (800214c <OTG_FS_IRQHandler+0x10>)
 8002142:	f003 fb62 	bl	800580a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002146:	bf00      	nop
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000eb4 	.word	0x20000eb4

08002150 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b086      	sub	sp, #24
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002158:	4a14      	ldr	r2, [pc, #80]	; (80021ac <_sbrk+0x5c>)
 800215a:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <_sbrk+0x60>)
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002164:	4b13      	ldr	r3, [pc, #76]	; (80021b4 <_sbrk+0x64>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d102      	bne.n	8002172 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800216c:	4b11      	ldr	r3, [pc, #68]	; (80021b4 <_sbrk+0x64>)
 800216e:	4a12      	ldr	r2, [pc, #72]	; (80021b8 <_sbrk+0x68>)
 8002170:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002172:	4b10      	ldr	r3, [pc, #64]	; (80021b4 <_sbrk+0x64>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4413      	add	r3, r2
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	429a      	cmp	r2, r3
 800217e:	d207      	bcs.n	8002190 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002180:	f009 fcfe 	bl	800bb80 <__errno>
 8002184:	4602      	mov	r2, r0
 8002186:	230c      	movs	r3, #12
 8002188:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800218a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800218e:	e009      	b.n	80021a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002190:	4b08      	ldr	r3, [pc, #32]	; (80021b4 <_sbrk+0x64>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002196:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <_sbrk+0x64>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4413      	add	r3, r2
 800219e:	4a05      	ldr	r2, [pc, #20]	; (80021b4 <_sbrk+0x64>)
 80021a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021a2:	68fb      	ldr	r3, [r7, #12]
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3718      	adds	r7, #24
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20020000 	.word	0x20020000
 80021b0:	00000400 	.word	0x00000400
 80021b4:	200003bc 	.word	0x200003bc
 80021b8:	200012c0 	.word	0x200012c0

080021bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021c0:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <SystemInit+0x28>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c6:	4a07      	ldr	r2, [pc, #28]	; (80021e4 <SystemInit+0x28>)
 80021c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80021cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80021d0:	4b04      	ldr	r3, [pc, #16]	; (80021e4 <SystemInit+0x28>)
 80021d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021d6:	609a      	str	r2, [r3, #8]
#endif
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ee:	f107 0308 	add.w	r3, r7, #8
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
 80021f6:	605a      	str	r2, [r3, #4]
 80021f8:	609a      	str	r2, [r3, #8]
 80021fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021fc:	463b      	mov	r3, r7
 80021fe:	2200      	movs	r2, #0
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8002204:	4b1d      	ldr	r3, [pc, #116]	; (800227c <MX_TIM2_Init+0x94>)
 8002206:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800220a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 800220c:	4b1b      	ldr	r3, [pc, #108]	; (800227c <MX_TIM2_Init+0x94>)
 800220e:	2263      	movs	r2, #99	; 0x63
 8002210:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002212:	4b1a      	ldr	r3, [pc, #104]	; (800227c <MX_TIM2_Init+0x94>)
 8002214:	2200      	movs	r2, #0
 8002216:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 840-1;
 8002218:	4b18      	ldr	r3, [pc, #96]	; (800227c <MX_TIM2_Init+0x94>)
 800221a:	f240 3247 	movw	r2, #839	; 0x347
 800221e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002220:	4b16      	ldr	r3, [pc, #88]	; (800227c <MX_TIM2_Init+0x94>)
 8002222:	2200      	movs	r2, #0
 8002224:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002226:	4b15      	ldr	r3, [pc, #84]	; (800227c <MX_TIM2_Init+0x94>)
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800222c:	4813      	ldr	r0, [pc, #76]	; (800227c <MX_TIM2_Init+0x94>)
 800222e:	f004 ff81 	bl	8007134 <HAL_TIM_Base_Init>
 8002232:	4603      	mov	r3, r0
 8002234:	2b00      	cmp	r3, #0
 8002236:	d001      	beq.n	800223c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002238:	f7ff fe00 	bl	8001e3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800223c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002240:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002242:	f107 0308 	add.w	r3, r7, #8
 8002246:	4619      	mov	r1, r3
 8002248:	480c      	ldr	r0, [pc, #48]	; (800227c <MX_TIM2_Init+0x94>)
 800224a:	f005 f8ca 	bl	80073e2 <HAL_TIM_ConfigClockSource>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d001      	beq.n	8002258 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002254:	f7ff fdf2 	bl	8001e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002258:	2300      	movs	r3, #0
 800225a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800225c:	2300      	movs	r3, #0
 800225e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002260:	463b      	mov	r3, r7
 8002262:	4619      	mov	r1, r3
 8002264:	4805      	ldr	r0, [pc, #20]	; (800227c <MX_TIM2_Init+0x94>)
 8002266:	f005 fad5 	bl	8007814 <HAL_TIMEx_MasterConfigSynchronization>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002270:	f7ff fde4 	bl	8001e3c <Error_Handler>
  }

}
 8002274:	bf00      	nop
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	200007e0 	.word	0x200007e0

08002280 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002286:	f107 0308 	add.w	r3, r7, #8
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	609a      	str	r2, [r3, #8]
 8002292:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002294:	463b      	mov	r3, r7
 8002296:	2200      	movs	r2, #0
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	605a      	str	r2, [r3, #4]

  htim3.Instance = TIM3;
 800229c:	4b1c      	ldr	r3, [pc, #112]	; (8002310 <MX_TIM3_Init+0x90>)
 800229e:	4a1d      	ldr	r2, [pc, #116]	; (8002314 <MX_TIM3_Init+0x94>)
 80022a0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 119-1;
 80022a2:	4b1b      	ldr	r3, [pc, #108]	; (8002310 <MX_TIM3_Init+0x90>)
 80022a4:	2276      	movs	r2, #118	; 0x76
 80022a6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022a8:	4b19      	ldr	r3, [pc, #100]	; (8002310 <MX_TIM3_Init+0x90>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16-1;
 80022ae:	4b18      	ldr	r3, [pc, #96]	; (8002310 <MX_TIM3_Init+0x90>)
 80022b0:	220f      	movs	r2, #15
 80022b2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022b4:	4b16      	ldr	r3, [pc, #88]	; (8002310 <MX_TIM3_Init+0x90>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ba:	4b15      	ldr	r3, [pc, #84]	; (8002310 <MX_TIM3_Init+0x90>)
 80022bc:	2200      	movs	r2, #0
 80022be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80022c0:	4813      	ldr	r0, [pc, #76]	; (8002310 <MX_TIM3_Init+0x90>)
 80022c2:	f004 ff37 	bl	8007134 <HAL_TIM_Base_Init>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80022cc:	f7ff fdb6 	bl	8001e3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022d4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80022d6:	f107 0308 	add.w	r3, r7, #8
 80022da:	4619      	mov	r1, r3
 80022dc:	480c      	ldr	r0, [pc, #48]	; (8002310 <MX_TIM3_Init+0x90>)
 80022de:	f005 f880 	bl	80073e2 <HAL_TIM_ConfigClockSource>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80022e8:	f7ff fda8 	bl	8001e3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022ec:	2300      	movs	r3, #0
 80022ee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022f0:	2300      	movs	r3, #0
 80022f2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80022f4:	463b      	mov	r3, r7
 80022f6:	4619      	mov	r1, r3
 80022f8:	4805      	ldr	r0, [pc, #20]	; (8002310 <MX_TIM3_Init+0x90>)
 80022fa:	f005 fa8b 	bl	8007814 <HAL_TIMEx_MasterConfigSynchronization>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8002304:	f7ff fd9a 	bl	8001e3c <Error_Handler>
  }

}
 8002308:	bf00      	nop
 800230a:	3718      	adds	r7, #24
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	200007a0 	.word	0x200007a0
 8002314:	40000400 	.word	0x40000400

08002318 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002328:	d116      	bne.n	8002358 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800232a:	2300      	movs	r3, #0
 800232c:	60fb      	str	r3, [r7, #12]
 800232e:	4b1a      	ldr	r3, [pc, #104]	; (8002398 <HAL_TIM_Base_MspInit+0x80>)
 8002330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002332:	4a19      	ldr	r2, [pc, #100]	; (8002398 <HAL_TIM_Base_MspInit+0x80>)
 8002334:	f043 0301 	orr.w	r3, r3, #1
 8002338:	6413      	str	r3, [r2, #64]	; 0x40
 800233a:	4b17      	ldr	r3, [pc, #92]	; (8002398 <HAL_TIM_Base_MspInit+0x80>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	60fb      	str	r3, [r7, #12]
 8002344:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002346:	2200      	movs	r2, #0
 8002348:	2100      	movs	r1, #0
 800234a:	201c      	movs	r0, #28
 800234c:	f000 fcf5 	bl	8002d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002350:	201c      	movs	r0, #28
 8002352:	f000 fd0e 	bl	8002d72 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002356:	e01a      	b.n	800238e <HAL_TIM_Base_MspInit+0x76>
  else if(tim_baseHandle->Instance==TIM3)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a0f      	ldr	r2, [pc, #60]	; (800239c <HAL_TIM_Base_MspInit+0x84>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d115      	bne.n	800238e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	60bb      	str	r3, [r7, #8]
 8002366:	4b0c      	ldr	r3, [pc, #48]	; (8002398 <HAL_TIM_Base_MspInit+0x80>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236a:	4a0b      	ldr	r2, [pc, #44]	; (8002398 <HAL_TIM_Base_MspInit+0x80>)
 800236c:	f043 0302 	orr.w	r3, r3, #2
 8002370:	6413      	str	r3, [r2, #64]	; 0x40
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <HAL_TIM_Base_MspInit+0x80>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	60bb      	str	r3, [r7, #8]
 800237c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800237e:	2200      	movs	r2, #0
 8002380:	2100      	movs	r1, #0
 8002382:	201d      	movs	r0, #29
 8002384:	f000 fcd9 	bl	8002d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002388:	201d      	movs	r0, #29
 800238a:	f000 fcf2 	bl	8002d72 <HAL_NVIC_EnableIRQ>
}
 800238e:	bf00      	nop
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	40023800 	.word	0x40023800
 800239c:	40000400 	.word	0x40000400

080023a0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart6;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0

  huart3.Instance = USART3;
 80023a4:	4b11      	ldr	r3, [pc, #68]	; (80023ec <MX_USART3_UART_Init+0x4c>)
 80023a6:	4a12      	ldr	r2, [pc, #72]	; (80023f0 <MX_USART3_UART_Init+0x50>)
 80023a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80023aa:	4b10      	ldr	r3, [pc, #64]	; (80023ec <MX_USART3_UART_Init+0x4c>)
 80023ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80023b2:	4b0e      	ldr	r3, [pc, #56]	; (80023ec <MX_USART3_UART_Init+0x4c>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80023b8:	4b0c      	ldr	r3, [pc, #48]	; (80023ec <MX_USART3_UART_Init+0x4c>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80023be:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <MX_USART3_UART_Init+0x4c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80023c4:	4b09      	ldr	r3, [pc, #36]	; (80023ec <MX_USART3_UART_Init+0x4c>)
 80023c6:	220c      	movs	r2, #12
 80023c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ca:	4b08      	ldr	r3, [pc, #32]	; (80023ec <MX_USART3_UART_Init+0x4c>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80023d0:	4b06      	ldr	r3, [pc, #24]	; (80023ec <MX_USART3_UART_Init+0x4c>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80023d6:	4805      	ldr	r0, [pc, #20]	; (80023ec <MX_USART3_UART_Init+0x4c>)
 80023d8:	f005 faac 	bl	8007934 <HAL_UART_Init>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80023e2:	f7ff fd2b 	bl	8001e3c <Error_Handler>
  }

}
 80023e6:	bf00      	nop
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	20000820 	.word	0x20000820
 80023f0:	40004800 	.word	0x40004800

080023f4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0

  huart6.Instance = USART6;
 80023f8:	4b11      	ldr	r3, [pc, #68]	; (8002440 <MX_USART6_UART_Init+0x4c>)
 80023fa:	4a12      	ldr	r2, [pc, #72]	; (8002444 <MX_USART6_UART_Init+0x50>)
 80023fc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <MX_USART6_UART_Init+0x4c>)
 8002400:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002404:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002406:	4b0e      	ldr	r3, [pc, #56]	; (8002440 <MX_USART6_UART_Init+0x4c>)
 8002408:	2200      	movs	r2, #0
 800240a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800240c:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <MX_USART6_UART_Init+0x4c>)
 800240e:	2200      	movs	r2, #0
 8002410:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002412:	4b0b      	ldr	r3, [pc, #44]	; (8002440 <MX_USART6_UART_Init+0x4c>)
 8002414:	2200      	movs	r2, #0
 8002416:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <MX_USART6_UART_Init+0x4c>)
 800241a:	220c      	movs	r2, #12
 800241c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800241e:	4b08      	ldr	r3, [pc, #32]	; (8002440 <MX_USART6_UART_Init+0x4c>)
 8002420:	2200      	movs	r2, #0
 8002422:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002424:	4b06      	ldr	r3, [pc, #24]	; (8002440 <MX_USART6_UART_Init+0x4c>)
 8002426:	2200      	movs	r2, #0
 8002428:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800242a:	4805      	ldr	r0, [pc, #20]	; (8002440 <MX_USART6_UART_Init+0x4c>)
 800242c:	f005 fa82 	bl	8007934 <HAL_UART_Init>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d001      	beq.n	800243a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8002436:	f7ff fd01 	bl	8001e3c <Error_Handler>
  }

}
 800243a:	bf00      	nop
 800243c:	bd80      	pop	{r7, pc}
 800243e:	bf00      	nop
 8002440:	20000860 	.word	0x20000860
 8002444:	40011400 	.word	0x40011400

08002448 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b08c      	sub	sp, #48	; 0x30
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002450:	f107 031c 	add.w	r3, r7, #28
 8002454:	2200      	movs	r2, #0
 8002456:	601a      	str	r2, [r3, #0]
 8002458:	605a      	str	r2, [r3, #4]
 800245a:	609a      	str	r2, [r3, #8]
 800245c:	60da      	str	r2, [r3, #12]
 800245e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a32      	ldr	r2, [pc, #200]	; (8002530 <HAL_UART_MspInit+0xe8>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d12d      	bne.n	80024c6 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800246a:	2300      	movs	r3, #0
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	4b31      	ldr	r3, [pc, #196]	; (8002534 <HAL_UART_MspInit+0xec>)
 8002470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002472:	4a30      	ldr	r2, [pc, #192]	; (8002534 <HAL_UART_MspInit+0xec>)
 8002474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002478:	6413      	str	r3, [r2, #64]	; 0x40
 800247a:	4b2e      	ldr	r3, [pc, #184]	; (8002534 <HAL_UART_MspInit+0xec>)
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002482:	61bb      	str	r3, [r7, #24]
 8002484:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002486:	2300      	movs	r3, #0
 8002488:	617b      	str	r3, [r7, #20]
 800248a:	4b2a      	ldr	r3, [pc, #168]	; (8002534 <HAL_UART_MspInit+0xec>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248e:	4a29      	ldr	r2, [pc, #164]	; (8002534 <HAL_UART_MspInit+0xec>)
 8002490:	f043 0302 	orr.w	r3, r3, #2
 8002494:	6313      	str	r3, [r2, #48]	; 0x30
 8002496:	4b27      	ldr	r3, [pc, #156]	; (8002534 <HAL_UART_MspInit+0xec>)
 8002498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	617b      	str	r3, [r7, #20]
 80024a0:	697b      	ldr	r3, [r7, #20]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024a2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80024a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a8:	2302      	movs	r3, #2
 80024aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ac:	2300      	movs	r3, #0
 80024ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024b0:	2303      	movs	r3, #3
 80024b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80024b4:	2307      	movs	r3, #7
 80024b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b8:	f107 031c 	add.w	r3, r7, #28
 80024bc:	4619      	mov	r1, r3
 80024be:	481e      	ldr	r0, [pc, #120]	; (8002538 <HAL_UART_MspInit+0xf0>)
 80024c0:	f000 fd9c 	bl	8002ffc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80024c4:	e030      	b.n	8002528 <HAL_UART_MspInit+0xe0>
  else if(uartHandle->Instance==USART6)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a1c      	ldr	r2, [pc, #112]	; (800253c <HAL_UART_MspInit+0xf4>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d12b      	bne.n	8002528 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART6_CLK_ENABLE();
 80024d0:	2300      	movs	r3, #0
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	4b17      	ldr	r3, [pc, #92]	; (8002534 <HAL_UART_MspInit+0xec>)
 80024d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d8:	4a16      	ldr	r2, [pc, #88]	; (8002534 <HAL_UART_MspInit+0xec>)
 80024da:	f043 0320 	orr.w	r3, r3, #32
 80024de:	6453      	str	r3, [r2, #68]	; 0x44
 80024e0:	4b14      	ldr	r3, [pc, #80]	; (8002534 <HAL_UART_MspInit+0xec>)
 80024e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e4:	f003 0320 	and.w	r3, r3, #32
 80024e8:	613b      	str	r3, [r7, #16]
 80024ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024ec:	2300      	movs	r3, #0
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	4b10      	ldr	r3, [pc, #64]	; (8002534 <HAL_UART_MspInit+0xec>)
 80024f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f4:	4a0f      	ldr	r2, [pc, #60]	; (8002534 <HAL_UART_MspInit+0xec>)
 80024f6:	f043 0304 	orr.w	r3, r3, #4
 80024fa:	6313      	str	r3, [r2, #48]	; 0x30
 80024fc:	4b0d      	ldr	r3, [pc, #52]	; (8002534 <HAL_UART_MspInit+0xec>)
 80024fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	60fb      	str	r3, [r7, #12]
 8002506:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MIDI_TX_Pin|MIDI_RX_Pin;
 8002508:	23c0      	movs	r3, #192	; 0xc0
 800250a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250c:	2302      	movs	r3, #2
 800250e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002510:	2300      	movs	r3, #0
 8002512:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002514:	2303      	movs	r3, #3
 8002516:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002518:	2308      	movs	r3, #8
 800251a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800251c:	f107 031c 	add.w	r3, r7, #28
 8002520:	4619      	mov	r1, r3
 8002522:	4807      	ldr	r0, [pc, #28]	; (8002540 <HAL_UART_MspInit+0xf8>)
 8002524:	f000 fd6a 	bl	8002ffc <HAL_GPIO_Init>
}
 8002528:	bf00      	nop
 800252a:	3730      	adds	r7, #48	; 0x30
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40004800 	.word	0x40004800
 8002534:	40023800 	.word	0x40023800
 8002538:	40020400 	.word	0x40020400
 800253c:	40011400 	.word	0x40011400
 8002540:	40020800 	.word	0x40020800

08002544 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002544:	f8df d034 	ldr.w	sp, [pc, #52]	; 800257c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002548:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800254a:	e003      	b.n	8002554 <LoopCopyDataInit>

0800254c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800254c:	4b0c      	ldr	r3, [pc, #48]	; (8002580 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800254e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002550:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002552:	3104      	adds	r1, #4

08002554 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002554:	480b      	ldr	r0, [pc, #44]	; (8002584 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002556:	4b0c      	ldr	r3, [pc, #48]	; (8002588 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002558:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800255a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800255c:	d3f6      	bcc.n	800254c <CopyDataInit>
  ldr  r2, =_sbss
 800255e:	4a0b      	ldr	r2, [pc, #44]	; (800258c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002560:	e002      	b.n	8002568 <LoopFillZerobss>

08002562 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002562:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002564:	f842 3b04 	str.w	r3, [r2], #4

08002568 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002568:	4b09      	ldr	r3, [pc, #36]	; (8002590 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800256a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800256c:	d3f9      	bcc.n	8002562 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800256e:	f7ff fe25 	bl	80021bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002572:	f009 fb0b 	bl	800bb8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002576:	f7fe fddb 	bl	8001130 <main>
  bx  lr    
 800257a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800257c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002580:	0803fcd4 	.word	0x0803fcd4
  ldr  r0, =_sdata
 8002584:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002588:	20000318 	.word	0x20000318
  ldr  r2, =_sbss
 800258c:	20000318 	.word	0x20000318
  ldr  r3, = _ebss
 8002590:	200012c0 	.word	0x200012c0

08002594 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002594:	e7fe      	b.n	8002594 <ADC_IRQHandler>
	...

08002598 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800259c:	4b0e      	ldr	r3, [pc, #56]	; (80025d8 <HAL_Init+0x40>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a0d      	ldr	r2, [pc, #52]	; (80025d8 <HAL_Init+0x40>)
 80025a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025a8:	4b0b      	ldr	r3, [pc, #44]	; (80025d8 <HAL_Init+0x40>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0a      	ldr	r2, [pc, #40]	; (80025d8 <HAL_Init+0x40>)
 80025ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025b4:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <HAL_Init+0x40>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a07      	ldr	r2, [pc, #28]	; (80025d8 <HAL_Init+0x40>)
 80025ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025c0:	2003      	movs	r0, #3
 80025c2:	f000 fbaf 	bl	8002d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025c6:	2000      	movs	r0, #0
 80025c8:	f000 f808 	bl	80025dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025cc:	f7ff fd38 	bl	8002040 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40023c00 	.word	0x40023c00

080025dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b082      	sub	sp, #8
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025e4:	4b12      	ldr	r3, [pc, #72]	; (8002630 <HAL_InitTick+0x54>)
 80025e6:	681a      	ldr	r2, [r3, #0]
 80025e8:	4b12      	ldr	r3, [pc, #72]	; (8002634 <HAL_InitTick+0x58>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	4619      	mov	r1, r3
 80025ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80025f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fa:	4618      	mov	r0, r3
 80025fc:	f000 fbc7 	bl	8002d8e <HAL_SYSTICK_Config>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d001      	beq.n	800260a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e00e      	b.n	8002628 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b0f      	cmp	r3, #15
 800260e:	d80a      	bhi.n	8002626 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002610:	2200      	movs	r2, #0
 8002612:	6879      	ldr	r1, [r7, #4]
 8002614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002618:	f000 fb8f 	bl	8002d3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800261c:	4a06      	ldr	r2, [pc, #24]	; (8002638 <HAL_InitTick+0x5c>)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002622:	2300      	movs	r3, #0
 8002624:	e000      	b.n	8002628 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
}
 8002628:	4618      	mov	r0, r3
 800262a:	3708      	adds	r7, #8
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	200000d0 	.word	0x200000d0
 8002634:	200000d8 	.word	0x200000d8
 8002638:	200000d4 	.word	0x200000d4

0800263c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <HAL_IncTick+0x20>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	461a      	mov	r2, r3
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <HAL_IncTick+0x24>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4413      	add	r3, r2
 800264c:	4a04      	ldr	r2, [pc, #16]	; (8002660 <HAL_IncTick+0x24>)
 800264e:	6013      	str	r3, [r2, #0]
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	200000d8 	.word	0x200000d8
 8002660:	200008a0 	.word	0x200008a0

08002664 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  return uwTick;
 8002668:	4b03      	ldr	r3, [pc, #12]	; (8002678 <HAL_GetTick+0x14>)
 800266a:	681b      	ldr	r3, [r3, #0]
}
 800266c:	4618      	mov	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	200008a0 	.word	0x200008a0

0800267c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002684:	f7ff ffee 	bl	8002664 <HAL_GetTick>
 8002688:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002694:	d005      	beq.n	80026a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002696:	4b09      	ldr	r3, [pc, #36]	; (80026bc <HAL_Delay+0x40>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	4413      	add	r3, r2
 80026a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026a2:	bf00      	nop
 80026a4:	f7ff ffde 	bl	8002664 <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	68fa      	ldr	r2, [r7, #12]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d8f7      	bhi.n	80026a4 <HAL_Delay+0x28>
  {
  }
}
 80026b4:	bf00      	nop
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	200000d8 	.word	0x200000d8

080026c0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026c8:	2300      	movs	r3, #0
 80026ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e033      	b.n	800273e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d109      	bne.n	80026f2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7fe f912 	bl	8000908 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2200      	movs	r2, #0
 80026e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	f003 0310 	and.w	r3, r3, #16
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d118      	bne.n	8002730 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002706:	f023 0302 	bic.w	r3, r3, #2
 800270a:	f043 0202 	orr.w	r2, r3, #2
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002712:	6878      	ldr	r0, [r7, #4]
 8002714:	f000 f93a 	bl	800298c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002722:	f023 0303 	bic.w	r3, r3, #3
 8002726:	f043 0201 	orr.w	r2, r3, #1
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	641a      	str	r2, [r3, #64]	; 0x40
 800272e:	e001      	b.n	8002734 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2200      	movs	r2, #0
 8002738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800273c:	7bfb      	ldrb	r3, [r7, #15]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3710      	adds	r7, #16
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
	...

08002748 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002748:	b480      	push	{r7}
 800274a:	b085      	sub	sp, #20
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002752:	2300      	movs	r3, #0
 8002754:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800275c:	2b01      	cmp	r3, #1
 800275e:	d101      	bne.n	8002764 <HAL_ADC_ConfigChannel+0x1c>
 8002760:	2302      	movs	r3, #2
 8002762:	e105      	b.n	8002970 <HAL_ADC_ConfigChannel+0x228>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	2b09      	cmp	r3, #9
 8002772:	d925      	bls.n	80027c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68d9      	ldr	r1, [r3, #12]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	b29b      	uxth	r3, r3
 8002780:	461a      	mov	r2, r3
 8002782:	4613      	mov	r3, r2
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	4413      	add	r3, r2
 8002788:	3b1e      	subs	r3, #30
 800278a:	2207      	movs	r2, #7
 800278c:	fa02 f303 	lsl.w	r3, r2, r3
 8002790:	43da      	mvns	r2, r3
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	400a      	ands	r2, r1
 8002798:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	68d9      	ldr	r1, [r3, #12]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	689a      	ldr	r2, [r3, #8]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	4618      	mov	r0, r3
 80027ac:	4603      	mov	r3, r0
 80027ae:	005b      	lsls	r3, r3, #1
 80027b0:	4403      	add	r3, r0
 80027b2:	3b1e      	subs	r3, #30
 80027b4:	409a      	lsls	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	430a      	orrs	r2, r1
 80027bc:	60da      	str	r2, [r3, #12]
 80027be:	e022      	b.n	8002806 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6919      	ldr	r1, [r3, #16]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	461a      	mov	r2, r3
 80027ce:	4613      	mov	r3, r2
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	4413      	add	r3, r2
 80027d4:	2207      	movs	r2, #7
 80027d6:	fa02 f303 	lsl.w	r3, r2, r3
 80027da:	43da      	mvns	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	400a      	ands	r2, r1
 80027e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6919      	ldr	r1, [r3, #16]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	689a      	ldr	r2, [r3, #8]
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	4618      	mov	r0, r3
 80027f6:	4603      	mov	r3, r0
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	4403      	add	r3, r0
 80027fc:	409a      	lsls	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	430a      	orrs	r2, r1
 8002804:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b06      	cmp	r3, #6
 800280c:	d824      	bhi.n	8002858 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685a      	ldr	r2, [r3, #4]
 8002818:	4613      	mov	r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	4413      	add	r3, r2
 800281e:	3b05      	subs	r3, #5
 8002820:	221f      	movs	r2, #31
 8002822:	fa02 f303 	lsl.w	r3, r2, r3
 8002826:	43da      	mvns	r2, r3
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	400a      	ands	r2, r1
 800282e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	b29b      	uxth	r3, r3
 800283c:	4618      	mov	r0, r3
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	4613      	mov	r3, r2
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	3b05      	subs	r3, #5
 800284a:	fa00 f203 	lsl.w	r2, r0, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	430a      	orrs	r2, r1
 8002854:	635a      	str	r2, [r3, #52]	; 0x34
 8002856:	e04c      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	2b0c      	cmp	r3, #12
 800285e:	d824      	bhi.n	80028aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	685a      	ldr	r2, [r3, #4]
 800286a:	4613      	mov	r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	4413      	add	r3, r2
 8002870:	3b23      	subs	r3, #35	; 0x23
 8002872:	221f      	movs	r2, #31
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43da      	mvns	r2, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	400a      	ands	r2, r1
 8002880:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	b29b      	uxth	r3, r3
 800288e:	4618      	mov	r0, r3
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685a      	ldr	r2, [r3, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	4413      	add	r3, r2
 800289a:	3b23      	subs	r3, #35	; 0x23
 800289c:	fa00 f203 	lsl.w	r2, r0, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	631a      	str	r2, [r3, #48]	; 0x30
 80028a8:	e023      	b.n	80028f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685a      	ldr	r2, [r3, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	3b41      	subs	r3, #65	; 0x41
 80028bc:	221f      	movs	r2, #31
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43da      	mvns	r2, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	400a      	ands	r2, r1
 80028ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	4618      	mov	r0, r3
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685a      	ldr	r2, [r3, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	4413      	add	r3, r2
 80028e4:	3b41      	subs	r3, #65	; 0x41
 80028e6:	fa00 f203 	lsl.w	r2, r0, r3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	430a      	orrs	r2, r1
 80028f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028f2:	4b22      	ldr	r3, [pc, #136]	; (800297c <HAL_ADC_ConfigChannel+0x234>)
 80028f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a21      	ldr	r2, [pc, #132]	; (8002980 <HAL_ADC_ConfigChannel+0x238>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d109      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x1cc>
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2b12      	cmp	r3, #18
 8002906:	d105      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a19      	ldr	r2, [pc, #100]	; (8002980 <HAL_ADC_ConfigChannel+0x238>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d123      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x21e>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2b10      	cmp	r3, #16
 8002924:	d003      	beq.n	800292e <HAL_ADC_ConfigChannel+0x1e6>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	2b11      	cmp	r3, #17
 800292c:	d11b      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	685b      	ldr	r3, [r3, #4]
 8002932:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b10      	cmp	r3, #16
 8002940:	d111      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002942:	4b10      	ldr	r3, [pc, #64]	; (8002984 <HAL_ADC_ConfigChannel+0x23c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a10      	ldr	r2, [pc, #64]	; (8002988 <HAL_ADC_ConfigChannel+0x240>)
 8002948:	fba2 2303 	umull	r2, r3, r2, r3
 800294c:	0c9a      	lsrs	r2, r3, #18
 800294e:	4613      	mov	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	4413      	add	r3, r2
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002958:	e002      	b.n	8002960 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	3b01      	subs	r3, #1
 800295e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d1f9      	bne.n	800295a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2200      	movs	r2, #0
 800296a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800296e:	2300      	movs	r3, #0
}
 8002970:	4618      	mov	r0, r3
 8002972:	3714      	adds	r7, #20
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr
 800297c:	40012300 	.word	0x40012300
 8002980:	40012000 	.word	0x40012000
 8002984:	200000d0 	.word	0x200000d0
 8002988:	431bde83 	.word	0x431bde83

0800298c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002994:	4b79      	ldr	r3, [pc, #484]	; (8002b7c <ADC_Init+0x1f0>)
 8002996:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	685b      	ldr	r3, [r3, #4]
 80029ac:	431a      	orrs	r2, r3
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	685a      	ldr	r2, [r3, #4]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6859      	ldr	r1, [r3, #4]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	021a      	lsls	r2, r3, #8
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	430a      	orrs	r2, r1
 80029d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685a      	ldr	r2, [r3, #4]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	6859      	ldr	r1, [r3, #4]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	430a      	orrs	r2, r1
 80029f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6899      	ldr	r1, [r3, #8]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	68da      	ldr	r2, [r3, #12]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	430a      	orrs	r2, r1
 8002a18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1e:	4a58      	ldr	r2, [pc, #352]	; (8002b80 <ADC_Init+0x1f4>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d022      	beq.n	8002a6a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	6899      	ldr	r1, [r3, #8]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	430a      	orrs	r2, r1
 8002a44:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689a      	ldr	r2, [r3, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	6899      	ldr	r1, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	430a      	orrs	r2, r1
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	e00f      	b.n	8002a8a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	689a      	ldr	r2, [r3, #8]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689a      	ldr	r2, [r3, #8]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a88:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	689a      	ldr	r2, [r3, #8]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0202 	bic.w	r2, r2, #2
 8002a98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6899      	ldr	r1, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	7e1b      	ldrb	r3, [r3, #24]
 8002aa4:	005a      	lsls	r2, r3, #1
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d01b      	beq.n	8002af0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ac6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ad6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6859      	ldr	r1, [r3, #4]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	035a      	lsls	r2, r3, #13
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	605a      	str	r2, [r3, #4]
 8002aee:	e007      	b.n	8002b00 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002afe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b0e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	69db      	ldr	r3, [r3, #28]
 8002b1a:	3b01      	subs	r3, #1
 8002b1c:	051a      	lsls	r2, r3, #20
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	430a      	orrs	r2, r1
 8002b24:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b34:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6899      	ldr	r1, [r3, #8]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b42:	025a      	lsls	r2, r3, #9
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689a      	ldr	r2, [r3, #8]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	6899      	ldr	r1, [r3, #8]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	695b      	ldr	r3, [r3, #20]
 8002b66:	029a      	lsls	r2, r3, #10
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	430a      	orrs	r2, r1
 8002b6e:	609a      	str	r2, [r3, #8]
}
 8002b70:	bf00      	nop
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr
 8002b7c:	40012300 	.word	0x40012300
 8002b80:	0f000001 	.word	0x0f000001

08002b84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b085      	sub	sp, #20
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b94:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002b96:	68db      	ldr	r3, [r3, #12]
 8002b98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bb4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bb6:	4a04      	ldr	r2, [pc, #16]	; (8002bc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	60d3      	str	r3, [r2, #12]
}
 8002bbc:	bf00      	nop
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	e000ed00 	.word	0xe000ed00

08002bcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bd0:	4b04      	ldr	r3, [pc, #16]	; (8002be4 <__NVIC_GetPriorityGrouping+0x18>)
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	0a1b      	lsrs	r3, r3, #8
 8002bd6:	f003 0307 	and.w	r3, r3, #7
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	db0b      	blt.n	8002c12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bfa:	79fb      	ldrb	r3, [r7, #7]
 8002bfc:	f003 021f 	and.w	r2, r3, #31
 8002c00:	4907      	ldr	r1, [pc, #28]	; (8002c20 <__NVIC_EnableIRQ+0x38>)
 8002c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c06:	095b      	lsrs	r3, r3, #5
 8002c08:	2001      	movs	r0, #1
 8002c0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c12:	bf00      	nop
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr
 8002c1e:	bf00      	nop
 8002c20:	e000e100 	.word	0xe000e100

08002c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	6039      	str	r1, [r7, #0]
 8002c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	db0a      	blt.n	8002c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	490c      	ldr	r1, [pc, #48]	; (8002c70 <__NVIC_SetPriority+0x4c>)
 8002c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c42:	0112      	lsls	r2, r2, #4
 8002c44:	b2d2      	uxtb	r2, r2
 8002c46:	440b      	add	r3, r1
 8002c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c4c:	e00a      	b.n	8002c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	4908      	ldr	r1, [pc, #32]	; (8002c74 <__NVIC_SetPriority+0x50>)
 8002c54:	79fb      	ldrb	r3, [r7, #7]
 8002c56:	f003 030f 	and.w	r3, r3, #15
 8002c5a:	3b04      	subs	r3, #4
 8002c5c:	0112      	lsls	r2, r2, #4
 8002c5e:	b2d2      	uxtb	r2, r2
 8002c60:	440b      	add	r3, r1
 8002c62:	761a      	strb	r2, [r3, #24]
}
 8002c64:	bf00      	nop
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	e000e100 	.word	0xe000e100
 8002c74:	e000ed00 	.word	0xe000ed00

08002c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b089      	sub	sp, #36	; 0x24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 0307 	and.w	r3, r3, #7
 8002c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	f1c3 0307 	rsb	r3, r3, #7
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	bf28      	it	cs
 8002c96:	2304      	movcs	r3, #4
 8002c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3304      	adds	r3, #4
 8002c9e:	2b06      	cmp	r3, #6
 8002ca0:	d902      	bls.n	8002ca8 <NVIC_EncodePriority+0x30>
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	3b03      	subs	r3, #3
 8002ca6:	e000      	b.n	8002caa <NVIC_EncodePriority+0x32>
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	43da      	mvns	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	401a      	ands	r2, r3
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cc0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cca:	43d9      	mvns	r1, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cd0:	4313      	orrs	r3, r2
         );
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3724      	adds	r7, #36	; 0x24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
	...

08002ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3b01      	subs	r3, #1
 8002cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cf0:	d301      	bcc.n	8002cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e00f      	b.n	8002d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cf6:	4a0a      	ldr	r2, [pc, #40]	; (8002d20 <SysTick_Config+0x40>)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cfe:	210f      	movs	r1, #15
 8002d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002d04:	f7ff ff8e 	bl	8002c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d08:	4b05      	ldr	r3, [pc, #20]	; (8002d20 <SysTick_Config+0x40>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d0e:	4b04      	ldr	r3, [pc, #16]	; (8002d20 <SysTick_Config+0x40>)
 8002d10:	2207      	movs	r2, #7
 8002d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d14:	2300      	movs	r3, #0
}
 8002d16:	4618      	mov	r0, r3
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	e000e010 	.word	0xe000e010

08002d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b082      	sub	sp, #8
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f7ff ff29 	bl	8002b84 <__NVIC_SetPriorityGrouping>
}
 8002d32:	bf00      	nop
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b086      	sub	sp, #24
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	4603      	mov	r3, r0
 8002d42:	60b9      	str	r1, [r7, #8]
 8002d44:	607a      	str	r2, [r7, #4]
 8002d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d4c:	f7ff ff3e 	bl	8002bcc <__NVIC_GetPriorityGrouping>
 8002d50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	68b9      	ldr	r1, [r7, #8]
 8002d56:	6978      	ldr	r0, [r7, #20]
 8002d58:	f7ff ff8e 	bl	8002c78 <NVIC_EncodePriority>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d62:	4611      	mov	r1, r2
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff ff5d 	bl	8002c24 <__NVIC_SetPriority>
}
 8002d6a:	bf00      	nop
 8002d6c:	3718      	adds	r7, #24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b082      	sub	sp, #8
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	4603      	mov	r3, r0
 8002d7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff ff31 	bl	8002be8 <__NVIC_EnableIRQ>
}
 8002d86:	bf00      	nop
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b082      	sub	sp, #8
 8002d92:	af00      	add	r7, sp, #0
 8002d94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f7ff ffa2 	bl	8002ce0 <SysTick_Config>
 8002d9c:	4603      	mov	r3, r0
}
 8002d9e:	4618      	mov	r0, r3
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b082      	sub	sp, #8
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e014      	b.n	8002de2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	791b      	ldrb	r3, [r3, #4]
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d105      	bne.n	8002dce <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f7fd fe31 	bl	8000a30 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b085      	sub	sp, #20
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
 8002df2:	6039      	str	r1, [r7, #0]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002df4:	2300      	movs	r3, #0
 8002df6:	60fb      	str	r3, [r7, #12]
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60bb      	str	r3, [r7, #8]
  
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	795b      	ldrb	r3, [r3, #5]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <HAL_DAC_Start+0x1e>
 8002e04:	2302      	movs	r3, #2
 8002e06:	e050      	b.n	8002eaa <HAL_DAC_Start+0xc0>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2202      	movs	r2, #2
 8002e12:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	6819      	ldr	r1, [r3, #0]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	409a      	lsls	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	430a      	orrs	r2, r1
 8002e26:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d11a      	bne.n	8002e64 <HAL_DAC_Start+0x7a>
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN1;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL1;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e44:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 ==  DAC_CR_TEN1) && (tmp2 ==  DAC_CR_TSEL1))
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2b04      	cmp	r3, #4
 8002e4a:	d127      	bne.n	8002e9c <HAL_DAC_Start+0xb2>
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	2b38      	cmp	r3, #56	; 0x38
 8002e50:	d124      	bne.n	8002e9c <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion */
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG1;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f042 0201 	orr.w	r2, r2, #1
 8002e60:	605a      	str	r2, [r3, #4]
 8002e62:	e01b      	b.n	8002e9c <HAL_DAC_Start+0xb2>
    }
  }
  else
  {
    tmp1 = hdac->Instance->CR & DAC_CR_TEN2;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e6e:	60fb      	str	r3, [r7, #12]
    tmp2 = hdac->Instance->CR & DAC_CR_TSEL2;    
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f403 1360 	and.w	r3, r3, #3670016	; 0x380000
 8002e7a:	60bb      	str	r3, [r7, #8]
    /* Check if software trigger enabled */
    if((tmp1 == DAC_CR_TEN2) && (tmp2 == DAC_CR_TSEL2))
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002e82:	d10b      	bne.n	8002e9c <HAL_DAC_Start+0xb2>
 8002e84:	68bb      	ldr	r3, [r7, #8]
 8002e86:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8002e8a:	d107      	bne.n	8002e9c <HAL_DAC_Start+0xb2>
    {
      /* Enable the selected DAC software conversion*/
      hdac->Instance->SWTRIGR |= (uint32_t)DAC_SWTRIGR_SWTRIG2;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	685a      	ldr	r2, [r3, #4]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f042 0202 	orr.w	r2, r2, #2
 8002e9a:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	3714      	adds	r7, #20
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b087      	sub	sp, #28
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	60f8      	str	r0, [r7, #12]
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	617b      	str	r3, [r7, #20]
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	795b      	ldrb	r3, [r3, #5]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_DAC_ConfigChannel+0x20>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e036      	b.n	8002f44 <HAL_DAC_ConfigChannel+0x8e>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2202      	movs	r2, #2
 8002ee0:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002eea:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	697a      	ldr	r2, [r7, #20]
 8002f1c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6819      	ldr	r1, [r3, #0]
 8002f24:	22c0      	movs	r2, #192	; 0xc0
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	43da      	mvns	r2, r3
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	400a      	ands	r2, r1
 8002f34:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2201      	movs	r2, #1
 8002f3a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	371c      	adds	r7, #28
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8002f50:	b480      	push	{r7}
 8002f52:	b087      	sub	sp, #28
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	60f8      	str	r0, [r7, #12]
 8002f58:	60b9      	str	r1, [r7, #8]
 8002f5a:	607a      	str	r2, [r7, #4]
 8002f5c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)hdac->Instance; 
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	617b      	str	r3, [r7, #20]
  if(Channel == DAC_CHANNEL_1)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d105      	bne.n	8002f7a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002f6e:	697a      	ldr	r2, [r7, #20]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4413      	add	r3, r2
 8002f74:	3308      	adds	r3, #8
 8002f76:	617b      	str	r3, [r7, #20]
 8002f78:	e004      	b.n	8002f84 <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4413      	add	r3, r2
 8002f80:	3314      	adds	r3, #20
 8002f82:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	461a      	mov	r2, r3
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	371c      	adds	r7, #28
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	b083      	sub	sp, #12
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fa8:	b2db      	uxtb	r3, r3
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d004      	beq.n	8002fb8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2280      	movs	r2, #128	; 0x80
 8002fb2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e00c      	b.n	8002fd2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2205      	movs	r2, #5
 8002fbc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0201 	bic.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fd0:	2300      	movs	r3, #0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	370c      	adds	r7, #12
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fdc:	4770      	bx	lr

08002fde <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002fde:	b480      	push	{r7}
 8002fe0:	b083      	sub	sp, #12
 8002fe2:	af00      	add	r7, sp, #0
 8002fe4:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fec:	b2db      	uxtb	r3, r3
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
	...

08002ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b089      	sub	sp, #36	; 0x24
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800300a:	2300      	movs	r3, #0
 800300c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800300e:	2300      	movs	r3, #0
 8003010:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003012:	2300      	movs	r3, #0
 8003014:	61fb      	str	r3, [r7, #28]
 8003016:	e16b      	b.n	80032f0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003018:	2201      	movs	r2, #1
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	fa02 f303 	lsl.w	r3, r2, r3
 8003020:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	4013      	ands	r3, r2
 800302a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	429a      	cmp	r2, r3
 8003032:	f040 815a 	bne.w	80032ea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d00b      	beq.n	8003056 <HAL_GPIO_Init+0x5a>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	2b02      	cmp	r3, #2
 8003044:	d007      	beq.n	8003056 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800304a:	2b11      	cmp	r3, #17
 800304c:	d003      	beq.n	8003056 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	2b12      	cmp	r3, #18
 8003054:	d130      	bne.n	80030b8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689b      	ldr	r3, [r3, #8]
 800305a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	005b      	lsls	r3, r3, #1
 8003060:	2203      	movs	r2, #3
 8003062:	fa02 f303 	lsl.w	r3, r2, r3
 8003066:	43db      	mvns	r3, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4013      	ands	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	68da      	ldr	r2, [r3, #12]
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4313      	orrs	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800308c:	2201      	movs	r2, #1
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	fa02 f303 	lsl.w	r3, r2, r3
 8003094:	43db      	mvns	r3, r3
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	4013      	ands	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f003 0201 	and.w	r2, r3, #1
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4313      	orrs	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69ba      	ldr	r2, [r7, #24]
 80030b6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	2203      	movs	r2, #3
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	4013      	ands	r3, r2
 80030ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	69fb      	ldr	r3, [r7, #28]
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4313      	orrs	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	d003      	beq.n	80030f8 <HAL_GPIO_Init+0xfc>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	2b12      	cmp	r3, #18
 80030f6:	d123      	bne.n	8003140 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030f8:	69fb      	ldr	r3, [r7, #28]
 80030fa:	08da      	lsrs	r2, r3, #3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	3208      	adds	r2, #8
 8003100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003104:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	220f      	movs	r2, #15
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	43db      	mvns	r3, r3
 8003116:	69ba      	ldr	r2, [r7, #24]
 8003118:	4013      	ands	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800311c:	683b      	ldr	r3, [r7, #0]
 800311e:	691a      	ldr	r2, [r3, #16]
 8003120:	69fb      	ldr	r3, [r7, #28]
 8003122:	f003 0307 	and.w	r3, r3, #7
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	fa02 f303 	lsl.w	r3, r2, r3
 800312c:	69ba      	ldr	r2, [r7, #24]
 800312e:	4313      	orrs	r3, r2
 8003130:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	08da      	lsrs	r2, r3, #3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	3208      	adds	r2, #8
 800313a:	69b9      	ldr	r1, [r7, #24]
 800313c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	005b      	lsls	r3, r3, #1
 800314a:	2203      	movs	r2, #3
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	43db      	mvns	r3, r3
 8003152:	69ba      	ldr	r2, [r7, #24]
 8003154:	4013      	ands	r3, r2
 8003156:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 0203 	and.w	r2, r3, #3
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4313      	orrs	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 80b4 	beq.w	80032ea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	4b5f      	ldr	r3, [pc, #380]	; (8003304 <HAL_GPIO_Init+0x308>)
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	4a5e      	ldr	r2, [pc, #376]	; (8003304 <HAL_GPIO_Init+0x308>)
 800318c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003190:	6453      	str	r3, [r2, #68]	; 0x44
 8003192:	4b5c      	ldr	r3, [pc, #368]	; (8003304 <HAL_GPIO_Init+0x308>)
 8003194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800319a:	60fb      	str	r3, [r7, #12]
 800319c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800319e:	4a5a      	ldr	r2, [pc, #360]	; (8003308 <HAL_GPIO_Init+0x30c>)
 80031a0:	69fb      	ldr	r3, [r7, #28]
 80031a2:	089b      	lsrs	r3, r3, #2
 80031a4:	3302      	adds	r3, #2
 80031a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	220f      	movs	r2, #15
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43db      	mvns	r3, r3
 80031bc:	69ba      	ldr	r2, [r7, #24]
 80031be:	4013      	ands	r3, r2
 80031c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a51      	ldr	r2, [pc, #324]	; (800330c <HAL_GPIO_Init+0x310>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d02b      	beq.n	8003222 <HAL_GPIO_Init+0x226>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a50      	ldr	r2, [pc, #320]	; (8003310 <HAL_GPIO_Init+0x314>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d025      	beq.n	800321e <HAL_GPIO_Init+0x222>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a4f      	ldr	r2, [pc, #316]	; (8003314 <HAL_GPIO_Init+0x318>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d01f      	beq.n	800321a <HAL_GPIO_Init+0x21e>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a4e      	ldr	r2, [pc, #312]	; (8003318 <HAL_GPIO_Init+0x31c>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d019      	beq.n	8003216 <HAL_GPIO_Init+0x21a>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a4d      	ldr	r2, [pc, #308]	; (800331c <HAL_GPIO_Init+0x320>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d013      	beq.n	8003212 <HAL_GPIO_Init+0x216>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4a4c      	ldr	r2, [pc, #304]	; (8003320 <HAL_GPIO_Init+0x324>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d00d      	beq.n	800320e <HAL_GPIO_Init+0x212>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a4b      	ldr	r2, [pc, #300]	; (8003324 <HAL_GPIO_Init+0x328>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d007      	beq.n	800320a <HAL_GPIO_Init+0x20e>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a4a      	ldr	r2, [pc, #296]	; (8003328 <HAL_GPIO_Init+0x32c>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d101      	bne.n	8003206 <HAL_GPIO_Init+0x20a>
 8003202:	2307      	movs	r3, #7
 8003204:	e00e      	b.n	8003224 <HAL_GPIO_Init+0x228>
 8003206:	2308      	movs	r3, #8
 8003208:	e00c      	b.n	8003224 <HAL_GPIO_Init+0x228>
 800320a:	2306      	movs	r3, #6
 800320c:	e00a      	b.n	8003224 <HAL_GPIO_Init+0x228>
 800320e:	2305      	movs	r3, #5
 8003210:	e008      	b.n	8003224 <HAL_GPIO_Init+0x228>
 8003212:	2304      	movs	r3, #4
 8003214:	e006      	b.n	8003224 <HAL_GPIO_Init+0x228>
 8003216:	2303      	movs	r3, #3
 8003218:	e004      	b.n	8003224 <HAL_GPIO_Init+0x228>
 800321a:	2302      	movs	r3, #2
 800321c:	e002      	b.n	8003224 <HAL_GPIO_Init+0x228>
 800321e:	2301      	movs	r3, #1
 8003220:	e000      	b.n	8003224 <HAL_GPIO_Init+0x228>
 8003222:	2300      	movs	r3, #0
 8003224:	69fa      	ldr	r2, [r7, #28]
 8003226:	f002 0203 	and.w	r2, r2, #3
 800322a:	0092      	lsls	r2, r2, #2
 800322c:	4093      	lsls	r3, r2
 800322e:	69ba      	ldr	r2, [r7, #24]
 8003230:	4313      	orrs	r3, r2
 8003232:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003234:	4934      	ldr	r1, [pc, #208]	; (8003308 <HAL_GPIO_Init+0x30c>)
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	089b      	lsrs	r3, r3, #2
 800323a:	3302      	adds	r3, #2
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003242:	4b3a      	ldr	r3, [pc, #232]	; (800332c <HAL_GPIO_Init+0x330>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	43db      	mvns	r3, r3
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	4013      	ands	r3, r2
 8003250:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800325e:	69ba      	ldr	r2, [r7, #24]
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003266:	4a31      	ldr	r2, [pc, #196]	; (800332c <HAL_GPIO_Init+0x330>)
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800326c:	4b2f      	ldr	r3, [pc, #188]	; (800332c <HAL_GPIO_Init+0x330>)
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	43db      	mvns	r3, r3
 8003276:	69ba      	ldr	r2, [r7, #24]
 8003278:	4013      	ands	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d003      	beq.n	8003290 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003290:	4a26      	ldr	r2, [pc, #152]	; (800332c <HAL_GPIO_Init+0x330>)
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003296:	4b25      	ldr	r3, [pc, #148]	; (800332c <HAL_GPIO_Init+0x330>)
 8003298:	689b      	ldr	r3, [r3, #8]
 800329a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800329c:	693b      	ldr	r3, [r7, #16]
 800329e:	43db      	mvns	r3, r3
 80032a0:	69ba      	ldr	r2, [r7, #24]
 80032a2:	4013      	ands	r3, r2
 80032a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d003      	beq.n	80032ba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	4313      	orrs	r3, r2
 80032b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032ba:	4a1c      	ldr	r2, [pc, #112]	; (800332c <HAL_GPIO_Init+0x330>)
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032c0:	4b1a      	ldr	r3, [pc, #104]	; (800332c <HAL_GPIO_Init+0x330>)
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	43db      	mvns	r3, r3
 80032ca:	69ba      	ldr	r2, [r7, #24]
 80032cc:	4013      	ands	r3, r2
 80032ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d003      	beq.n	80032e4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80032dc:	69ba      	ldr	r2, [r7, #24]
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032e4:	4a11      	ldr	r2, [pc, #68]	; (800332c <HAL_GPIO_Init+0x330>)
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	3301      	adds	r3, #1
 80032ee:	61fb      	str	r3, [r7, #28]
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	2b0f      	cmp	r3, #15
 80032f4:	f67f ae90 	bls.w	8003018 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032f8:	bf00      	nop
 80032fa:	3724      	adds	r7, #36	; 0x24
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	40023800 	.word	0x40023800
 8003308:	40013800 	.word	0x40013800
 800330c:	40020000 	.word	0x40020000
 8003310:	40020400 	.word	0x40020400
 8003314:	40020800 	.word	0x40020800
 8003318:	40020c00 	.word	0x40020c00
 800331c:	40021000 	.word	0x40021000
 8003320:	40021400 	.word	0x40021400
 8003324:	40021800 	.word	0x40021800
 8003328:	40021c00 	.word	0x40021c00
 800332c:	40013c00 	.word	0x40013c00

08003330 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	460b      	mov	r3, r1
 800333a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	887b      	ldrh	r3, [r7, #2]
 8003342:	4013      	ands	r3, r2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d002      	beq.n	800334e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003348:	2301      	movs	r3, #1
 800334a:	73fb      	strb	r3, [r7, #15]
 800334c:	e001      	b.n	8003352 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800334e:	2300      	movs	r3, #0
 8003350:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003352:	7bfb      	ldrb	r3, [r7, #15]
}
 8003354:	4618      	mov	r0, r3
 8003356:	3714      	adds	r7, #20
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	807b      	strh	r3, [r7, #2]
 800336c:	4613      	mov	r3, r2
 800336e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003370:	787b      	ldrb	r3, [r7, #1]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003376:	887a      	ldrh	r2, [r7, #2]
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800337c:	e003      	b.n	8003386 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800337e:	887b      	ldrh	r3, [r7, #2]
 8003380:	041a      	lsls	r2, r3, #16
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	619a      	str	r2, [r3, #24]
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
	...

08003394 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d101      	bne.n	80033a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e11f      	b.n	80035e6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d106      	bne.n	80033c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fd fc7a 	bl	8000cb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2224      	movs	r2, #36	; 0x24
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f022 0201 	bic.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	681a      	ldr	r2, [r3, #0]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033f8:	f003 fe74 	bl	80070e4 <HAL_RCC_GetPCLK1Freq>
 80033fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4a7b      	ldr	r2, [pc, #492]	; (80035f0 <HAL_I2C_Init+0x25c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d807      	bhi.n	8003418 <HAL_I2C_Init+0x84>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4a7a      	ldr	r2, [pc, #488]	; (80035f4 <HAL_I2C_Init+0x260>)
 800340c:	4293      	cmp	r3, r2
 800340e:	bf94      	ite	ls
 8003410:	2301      	movls	r3, #1
 8003412:	2300      	movhi	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	e006      	b.n	8003426 <HAL_I2C_Init+0x92>
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	4a77      	ldr	r2, [pc, #476]	; (80035f8 <HAL_I2C_Init+0x264>)
 800341c:	4293      	cmp	r3, r2
 800341e:	bf94      	ite	ls
 8003420:	2301      	movls	r3, #1
 8003422:	2300      	movhi	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d001      	beq.n	800342e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800342a:	2301      	movs	r3, #1
 800342c:	e0db      	b.n	80035e6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	4a72      	ldr	r2, [pc, #456]	; (80035fc <HAL_I2C_Init+0x268>)
 8003432:	fba2 2303 	umull	r2, r3, r2, r3
 8003436:	0c9b      	lsrs	r3, r3, #18
 8003438:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	430a      	orrs	r2, r1
 800344c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4a64      	ldr	r2, [pc, #400]	; (80035f0 <HAL_I2C_Init+0x25c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d802      	bhi.n	8003468 <HAL_I2C_Init+0xd4>
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	3301      	adds	r3, #1
 8003466:	e009      	b.n	800347c <HAL_I2C_Init+0xe8>
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800346e:	fb02 f303 	mul.w	r3, r2, r3
 8003472:	4a63      	ldr	r2, [pc, #396]	; (8003600 <HAL_I2C_Init+0x26c>)
 8003474:	fba2 2303 	umull	r2, r3, r2, r3
 8003478:	099b      	lsrs	r3, r3, #6
 800347a:	3301      	adds	r3, #1
 800347c:	687a      	ldr	r2, [r7, #4]
 800347e:	6812      	ldr	r2, [r2, #0]
 8003480:	430b      	orrs	r3, r1
 8003482:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	69db      	ldr	r3, [r3, #28]
 800348a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800348e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	4956      	ldr	r1, [pc, #344]	; (80035f0 <HAL_I2C_Init+0x25c>)
 8003498:	428b      	cmp	r3, r1
 800349a:	d80d      	bhi.n	80034b8 <HAL_I2C_Init+0x124>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	1e59      	subs	r1, r3, #1
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	005b      	lsls	r3, r3, #1
 80034a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80034aa:	3301      	adds	r3, #1
 80034ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b0:	2b04      	cmp	r3, #4
 80034b2:	bf38      	it	cc
 80034b4:	2304      	movcc	r3, #4
 80034b6:	e04f      	b.n	8003558 <HAL_I2C_Init+0x1c4>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d111      	bne.n	80034e4 <HAL_I2C_Init+0x150>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	1e58      	subs	r0, r3, #1
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6859      	ldr	r1, [r3, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	440b      	add	r3, r1
 80034ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80034d2:	3301      	adds	r3, #1
 80034d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034d8:	2b00      	cmp	r3, #0
 80034da:	bf0c      	ite	eq
 80034dc:	2301      	moveq	r3, #1
 80034de:	2300      	movne	r3, #0
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	e012      	b.n	800350a <HAL_I2C_Init+0x176>
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	1e58      	subs	r0, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6859      	ldr	r1, [r3, #4]
 80034ec:	460b      	mov	r3, r1
 80034ee:	009b      	lsls	r3, r3, #2
 80034f0:	440b      	add	r3, r1
 80034f2:	0099      	lsls	r1, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034fa:	3301      	adds	r3, #1
 80034fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003500:	2b00      	cmp	r3, #0
 8003502:	bf0c      	ite	eq
 8003504:	2301      	moveq	r3, #1
 8003506:	2300      	movne	r3, #0
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b00      	cmp	r3, #0
 800350c:	d001      	beq.n	8003512 <HAL_I2C_Init+0x17e>
 800350e:	2301      	movs	r3, #1
 8003510:	e022      	b.n	8003558 <HAL_I2C_Init+0x1c4>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d10e      	bne.n	8003538 <HAL_I2C_Init+0x1a4>
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	1e58      	subs	r0, r3, #1
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6859      	ldr	r1, [r3, #4]
 8003522:	460b      	mov	r3, r1
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	440b      	add	r3, r1
 8003528:	fbb0 f3f3 	udiv	r3, r0, r3
 800352c:	3301      	adds	r3, #1
 800352e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003536:	e00f      	b.n	8003558 <HAL_I2C_Init+0x1c4>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	1e58      	subs	r0, r3, #1
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6859      	ldr	r1, [r3, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	0099      	lsls	r1, r3, #2
 8003548:	440b      	add	r3, r1
 800354a:	fbb0 f3f3 	udiv	r3, r0, r3
 800354e:	3301      	adds	r3, #1
 8003550:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003554:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	6809      	ldr	r1, [r1, #0]
 800355c:	4313      	orrs	r3, r2
 800355e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	69da      	ldr	r2, [r3, #28]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	431a      	orrs	r2, r3
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003586:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6911      	ldr	r1, [r2, #16]
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	68d2      	ldr	r2, [r2, #12]
 8003592:	4311      	orrs	r1, r2
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	430b      	orrs	r3, r1
 800359a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	695a      	ldr	r2, [r3, #20]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0201 	orr.w	r2, r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	2220      	movs	r2, #32
 80035d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2200      	movs	r2, #0
 80035da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3710      	adds	r7, #16
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	000186a0 	.word	0x000186a0
 80035f4:	001e847f 	.word	0x001e847f
 80035f8:	003d08ff 	.word	0x003d08ff
 80035fc:	431bde83 	.word	0x431bde83
 8003600:	10624dd3 	.word	0x10624dd3

08003604 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003604:	b580      	push	{r7, lr}
 8003606:	b088      	sub	sp, #32
 8003608:	af02      	add	r7, sp, #8
 800360a:	60f8      	str	r0, [r7, #12]
 800360c:	607a      	str	r2, [r7, #4]
 800360e:	461a      	mov	r2, r3
 8003610:	460b      	mov	r3, r1
 8003612:	817b      	strh	r3, [r7, #10]
 8003614:	4613      	mov	r3, r2
 8003616:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003618:	f7ff f824 	bl	8002664 <HAL_GetTick>
 800361c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003624:	b2db      	uxtb	r3, r3
 8003626:	2b20      	cmp	r3, #32
 8003628:	f040 80e0 	bne.w	80037ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	2319      	movs	r3, #25
 8003632:	2201      	movs	r2, #1
 8003634:	4970      	ldr	r1, [pc, #448]	; (80037f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003636:	68f8      	ldr	r0, [r7, #12]
 8003638:	f001 fdf5 	bl	8005226 <I2C_WaitOnFlagUntilTimeout>
 800363c:	4603      	mov	r3, r0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003642:	2302      	movs	r3, #2
 8003644:	e0d3      	b.n	80037ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800364c:	2b01      	cmp	r3, #1
 800364e:	d101      	bne.n	8003654 <HAL_I2C_Master_Transmit+0x50>
 8003650:	2302      	movs	r3, #2
 8003652:	e0cc      	b.n	80037ee <HAL_I2C_Master_Transmit+0x1ea>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	2b01      	cmp	r3, #1
 8003668:	d007      	beq.n	800367a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f042 0201 	orr.w	r2, r2, #1
 8003678:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003688:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2221      	movs	r2, #33	; 0x21
 800368e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2210      	movs	r2, #16
 8003696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	893a      	ldrh	r2, [r7, #8]
 80036aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	4a50      	ldr	r2, [pc, #320]	; (80037fc <HAL_I2C_Master_Transmit+0x1f8>)
 80036ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80036bc:	8979      	ldrh	r1, [r7, #10]
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	6a3a      	ldr	r2, [r7, #32]
 80036c2:	68f8      	ldr	r0, [r7, #12]
 80036c4:	f001 fcae 	bl	8005024 <I2C_MasterRequestWrite>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e08d      	b.n	80037ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036d2:	2300      	movs	r3, #0
 80036d4:	613b      	str	r3, [r7, #16]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695b      	ldr	r3, [r3, #20]
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	699b      	ldr	r3, [r3, #24]
 80036e4:	613b      	str	r3, [r7, #16]
 80036e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80036e8:	e066      	b.n	80037b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	6a39      	ldr	r1, [r7, #32]
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f001 fe6f 	bl	80053d2 <I2C_WaitOnTXEFlagUntilTimeout>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d00d      	beq.n	8003716 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d107      	bne.n	8003712 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681a      	ldr	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003710:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e06b      	b.n	80037ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800371a:	781a      	ldrb	r2, [r3, #0]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003726:	1c5a      	adds	r2, r3, #1
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003730:	b29b      	uxth	r3, r3
 8003732:	3b01      	subs	r3, #1
 8003734:	b29a      	uxth	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800373e:	3b01      	subs	r3, #1
 8003740:	b29a      	uxth	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	695b      	ldr	r3, [r3, #20]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b04      	cmp	r3, #4
 8003752:	d11b      	bne.n	800378c <HAL_I2C_Master_Transmit+0x188>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003758:	2b00      	cmp	r3, #0
 800375a:	d017      	beq.n	800378c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	781a      	ldrb	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003776:	b29b      	uxth	r3, r3
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003784:	3b01      	subs	r3, #1
 8003786:	b29a      	uxth	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	6a39      	ldr	r1, [r7, #32]
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f001 fe5f 	bl	8005454 <I2C_WaitOnBTFFlagUntilTimeout>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00d      	beq.n	80037b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d107      	bne.n	80037b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e01a      	b.n	80037ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d194      	bne.n	80036ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2220      	movs	r2, #32
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037e8:	2300      	movs	r3, #0
 80037ea:	e000      	b.n	80037ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80037ec:	2302      	movs	r3, #2
  }
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3718      	adds	r7, #24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	00100002 	.word	0x00100002
 80037fc:	ffff0000 	.word	0xffff0000

08003800 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003800:	b480      	push	{r7}
 8003802:	b087      	sub	sp, #28
 8003804:	af00      	add	r7, sp, #0
 8003806:	60f8      	str	r0, [r7, #12]
 8003808:	607a      	str	r2, [r7, #4]
 800380a:	461a      	mov	r2, r3
 800380c:	460b      	mov	r3, r1
 800380e:	817b      	strh	r3, [r7, #10]
 8003810:	4613      	mov	r3, r2
 8003812:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b20      	cmp	r3, #32
 8003822:	f040 8085 	bne.w	8003930 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003826:	4b46      	ldr	r3, [pc, #280]	; (8003940 <HAL_I2C_Master_Transmit_IT+0x140>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	08db      	lsrs	r3, r3, #3
 800382c:	4a45      	ldr	r2, [pc, #276]	; (8003944 <HAL_I2C_Master_Transmit_IT+0x144>)
 800382e:	fba2 2303 	umull	r2, r3, r2, r3
 8003832:	0a1a      	lsrs	r2, r3, #8
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	009a      	lsls	r2, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	3b01      	subs	r3, #1
 8003844:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d116      	bne.n	800387a <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2220      	movs	r2, #32
 8003856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f043 0220 	orr.w	r2, r3, #32
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e05b      	b.n	8003932 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b02      	cmp	r3, #2
 8003886:	d0db      	beq.n	8003840 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800388e:	2b01      	cmp	r3, #1
 8003890:	d101      	bne.n	8003896 <HAL_I2C_Master_Transmit_IT+0x96>
 8003892:	2302      	movs	r3, #2
 8003894:	e04d      	b.n	8003932 <HAL_I2C_Master_Transmit_IT+0x132>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2201      	movs	r2, #1
 800389a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 0301 	and.w	r3, r3, #1
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d007      	beq.n	80038bc <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f042 0201 	orr.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2221      	movs	r2, #33	; 0x21
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2210      	movs	r2, #16
 80038d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	893a      	ldrh	r2, [r7, #8]
 80038ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f2:	b29a      	uxth	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4a13      	ldr	r2, [pc, #76]	; (8003948 <HAL_I2C_Master_Transmit_IT+0x148>)
 80038fc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80038fe:	897a      	ldrh	r2, [r7, #10]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003912:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800392a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800392c:	2300      	movs	r3, #0
 800392e:	e000      	b.n	8003932 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8003930:	2302      	movs	r3, #2
  }
}
 8003932:	4618      	mov	r0, r3
 8003934:	371c      	adds	r7, #28
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	200000d0 	.word	0x200000d0
 8003944:	14f8b589 	.word	0x14f8b589
 8003948:	ffff0000 	.word	0xffff0000

0800394c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800396c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003974:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003976:	7bfb      	ldrb	r3, [r7, #15]
 8003978:	2b10      	cmp	r3, #16
 800397a:	d003      	beq.n	8003984 <HAL_I2C_EV_IRQHandler+0x38>
 800397c:	7bfb      	ldrb	r3, [r7, #15]
 800397e:	2b40      	cmp	r3, #64	; 0x40
 8003980:	f040 80b6 	bne.w	8003af0 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d10d      	bne.n	80039ba <HAL_I2C_EV_IRQHandler+0x6e>
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80039a4:	d003      	beq.n	80039ae <HAL_I2C_EV_IRQHandler+0x62>
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80039ac:	d101      	bne.n	80039b2 <HAL_I2C_EV_IRQHandler+0x66>
 80039ae:	2301      	movs	r3, #1
 80039b0:	e000      	b.n	80039b4 <HAL_I2C_EV_IRQHandler+0x68>
 80039b2:	2300      	movs	r3, #0
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	f000 8127 	beq.w	8003c08 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00c      	beq.n	80039de <HAL_I2C_EV_IRQHandler+0x92>
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	0a5b      	lsrs	r3, r3, #9
 80039c8:	f003 0301 	and.w	r3, r3, #1
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d006      	beq.n	80039de <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80039d0:	6878      	ldr	r0, [r7, #4]
 80039d2:	f001 fdaf 	bl	8005534 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80039d6:	6878      	ldr	r0, [r7, #4]
 80039d8:	f000 fd12 	bl	8004400 <I2C_Master_SB>
 80039dc:	e087      	b.n	8003aee <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	08db      	lsrs	r3, r3, #3
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d009      	beq.n	80039fe <HAL_I2C_EV_IRQHandler+0xb2>
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	0a5b      	lsrs	r3, r3, #9
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d003      	beq.n	80039fe <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f000 fd88 	bl	800450c <I2C_Master_ADD10>
 80039fc:	e077      	b.n	8003aee <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	085b      	lsrs	r3, r3, #1
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d009      	beq.n	8003a1e <HAL_I2C_EV_IRQHandler+0xd2>
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	0a5b      	lsrs	r3, r3, #9
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d003      	beq.n	8003a1e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 fda2 	bl	8004560 <I2C_Master_ADDR>
 8003a1c:	e067      	b.n	8003aee <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003a1e:	69bb      	ldr	r3, [r7, #24]
 8003a20:	089b      	lsrs	r3, r3, #2
 8003a22:	f003 0301 	and.w	r3, r3, #1
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d030      	beq.n	8003a8c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a38:	f000 80e8 	beq.w	8003c0c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	09db      	lsrs	r3, r3, #7
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00f      	beq.n	8003a68 <HAL_I2C_EV_IRQHandler+0x11c>
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	0a9b      	lsrs	r3, r3, #10
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d009      	beq.n	8003a68 <HAL_I2C_EV_IRQHandler+0x11c>
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	089b      	lsrs	r3, r3, #2
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d103      	bne.n	8003a68 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f000 f9de 	bl	8003e22 <I2C_MasterTransmit_TXE>
 8003a66:	e042      	b.n	8003aee <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	089b      	lsrs	r3, r3, #2
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 80cb 	beq.w	8003c0c <HAL_I2C_EV_IRQHandler+0x2c0>
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	0a5b      	lsrs	r3, r3, #9
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 80c4 	beq.w	8003c0c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 fa68 	bl	8003f5a <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003a8a:	e0bf      	b.n	8003c0c <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a9a:	f000 80b7 	beq.w	8003c0c <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	099b      	lsrs	r3, r3, #6
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d00f      	beq.n	8003aca <HAL_I2C_EV_IRQHandler+0x17e>
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	0a9b      	lsrs	r3, r3, #10
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d009      	beq.n	8003aca <HAL_I2C_EV_IRQHandler+0x17e>
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	089b      	lsrs	r3, r3, #2
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d103      	bne.n	8003aca <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f000 fb30 	bl	8004128 <I2C_MasterReceive_RXNE>
 8003ac8:	e011      	b.n	8003aee <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	089b      	lsrs	r3, r3, #2
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 809a 	beq.w	8003c0c <HAL_I2C_EV_IRQHandler+0x2c0>
 8003ad8:	697b      	ldr	r3, [r7, #20]
 8003ada:	0a5b      	lsrs	r3, r3, #9
 8003adc:	f003 0301 	and.w	r3, r3, #1
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 8093 	beq.w	8003c0c <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 fba0 	bl	800422c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003aec:	e08e      	b.n	8003c0c <HAL_I2C_EV_IRQHandler+0x2c0>
 8003aee:	e08d      	b.n	8003c0c <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d004      	beq.n	8003b02 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	61fb      	str	r3, [r7, #28]
 8003b00:	e007      	b.n	8003b12 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	695b      	ldr	r3, [r3, #20]
 8003b10:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	085b      	lsrs	r3, r3, #1
 8003b16:	f003 0301 	and.w	r3, r3, #1
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d012      	beq.n	8003b44 <HAL_I2C_EV_IRQHandler+0x1f8>
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	0a5b      	lsrs	r3, r3, #9
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d00c      	beq.n	8003b44 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	699b      	ldr	r3, [r3, #24]
 8003b38:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003b3a:	69b9      	ldr	r1, [r7, #24]
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 ff5e 	bl	80049fe <I2C_Slave_ADDR>
 8003b42:	e066      	b.n	8003c12 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	091b      	lsrs	r3, r3, #4
 8003b48:	f003 0301 	and.w	r3, r3, #1
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d009      	beq.n	8003b64 <HAL_I2C_EV_IRQHandler+0x218>
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	0a5b      	lsrs	r3, r3, #9
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d003      	beq.n	8003b64 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 ff93 	bl	8004a88 <I2C_Slave_STOPF>
 8003b62:	e056      	b.n	8003c12 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b64:	7bbb      	ldrb	r3, [r7, #14]
 8003b66:	2b21      	cmp	r3, #33	; 0x21
 8003b68:	d002      	beq.n	8003b70 <HAL_I2C_EV_IRQHandler+0x224>
 8003b6a:	7bbb      	ldrb	r3, [r7, #14]
 8003b6c:	2b29      	cmp	r3, #41	; 0x29
 8003b6e:	d125      	bne.n	8003bbc <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	09db      	lsrs	r3, r3, #7
 8003b74:	f003 0301 	and.w	r3, r3, #1
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d00f      	beq.n	8003b9c <HAL_I2C_EV_IRQHandler+0x250>
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	0a9b      	lsrs	r3, r3, #10
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d009      	beq.n	8003b9c <HAL_I2C_EV_IRQHandler+0x250>
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	089b      	lsrs	r3, r3, #2
 8003b8c:	f003 0301 	and.w	r3, r3, #1
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d103      	bne.n	8003b9c <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 fe74 	bl	8004882 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003b9a:	e039      	b.n	8003c10 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003b9c:	69fb      	ldr	r3, [r7, #28]
 8003b9e:	089b      	lsrs	r3, r3, #2
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d033      	beq.n	8003c10 <HAL_I2C_EV_IRQHandler+0x2c4>
 8003ba8:	697b      	ldr	r3, [r7, #20]
 8003baa:	0a5b      	lsrs	r3, r3, #9
 8003bac:	f003 0301 	and.w	r3, r3, #1
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d02d      	beq.n	8003c10 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 fea1 	bl	80048fc <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bba:	e029      	b.n	8003c10 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	099b      	lsrs	r3, r3, #6
 8003bc0:	f003 0301 	and.w	r3, r3, #1
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00f      	beq.n	8003be8 <HAL_I2C_EV_IRQHandler+0x29c>
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	0a9b      	lsrs	r3, r3, #10
 8003bcc:	f003 0301 	and.w	r3, r3, #1
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d009      	beq.n	8003be8 <HAL_I2C_EV_IRQHandler+0x29c>
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	089b      	lsrs	r3, r3, #2
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d103      	bne.n	8003be8 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003be0:	6878      	ldr	r0, [r7, #4]
 8003be2:	f000 feac 	bl	800493e <I2C_SlaveReceive_RXNE>
 8003be6:	e014      	b.n	8003c12 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	089b      	lsrs	r3, r3, #2
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00e      	beq.n	8003c12 <HAL_I2C_EV_IRQHandler+0x2c6>
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	0a5b      	lsrs	r3, r3, #9
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d008      	beq.n	8003c12 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	f000 feda 	bl	80049ba <I2C_SlaveReceive_BTF>
 8003c06:	e004      	b.n	8003c12 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8003c08:	bf00      	nop
 8003c0a:	e002      	b.n	8003c12 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003c0c:	bf00      	nop
 8003c0e:	e000      	b.n	8003c12 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003c10:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003c12:	3720      	adds	r7, #32
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08a      	sub	sp, #40	; 0x28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8003c30:	2300      	movs	r3, #0
 8003c32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c3a:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c3c:	6a3b      	ldr	r3, [r7, #32]
 8003c3e:	0a1b      	lsrs	r3, r3, #8
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00e      	beq.n	8003c66 <HAL_I2C_ER_IRQHandler+0x4e>
 8003c48:	69fb      	ldr	r3, [r7, #28]
 8003c4a:	0a1b      	lsrs	r3, r3, #8
 8003c4c:	f003 0301 	and.w	r3, r3, #1
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d008      	beq.n	8003c66 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8003c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003c64:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c66:	6a3b      	ldr	r3, [r7, #32]
 8003c68:	0a5b      	lsrs	r3, r3, #9
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d00e      	beq.n	8003c90 <HAL_I2C_ER_IRQHandler+0x78>
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	0a1b      	lsrs	r3, r3, #8
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d008      	beq.n	8003c90 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	f043 0302 	orr.w	r3, r3, #2
 8003c84:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003c8e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003c90:	6a3b      	ldr	r3, [r7, #32]
 8003c92:	0a9b      	lsrs	r3, r3, #10
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d03f      	beq.n	8003d1c <HAL_I2C_ER_IRQHandler+0x104>
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	0a1b      	lsrs	r3, r3, #8
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d039      	beq.n	8003d1c <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003ca8:	7efb      	ldrb	r3, [r7, #27]
 8003caa:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cb0:	b29b      	uxth	r3, r3
 8003cb2:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cba:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc0:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003cc2:	7ebb      	ldrb	r3, [r7, #26]
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d112      	bne.n	8003cee <HAL_I2C_ER_IRQHandler+0xd6>
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10f      	bne.n	8003cee <HAL_I2C_ER_IRQHandler+0xd6>
 8003cce:	7cfb      	ldrb	r3, [r7, #19]
 8003cd0:	2b21      	cmp	r3, #33	; 0x21
 8003cd2:	d008      	beq.n	8003ce6 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003cd4:	7cfb      	ldrb	r3, [r7, #19]
 8003cd6:	2b29      	cmp	r3, #41	; 0x29
 8003cd8:	d005      	beq.n	8003ce6 <HAL_I2C_ER_IRQHandler+0xce>
 8003cda:	7cfb      	ldrb	r3, [r7, #19]
 8003cdc:	2b28      	cmp	r3, #40	; 0x28
 8003cde:	d106      	bne.n	8003cee <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b21      	cmp	r3, #33	; 0x21
 8003ce4:	d103      	bne.n	8003cee <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fffe 	bl	8004ce8 <I2C_Slave_AF>
 8003cec:	e016      	b.n	8003d1c <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cf6:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfa:	f043 0304 	orr.w	r3, r3, #4
 8003cfe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003d00:	7efb      	ldrb	r3, [r7, #27]
 8003d02:	2b10      	cmp	r3, #16
 8003d04:	d002      	beq.n	8003d0c <HAL_I2C_ER_IRQHandler+0xf4>
 8003d06:	7efb      	ldrb	r3, [r7, #27]
 8003d08:	2b40      	cmp	r3, #64	; 0x40
 8003d0a:	d107      	bne.n	8003d1c <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d1a:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003d1c:	6a3b      	ldr	r3, [r7, #32]
 8003d1e:	0adb      	lsrs	r3, r3, #11
 8003d20:	f003 0301 	and.w	r3, r3, #1
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d00e      	beq.n	8003d46 <HAL_I2C_ER_IRQHandler+0x12e>
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	0a1b      	lsrs	r3, r3, #8
 8003d2c:	f003 0301 	and.w	r3, r3, #1
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d008      	beq.n	8003d46 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d36:	f043 0308 	orr.w	r3, r3, #8
 8003d3a:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003d44:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d008      	beq.n	8003d5e <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	431a      	orrs	r2, r3
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f001 f835 	bl	8004dc8 <I2C_ITError>
  }
}
 8003d5e:	bf00      	nop
 8003d60:	3728      	adds	r7, #40	; 0x28
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr

08003d7a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b083      	sub	sp, #12
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003d8e:	b480      	push	{r7}
 8003d90:	b083      	sub	sp, #12
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003d96:	bf00      	nop
 8003d98:	370c      	adds	r7, #12
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da0:	4770      	bx	lr

08003da2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003da2:	b480      	push	{r7}
 8003da4:	b083      	sub	sp, #12
 8003da6:	af00      	add	r7, sp, #0
 8003da8:	6078      	str	r0, [r7, #4]
 8003daa:	460b      	mov	r3, r1
 8003dac:	70fb      	strb	r3, [r7, #3]
 8003dae:	4613      	mov	r3, r2
 8003db0:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003db2:	bf00      	nop
 8003db4:	370c      	adds	r7, #12
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr

08003dbe <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr

08003dd2 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	b083      	sub	sp, #12
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003de6:	b480      	push	{r7}
 8003de8:	b083      	sub	sp, #12
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003dee:	bf00      	nop
 8003df0:	370c      	adds	r7, #12
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b083      	sub	sp, #12
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003e02:	bf00      	nop
 8003e04:	370c      	adds	r7, #12
 8003e06:	46bd      	mov	sp, r7
 8003e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0c:	4770      	bx	lr

08003e0e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003e0e:	b480      	push	{r7}
 8003e10:	b083      	sub	sp, #12
 8003e12:	af00      	add	r7, sp, #0
 8003e14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003e16:	bf00      	nop
 8003e18:	370c      	adds	r7, #12
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e20:	4770      	bx	lr

08003e22 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b084      	sub	sp, #16
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e30:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e38:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3e:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d150      	bne.n	8003eea <I2C_MasterTransmit_TXE+0xc8>
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
 8003e4a:	2b21      	cmp	r3, #33	; 0x21
 8003e4c:	d14d      	bne.n	8003eea <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d01d      	beq.n	8003e90 <I2C_MasterTransmit_TXE+0x6e>
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2b20      	cmp	r3, #32
 8003e58:	d01a      	beq.n	8003e90 <I2C_MasterTransmit_TXE+0x6e>
 8003e5a:	68bb      	ldr	r3, [r7, #8]
 8003e5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003e60:	d016      	beq.n	8003e90 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	685a      	ldr	r2, [r3, #4]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e70:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2211      	movs	r2, #17
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f7fd ffcd 	bl	8001e28 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003e8e:	e060      	b.n	8003f52 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e9e:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eae:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b40      	cmp	r3, #64	; 0x40
 8003ec8:	d107      	bne.n	8003eda <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7ff ff7d 	bl	8003dd2 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ed8:	e03b      	b.n	8003f52 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7fd ffa0 	bl	8001e28 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ee8:	e033      	b.n	8003f52 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003eea:	7bfb      	ldrb	r3, [r7, #15]
 8003eec:	2b21      	cmp	r3, #33	; 0x21
 8003eee:	d005      	beq.n	8003efc <I2C_MasterTransmit_TXE+0xda>
 8003ef0:	7bbb      	ldrb	r3, [r7, #14]
 8003ef2:	2b40      	cmp	r3, #64	; 0x40
 8003ef4:	d12d      	bne.n	8003f52 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
 8003ef8:	2b22      	cmp	r3, #34	; 0x22
 8003efa:	d12a      	bne.n	8003f52 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f00:	b29b      	uxth	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d108      	bne.n	8003f18 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685a      	ldr	r2, [r3, #4]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f14:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003f16:	e01c      	b.n	8003f52 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	2b40      	cmp	r3, #64	; 0x40
 8003f22:	d103      	bne.n	8003f2c <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 f898 	bl	800405a <I2C_MemoryTransmit_TXE_BTF>
}
 8003f2a:	e012      	b.n	8003f52 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	781a      	ldrb	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f50:	e7ff      	b.n	8003f52 <I2C_MasterTransmit_TXE+0x130>
 8003f52:	bf00      	nop
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b084      	sub	sp, #16
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f66:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f6e:	b2db      	uxtb	r3, r3
 8003f70:	2b21      	cmp	r3, #33	; 0x21
 8003f72:	d165      	bne.n	8004040 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f78:	b29b      	uxth	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d012      	beq.n	8003fa4 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	781a      	ldrb	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8e:	1c5a      	adds	r2, r3, #1
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f98:	b29b      	uxth	r3, r3
 8003f9a:	3b01      	subs	r3, #1
 8003f9c:	b29a      	uxth	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003fa2:	e056      	b.n	8004052 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d01d      	beq.n	8003fe6 <I2C_MasterTransmit_BTF+0x8c>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2b20      	cmp	r3, #32
 8003fae:	d01a      	beq.n	8003fe6 <I2C_MasterTransmit_BTF+0x8c>
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fb6:	d016      	beq.n	8003fe6 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	685a      	ldr	r2, [r3, #4]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fc6:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2211      	movs	r2, #17
 8003fcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2220      	movs	r2, #32
 8003fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7fd ff22 	bl	8001e28 <HAL_I2C_MasterTxCpltCallback>
}
 8003fe4:	e035      	b.n	8004052 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ff4:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004004:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800401a:	b2db      	uxtb	r3, r3
 800401c:	2b40      	cmp	r3, #64	; 0x40
 800401e:	d107      	bne.n	8004030 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	f7ff fed2 	bl	8003dd2 <HAL_I2C_MemTxCpltCallback>
}
 800402e:	e010      	b.n	8004052 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7fd fef5 	bl	8001e28 <HAL_I2C_MasterTxCpltCallback>
}
 800403e:	e008      	b.n	8004052 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004046:	b2db      	uxtb	r3, r3
 8004048:	2b40      	cmp	r3, #64	; 0x40
 800404a:	d102      	bne.n	8004052 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f804 	bl	800405a <I2C_MemoryTransmit_TXE_BTF>
}
 8004052:	bf00      	nop
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}

0800405a <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800405a:	b480      	push	{r7}
 800405c:	b083      	sub	sp, #12
 800405e:	af00      	add	r7, sp, #0
 8004060:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004066:	2b00      	cmp	r3, #0
 8004068:	d11d      	bne.n	80040a6 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800406e:	2b01      	cmp	r3, #1
 8004070:	d10b      	bne.n	800408a <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004076:	b2da      	uxtb	r2, r3
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004082:	1c9a      	adds	r2, r3, #2
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004088:	e048      	b.n	800411c <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800408e:	b29b      	uxth	r3, r3
 8004090:	121b      	asrs	r3, r3, #8
 8004092:	b2da      	uxtb	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800409e:	1c5a      	adds	r2, r3, #1
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80040a4:	e03a      	b.n	800411c <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d10b      	bne.n	80040c6 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040be:	1c5a      	adds	r2, r3, #1
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80040c4:	e02a      	b.n	800411c <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d126      	bne.n	800411c <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	2b22      	cmp	r3, #34	; 0x22
 80040d8:	d108      	bne.n	80040ec <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040e8:	601a      	str	r2, [r3, #0]
}
 80040ea:	e017      	b.n	800411c <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b21      	cmp	r3, #33	; 0x21
 80040f6:	d111      	bne.n	800411c <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	781a      	ldrb	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004112:	b29b      	uxth	r3, r3
 8004114:	3b01      	subs	r3, #1
 8004116:	b29a      	uxth	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004136:	b2db      	uxtb	r3, r3
 8004138:	2b22      	cmp	r3, #34	; 0x22
 800413a:	d173      	bne.n	8004224 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004140:	b29b      	uxth	r3, r3
 8004142:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	2b03      	cmp	r3, #3
 8004148:	d920      	bls.n	800418c <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	691a      	ldr	r2, [r3, #16]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	b2d2      	uxtb	r2, r2
 8004156:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415c:	1c5a      	adds	r2, r3, #1
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004166:	b29b      	uxth	r3, r3
 8004168:	3b01      	subs	r3, #1
 800416a:	b29a      	uxth	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b03      	cmp	r3, #3
 8004178:	d154      	bne.n	8004224 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004188:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 800418a:	e04b      	b.n	8004224 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004190:	2b02      	cmp	r3, #2
 8004192:	d047      	beq.n	8004224 <I2C_MasterReceive_RXNE+0xfc>
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d002      	beq.n	80041a0 <I2C_MasterReceive_RXNE+0x78>
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d141      	bne.n	8004224 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681a      	ldr	r2, [r3, #0]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ae:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685a      	ldr	r2, [r3, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80041be:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	691a      	ldr	r2, [r3, #16]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	1c5a      	adds	r2, r3, #1
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041dc:	b29b      	uxth	r3, r3
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b40      	cmp	r3, #64	; 0x40
 80041f8:	d10a      	bne.n	8004210 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	2200      	movs	r2, #0
 8004206:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004208:	6878      	ldr	r0, [r7, #4]
 800420a:	f7ff fdec 	bl	8003de6 <HAL_I2C_MemRxCpltCallback>
}
 800420e:	e009      	b.n	8004224 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2212      	movs	r2, #18
 800421c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f7ff fda1 	bl	8003d66 <HAL_I2C_MasterRxCpltCallback>
}
 8004224:	bf00      	nop
 8004226:	3710      	adds	r7, #16
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004238:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800423e:	b29b      	uxth	r3, r3
 8004240:	2b04      	cmp	r3, #4
 8004242:	d11b      	bne.n	800427c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685a      	ldr	r2, [r3, #4]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004252:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	691a      	ldr	r2, [r3, #16]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	b2d2      	uxtb	r2, r2
 8004260:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	1c5a      	adds	r2, r3, #1
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004270:	b29b      	uxth	r3, r3
 8004272:	3b01      	subs	r3, #1
 8004274:	b29a      	uxth	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800427a:	e0bd      	b.n	80043f8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004280:	b29b      	uxth	r3, r3
 8004282:	2b03      	cmp	r3, #3
 8004284:	d129      	bne.n	80042da <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004294:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2b04      	cmp	r3, #4
 800429a:	d00a      	beq.n	80042b2 <I2C_MasterReceive_BTF+0x86>
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	2b02      	cmp	r3, #2
 80042a0:	d007      	beq.n	80042b2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042b0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	b2d2      	uxtb	r2, r2
 80042be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	1c5a      	adds	r2, r3, #1
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80042d8:	e08e      	b.n	80043f8 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042de:	b29b      	uxth	r3, r3
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d176      	bne.n	80043d2 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d002      	beq.n	80042f0 <I2C_MasterReceive_BTF+0xc4>
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2b10      	cmp	r3, #16
 80042ee:	d108      	bne.n	8004302 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	e019      	b.n	8004336 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b04      	cmp	r3, #4
 8004306:	d002      	beq.n	800430e <I2C_MasterReceive_BTF+0xe2>
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	2b02      	cmp	r3, #2
 800430c:	d108      	bne.n	8004320 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800431c:	601a      	str	r2, [r3, #0]
 800431e:	e00a      	b.n	8004336 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2b10      	cmp	r3, #16
 8004324:	d007      	beq.n	8004336 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004334:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	691a      	ldr	r2, [r3, #16]
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	b2d2      	uxtb	r2, r2
 8004342:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004348:	1c5a      	adds	r2, r3, #1
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	691a      	ldr	r2, [r3, #16]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004378:	b29b      	uxth	r3, r3
 800437a:	3b01      	subs	r3, #1
 800437c:	b29a      	uxth	r2, r3
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004390:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2220      	movs	r2, #32
 8004396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	2b40      	cmp	r3, #64	; 0x40
 80043a4:	d10a      	bne.n	80043bc <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f7ff fd16 	bl	8003de6 <HAL_I2C_MemRxCpltCallback>
}
 80043ba:	e01d      	b.n	80043f8 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2212      	movs	r2, #18
 80043c8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7ff fccb 	bl	8003d66 <HAL_I2C_MasterRxCpltCallback>
}
 80043d0:	e012      	b.n	80043f8 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	691a      	ldr	r2, [r3, #16]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043dc:	b2d2      	uxtb	r2, r2
 80043de:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	1c5a      	adds	r2, r3, #1
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043ee:	b29b      	uxth	r3, r3
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80043f8:	bf00      	nop
 80043fa:	3710      	adds	r7, #16
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b40      	cmp	r3, #64	; 0x40
 8004412:	d117      	bne.n	8004444 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004418:	2b00      	cmp	r3, #0
 800441a:	d109      	bne.n	8004430 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004420:	b2db      	uxtb	r3, r3
 8004422:	461a      	mov	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800442c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800442e:	e067      	b.n	8004500 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004434:	b2db      	uxtb	r3, r3
 8004436:	f043 0301 	orr.w	r3, r3, #1
 800443a:	b2da      	uxtb	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	611a      	str	r2, [r3, #16]
}
 8004442:	e05d      	b.n	8004500 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800444c:	d133      	bne.n	80044b6 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b21      	cmp	r3, #33	; 0x21
 8004458:	d109      	bne.n	800446e <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800445e:	b2db      	uxtb	r3, r3
 8004460:	461a      	mov	r2, r3
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800446a:	611a      	str	r2, [r3, #16]
 800446c:	e008      	b.n	8004480 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004472:	b2db      	uxtb	r3, r3
 8004474:	f043 0301 	orr.w	r3, r3, #1
 8004478:	b2da      	uxtb	r2, r3
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004484:	2b00      	cmp	r3, #0
 8004486:	d004      	beq.n	8004492 <I2C_Master_SB+0x92>
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800448c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800448e:	2b00      	cmp	r3, #0
 8004490:	d108      	bne.n	80044a4 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004496:	2b00      	cmp	r3, #0
 8004498:	d032      	beq.n	8004500 <I2C_Master_SB+0x100>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800449e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d02d      	beq.n	8004500 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044b2:	605a      	str	r2, [r3, #4]
}
 80044b4:	e024      	b.n	8004500 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d10e      	bne.n	80044dc <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c2:	b29b      	uxth	r3, r3
 80044c4:	11db      	asrs	r3, r3, #7
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	f003 0306 	and.w	r3, r3, #6
 80044cc:	b2db      	uxtb	r3, r3
 80044ce:	f063 030f 	orn	r3, r3, #15
 80044d2:	b2da      	uxtb	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	611a      	str	r2, [r3, #16]
}
 80044da:	e011      	b.n	8004500 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e0:	2b01      	cmp	r3, #1
 80044e2:	d10d      	bne.n	8004500 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	11db      	asrs	r3, r3, #7
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	f003 0306 	and.w	r3, r3, #6
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	f063 030e 	orn	r3, r3, #14
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	611a      	str	r2, [r3, #16]
}
 8004500:	bf00      	nop
 8004502:	370c      	adds	r7, #12
 8004504:	46bd      	mov	sp, r7
 8004506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450a:	4770      	bx	lr

0800450c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800450c:	b480      	push	{r7}
 800450e:	b083      	sub	sp, #12
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004518:	b2da      	uxtb	r2, r3
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004524:	2b00      	cmp	r3, #0
 8004526:	d103      	bne.n	8004530 <I2C_Master_ADD10+0x24>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800452c:	2b00      	cmp	r3, #0
 800452e:	d011      	beq.n	8004554 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004536:	2b00      	cmp	r3, #0
 8004538:	d104      	bne.n	8004544 <I2C_Master_ADD10+0x38>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800453e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004540:	2b00      	cmp	r3, #0
 8004542:	d007      	beq.n	8004554 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004552:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004554:	bf00      	nop
 8004556:	370c      	adds	r7, #12
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004560:	b480      	push	{r7}
 8004562:	b091      	sub	sp, #68	; 0x44
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800456e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004576:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457c:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004584:	b2db      	uxtb	r3, r3
 8004586:	2b22      	cmp	r3, #34	; 0x22
 8004588:	f040 8169 	bne.w	800485e <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004590:	2b00      	cmp	r3, #0
 8004592:	d10f      	bne.n	80045b4 <I2C_Master_ADDR+0x54>
 8004594:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004598:	2b40      	cmp	r3, #64	; 0x40
 800459a:	d10b      	bne.n	80045b4 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800459c:	2300      	movs	r3, #0
 800459e:	633b      	str	r3, [r7, #48]	; 0x30
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	633b      	str	r3, [r7, #48]	; 0x30
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	633b      	str	r3, [r7, #48]	; 0x30
 80045b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b2:	e160      	b.n	8004876 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d11d      	bne.n	80045f8 <I2C_Master_ADDR+0x98>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80045c4:	d118      	bne.n	80045f8 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045c6:	2300      	movs	r3, #0
 80045c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	699b      	ldr	r3, [r3, #24]
 80045d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045da:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80045ea:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f0:	1c5a      	adds	r2, r3, #1
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	651a      	str	r2, [r3, #80]	; 0x50
 80045f6:	e13e      	b.n	8004876 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045fc:	b29b      	uxth	r3, r3
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d113      	bne.n	800462a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004602:	2300      	movs	r3, #0
 8004604:	62bb      	str	r3, [r7, #40]	; 0x28
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	62bb      	str	r3, [r7, #40]	; 0x28
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	699b      	ldr	r3, [r3, #24]
 8004614:	62bb      	str	r3, [r7, #40]	; 0x28
 8004616:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	e115      	b.n	8004856 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800462e:	b29b      	uxth	r3, r3
 8004630:	2b01      	cmp	r3, #1
 8004632:	f040 808a 	bne.w	800474a <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8004636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004638:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800463c:	d137      	bne.n	80046ae <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800464c:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004658:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800465c:	d113      	bne.n	8004686 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800466c:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800466e:	2300      	movs	r3, #0
 8004670:	627b      	str	r3, [r7, #36]	; 0x24
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	695b      	ldr	r3, [r3, #20]
 8004678:	627b      	str	r3, [r7, #36]	; 0x24
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
 8004682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004684:	e0e7      	b.n	8004856 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004686:	2300      	movs	r3, #0
 8004688:	623b      	str	r3, [r7, #32]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	623b      	str	r3, [r7, #32]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	623b      	str	r3, [r7, #32]
 800469a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681a      	ldr	r2, [r3, #0]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046aa:	601a      	str	r2, [r3, #0]
 80046ac:	e0d3      	b.n	8004856 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80046ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	d02e      	beq.n	8004712 <I2C_Master_ADDR+0x1b2>
 80046b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046b6:	2b20      	cmp	r3, #32
 80046b8:	d02b      	beq.n	8004712 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80046ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046bc:	2b12      	cmp	r3, #18
 80046be:	d102      	bne.n	80046c6 <I2C_Master_ADDR+0x166>
 80046c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c2:	2b01      	cmp	r3, #1
 80046c4:	d125      	bne.n	8004712 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80046c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d00e      	beq.n	80046ea <I2C_Master_ADDR+0x18a>
 80046cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d00b      	beq.n	80046ea <I2C_Master_ADDR+0x18a>
 80046d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d4:	2b10      	cmp	r3, #16
 80046d6:	d008      	beq.n	80046ea <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	e007      	b.n	80046fa <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	681a      	ldr	r2, [r3, #0]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80046f8:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046fa:	2300      	movs	r3, #0
 80046fc:	61fb      	str	r3, [r7, #28]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	61fb      	str	r3, [r7, #28]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	61fb      	str	r3, [r7, #28]
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	e0a1      	b.n	8004856 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004720:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004722:	2300      	movs	r3, #0
 8004724:	61bb      	str	r3, [r7, #24]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	695b      	ldr	r3, [r3, #20]
 800472c:	61bb      	str	r3, [r7, #24]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	61bb      	str	r3, [r7, #24]
 8004736:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681a      	ldr	r2, [r3, #0]
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	e085      	b.n	8004856 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800474e:	b29b      	uxth	r3, r3
 8004750:	2b02      	cmp	r3, #2
 8004752:	d14d      	bne.n	80047f0 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004756:	2b04      	cmp	r3, #4
 8004758:	d016      	beq.n	8004788 <I2C_Master_ADDR+0x228>
 800475a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475c:	2b02      	cmp	r3, #2
 800475e:	d013      	beq.n	8004788 <I2C_Master_ADDR+0x228>
 8004760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004762:	2b10      	cmp	r3, #16
 8004764:	d010      	beq.n	8004788 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004774:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	e007      	b.n	8004798 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004796:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047a6:	d117      	bne.n	80047d8 <I2C_Master_ADDR+0x278>
 80047a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047ae:	d00b      	beq.n	80047c8 <I2C_Master_ADDR+0x268>
 80047b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d008      	beq.n	80047c8 <I2C_Master_ADDR+0x268>
 80047b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d005      	beq.n	80047c8 <I2C_Master_ADDR+0x268>
 80047bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047be:	2b10      	cmp	r3, #16
 80047c0:	d002      	beq.n	80047c8 <I2C_Master_ADDR+0x268>
 80047c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047c4:	2b20      	cmp	r3, #32
 80047c6:	d107      	bne.n	80047d8 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	685a      	ldr	r2, [r3, #4]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80047d6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047d8:	2300      	movs	r3, #0
 80047da:	617b      	str	r3, [r7, #20]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	695b      	ldr	r3, [r3, #20]
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	699b      	ldr	r3, [r3, #24]
 80047ea:	617b      	str	r3, [r7, #20]
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	e032      	b.n	8004856 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	681a      	ldr	r2, [r3, #0]
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80047fe:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800480a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800480e:	d117      	bne.n	8004840 <I2C_Master_ADDR+0x2e0>
 8004810:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004812:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004816:	d00b      	beq.n	8004830 <I2C_Master_ADDR+0x2d0>
 8004818:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800481a:	2b01      	cmp	r3, #1
 800481c:	d008      	beq.n	8004830 <I2C_Master_ADDR+0x2d0>
 800481e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004820:	2b08      	cmp	r3, #8
 8004822:	d005      	beq.n	8004830 <I2C_Master_ADDR+0x2d0>
 8004824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004826:	2b10      	cmp	r3, #16
 8004828:	d002      	beq.n	8004830 <I2C_Master_ADDR+0x2d0>
 800482a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800482c:	2b20      	cmp	r3, #32
 800482e:	d107      	bne.n	8004840 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	685a      	ldr	r2, [r3, #4]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800483e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004840:	2300      	movs	r3, #0
 8004842:	613b      	str	r3, [r7, #16]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	613b      	str	r3, [r7, #16]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699b      	ldr	r3, [r3, #24]
 8004852:	613b      	str	r3, [r7, #16]
 8004854:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800485c:	e00b      	b.n	8004876 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	60fb      	str	r3, [r7, #12]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	60fb      	str	r3, [r7, #12]
 8004872:	68fb      	ldr	r3, [r7, #12]
}
 8004874:	e7ff      	b.n	8004876 <I2C_Master_ADDR+0x316>
 8004876:	bf00      	nop
 8004878:	3744      	adds	r7, #68	; 0x44
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr

08004882 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004882:	b580      	push	{r7, lr}
 8004884:	b084      	sub	sp, #16
 8004886:	af00      	add	r7, sp, #0
 8004888:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004890:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004896:	b29b      	uxth	r3, r3
 8004898:	2b00      	cmp	r3, #0
 800489a:	d02b      	beq.n	80048f4 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	781a      	ldrb	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ac:	1c5a      	adds	r2, r3, #1
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	3b01      	subs	r3, #1
 80048ba:	b29a      	uxth	r2, r3
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d114      	bne.n	80048f4 <I2C_SlaveTransmit_TXE+0x72>
 80048ca:	7bfb      	ldrb	r3, [r7, #15]
 80048cc:	2b29      	cmp	r3, #41	; 0x29
 80048ce:	d111      	bne.n	80048f4 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048de:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2221      	movs	r2, #33	; 0x21
 80048e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2228      	movs	r2, #40	; 0x28
 80048ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7ff fa43 	bl	8003d7a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80048f4:	bf00      	nop
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004908:	b29b      	uxth	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d011      	beq.n	8004932 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004912:	781a      	ldrb	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004928:	b29b      	uxth	r3, r3
 800492a:	3b01      	subs	r3, #1
 800492c:	b29a      	uxth	r2, r3
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr

0800493e <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b084      	sub	sp, #16
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800494c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004952:	b29b      	uxth	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d02c      	beq.n	80049b2 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	691a      	ldr	r2, [r3, #16]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	1c5a      	adds	r2, r3, #1
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004974:	b29b      	uxth	r3, r3
 8004976:	3b01      	subs	r3, #1
 8004978:	b29a      	uxth	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004982:	b29b      	uxth	r3, r3
 8004984:	2b00      	cmp	r3, #0
 8004986:	d114      	bne.n	80049b2 <I2C_SlaveReceive_RXNE+0x74>
 8004988:	7bfb      	ldrb	r3, [r7, #15]
 800498a:	2b2a      	cmp	r3, #42	; 0x2a
 800498c:	d111      	bne.n	80049b2 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800499c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2222      	movs	r2, #34	; 0x22
 80049a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2228      	movs	r2, #40	; 0x28
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7ff f9ee 	bl	8003d8e <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80049b2:	bf00      	nop
 80049b4:	3710      	adds	r7, #16
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}

080049ba <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b083      	sub	sp, #12
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049c6:	b29b      	uxth	r3, r3
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d012      	beq.n	80049f2 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	691a      	ldr	r2, [r3, #16]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d6:	b2d2      	uxtb	r2, r2
 80049d8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049de:	1c5a      	adds	r2, r3, #1
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049e8:	b29b      	uxth	r3, r3
 80049ea:	3b01      	subs	r3, #1
 80049ec:	b29a      	uxth	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80049f2:	bf00      	nop
 80049f4:	370c      	adds	r7, #12
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b084      	sub	sp, #16
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
 8004a06:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a18:	2b28      	cmp	r3, #40	; 0x28
 8004a1a:	d127      	bne.n	8004a6c <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	685a      	ldr	r2, [r3, #4]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a2a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	089b      	lsrs	r3, r3, #2
 8004a30:	f003 0301 	and.w	r3, r3, #1
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	09db      	lsrs	r3, r3, #7
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d103      	bne.n	8004a50 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	81bb      	strh	r3, [r7, #12]
 8004a4e:	e002      	b.n	8004a56 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004a5e:	89ba      	ldrh	r2, [r7, #12]
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
 8004a62:	4619      	mov	r1, r3
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f7ff f99c 	bl	8003da2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004a6a:	e008      	b.n	8004a7e <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f06f 0202 	mvn.w	r2, #2
 8004a74:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004a7e:	bf00      	nop
 8004a80:	3710      	adds	r7, #16
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
	...

08004a88 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a96:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	685a      	ldr	r2, [r3, #4]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004aa6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	60bb      	str	r3, [r7, #8]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	60bb      	str	r3, [r7, #8]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681a      	ldr	r2, [r3, #0]
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f042 0201 	orr.w	r2, r2, #1
 8004ac2:	601a      	str	r2, [r3, #0]
 8004ac4:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ad4:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ae0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ae4:	d172      	bne.n	8004bcc <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004ae6:	7bfb      	ldrb	r3, [r7, #15]
 8004ae8:	2b22      	cmp	r3, #34	; 0x22
 8004aea:	d002      	beq.n	8004af2 <I2C_Slave_STOPF+0x6a>
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
 8004aee:	2b2a      	cmp	r3, #42	; 0x2a
 8004af0:	d135      	bne.n	8004b5e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	b29a      	uxth	r2, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d005      	beq.n	8004b16 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	f043 0204 	orr.w	r2, r3, #4
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	685a      	ldr	r2, [r3, #4]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b24:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7fe fa57 	bl	8002fde <HAL_DMA_GetState>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d049      	beq.n	8004bca <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3a:	4a69      	ldr	r2, [pc, #420]	; (8004ce0 <I2C_Slave_STOPF+0x258>)
 8004b3c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fe fa29 	bl	8002f9a <HAL_DMA_Abort_IT>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d03d      	beq.n	8004bca <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004b58:	4610      	mov	r0, r2
 8004b5a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004b5c:	e035      	b.n	8004bca <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	b29a      	uxth	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b70:	b29b      	uxth	r3, r3
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d005      	beq.n	8004b82 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	f043 0204 	orr.w	r2, r3, #4
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	685a      	ldr	r2, [r3, #4]
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b90:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b96:	4618      	mov	r0, r3
 8004b98:	f7fe fa21 	bl	8002fde <HAL_DMA_GetState>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d014      	beq.n	8004bcc <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ba6:	4a4e      	ldr	r2, [pc, #312]	; (8004ce0 <I2C_Slave_STOPF+0x258>)
 8004ba8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7fe f9f3 	bl	8002f9a <HAL_DMA_Abort_IT>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d008      	beq.n	8004bcc <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc0:	687a      	ldr	r2, [r7, #4]
 8004bc2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004bc4:	4610      	mov	r0, r2
 8004bc6:	4798      	blx	r3
 8004bc8:	e000      	b.n	8004bcc <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004bca:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d03e      	beq.n	8004c54 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	695b      	ldr	r3, [r3, #20]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b04      	cmp	r3, #4
 8004be2:	d112      	bne.n	8004c0a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691a      	ldr	r2, [r3, #16]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	b2d2      	uxtb	r2, r2
 8004bf0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	1c5a      	adds	r2, r3, #1
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	695b      	ldr	r3, [r3, #20]
 8004c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c14:	2b40      	cmp	r3, #64	; 0x40
 8004c16:	d112      	bne.n	8004c3e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	691a      	ldr	r2, [r3, #16]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	b2d2      	uxtb	r2, r2
 8004c24:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	1c5a      	adds	r2, r3, #1
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	3b01      	subs	r3, #1
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d005      	beq.n	8004c54 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c4c:	f043 0204 	orr.w	r2, r3, #4
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d003      	beq.n	8004c64 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 f8b3 	bl	8004dc8 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004c62:	e039      	b.n	8004cd8 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
 8004c66:	2b2a      	cmp	r3, #42	; 0x2a
 8004c68:	d109      	bne.n	8004c7e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2228      	movs	r2, #40	; 0x28
 8004c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff f888 	bl	8003d8e <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2b28      	cmp	r3, #40	; 0x28
 8004c88:	d111      	bne.n	8004cae <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a15      	ldr	r2, [pc, #84]	; (8004ce4 <I2C_Slave_STOPF+0x25c>)
 8004c8e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2220      	movs	r2, #32
 8004c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7ff f889 	bl	8003dbe <HAL_I2C_ListenCpltCallback>
}
 8004cac:	e014      	b.n	8004cd8 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb2:	2b22      	cmp	r3, #34	; 0x22
 8004cb4:	d002      	beq.n	8004cbc <I2C_Slave_STOPF+0x234>
 8004cb6:	7bfb      	ldrb	r3, [r7, #15]
 8004cb8:	2b22      	cmp	r3, #34	; 0x22
 8004cba:	d10d      	bne.n	8004cd8 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f7ff f85b 	bl	8003d8e <HAL_I2C_SlaveRxCpltCallback>
}
 8004cd8:	bf00      	nop
 8004cda:	3710      	adds	r7, #16
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	08005129 	.word	0x08005129
 8004ce4:	ffff0000 	.word	0xffff0000

08004ce8 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cfc:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b08      	cmp	r3, #8
 8004d02:	d002      	beq.n	8004d0a <I2C_Slave_AF+0x22>
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2b20      	cmp	r3, #32
 8004d08:	d129      	bne.n	8004d5e <I2C_Slave_AF+0x76>
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
 8004d0c:	2b28      	cmp	r3, #40	; 0x28
 8004d0e:	d126      	bne.n	8004d5e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a2c      	ldr	r2, [pc, #176]	; (8004dc4 <I2C_Slave_AF+0xdc>)
 8004d14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	685a      	ldr	r2, [r3, #4]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d24:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d2e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d3e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2220      	movs	r2, #32
 8004d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f7ff f831 	bl	8003dbe <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004d5c:	e02e      	b.n	8004dbc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004d5e:	7bfb      	ldrb	r3, [r7, #15]
 8004d60:	2b21      	cmp	r3, #33	; 0x21
 8004d62:	d126      	bne.n	8004db2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a17      	ldr	r2, [pc, #92]	; (8004dc4 <I2C_Slave_AF+0xdc>)
 8004d68:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2221      	movs	r2, #33	; 0x21
 8004d6e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2220      	movs	r2, #32
 8004d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	685a      	ldr	r2, [r3, #4]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d8e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d98:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004da8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f7fe ffe5 	bl	8003d7a <HAL_I2C_SlaveTxCpltCallback>
}
 8004db0:	e004      	b.n	8004dbc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004dba:	615a      	str	r2, [r3, #20]
}
 8004dbc:	bf00      	nop
 8004dbe:	3710      	adds	r7, #16
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	ffff0000 	.word	0xffff0000

08004dc8 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	2b10      	cmp	r3, #16
 8004de2:	d10a      	bne.n	8004dfa <I2C_ITError+0x32>
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
 8004de6:	2b22      	cmp	r3, #34	; 0x22
 8004de8:	d107      	bne.n	8004dfa <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004df8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004dfa:	7bfb      	ldrb	r3, [r7, #15]
 8004dfc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004e00:	2b28      	cmp	r3, #40	; 0x28
 8004e02:	d107      	bne.n	8004e14 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2228      	movs	r2, #40	; 0x28
 8004e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004e12:	e015      	b.n	8004e40 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e22:	d006      	beq.n	8004e32 <I2C_ITError+0x6a>
 8004e24:	7bfb      	ldrb	r3, [r7, #15]
 8004e26:	2b60      	cmp	r3, #96	; 0x60
 8004e28:	d003      	beq.n	8004e32 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e4e:	d162      	bne.n	8004f16 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e5e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d020      	beq.n	8004eb0 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e72:	4a6a      	ldr	r2, [pc, #424]	; (800501c <I2C_ITError+0x254>)
 8004e74:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fe f88d 	bl	8002f9a <HAL_DMA_Abort_IT>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 8089 	beq.w	8004f9a <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	681a      	ldr	r2, [r3, #0]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f022 0201 	bic.w	r2, r2, #1
 8004e96:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004eaa:	4610      	mov	r0, r2
 8004eac:	4798      	blx	r3
 8004eae:	e074      	b.n	8004f9a <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb4:	4a59      	ldr	r2, [pc, #356]	; (800501c <I2C_ITError+0x254>)
 8004eb6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f7fe f86c 	bl	8002f9a <HAL_DMA_Abort_IT>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d068      	beq.n	8004f9a <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed2:	2b40      	cmp	r3, #64	; 0x40
 8004ed4:	d10b      	bne.n	8004eee <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	691a      	ldr	r2, [r3, #16]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	b2d2      	uxtb	r2, r2
 8004ee2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0201 	bic.w	r2, r2, #1
 8004efc:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2220      	movs	r2, #32
 8004f02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f10:	4610      	mov	r0, r2
 8004f12:	4798      	blx	r3
 8004f14:	e041      	b.n	8004f9a <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	2b60      	cmp	r3, #96	; 0x60
 8004f20:	d125      	bne.n	8004f6e <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2220      	movs	r2, #32
 8004f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	695b      	ldr	r3, [r3, #20]
 8004f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f3a:	2b40      	cmp	r3, #64	; 0x40
 8004f3c:	d10b      	bne.n	8004f56 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	691a      	ldr	r2, [r3, #16]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f48:	b2d2      	uxtb	r2, r2
 8004f4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f50:	1c5a      	adds	r2, r3, #1
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	681a      	ldr	r2, [r3, #0]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0201 	bic.w	r2, r2, #1
 8004f64:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fe ff51 	bl	8003e0e <HAL_I2C_AbortCpltCallback>
 8004f6c:	e015      	b.n	8004f9a <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695b      	ldr	r3, [r3, #20]
 8004f74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f78:	2b40      	cmp	r3, #64	; 0x40
 8004f7a:	d10b      	bne.n	8004f94 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	691a      	ldr	r2, [r3, #16]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f86:	b2d2      	uxtb	r2, r2
 8004f88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8e:	1c5a      	adds	r2, r3, #1
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7fe ff30 	bl	8003dfa <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10e      	bne.n	8004fc8 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d109      	bne.n	8004fc8 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d104      	bne.n	8004fc8 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d007      	beq.n	8004fd8 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004fd6:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fde:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d113      	bne.n	8005014 <I2C_ITError+0x24c>
 8004fec:	7bfb      	ldrb	r3, [r7, #15]
 8004fee:	2b28      	cmp	r3, #40	; 0x28
 8004ff0:	d110      	bne.n	8005014 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a0a      	ldr	r2, [pc, #40]	; (8005020 <I2C_ITError+0x258>)
 8004ff6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2220      	movs	r2, #32
 8005002:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f7fe fed5 	bl	8003dbe <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005014:	bf00      	nop
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	08005129 	.word	0x08005129
 8005020:	ffff0000 	.word	0xffff0000

08005024 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b088      	sub	sp, #32
 8005028:	af02      	add	r7, sp, #8
 800502a:	60f8      	str	r0, [r7, #12]
 800502c:	607a      	str	r2, [r7, #4]
 800502e:	603b      	str	r3, [r7, #0]
 8005030:	460b      	mov	r3, r1
 8005032:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005038:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2b08      	cmp	r3, #8
 800503e:	d006      	beq.n	800504e <I2C_MasterRequestWrite+0x2a>
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d003      	beq.n	800504e <I2C_MasterRequestWrite+0x2a>
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800504c:	d108      	bne.n	8005060 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800505c:	601a      	str	r2, [r3, #0]
 800505e:	e00b      	b.n	8005078 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005064:	2b12      	cmp	r3, #18
 8005066:	d107      	bne.n	8005078 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005076:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	9300      	str	r3, [sp, #0]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 f8ce 	bl	8005226 <I2C_WaitOnFlagUntilTimeout>
 800508a:	4603      	mov	r3, r0
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00c      	beq.n	80050aa <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509a:	2b00      	cmp	r3, #0
 800509c:	d003      	beq.n	80050a6 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80050a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e035      	b.n	8005116 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	691b      	ldr	r3, [r3, #16]
 80050ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80050b2:	d108      	bne.n	80050c6 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80050b4:	897b      	ldrh	r3, [r7, #10]
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	461a      	mov	r2, r3
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80050c2:	611a      	str	r2, [r3, #16]
 80050c4:	e01b      	b.n	80050fe <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80050c6:	897b      	ldrh	r3, [r7, #10]
 80050c8:	11db      	asrs	r3, r3, #7
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	f003 0306 	and.w	r3, r3, #6
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	f063 030f 	orn	r3, r3, #15
 80050d6:	b2da      	uxtb	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	490f      	ldr	r1, [pc, #60]	; (8005120 <I2C_MasterRequestWrite+0xfc>)
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 f8f5 	bl	80052d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e010      	b.n	8005116 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80050f4:	897b      	ldrh	r3, [r7, #10]
 80050f6:	b2da      	uxtb	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	4908      	ldr	r1, [pc, #32]	; (8005124 <I2C_MasterRequestWrite+0x100>)
 8005104:	68f8      	ldr	r0, [r7, #12]
 8005106:	f000 f8e5 	bl	80052d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800510a:	4603      	mov	r3, r0
 800510c:	2b00      	cmp	r3, #0
 800510e:	d001      	beq.n	8005114 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8005110:	2301      	movs	r3, #1
 8005112:	e000      	b.n	8005116 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8005114:	2300      	movs	r3, #0
}
 8005116:	4618      	mov	r0, r3
 8005118:	3718      	adds	r7, #24
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	00010008 	.word	0x00010008
 8005124:	00010002 	.word	0x00010002

08005128 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b084      	sub	sp, #16
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005134:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800513c:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005142:	2b00      	cmp	r3, #0
 8005144:	d003      	beq.n	800514e <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800514a:	2200      	movs	r2, #0
 800514c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800515a:	2200      	movs	r2, #0
 800515c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	681a      	ldr	r2, [r3, #0]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800516c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2200      	movs	r2, #0
 8005172:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005180:	2200      	movs	r2, #0
 8005182:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005188:	2b00      	cmp	r3, #0
 800518a:	d003      	beq.n	8005194 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005190:	2200      	movs	r2, #0
 8005192:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0201 	bic.w	r2, r2, #1
 80051a2:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	2b60      	cmp	r3, #96	; 0x60
 80051ae:	d10e      	bne.n	80051ce <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2220      	movs	r2, #32
 80051b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2200      	movs	r2, #0
 80051bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2200      	movs	r2, #0
 80051c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80051c6:	68f8      	ldr	r0, [r7, #12]
 80051c8:	f7fe fe21 	bl	8003e0e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80051cc:	e027      	b.n	800521e <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80051ce:	7afb      	ldrb	r3, [r7, #11]
 80051d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80051d4:	2b28      	cmp	r3, #40	; 0x28
 80051d6:	d117      	bne.n	8005208 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f042 0201 	orr.w	r2, r2, #1
 80051e6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80051f6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2200      	movs	r2, #0
 80051fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2228      	movs	r2, #40	; 0x28
 8005202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005206:	e007      	b.n	8005218 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	2220      	movs	r2, #32
 800520c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f7fe fdee 	bl	8003dfa <HAL_I2C_ErrorCallback>
}
 800521e:	bf00      	nop
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b084      	sub	sp, #16
 800522a:	af00      	add	r7, sp, #0
 800522c:	60f8      	str	r0, [r7, #12]
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	603b      	str	r3, [r7, #0]
 8005232:	4613      	mov	r3, r2
 8005234:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005236:	e025      	b.n	8005284 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800523e:	d021      	beq.n	8005284 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005240:	f7fd fa10 	bl	8002664 <HAL_GetTick>
 8005244:	4602      	mov	r2, r0
 8005246:	69bb      	ldr	r3, [r7, #24]
 8005248:	1ad3      	subs	r3, r2, r3
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	429a      	cmp	r2, r3
 800524e:	d302      	bcc.n	8005256 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d116      	bne.n	8005284 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	2220      	movs	r2, #32
 8005260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2200      	movs	r2, #0
 8005268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005270:	f043 0220 	orr.w	r2, r3, #32
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e023      	b.n	80052cc <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	0c1b      	lsrs	r3, r3, #16
 8005288:	b2db      	uxtb	r3, r3
 800528a:	2b01      	cmp	r3, #1
 800528c:	d10d      	bne.n	80052aa <I2C_WaitOnFlagUntilTimeout+0x84>
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	43da      	mvns	r2, r3
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	4013      	ands	r3, r2
 800529a:	b29b      	uxth	r3, r3
 800529c:	2b00      	cmp	r3, #0
 800529e:	bf0c      	ite	eq
 80052a0:	2301      	moveq	r3, #1
 80052a2:	2300      	movne	r3, #0
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	461a      	mov	r2, r3
 80052a8:	e00c      	b.n	80052c4 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	43da      	mvns	r2, r3
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	4013      	ands	r3, r2
 80052b6:	b29b      	uxth	r3, r3
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	bf0c      	ite	eq
 80052bc:	2301      	moveq	r3, #1
 80052be:	2300      	movne	r3, #0
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	461a      	mov	r2, r3
 80052c4:	79fb      	ldrb	r3, [r7, #7]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d0b6      	beq.n	8005238 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3710      	adds	r7, #16
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	60f8      	str	r0, [r7, #12]
 80052dc:	60b9      	str	r1, [r7, #8]
 80052de:	607a      	str	r2, [r7, #4]
 80052e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80052e2:	e051      	b.n	8005388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	695b      	ldr	r3, [r3, #20]
 80052ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052f2:	d123      	bne.n	800533c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	681a      	ldr	r2, [r3, #0]
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005302:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800530c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2200      	movs	r2, #0
 8005312:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2200      	movs	r2, #0
 8005320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	f043 0204 	orr.w	r2, r3, #4
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005338:	2301      	movs	r3, #1
 800533a:	e046      	b.n	80053ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005342:	d021      	beq.n	8005388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005344:	f7fd f98e 	bl	8002664 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	429a      	cmp	r2, r3
 8005352:	d302      	bcc.n	800535a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d116      	bne.n	8005388 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2220      	movs	r2, #32
 8005364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005374:	f043 0220 	orr.w	r2, r3, #32
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	2200      	movs	r2, #0
 8005380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e020      	b.n	80053ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	0c1b      	lsrs	r3, r3, #16
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b01      	cmp	r3, #1
 8005390:	d10c      	bne.n	80053ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	695b      	ldr	r3, [r3, #20]
 8005398:	43da      	mvns	r2, r3
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	4013      	ands	r3, r2
 800539e:	b29b      	uxth	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	bf14      	ite	ne
 80053a4:	2301      	movne	r3, #1
 80053a6:	2300      	moveq	r3, #0
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	e00b      	b.n	80053c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699b      	ldr	r3, [r3, #24]
 80053b2:	43da      	mvns	r2, r3
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	4013      	ands	r3, r2
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	bf14      	ite	ne
 80053be:	2301      	movne	r3, #1
 80053c0:	2300      	moveq	r3, #0
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d18d      	bne.n	80052e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}

080053d2 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80053d2:	b580      	push	{r7, lr}
 80053d4:	b084      	sub	sp, #16
 80053d6:	af00      	add	r7, sp, #0
 80053d8:	60f8      	str	r0, [r7, #12]
 80053da:	60b9      	str	r1, [r7, #8]
 80053dc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80053de:	e02d      	b.n	800543c <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f000 f878 	bl	80054d6 <I2C_IsAcknowledgeFailed>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e02d      	b.n	800544c <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053f6:	d021      	beq.n	800543c <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053f8:	f7fd f934 	bl	8002664 <HAL_GetTick>
 80053fc:	4602      	mov	r2, r0
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	1ad3      	subs	r3, r2, r3
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	429a      	cmp	r2, r3
 8005406:	d302      	bcc.n	800540e <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d116      	bne.n	800543c <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2220      	movs	r2, #32
 8005418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2200      	movs	r2, #0
 8005420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005428:	f043 0220 	orr.w	r2, r3, #32
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005438:	2301      	movs	r3, #1
 800543a:	e007      	b.n	800544c <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005446:	2b80      	cmp	r3, #128	; 0x80
 8005448:	d1ca      	bne.n	80053e0 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800544a:	2300      	movs	r3, #0
}
 800544c:	4618      	mov	r0, r3
 800544e:	3710      	adds	r7, #16
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b084      	sub	sp, #16
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005460:	e02d      	b.n	80054be <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005462:	68f8      	ldr	r0, [r7, #12]
 8005464:	f000 f837 	bl	80054d6 <I2C_IsAcknowledgeFailed>
 8005468:	4603      	mov	r3, r0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d001      	beq.n	8005472 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e02d      	b.n	80054ce <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005478:	d021      	beq.n	80054be <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800547a:	f7fd f8f3 	bl	8002664 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	429a      	cmp	r2, r3
 8005488:	d302      	bcc.n	8005490 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d116      	bne.n	80054be <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2200      	movs	r2, #0
 8005494:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2220      	movs	r2, #32
 800549a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2200      	movs	r2, #0
 80054a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	f043 0220 	orr.w	r2, r3, #32
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e007      	b.n	80054ce <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	f003 0304 	and.w	r3, r3, #4
 80054c8:	2b04      	cmp	r3, #4
 80054ca:	d1ca      	bne.n	8005462 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80054cc:	2300      	movs	r3, #0
}
 80054ce:	4618      	mov	r0, r3
 80054d0:	3710      	adds	r7, #16
 80054d2:	46bd      	mov	sp, r7
 80054d4:	bd80      	pop	{r7, pc}

080054d6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80054d6:	b480      	push	{r7}
 80054d8:	b083      	sub	sp, #12
 80054da:	af00      	add	r7, sp, #0
 80054dc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ec:	d11b      	bne.n	8005526 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054f6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2220      	movs	r2, #32
 8005502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005512:	f043 0204 	orr.w	r2, r3, #4
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e000      	b.n	8005528 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	370c      	adds	r7, #12
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005540:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005544:	d103      	bne.n	800554e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2201      	movs	r2, #1
 800554a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800554c:	e007      	b.n	800555e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005552:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005556:	d102      	bne.n	800555e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2208      	movs	r2, #8
 800555c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800555e:	bf00      	nop
 8005560:	370c      	adds	r7, #12
 8005562:	46bd      	mov	sp, r7
 8005564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005568:	4770      	bx	lr

0800556a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800556a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800556c:	b08f      	sub	sp, #60	; 0x3c
 800556e:	af0a      	add	r7, sp, #40	; 0x28
 8005570:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e10f      	b.n	800579c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d106      	bne.n	800559c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f005 fff6 	bl	800b588 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2203      	movs	r2, #3
 80055a0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d102      	bne.n	80055b6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2200      	movs	r2, #0
 80055b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4618      	mov	r0, r3
 80055bc:	f002 fe99 	bl	80082f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	603b      	str	r3, [r7, #0]
 80055c6:	687e      	ldr	r6, [r7, #4]
 80055c8:	466d      	mov	r5, sp
 80055ca:	f106 0410 	add.w	r4, r6, #16
 80055ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80055da:	e885 0003 	stmia.w	r5, {r0, r1}
 80055de:	1d33      	adds	r3, r6, #4
 80055e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055e2:	6838      	ldr	r0, [r7, #0]
 80055e4:	f002 fd70 	bl	80080c8 <USB_CoreInit>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d005      	beq.n	80055fa <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2202      	movs	r2, #2
 80055f2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e0d0      	b.n	800579c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	2100      	movs	r1, #0
 8005600:	4618      	mov	r0, r3
 8005602:	f002 fe87 	bl	8008314 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005606:	2300      	movs	r3, #0
 8005608:	73fb      	strb	r3, [r7, #15]
 800560a:	e04a      	b.n	80056a2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800560c:	7bfa      	ldrb	r2, [r7, #15]
 800560e:	6879      	ldr	r1, [r7, #4]
 8005610:	4613      	mov	r3, r2
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	1a9b      	subs	r3, r3, r2
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	440b      	add	r3, r1
 800561a:	333d      	adds	r3, #61	; 0x3d
 800561c:	2201      	movs	r2, #1
 800561e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005620:	7bfa      	ldrb	r2, [r7, #15]
 8005622:	6879      	ldr	r1, [r7, #4]
 8005624:	4613      	mov	r3, r2
 8005626:	00db      	lsls	r3, r3, #3
 8005628:	1a9b      	subs	r3, r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	440b      	add	r3, r1
 800562e:	333c      	adds	r3, #60	; 0x3c
 8005630:	7bfa      	ldrb	r2, [r7, #15]
 8005632:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005634:	7bfa      	ldrb	r2, [r7, #15]
 8005636:	7bfb      	ldrb	r3, [r7, #15]
 8005638:	b298      	uxth	r0, r3
 800563a:	6879      	ldr	r1, [r7, #4]
 800563c:	4613      	mov	r3, r2
 800563e:	00db      	lsls	r3, r3, #3
 8005640:	1a9b      	subs	r3, r3, r2
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	440b      	add	r3, r1
 8005646:	3342      	adds	r3, #66	; 0x42
 8005648:	4602      	mov	r2, r0
 800564a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800564c:	7bfa      	ldrb	r2, [r7, #15]
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	4613      	mov	r3, r2
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	1a9b      	subs	r3, r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	333f      	adds	r3, #63	; 0x3f
 800565c:	2200      	movs	r2, #0
 800565e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005660:	7bfa      	ldrb	r2, [r7, #15]
 8005662:	6879      	ldr	r1, [r7, #4]
 8005664:	4613      	mov	r3, r2
 8005666:	00db      	lsls	r3, r3, #3
 8005668:	1a9b      	subs	r3, r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	440b      	add	r3, r1
 800566e:	3344      	adds	r3, #68	; 0x44
 8005670:	2200      	movs	r2, #0
 8005672:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005674:	7bfa      	ldrb	r2, [r7, #15]
 8005676:	6879      	ldr	r1, [r7, #4]
 8005678:	4613      	mov	r3, r2
 800567a:	00db      	lsls	r3, r3, #3
 800567c:	1a9b      	subs	r3, r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	440b      	add	r3, r1
 8005682:	3348      	adds	r3, #72	; 0x48
 8005684:	2200      	movs	r2, #0
 8005686:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005688:	7bfa      	ldrb	r2, [r7, #15]
 800568a:	6879      	ldr	r1, [r7, #4]
 800568c:	4613      	mov	r3, r2
 800568e:	00db      	lsls	r3, r3, #3
 8005690:	1a9b      	subs	r3, r3, r2
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	440b      	add	r3, r1
 8005696:	3350      	adds	r3, #80	; 0x50
 8005698:	2200      	movs	r2, #0
 800569a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800569c:	7bfb      	ldrb	r3, [r7, #15]
 800569e:	3301      	adds	r3, #1
 80056a0:	73fb      	strb	r3, [r7, #15]
 80056a2:	7bfa      	ldrb	r2, [r7, #15]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d3af      	bcc.n	800560c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056ac:	2300      	movs	r3, #0
 80056ae:	73fb      	strb	r3, [r7, #15]
 80056b0:	e044      	b.n	800573c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80056b2:	7bfa      	ldrb	r2, [r7, #15]
 80056b4:	6879      	ldr	r1, [r7, #4]
 80056b6:	4613      	mov	r3, r2
 80056b8:	00db      	lsls	r3, r3, #3
 80056ba:	1a9b      	subs	r3, r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	440b      	add	r3, r1
 80056c0:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80056c4:	2200      	movs	r2, #0
 80056c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80056c8:	7bfa      	ldrb	r2, [r7, #15]
 80056ca:	6879      	ldr	r1, [r7, #4]
 80056cc:	4613      	mov	r3, r2
 80056ce:	00db      	lsls	r3, r3, #3
 80056d0:	1a9b      	subs	r3, r3, r2
 80056d2:	009b      	lsls	r3, r3, #2
 80056d4:	440b      	add	r3, r1
 80056d6:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80056da:	7bfa      	ldrb	r2, [r7, #15]
 80056dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80056de:	7bfa      	ldrb	r2, [r7, #15]
 80056e0:	6879      	ldr	r1, [r7, #4]
 80056e2:	4613      	mov	r3, r2
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	1a9b      	subs	r3, r3, r2
 80056e8:	009b      	lsls	r3, r3, #2
 80056ea:	440b      	add	r3, r1
 80056ec:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80056f0:	2200      	movs	r2, #0
 80056f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80056f4:	7bfa      	ldrb	r2, [r7, #15]
 80056f6:	6879      	ldr	r1, [r7, #4]
 80056f8:	4613      	mov	r3, r2
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	1a9b      	subs	r3, r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	440b      	add	r3, r1
 8005702:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8005706:	2200      	movs	r2, #0
 8005708:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800570a:	7bfa      	ldrb	r2, [r7, #15]
 800570c:	6879      	ldr	r1, [r7, #4]
 800570e:	4613      	mov	r3, r2
 8005710:	00db      	lsls	r3, r3, #3
 8005712:	1a9b      	subs	r3, r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	440b      	add	r3, r1
 8005718:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800571c:	2200      	movs	r2, #0
 800571e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005720:	7bfa      	ldrb	r2, [r7, #15]
 8005722:	6879      	ldr	r1, [r7, #4]
 8005724:	4613      	mov	r3, r2
 8005726:	00db      	lsls	r3, r3, #3
 8005728:	1a9b      	subs	r3, r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	440b      	add	r3, r1
 800572e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8005732:	2200      	movs	r2, #0
 8005734:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005736:	7bfb      	ldrb	r3, [r7, #15]
 8005738:	3301      	adds	r3, #1
 800573a:	73fb      	strb	r3, [r7, #15]
 800573c:	7bfa      	ldrb	r2, [r7, #15]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	429a      	cmp	r2, r3
 8005744:	d3b5      	bcc.n	80056b2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	603b      	str	r3, [r7, #0]
 800574c:	687e      	ldr	r6, [r7, #4]
 800574e:	466d      	mov	r5, sp
 8005750:	f106 0410 	add.w	r4, r6, #16
 8005754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005758:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800575a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800575c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005760:	e885 0003 	stmia.w	r5, {r0, r1}
 8005764:	1d33      	adds	r3, r6, #4
 8005766:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005768:	6838      	ldr	r0, [r7, #0]
 800576a:	f002 fdfd 	bl	8008368 <USB_DevInit>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d005      	beq.n	8005780 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e00d      	b.n	800579c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4618      	mov	r0, r3
 8005796:	f003 fe3c 	bl	8009412 <USB_DevDisconnect>

  return HAL_OK;
 800579a:	2300      	movs	r3, #0
}
 800579c:	4618      	mov	r0, r3
 800579e:	3714      	adds	r7, #20
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080057a4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d101      	bne.n	80057c0 <HAL_PCD_Start+0x1c>
 80057bc:	2302      	movs	r3, #2
 80057be:	e020      	b.n	8005802 <HAL_PCD_Start+0x5e>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2201      	movs	r2, #1
 80057c4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d109      	bne.n	80057e4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d005      	beq.n	80057e4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057dc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f003 fdfa 	bl	80093e2 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f002 fd6c 	bl	80082d0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005800:	2300      	movs	r3, #0
}
 8005802:	4618      	mov	r0, r3
 8005804:	3710      	adds	r7, #16
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800580a:	b590      	push	{r4, r7, lr}
 800580c:	b08d      	sub	sp, #52	; 0x34
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005818:	6a3b      	ldr	r3, [r7, #32]
 800581a:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4618      	mov	r0, r3
 8005822:	f003 fea1 	bl	8009568 <USB_GetMode>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	f040 839d 	bne.w	8005f68 <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4618      	mov	r0, r3
 8005834:	f003 fe05 	bl	8009442 <USB_ReadInterrupts>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 8393 	beq.w	8005f66 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4618      	mov	r0, r3
 8005846:	f003 fdfc 	bl	8009442 <USB_ReadInterrupts>
 800584a:	4603      	mov	r3, r0
 800584c:	f003 0302 	and.w	r3, r3, #2
 8005850:	2b02      	cmp	r3, #2
 8005852:	d107      	bne.n	8005864 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	695a      	ldr	r2, [r3, #20]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f002 0202 	and.w	r2, r2, #2
 8005862:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4618      	mov	r0, r3
 800586a:	f003 fdea 	bl	8009442 <USB_ReadInterrupts>
 800586e:	4603      	mov	r3, r0
 8005870:	f003 0310 	and.w	r3, r3, #16
 8005874:	2b10      	cmp	r3, #16
 8005876:	d161      	bne.n	800593c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	699a      	ldr	r2, [r3, #24]
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f022 0210 	bic.w	r2, r2, #16
 8005886:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8005888:	6a3b      	ldr	r3, [r7, #32]
 800588a:	6a1b      	ldr	r3, [r3, #32]
 800588c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800588e:	69bb      	ldr	r3, [r7, #24]
 8005890:	f003 020f 	and.w	r2, r3, #15
 8005894:	4613      	mov	r3, r2
 8005896:	00db      	lsls	r3, r3, #3
 8005898:	1a9b      	subs	r3, r3, r2
 800589a:	009b      	lsls	r3, r3, #2
 800589c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	4413      	add	r3, r2
 80058a4:	3304      	adds	r3, #4
 80058a6:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80058a8:	69bb      	ldr	r3, [r7, #24]
 80058aa:	0c5b      	lsrs	r3, r3, #17
 80058ac:	f003 030f 	and.w	r3, r3, #15
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d124      	bne.n	80058fe <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80058ba:	4013      	ands	r3, r2
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d035      	beq.n	800592c <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80058c0:	697b      	ldr	r3, [r7, #20]
 80058c2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80058c4:	69bb      	ldr	r3, [r7, #24]
 80058c6:	091b      	lsrs	r3, r3, #4
 80058c8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80058ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	461a      	mov	r2, r3
 80058d2:	6a38      	ldr	r0, [r7, #32]
 80058d4:	f003 fc62 	bl	800919c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	091b      	lsrs	r3, r3, #4
 80058e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058e4:	441a      	add	r2, r3
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	699a      	ldr	r2, [r3, #24]
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	091b      	lsrs	r3, r3, #4
 80058f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80058f6:	441a      	add	r2, r3
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	619a      	str	r2, [r3, #24]
 80058fc:	e016      	b.n	800592c <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	0c5b      	lsrs	r3, r3, #17
 8005902:	f003 030f 	and.w	r3, r3, #15
 8005906:	2b06      	cmp	r3, #6
 8005908:	d110      	bne.n	800592c <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005910:	2208      	movs	r2, #8
 8005912:	4619      	mov	r1, r3
 8005914:	6a38      	ldr	r0, [r7, #32]
 8005916:	f003 fc41 	bl	800919c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	699a      	ldr	r2, [r3, #24]
 800591e:	69bb      	ldr	r3, [r7, #24]
 8005920:	091b      	lsrs	r3, r3, #4
 8005922:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005926:	441a      	add	r2, r3
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	699a      	ldr	r2, [r3, #24]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f042 0210 	orr.w	r2, r2, #16
 800593a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4618      	mov	r0, r3
 8005942:	f003 fd7e 	bl	8009442 <USB_ReadInterrupts>
 8005946:	4603      	mov	r3, r0
 8005948:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800594c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005950:	d16e      	bne.n	8005a30 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4618      	mov	r0, r3
 800595c:	f003 fd84 	bl	8009468 <USB_ReadDevAllOutEpInterrupt>
 8005960:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005962:	e062      	b.n	8005a2a <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005966:	f003 0301 	and.w	r3, r3, #1
 800596a:	2b00      	cmp	r3, #0
 800596c:	d057      	beq.n	8005a1e <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005974:	b2d2      	uxtb	r2, r2
 8005976:	4611      	mov	r1, r2
 8005978:	4618      	mov	r0, r3
 800597a:	f003 fda9 	bl	80094d0 <USB_ReadDevOutEPInterrupt>
 800597e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	f003 0301 	and.w	r3, r3, #1
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00c      	beq.n	80059a4 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800598a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598c:	015a      	lsls	r2, r3, #5
 800598e:	69fb      	ldr	r3, [r7, #28]
 8005990:	4413      	add	r3, r2
 8005992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005996:	461a      	mov	r2, r3
 8005998:	2301      	movs	r3, #1
 800599a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800599c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fdb0 	bl	8006504 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	f003 0308 	and.w	r3, r3, #8
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00c      	beq.n	80059c8 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80059ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b0:	015a      	lsls	r2, r3, #5
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	4413      	add	r3, r2
 80059b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ba:	461a      	mov	r2, r3
 80059bc:	2308      	movs	r3, #8
 80059be:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80059c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 feaa 	bl	800671c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f003 0310 	and.w	r3, r3, #16
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d008      	beq.n	80059e4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80059d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059de:	461a      	mov	r2, r3
 80059e0:	2310      	movs	r3, #16
 80059e2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	f003 0320 	and.w	r3, r3, #32
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d008      	beq.n	8005a00 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	015a      	lsls	r2, r3, #5
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	4413      	add	r3, r2
 80059f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059fa:	461a      	mov	r2, r3
 80059fc:	2320      	movs	r3, #32
 80059fe:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d009      	beq.n	8005a1e <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a0c:	015a      	lsls	r2, r3, #5
 8005a0e:	69fb      	ldr	r3, [r7, #28]
 8005a10:	4413      	add	r3, r2
 8005a12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a16:	461a      	mov	r2, r3
 8005a18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a1c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	3301      	adds	r3, #1
 8005a22:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a26:	085b      	lsrs	r3, r3, #1
 8005a28:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d199      	bne.n	8005964 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4618      	mov	r0, r3
 8005a36:	f003 fd04 	bl	8009442 <USB_ReadInterrupts>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a44:	f040 80c0 	bne.w	8005bc8 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f003 fd25 	bl	800949c <USB_ReadDevAllInEpInterrupt>
 8005a52:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005a54:	2300      	movs	r3, #0
 8005a56:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005a58:	e0b2      	b.n	8005bc0 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	f000 80a7 	beq.w	8005bb4 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a6c:	b2d2      	uxtb	r2, r2
 8005a6e:	4611      	mov	r1, r2
 8005a70:	4618      	mov	r0, r3
 8005a72:	f003 fd4b 	bl	800950c <USB_ReadDevInEPInterrupt>
 8005a76:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	f003 0301 	and.w	r3, r3, #1
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d057      	beq.n	8005b32 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	f003 030f 	and.w	r3, r3, #15
 8005a88:	2201      	movs	r2, #1
 8005a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a96:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	43db      	mvns	r3, r3
 8005a9c:	69f9      	ldr	r1, [r7, #28]
 8005a9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005aa2:	4013      	ands	r3, r2
 8005aa4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aa8:	015a      	lsls	r2, r3, #5
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	4413      	add	r3, r2
 8005aae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ab2:	461a      	mov	r2, r3
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	691b      	ldr	r3, [r3, #16]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d132      	bne.n	8005b26 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005ac0:	6879      	ldr	r1, [r7, #4]
 8005ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	1a9b      	subs	r3, r3, r2
 8005aca:	009b      	lsls	r3, r3, #2
 8005acc:	440b      	add	r3, r1
 8005ace:	3348      	adds	r3, #72	; 0x48
 8005ad0:	6819      	ldr	r1, [r3, #0]
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ad6:	4613      	mov	r3, r2
 8005ad8:	00db      	lsls	r3, r3, #3
 8005ada:	1a9b      	subs	r3, r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	4403      	add	r3, r0
 8005ae0:	3344      	adds	r3, #68	; 0x44
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4419      	add	r1, r3
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aea:	4613      	mov	r3, r2
 8005aec:	00db      	lsls	r3, r3, #3
 8005aee:	1a9b      	subs	r3, r3, r2
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4403      	add	r3, r0
 8005af4:	3348      	adds	r3, #72	; 0x48
 8005af6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d113      	bne.n	8005b26 <HAL_PCD_IRQHandler+0x31c>
 8005afe:	6879      	ldr	r1, [r7, #4]
 8005b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b02:	4613      	mov	r3, r2
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	1a9b      	subs	r3, r3, r2
 8005b08:	009b      	lsls	r3, r3, #2
 8005b0a:	440b      	add	r3, r1
 8005b0c:	3350      	adds	r3, #80	; 0x50
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d108      	bne.n	8005b26 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6818      	ldr	r0, [r3, #0]
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8005b1e:	461a      	mov	r2, r3
 8005b20:	2101      	movs	r1, #1
 8005b22:	f003 fd53 	bl	80095cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f005 fdac 	bl	800b68a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005b32:	693b      	ldr	r3, [r7, #16]
 8005b34:	f003 0308 	and.w	r3, r3, #8
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d008      	beq.n	8005b4e <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	69fb      	ldr	r3, [r7, #28]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b48:	461a      	mov	r2, r3
 8005b4a:	2308      	movs	r3, #8
 8005b4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	f003 0310 	and.w	r3, r3, #16
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d008      	beq.n	8005b6a <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b64:	461a      	mov	r2, r3
 8005b66:	2310      	movs	r3, #16
 8005b68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d008      	beq.n	8005b86 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b76:	015a      	lsls	r2, r3, #5
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	4413      	add	r3, r2
 8005b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b80:	461a      	mov	r2, r3
 8005b82:	2340      	movs	r3, #64	; 0x40
 8005b84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	f003 0302 	and.w	r3, r3, #2
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d008      	beq.n	8005ba2 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b92:	015a      	lsls	r2, r3, #5
 8005b94:	69fb      	ldr	r3, [r7, #28]
 8005b96:	4413      	add	r3, r2
 8005b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	2302      	movs	r3, #2
 8005ba0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d003      	beq.n	8005bb4 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005bac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f000 fc1b 	bl	80063ea <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bbc:	085b      	lsrs	r3, r3, #1
 8005bbe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005bc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f47f af49 	bne.w	8005a5a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f003 fc38 	bl	8009442 <USB_ReadInterrupts>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bdc:	d122      	bne.n	8005c24 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	69fa      	ldr	r2, [r7, #28]
 8005be8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bec:	f023 0301 	bic.w	r3, r3, #1
 8005bf0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d108      	bne.n	8005c0e <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005c04:	2100      	movs	r1, #0
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f000 fe26 	bl	8006858 <HAL_PCDEx_LPM_Callback>
 8005c0c:	e002      	b.n	8005c14 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f005 fdb2 	bl	800b778 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	695a      	ldr	r2, [r3, #20]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005c22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f003 fc0a 	bl	8009442 <USB_ReadInterrupts>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c38:	d112      	bne.n	8005c60 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005c3a:	69fb      	ldr	r3, [r7, #28]
 8005c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f003 0301 	and.w	r3, r3, #1
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d102      	bne.n	8005c50 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f005 fd6e 	bl	800b72c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	695a      	ldr	r2, [r3, #20]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005c5e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	4618      	mov	r0, r3
 8005c66:	f003 fbec 	bl	8009442 <USB_ReadInterrupts>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c74:	f040 80c7 	bne.w	8005e06 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	69fa      	ldr	r2, [r7, #28]
 8005c82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c86:	f023 0301 	bic.w	r3, r3, #1
 8005c8a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	2110      	movs	r1, #16
 8005c92:	4618      	mov	r0, r3
 8005c94:	f002 fccc 	bl	8008630 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c98:	2300      	movs	r3, #0
 8005c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c9c:	e056      	b.n	8005d4c <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca0:	015a      	lsls	r2, r3, #5
 8005ca2:	69fb      	ldr	r3, [r7, #28]
 8005ca4:	4413      	add	r3, r2
 8005ca6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005caa:	461a      	mov	r2, r3
 8005cac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cb0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005cb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cc2:	0151      	lsls	r1, r2, #5
 8005cc4:	69fa      	ldr	r2, [r7, #28]
 8005cc6:	440a      	add	r2, r1
 8005cc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005ccc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cd0:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cd4:	015a      	lsls	r2, r3, #5
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	4413      	add	r3, r2
 8005cda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ce2:	0151      	lsls	r1, r2, #5
 8005ce4:	69fa      	ldr	r2, [r7, #28]
 8005ce6:	440a      	add	r2, r1
 8005ce8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005cf0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cf4:	015a      	lsls	r2, r3, #5
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfe:	461a      	mov	r2, r3
 8005d00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d04:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d08:	015a      	lsls	r2, r3, #5
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d16:	0151      	lsls	r1, r2, #5
 8005d18:	69fa      	ldr	r2, [r7, #28]
 8005d1a:	440a      	add	r2, r1
 8005d1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d24:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d28:	015a      	lsls	r2, r3, #5
 8005d2a:	69fb      	ldr	r3, [r7, #28]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d36:	0151      	lsls	r1, r2, #5
 8005d38:	69fa      	ldr	r2, [r7, #28]
 8005d3a:	440a      	add	r2, r1
 8005d3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d40:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d44:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d48:	3301      	adds	r3, #1
 8005d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d3a3      	bcc.n	8005c9e <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	69fa      	ldr	r2, [r7, #28]
 8005d60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d64:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005d68:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d016      	beq.n	8005da0 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005d72:	69fb      	ldr	r3, [r7, #28]
 8005d74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005d7c:	69fa      	ldr	r2, [r7, #28]
 8005d7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d82:	f043 030b 	orr.w	r3, r3, #11
 8005d86:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d92:	69fa      	ldr	r2, [r7, #28]
 8005d94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d98:	f043 030b 	orr.w	r3, r3, #11
 8005d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8005d9e:	e015      	b.n	8005dcc <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005da6:	695b      	ldr	r3, [r3, #20]
 8005da8:	69fa      	ldr	r2, [r7, #28]
 8005daa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005db2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005db6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dbe:	691b      	ldr	r3, [r3, #16]
 8005dc0:	69fa      	ldr	r2, [r7, #28]
 8005dc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dc6:	f043 030b 	orr.w	r3, r3, #11
 8005dca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	69fa      	ldr	r2, [r7, #28]
 8005dd6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dda:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005dde:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6818      	ldr	r0, [r3, #0]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	691b      	ldr	r3, [r3, #16]
 8005de8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005df0:	461a      	mov	r2, r3
 8005df2:	f003 fbeb 	bl	80095cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	695a      	ldr	r2, [r3, #20]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005e04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f003 fb19 	bl	8009442 <USB_ReadInterrupts>
 8005e10:	4603      	mov	r3, r0
 8005e12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005e16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e1a:	d124      	bne.n	8005e66 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4618      	mov	r0, r3
 8005e22:	f003 fbaf 	bl	8009584 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	f002 fc61 	bl	80086f2 <USB_GetDevSpeed>
 8005e30:	4603      	mov	r3, r0
 8005e32:	461a      	mov	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681c      	ldr	r4, [r3, #0]
 8005e3c:	f001 f946 	bl	80070cc <HAL_RCC_GetHCLKFreq>
 8005e40:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	461a      	mov	r2, r3
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	f002 f99e 	bl	800818c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f005 fc42 	bl	800b6da <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	695a      	ldr	r2, [r3, #20]
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005e64:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f003 fae9 	bl	8009442 <USB_ReadInterrupts>
 8005e70:	4603      	mov	r3, r0
 8005e72:	f003 0308 	and.w	r3, r3, #8
 8005e76:	2b08      	cmp	r3, #8
 8005e78:	d10a      	bne.n	8005e90 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f005 fc1f 	bl	800b6be <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	695a      	ldr	r2, [r3, #20]
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f002 0208 	and.w	r2, r2, #8
 8005e8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4618      	mov	r0, r3
 8005e96:	f003 fad4 	bl	8009442 <USB_ReadInterrupts>
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ea0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ea4:	d10f      	bne.n	8005ec6 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	b2db      	uxtb	r3, r3
 8005eae:	4619      	mov	r1, r3
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f005 fc81 	bl	800b7b8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	695a      	ldr	r2, [r3, #20]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005ec4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	4618      	mov	r0, r3
 8005ecc:	f003 fab9 	bl	8009442 <USB_ReadInterrupts>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ed6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005eda:	d10f      	bne.n	8005efc <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8005edc:	2300      	movs	r3, #0
 8005ede:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	b2db      	uxtb	r3, r3
 8005ee4:	4619      	mov	r1, r3
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f005 fc54 	bl	800b794 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695a      	ldr	r2, [r3, #20]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005efa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f003 fa9e 	bl	8009442 <USB_ReadInterrupts>
 8005f06:	4603      	mov	r3, r0
 8005f08:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f10:	d10a      	bne.n	8005f28 <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f005 fc62 	bl	800b7dc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	695a      	ldr	r2, [r3, #20]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005f26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f003 fa88 	bl	8009442 <USB_ReadInterrupts>
 8005f32:	4603      	mov	r3, r0
 8005f34:	f003 0304 	and.w	r3, r3, #4
 8005f38:	2b04      	cmp	r3, #4
 8005f3a:	d115      	bne.n	8005f68 <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685b      	ldr	r3, [r3, #4]
 8005f42:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005f44:	69bb      	ldr	r3, [r7, #24]
 8005f46:	f003 0304 	and.w	r3, r3, #4
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d002      	beq.n	8005f54 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f005 fc52 	bl	800b7f8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	6859      	ldr	r1, [r3, #4]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	69ba      	ldr	r2, [r7, #24]
 8005f60:	430a      	orrs	r2, r1
 8005f62:	605a      	str	r2, [r3, #4]
 8005f64:	e000      	b.n	8005f68 <HAL_PCD_IRQHandler+0x75e>
      return;
 8005f66:	bf00      	nop
    }
  }
}
 8005f68:	3734      	adds	r7, #52	; 0x34
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd90      	pop	{r4, r7, pc}

08005f6e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b082      	sub	sp, #8
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
 8005f76:	460b      	mov	r3, r1
 8005f78:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d101      	bne.n	8005f88 <HAL_PCD_SetAddress+0x1a>
 8005f84:	2302      	movs	r3, #2
 8005f86:	e013      	b.n	8005fb0 <HAL_PCD_SetAddress+0x42>
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	78fa      	ldrb	r2, [r7, #3]
 8005f94:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	78fa      	ldrb	r2, [r7, #3]
 8005f9e:	4611      	mov	r1, r2
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	f003 f9f8 	bl	8009396 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b084      	sub	sp, #16
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	4608      	mov	r0, r1
 8005fc2:	4611      	mov	r1, r2
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	4603      	mov	r3, r0
 8005fc8:	70fb      	strb	r3, [r7, #3]
 8005fca:	460b      	mov	r3, r1
 8005fcc:	803b      	strh	r3, [r7, #0]
 8005fce:	4613      	mov	r3, r2
 8005fd0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005fd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	da0f      	bge.n	8005ffe <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fde:	78fb      	ldrb	r3, [r7, #3]
 8005fe0:	f003 020f 	and.w	r2, r3, #15
 8005fe4:	4613      	mov	r3, r2
 8005fe6:	00db      	lsls	r3, r3, #3
 8005fe8:	1a9b      	subs	r3, r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	3338      	adds	r3, #56	; 0x38
 8005fee:	687a      	ldr	r2, [r7, #4]
 8005ff0:	4413      	add	r3, r2
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	705a      	strb	r2, [r3, #1]
 8005ffc:	e00f      	b.n	800601e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ffe:	78fb      	ldrb	r3, [r7, #3]
 8006000:	f003 020f 	and.w	r2, r3, #15
 8006004:	4613      	mov	r3, r2
 8006006:	00db      	lsls	r3, r3, #3
 8006008:	1a9b      	subs	r3, r3, r2
 800600a:	009b      	lsls	r3, r3, #2
 800600c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	4413      	add	r3, r2
 8006014:	3304      	adds	r3, #4
 8006016:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800601e:	78fb      	ldrb	r3, [r7, #3]
 8006020:	f003 030f 	and.w	r3, r3, #15
 8006024:	b2da      	uxtb	r2, r3
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800602a:	883a      	ldrh	r2, [r7, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	78ba      	ldrb	r2, [r7, #2]
 8006034:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	785b      	ldrb	r3, [r3, #1]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d004      	beq.n	8006048 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	b29a      	uxth	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006048:	78bb      	ldrb	r3, [r7, #2]
 800604a:	2b02      	cmp	r3, #2
 800604c:	d102      	bne.n	8006054 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2200      	movs	r2, #0
 8006052:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800605a:	2b01      	cmp	r3, #1
 800605c:	d101      	bne.n	8006062 <HAL_PCD_EP_Open+0xaa>
 800605e:	2302      	movs	r3, #2
 8006060:	e00e      	b.n	8006080 <HAL_PCD_EP_Open+0xc8>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2201      	movs	r2, #1
 8006066:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	68f9      	ldr	r1, [r7, #12]
 8006070:	4618      	mov	r0, r3
 8006072:	f002 fb63 	bl	800873c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 800607e:	7afb      	ldrb	r3, [r7, #11]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3710      	adds	r7, #16
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	460b      	mov	r3, r1
 8006092:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006094:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006098:	2b00      	cmp	r3, #0
 800609a:	da0f      	bge.n	80060bc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800609c:	78fb      	ldrb	r3, [r7, #3]
 800609e:	f003 020f 	and.w	r2, r3, #15
 80060a2:	4613      	mov	r3, r2
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	1a9b      	subs	r3, r3, r2
 80060a8:	009b      	lsls	r3, r3, #2
 80060aa:	3338      	adds	r3, #56	; 0x38
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	4413      	add	r3, r2
 80060b0:	3304      	adds	r3, #4
 80060b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2201      	movs	r2, #1
 80060b8:	705a      	strb	r2, [r3, #1]
 80060ba:	e00f      	b.n	80060dc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060bc:	78fb      	ldrb	r3, [r7, #3]
 80060be:	f003 020f 	and.w	r2, r3, #15
 80060c2:	4613      	mov	r3, r2
 80060c4:	00db      	lsls	r3, r3, #3
 80060c6:	1a9b      	subs	r3, r3, r2
 80060c8:	009b      	lsls	r3, r3, #2
 80060ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	4413      	add	r3, r2
 80060d2:	3304      	adds	r3, #4
 80060d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	2200      	movs	r2, #0
 80060da:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80060dc:	78fb      	ldrb	r3, [r7, #3]
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	b2da      	uxtb	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80060ee:	2b01      	cmp	r3, #1
 80060f0:	d101      	bne.n	80060f6 <HAL_PCD_EP_Close+0x6e>
 80060f2:	2302      	movs	r3, #2
 80060f4:	e00e      	b.n	8006114 <HAL_PCD_EP_Close+0x8c>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2201      	movs	r2, #1
 80060fa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	68f9      	ldr	r1, [r7, #12]
 8006104:	4618      	mov	r0, r3
 8006106:	f002 fba1 	bl	800884c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8006112:	2300      	movs	r3, #0
}
 8006114:	4618      	mov	r0, r3
 8006116:	3710      	adds	r7, #16
 8006118:	46bd      	mov	sp, r7
 800611a:	bd80      	pop	{r7, pc}

0800611c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	607a      	str	r2, [r7, #4]
 8006126:	603b      	str	r3, [r7, #0]
 8006128:	460b      	mov	r3, r1
 800612a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800612c:	7afb      	ldrb	r3, [r7, #11]
 800612e:	f003 020f 	and.w	r2, r3, #15
 8006132:	4613      	mov	r3, r2
 8006134:	00db      	lsls	r3, r3, #3
 8006136:	1a9b      	subs	r3, r3, r2
 8006138:	009b      	lsls	r3, r3, #2
 800613a:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	4413      	add	r3, r2
 8006142:	3304      	adds	r3, #4
 8006144:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006152:	697b      	ldr	r3, [r7, #20]
 8006154:	2200      	movs	r2, #0
 8006156:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	2200      	movs	r2, #0
 800615c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800615e:	7afb      	ldrb	r3, [r7, #11]
 8006160:	f003 030f 	and.w	r3, r3, #15
 8006164:	b2da      	uxtb	r2, r3
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	2b01      	cmp	r3, #1
 8006170:	d102      	bne.n	8006178 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006178:	7afb      	ldrb	r3, [r7, #11]
 800617a:	f003 030f 	and.w	r3, r3, #15
 800617e:	2b00      	cmp	r3, #0
 8006180:	d109      	bne.n	8006196 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6818      	ldr	r0, [r3, #0]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	b2db      	uxtb	r3, r3
 800618c:	461a      	mov	r2, r3
 800618e:	6979      	ldr	r1, [r7, #20]
 8006190:	f002 fe7c 	bl	8008e8c <USB_EP0StartXfer>
 8006194:	e008      	b.n	80061a8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6818      	ldr	r0, [r3, #0]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	691b      	ldr	r3, [r3, #16]
 800619e:	b2db      	uxtb	r3, r3
 80061a0:	461a      	mov	r2, r3
 80061a2:	6979      	ldr	r1, [r7, #20]
 80061a4:	f002 fc2e 	bl	8008a04 <USB_EPStartXfer>
  }

  return HAL_OK;
 80061a8:	2300      	movs	r3, #0
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3718      	adds	r7, #24
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b083      	sub	sp, #12
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	460b      	mov	r3, r1
 80061bc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80061be:	78fb      	ldrb	r3, [r7, #3]
 80061c0:	f003 020f 	and.w	r2, r3, #15
 80061c4:	6879      	ldr	r1, [r7, #4]
 80061c6:	4613      	mov	r3, r2
 80061c8:	00db      	lsls	r3, r3, #3
 80061ca:	1a9b      	subs	r3, r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	440b      	add	r3, r1
 80061d0:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80061d4:	681b      	ldr	r3, [r3, #0]
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr

080061e2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80061e2:	b580      	push	{r7, lr}
 80061e4:	b086      	sub	sp, #24
 80061e6:	af00      	add	r7, sp, #0
 80061e8:	60f8      	str	r0, [r7, #12]
 80061ea:	607a      	str	r2, [r7, #4]
 80061ec:	603b      	str	r3, [r7, #0]
 80061ee:	460b      	mov	r3, r1
 80061f0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061f2:	7afb      	ldrb	r3, [r7, #11]
 80061f4:	f003 020f 	and.w	r2, r3, #15
 80061f8:	4613      	mov	r3, r2
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	1a9b      	subs	r3, r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	3338      	adds	r3, #56	; 0x38
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	4413      	add	r3, r2
 8006206:	3304      	adds	r3, #4
 8006208:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	687a      	ldr	r2, [r7, #4]
 800620e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	683a      	ldr	r2, [r7, #0]
 8006214:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	2200      	movs	r2, #0
 800621a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	2201      	movs	r2, #1
 8006220:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006222:	7afb      	ldrb	r3, [r7, #11]
 8006224:	f003 030f 	and.w	r3, r3, #15
 8006228:	b2da      	uxtb	r2, r3
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	2b01      	cmp	r3, #1
 8006234:	d102      	bne.n	800623c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800623c:	7afb      	ldrb	r3, [r7, #11]
 800623e:	f003 030f 	and.w	r3, r3, #15
 8006242:	2b00      	cmp	r3, #0
 8006244:	d109      	bne.n	800625a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	6818      	ldr	r0, [r3, #0]
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	b2db      	uxtb	r3, r3
 8006250:	461a      	mov	r2, r3
 8006252:	6979      	ldr	r1, [r7, #20]
 8006254:	f002 fe1a 	bl	8008e8c <USB_EP0StartXfer>
 8006258:	e008      	b.n	800626c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6818      	ldr	r0, [r3, #0]
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	b2db      	uxtb	r3, r3
 8006264:	461a      	mov	r2, r3
 8006266:	6979      	ldr	r1, [r7, #20]
 8006268:	f002 fbcc 	bl	8008a04 <USB_EPStartXfer>
  }

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3718      	adds	r7, #24
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	460b      	mov	r3, r1
 8006280:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006282:	78fb      	ldrb	r3, [r7, #3]
 8006284:	f003 020f 	and.w	r2, r3, #15
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	429a      	cmp	r2, r3
 800628e:	d901      	bls.n	8006294 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006290:	2301      	movs	r3, #1
 8006292:	e050      	b.n	8006336 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006294:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006298:	2b00      	cmp	r3, #0
 800629a:	da0f      	bge.n	80062bc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800629c:	78fb      	ldrb	r3, [r7, #3]
 800629e:	f003 020f 	and.w	r2, r3, #15
 80062a2:	4613      	mov	r3, r2
 80062a4:	00db      	lsls	r3, r3, #3
 80062a6:	1a9b      	subs	r3, r3, r2
 80062a8:	009b      	lsls	r3, r3, #2
 80062aa:	3338      	adds	r3, #56	; 0x38
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	4413      	add	r3, r2
 80062b0:	3304      	adds	r3, #4
 80062b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2201      	movs	r2, #1
 80062b8:	705a      	strb	r2, [r3, #1]
 80062ba:	e00d      	b.n	80062d8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80062bc:	78fa      	ldrb	r2, [r7, #3]
 80062be:	4613      	mov	r3, r2
 80062c0:	00db      	lsls	r3, r3, #3
 80062c2:	1a9b      	subs	r3, r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	4413      	add	r3, r2
 80062ce:	3304      	adds	r3, #4
 80062d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2201      	movs	r2, #1
 80062dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062de:	78fb      	ldrb	r3, [r7, #3]
 80062e0:	f003 030f 	and.w	r3, r3, #15
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d101      	bne.n	80062f8 <HAL_PCD_EP_SetStall+0x82>
 80062f4:	2302      	movs	r3, #2
 80062f6:	e01e      	b.n	8006336 <HAL_PCD_EP_SetStall+0xc0>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68f9      	ldr	r1, [r7, #12]
 8006306:	4618      	mov	r0, r3
 8006308:	f002 ff71 	bl	80091ee <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800630c:	78fb      	ldrb	r3, [r7, #3]
 800630e:	f003 030f 	and.w	r3, r3, #15
 8006312:	2b00      	cmp	r3, #0
 8006314:	d10a      	bne.n	800632c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6818      	ldr	r0, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	b2d9      	uxtb	r1, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006326:	461a      	mov	r2, r3
 8006328:	f003 f950 	bl	80095cc <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
 8006346:	460b      	mov	r3, r1
 8006348:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800634a:	78fb      	ldrb	r3, [r7, #3]
 800634c:	f003 020f 	and.w	r2, r3, #15
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	429a      	cmp	r2, r3
 8006356:	d901      	bls.n	800635c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006358:	2301      	movs	r3, #1
 800635a:	e042      	b.n	80063e2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800635c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006360:	2b00      	cmp	r3, #0
 8006362:	da0f      	bge.n	8006384 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006364:	78fb      	ldrb	r3, [r7, #3]
 8006366:	f003 020f 	and.w	r2, r3, #15
 800636a:	4613      	mov	r3, r2
 800636c:	00db      	lsls	r3, r3, #3
 800636e:	1a9b      	subs	r3, r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	3338      	adds	r3, #56	; 0x38
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	4413      	add	r3, r2
 8006378:	3304      	adds	r3, #4
 800637a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2201      	movs	r2, #1
 8006380:	705a      	strb	r2, [r3, #1]
 8006382:	e00f      	b.n	80063a4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006384:	78fb      	ldrb	r3, [r7, #3]
 8006386:	f003 020f 	and.w	r2, r3, #15
 800638a:	4613      	mov	r3, r2
 800638c:	00db      	lsls	r3, r3, #3
 800638e:	1a9b      	subs	r3, r3, r2
 8006390:	009b      	lsls	r3, r3, #2
 8006392:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8006396:	687a      	ldr	r2, [r7, #4]
 8006398:	4413      	add	r3, r2
 800639a:	3304      	adds	r3, #4
 800639c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2200      	movs	r2, #0
 80063a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2200      	movs	r2, #0
 80063a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063aa:	78fb      	ldrb	r3, [r7, #3]
 80063ac:	f003 030f 	and.w	r3, r3, #15
 80063b0:	b2da      	uxtb	r2, r3
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d101      	bne.n	80063c4 <HAL_PCD_EP_ClrStall+0x86>
 80063c0:	2302      	movs	r3, #2
 80063c2:	e00e      	b.n	80063e2 <HAL_PCD_EP_ClrStall+0xa4>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2201      	movs	r2, #1
 80063c8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	68f9      	ldr	r1, [r7, #12]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f002 ff79 	bl	80092ca <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3710      	adds	r7, #16
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}

080063ea <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80063ea:	b580      	push	{r7, lr}
 80063ec:	b08a      	sub	sp, #40	; 0x28
 80063ee:	af02      	add	r7, sp, #8
 80063f0:	6078      	str	r0, [r7, #4]
 80063f2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	4613      	mov	r3, r2
 8006402:	00db      	lsls	r3, r3, #3
 8006404:	1a9b      	subs	r3, r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	3338      	adds	r3, #56	; 0x38
 800640a:	687a      	ldr	r2, [r7, #4]
 800640c:	4413      	add	r3, r2
 800640e:	3304      	adds	r3, #4
 8006410:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	699a      	ldr	r2, [r3, #24]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	429a      	cmp	r2, r3
 800641c:	d901      	bls.n	8006422 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800641e:	2301      	movs	r3, #1
 8006420:	e06c      	b.n	80064fc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	695a      	ldr	r2, [r3, #20]
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	1ad3      	subs	r3, r2, r3
 800642c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	689b      	ldr	r3, [r3, #8]
 8006432:	69fa      	ldr	r2, [r7, #28]
 8006434:	429a      	cmp	r2, r3
 8006436:	d902      	bls.n	800643e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	3303      	adds	r3, #3
 8006442:	089b      	lsrs	r3, r3, #2
 8006444:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006446:	e02b      	b.n	80064a0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	695a      	ldr	r2, [r3, #20]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	699b      	ldr	r3, [r3, #24]
 8006450:	1ad3      	subs	r3, r2, r3
 8006452:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	69fa      	ldr	r2, [r7, #28]
 800645a:	429a      	cmp	r2, r3
 800645c:	d902      	bls.n	8006464 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006464:	69fb      	ldr	r3, [r7, #28]
 8006466:	3303      	adds	r3, #3
 8006468:	089b      	lsrs	r3, r3, #2
 800646a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	68d9      	ldr	r1, [r3, #12]
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	b2da      	uxtb	r2, r3
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800647c:	b2db      	uxtb	r3, r3
 800647e:	9300      	str	r3, [sp, #0]
 8006480:	4603      	mov	r3, r0
 8006482:	6978      	ldr	r0, [r7, #20]
 8006484:	f002 fe55 	bl	8009132 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	68da      	ldr	r2, [r3, #12]
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	441a      	add	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	699a      	ldr	r2, [r3, #24]
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	441a      	add	r2, r3
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	015a      	lsls	r2, r3, #5
 80064a4:	693b      	ldr	r3, [r7, #16]
 80064a6:	4413      	add	r3, r2
 80064a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	69ba      	ldr	r2, [r7, #24]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d809      	bhi.n	80064ca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	699a      	ldr	r2, [r3, #24]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80064be:	429a      	cmp	r2, r3
 80064c0:	d203      	bcs.n	80064ca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	695b      	ldr	r3, [r3, #20]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d1be      	bne.n	8006448 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	695a      	ldr	r2, [r3, #20]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	699b      	ldr	r3, [r3, #24]
 80064d2:	429a      	cmp	r2, r3
 80064d4:	d811      	bhi.n	80064fa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	f003 030f 	and.w	r3, r3, #15
 80064dc:	2201      	movs	r2, #1
 80064de:	fa02 f303 	lsl.w	r3, r2, r3
 80064e2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80064e4:	693b      	ldr	r3, [r7, #16]
 80064e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80064ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	43db      	mvns	r3, r3
 80064f0:	6939      	ldr	r1, [r7, #16]
 80064f2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80064f6:	4013      	ands	r3, r2
 80064f8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3720      	adds	r7, #32
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b086      	sub	sp, #24
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	333c      	adds	r3, #60	; 0x3c
 800651c:	3304      	adds	r3, #4
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	015a      	lsls	r2, r3, #5
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	4413      	add	r3, r2
 800652a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	2b01      	cmp	r3, #1
 8006538:	f040 80a0 	bne.w	800667c <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	f003 0308 	and.w	r3, r3, #8
 8006542:	2b00      	cmp	r3, #0
 8006544:	d015      	beq.n	8006572 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4a72      	ldr	r2, [pc, #456]	; (8006714 <PCD_EP_OutXfrComplete_int+0x210>)
 800654a:	4293      	cmp	r3, r2
 800654c:	f240 80dd 	bls.w	800670a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006556:	2b00      	cmp	r3, #0
 8006558:	f000 80d7 	beq.w	800670a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	015a      	lsls	r2, r3, #5
 8006560:	693b      	ldr	r3, [r7, #16]
 8006562:	4413      	add	r3, r2
 8006564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006568:	461a      	mov	r2, r3
 800656a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800656e:	6093      	str	r3, [r2, #8]
 8006570:	e0cb      	b.n	800670a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006572:	68bb      	ldr	r3, [r7, #8]
 8006574:	f003 0320 	and.w	r3, r3, #32
 8006578:	2b00      	cmp	r3, #0
 800657a:	d009      	beq.n	8006590 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	4413      	add	r3, r2
 8006584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006588:	461a      	mov	r2, r3
 800658a:	2320      	movs	r3, #32
 800658c:	6093      	str	r3, [r2, #8]
 800658e:	e0bc      	b.n	800670a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006596:	2b00      	cmp	r3, #0
 8006598:	f040 80b7 	bne.w	800670a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	4a5d      	ldr	r2, [pc, #372]	; (8006714 <PCD_EP_OutXfrComplete_int+0x210>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d90f      	bls.n	80065c4 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d00a      	beq.n	80065c4 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	015a      	lsls	r2, r3, #5
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	4413      	add	r3, r2
 80065b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065ba:	461a      	mov	r2, r3
 80065bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065c0:	6093      	str	r3, [r2, #8]
 80065c2:	e0a2      	b.n	800670a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80065c4:	6879      	ldr	r1, [r7, #4]
 80065c6:	683a      	ldr	r2, [r7, #0]
 80065c8:	4613      	mov	r3, r2
 80065ca:	00db      	lsls	r3, r3, #3
 80065cc:	1a9b      	subs	r3, r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	440b      	add	r3, r1
 80065d2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80065d6:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	0159      	lsls	r1, r3, #5
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	440b      	add	r3, r1
 80065e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e4:	691b      	ldr	r3, [r3, #16]
 80065e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80065ea:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80065ec:	6878      	ldr	r0, [r7, #4]
 80065ee:	683a      	ldr	r2, [r7, #0]
 80065f0:	4613      	mov	r3, r2
 80065f2:	00db      	lsls	r3, r3, #3
 80065f4:	1a9b      	subs	r3, r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4403      	add	r3, r0
 80065fa:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80065fe:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8006600:	6879      	ldr	r1, [r7, #4]
 8006602:	683a      	ldr	r2, [r7, #0]
 8006604:	4613      	mov	r3, r2
 8006606:	00db      	lsls	r3, r3, #3
 8006608:	1a9b      	subs	r3, r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	440b      	add	r3, r1
 800660e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006612:	6819      	ldr	r1, [r3, #0]
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	683a      	ldr	r2, [r7, #0]
 8006618:	4613      	mov	r3, r2
 800661a:	00db      	lsls	r3, r3, #3
 800661c:	1a9b      	subs	r3, r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4403      	add	r3, r0
 8006622:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	4419      	add	r1, r3
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	4613      	mov	r3, r2
 8006630:	00db      	lsls	r3, r3, #3
 8006632:	1a9b      	subs	r3, r3, r2
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	4403      	add	r3, r0
 8006638:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800663c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d114      	bne.n	800666e <PCD_EP_OutXfrComplete_int+0x16a>
 8006644:	6879      	ldr	r1, [r7, #4]
 8006646:	683a      	ldr	r2, [r7, #0]
 8006648:	4613      	mov	r3, r2
 800664a:	00db      	lsls	r3, r3, #3
 800664c:	1a9b      	subs	r3, r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	440b      	add	r3, r1
 8006652:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d108      	bne.n	800666e <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6818      	ldr	r0, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006666:	461a      	mov	r2, r3
 8006668:	2101      	movs	r1, #1
 800666a:	f002 ffaf 	bl	80095cc <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	b2db      	uxtb	r3, r3
 8006672:	4619      	mov	r1, r3
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f004 ffed 	bl	800b654 <HAL_PCD_DataOutStageCallback>
 800667a:	e046      	b.n	800670a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	4a26      	ldr	r2, [pc, #152]	; (8006718 <PCD_EP_OutXfrComplete_int+0x214>)
 8006680:	4293      	cmp	r3, r2
 8006682:	d124      	bne.n	80066ce <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d00a      	beq.n	80066a4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	693b      	ldr	r3, [r7, #16]
 8006694:	4413      	add	r3, r2
 8006696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800669a:	461a      	mov	r2, r3
 800669c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066a0:	6093      	str	r3, [r2, #8]
 80066a2:	e032      	b.n	800670a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	f003 0320 	and.w	r3, r3, #32
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d008      	beq.n	80066c0 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	015a      	lsls	r2, r3, #5
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	4413      	add	r3, r2
 80066b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ba:	461a      	mov	r2, r3
 80066bc:	2320      	movs	r3, #32
 80066be:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	b2db      	uxtb	r3, r3
 80066c4:	4619      	mov	r1, r3
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f004 ffc4 	bl	800b654 <HAL_PCD_DataOutStageCallback>
 80066cc:	e01d      	b.n	800670a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d114      	bne.n	80066fe <PCD_EP_OutXfrComplete_int+0x1fa>
 80066d4:	6879      	ldr	r1, [r7, #4]
 80066d6:	683a      	ldr	r2, [r7, #0]
 80066d8:	4613      	mov	r3, r2
 80066da:	00db      	lsls	r3, r3, #3
 80066dc:	1a9b      	subs	r3, r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	440b      	add	r3, r1
 80066e2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d108      	bne.n	80066fe <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6818      	ldr	r0, [r3, #0]
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80066f6:	461a      	mov	r2, r3
 80066f8:	2100      	movs	r1, #0
 80066fa:	f002 ff67 	bl	80095cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80066fe:	683b      	ldr	r3, [r7, #0]
 8006700:	b2db      	uxtb	r3, r3
 8006702:	4619      	mov	r1, r3
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f004 ffa5 	bl	800b654 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800670a:	2300      	movs	r3, #0
}
 800670c:	4618      	mov	r0, r3
 800670e:	3718      	adds	r7, #24
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	4f54300a 	.word	0x4f54300a
 8006718:	4f54310a 	.word	0x4f54310a

0800671c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006730:	697b      	ldr	r3, [r7, #20]
 8006732:	333c      	adds	r3, #60	; 0x3c
 8006734:	3304      	adds	r3, #4
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	4413      	add	r3, r2
 8006742:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	4a15      	ldr	r2, [pc, #84]	; (80067a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d90e      	bls.n	8006770 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006758:	2b00      	cmp	r3, #0
 800675a:	d009      	beq.n	8006770 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	015a      	lsls	r2, r3, #5
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	4413      	add	r3, r2
 8006764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006768:	461a      	mov	r2, r3
 800676a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800676e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006770:	6878      	ldr	r0, [r7, #4]
 8006772:	f004 ff5d 	bl	800b630 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	4a0a      	ldr	r2, [pc, #40]	; (80067a4 <PCD_EP_OutSetupPacket_int+0x88>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d90c      	bls.n	8006798 <PCD_EP_OutSetupPacket_int+0x7c>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	691b      	ldr	r3, [r3, #16]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d108      	bne.n	8006798 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6818      	ldr	r0, [r3, #0]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006790:	461a      	mov	r2, r3
 8006792:	2101      	movs	r1, #1
 8006794:	f002 ff1a 	bl	80095cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006798:	2300      	movs	r3, #0
}
 800679a:	4618      	mov	r0, r3
 800679c:	3718      	adds	r7, #24
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	4f54300a 	.word	0x4f54300a

080067a8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b085      	sub	sp, #20
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	460b      	mov	r3, r1
 80067b2:	70fb      	strb	r3, [r7, #3]
 80067b4:	4613      	mov	r3, r2
 80067b6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067be:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80067c0:	78fb      	ldrb	r3, [r7, #3]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d107      	bne.n	80067d6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80067c6:	883b      	ldrh	r3, [r7, #0]
 80067c8:	0419      	lsls	r1, r3, #16
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	430a      	orrs	r2, r1
 80067d2:	629a      	str	r2, [r3, #40]	; 0x28
 80067d4:	e028      	b.n	8006828 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067dc:	0c1b      	lsrs	r3, r3, #16
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	4413      	add	r3, r2
 80067e2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80067e4:	2300      	movs	r3, #0
 80067e6:	73fb      	strb	r3, [r7, #15]
 80067e8:	e00d      	b.n	8006806 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681a      	ldr	r2, [r3, #0]
 80067ee:	7bfb      	ldrb	r3, [r7, #15]
 80067f0:	3340      	adds	r3, #64	; 0x40
 80067f2:	009b      	lsls	r3, r3, #2
 80067f4:	4413      	add	r3, r2
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	0c1b      	lsrs	r3, r3, #16
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	4413      	add	r3, r2
 80067fe:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006800:	7bfb      	ldrb	r3, [r7, #15]
 8006802:	3301      	adds	r3, #1
 8006804:	73fb      	strb	r3, [r7, #15]
 8006806:	7bfa      	ldrb	r2, [r7, #15]
 8006808:	78fb      	ldrb	r3, [r7, #3]
 800680a:	3b01      	subs	r3, #1
 800680c:	429a      	cmp	r2, r3
 800680e:	d3ec      	bcc.n	80067ea <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006810:	883b      	ldrh	r3, [r7, #0]
 8006812:	0418      	lsls	r0, r3, #16
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6819      	ldr	r1, [r3, #0]
 8006818:	78fb      	ldrb	r3, [r7, #3]
 800681a:	3b01      	subs	r3, #1
 800681c:	68ba      	ldr	r2, [r7, #8]
 800681e:	4302      	orrs	r2, r0
 8006820:	3340      	adds	r3, #64	; 0x40
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	440b      	add	r3, r1
 8006826:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3714      	adds	r7, #20
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006836:	b480      	push	{r7}
 8006838:	b083      	sub	sp, #12
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	460b      	mov	r3, r1
 8006840:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	887a      	ldrh	r2, [r7, #2]
 8006848:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800684a:	2300      	movs	r3, #0
}
 800684c:	4618      	mov	r0, r3
 800684e:	370c      	adds	r7, #12
 8006850:	46bd      	mov	sp, r7
 8006852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006856:	4770      	bx	lr

08006858 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	460b      	mov	r3, r1
 8006862:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d101      	bne.n	8006882 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e25b      	b.n	8006d3a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0301 	and.w	r3, r3, #1
 800688a:	2b00      	cmp	r3, #0
 800688c:	d075      	beq.n	800697a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800688e:	4ba3      	ldr	r3, [pc, #652]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 8006890:	689b      	ldr	r3, [r3, #8]
 8006892:	f003 030c 	and.w	r3, r3, #12
 8006896:	2b04      	cmp	r3, #4
 8006898:	d00c      	beq.n	80068b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800689a:	4ba0      	ldr	r3, [pc, #640]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068a2:	2b08      	cmp	r3, #8
 80068a4:	d112      	bne.n	80068cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068a6:	4b9d      	ldr	r3, [pc, #628]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 80068a8:	685b      	ldr	r3, [r3, #4]
 80068aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068b2:	d10b      	bne.n	80068cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068b4:	4b99      	ldr	r3, [pc, #612]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d05b      	beq.n	8006978 <HAL_RCC_OscConfig+0x108>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d157      	bne.n	8006978 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e236      	b.n	8006d3a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068d4:	d106      	bne.n	80068e4 <HAL_RCC_OscConfig+0x74>
 80068d6:	4b91      	ldr	r3, [pc, #580]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	4a90      	ldr	r2, [pc, #576]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 80068dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068e0:	6013      	str	r3, [r2, #0]
 80068e2:	e01d      	b.n	8006920 <HAL_RCC_OscConfig+0xb0>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80068ec:	d10c      	bne.n	8006908 <HAL_RCC_OscConfig+0x98>
 80068ee:	4b8b      	ldr	r3, [pc, #556]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	4a8a      	ldr	r2, [pc, #552]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 80068f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80068f8:	6013      	str	r3, [r2, #0]
 80068fa:	4b88      	ldr	r3, [pc, #544]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a87      	ldr	r2, [pc, #540]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 8006900:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006904:	6013      	str	r3, [r2, #0]
 8006906:	e00b      	b.n	8006920 <HAL_RCC_OscConfig+0xb0>
 8006908:	4b84      	ldr	r3, [pc, #528]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a83      	ldr	r2, [pc, #524]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 800690e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006912:	6013      	str	r3, [r2, #0]
 8006914:	4b81      	ldr	r3, [pc, #516]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a80      	ldr	r2, [pc, #512]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 800691a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800691e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d013      	beq.n	8006950 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006928:	f7fb fe9c 	bl	8002664 <HAL_GetTick>
 800692c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800692e:	e008      	b.n	8006942 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006930:	f7fb fe98 	bl	8002664 <HAL_GetTick>
 8006934:	4602      	mov	r2, r0
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	1ad3      	subs	r3, r2, r3
 800693a:	2b64      	cmp	r3, #100	; 0x64
 800693c:	d901      	bls.n	8006942 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800693e:	2303      	movs	r3, #3
 8006940:	e1fb      	b.n	8006d3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006942:	4b76      	ldr	r3, [pc, #472]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800694a:	2b00      	cmp	r3, #0
 800694c:	d0f0      	beq.n	8006930 <HAL_RCC_OscConfig+0xc0>
 800694e:	e014      	b.n	800697a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006950:	f7fb fe88 	bl	8002664 <HAL_GetTick>
 8006954:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006956:	e008      	b.n	800696a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006958:	f7fb fe84 	bl	8002664 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	2b64      	cmp	r3, #100	; 0x64
 8006964:	d901      	bls.n	800696a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e1e7      	b.n	8006d3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800696a:	4b6c      	ldr	r3, [pc, #432]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1f0      	bne.n	8006958 <HAL_RCC_OscConfig+0xe8>
 8006976:	e000      	b.n	800697a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006978:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0302 	and.w	r3, r3, #2
 8006982:	2b00      	cmp	r3, #0
 8006984:	d063      	beq.n	8006a4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006986:	4b65      	ldr	r3, [pc, #404]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f003 030c 	and.w	r3, r3, #12
 800698e:	2b00      	cmp	r3, #0
 8006990:	d00b      	beq.n	80069aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006992:	4b62      	ldr	r3, [pc, #392]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800699a:	2b08      	cmp	r3, #8
 800699c:	d11c      	bne.n	80069d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800699e:	4b5f      	ldr	r3, [pc, #380]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 80069a0:	685b      	ldr	r3, [r3, #4]
 80069a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d116      	bne.n	80069d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069aa:	4b5c      	ldr	r3, [pc, #368]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d005      	beq.n	80069c2 <HAL_RCC_OscConfig+0x152>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d001      	beq.n	80069c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e1bb      	b.n	8006d3a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069c2:	4b56      	ldr	r3, [pc, #344]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	691b      	ldr	r3, [r3, #16]
 80069ce:	00db      	lsls	r3, r3, #3
 80069d0:	4952      	ldr	r1, [pc, #328]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 80069d2:	4313      	orrs	r3, r2
 80069d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069d6:	e03a      	b.n	8006a4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	68db      	ldr	r3, [r3, #12]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d020      	beq.n	8006a22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80069e0:	4b4f      	ldr	r3, [pc, #316]	; (8006b20 <HAL_RCC_OscConfig+0x2b0>)
 80069e2:	2201      	movs	r2, #1
 80069e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069e6:	f7fb fe3d 	bl	8002664 <HAL_GetTick>
 80069ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069ec:	e008      	b.n	8006a00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80069ee:	f7fb fe39 	bl	8002664 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d901      	bls.n	8006a00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e19c      	b.n	8006d3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a00:	4b46      	ldr	r3, [pc, #280]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f003 0302 	and.w	r3, r3, #2
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d0f0      	beq.n	80069ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a0c:	4b43      	ldr	r3, [pc, #268]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	00db      	lsls	r3, r3, #3
 8006a1a:	4940      	ldr	r1, [pc, #256]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	600b      	str	r3, [r1, #0]
 8006a20:	e015      	b.n	8006a4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a22:	4b3f      	ldr	r3, [pc, #252]	; (8006b20 <HAL_RCC_OscConfig+0x2b0>)
 8006a24:	2200      	movs	r2, #0
 8006a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a28:	f7fb fe1c 	bl	8002664 <HAL_GetTick>
 8006a2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a2e:	e008      	b.n	8006a42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a30:	f7fb fe18 	bl	8002664 <HAL_GetTick>
 8006a34:	4602      	mov	r2, r0
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	1ad3      	subs	r3, r2, r3
 8006a3a:	2b02      	cmp	r3, #2
 8006a3c:	d901      	bls.n	8006a42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006a3e:	2303      	movs	r3, #3
 8006a40:	e17b      	b.n	8006d3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a42:	4b36      	ldr	r3, [pc, #216]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f003 0302 	and.w	r3, r3, #2
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d1f0      	bne.n	8006a30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0308 	and.w	r3, r3, #8
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d030      	beq.n	8006abc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d016      	beq.n	8006a90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a62:	4b30      	ldr	r3, [pc, #192]	; (8006b24 <HAL_RCC_OscConfig+0x2b4>)
 8006a64:	2201      	movs	r2, #1
 8006a66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a68:	f7fb fdfc 	bl	8002664 <HAL_GetTick>
 8006a6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a6e:	e008      	b.n	8006a82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a70:	f7fb fdf8 	bl	8002664 <HAL_GetTick>
 8006a74:	4602      	mov	r2, r0
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d901      	bls.n	8006a82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a7e:	2303      	movs	r3, #3
 8006a80:	e15b      	b.n	8006d3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a82:	4b26      	ldr	r3, [pc, #152]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 8006a84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a86:	f003 0302 	and.w	r3, r3, #2
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d0f0      	beq.n	8006a70 <HAL_RCC_OscConfig+0x200>
 8006a8e:	e015      	b.n	8006abc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a90:	4b24      	ldr	r3, [pc, #144]	; (8006b24 <HAL_RCC_OscConfig+0x2b4>)
 8006a92:	2200      	movs	r2, #0
 8006a94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a96:	f7fb fde5 	bl	8002664 <HAL_GetTick>
 8006a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a9c:	e008      	b.n	8006ab0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a9e:	f7fb fde1 	bl	8002664 <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d901      	bls.n	8006ab0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e144      	b.n	8006d3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ab0:	4b1a      	ldr	r3, [pc, #104]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 8006ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ab4:	f003 0302 	and.w	r3, r3, #2
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d1f0      	bne.n	8006a9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0304 	and.w	r3, r3, #4
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	f000 80a0 	beq.w	8006c0a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006aca:	2300      	movs	r3, #0
 8006acc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006ace:	4b13      	ldr	r3, [pc, #76]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 8006ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d10f      	bne.n	8006afa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006ada:	2300      	movs	r3, #0
 8006adc:	60bb      	str	r3, [r7, #8]
 8006ade:	4b0f      	ldr	r3, [pc, #60]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 8006ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ae2:	4a0e      	ldr	r2, [pc, #56]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 8006ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8006aea:	4b0c      	ldr	r3, [pc, #48]	; (8006b1c <HAL_RCC_OscConfig+0x2ac>)
 8006aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006af2:	60bb      	str	r3, [r7, #8]
 8006af4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006af6:	2301      	movs	r3, #1
 8006af8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006afa:	4b0b      	ldr	r3, [pc, #44]	; (8006b28 <HAL_RCC_OscConfig+0x2b8>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d121      	bne.n	8006b4a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b06:	4b08      	ldr	r3, [pc, #32]	; (8006b28 <HAL_RCC_OscConfig+0x2b8>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	4a07      	ldr	r2, [pc, #28]	; (8006b28 <HAL_RCC_OscConfig+0x2b8>)
 8006b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b12:	f7fb fda7 	bl	8002664 <HAL_GetTick>
 8006b16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b18:	e011      	b.n	8006b3e <HAL_RCC_OscConfig+0x2ce>
 8006b1a:	bf00      	nop
 8006b1c:	40023800 	.word	0x40023800
 8006b20:	42470000 	.word	0x42470000
 8006b24:	42470e80 	.word	0x42470e80
 8006b28:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b2c:	f7fb fd9a 	bl	8002664 <HAL_GetTick>
 8006b30:	4602      	mov	r2, r0
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	1ad3      	subs	r3, r2, r3
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d901      	bls.n	8006b3e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e0fd      	b.n	8006d3a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b3e:	4b81      	ldr	r3, [pc, #516]	; (8006d44 <HAL_RCC_OscConfig+0x4d4>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d0f0      	beq.n	8006b2c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	689b      	ldr	r3, [r3, #8]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d106      	bne.n	8006b60 <HAL_RCC_OscConfig+0x2f0>
 8006b52:	4b7d      	ldr	r3, [pc, #500]	; (8006d48 <HAL_RCC_OscConfig+0x4d8>)
 8006b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b56:	4a7c      	ldr	r2, [pc, #496]	; (8006d48 <HAL_RCC_OscConfig+0x4d8>)
 8006b58:	f043 0301 	orr.w	r3, r3, #1
 8006b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b5e:	e01c      	b.n	8006b9a <HAL_RCC_OscConfig+0x32a>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	2b05      	cmp	r3, #5
 8006b66:	d10c      	bne.n	8006b82 <HAL_RCC_OscConfig+0x312>
 8006b68:	4b77      	ldr	r3, [pc, #476]	; (8006d48 <HAL_RCC_OscConfig+0x4d8>)
 8006b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6c:	4a76      	ldr	r2, [pc, #472]	; (8006d48 <HAL_RCC_OscConfig+0x4d8>)
 8006b6e:	f043 0304 	orr.w	r3, r3, #4
 8006b72:	6713      	str	r3, [r2, #112]	; 0x70
 8006b74:	4b74      	ldr	r3, [pc, #464]	; (8006d48 <HAL_RCC_OscConfig+0x4d8>)
 8006b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b78:	4a73      	ldr	r2, [pc, #460]	; (8006d48 <HAL_RCC_OscConfig+0x4d8>)
 8006b7a:	f043 0301 	orr.w	r3, r3, #1
 8006b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8006b80:	e00b      	b.n	8006b9a <HAL_RCC_OscConfig+0x32a>
 8006b82:	4b71      	ldr	r3, [pc, #452]	; (8006d48 <HAL_RCC_OscConfig+0x4d8>)
 8006b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b86:	4a70      	ldr	r2, [pc, #448]	; (8006d48 <HAL_RCC_OscConfig+0x4d8>)
 8006b88:	f023 0301 	bic.w	r3, r3, #1
 8006b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8006b8e:	4b6e      	ldr	r3, [pc, #440]	; (8006d48 <HAL_RCC_OscConfig+0x4d8>)
 8006b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b92:	4a6d      	ldr	r2, [pc, #436]	; (8006d48 <HAL_RCC_OscConfig+0x4d8>)
 8006b94:	f023 0304 	bic.w	r3, r3, #4
 8006b98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d015      	beq.n	8006bce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ba2:	f7fb fd5f 	bl	8002664 <HAL_GetTick>
 8006ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ba8:	e00a      	b.n	8006bc0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006baa:	f7fb fd5b 	bl	8002664 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d901      	bls.n	8006bc0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006bbc:	2303      	movs	r3, #3
 8006bbe:	e0bc      	b.n	8006d3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bc0:	4b61      	ldr	r3, [pc, #388]	; (8006d48 <HAL_RCC_OscConfig+0x4d8>)
 8006bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc4:	f003 0302 	and.w	r3, r3, #2
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d0ee      	beq.n	8006baa <HAL_RCC_OscConfig+0x33a>
 8006bcc:	e014      	b.n	8006bf8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006bce:	f7fb fd49 	bl	8002664 <HAL_GetTick>
 8006bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bd4:	e00a      	b.n	8006bec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bd6:	f7fb fd45 	bl	8002664 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d901      	bls.n	8006bec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006be8:	2303      	movs	r3, #3
 8006bea:	e0a6      	b.n	8006d3a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006bec:	4b56      	ldr	r3, [pc, #344]	; (8006d48 <HAL_RCC_OscConfig+0x4d8>)
 8006bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bf0:	f003 0302 	and.w	r3, r3, #2
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d1ee      	bne.n	8006bd6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006bf8:	7dfb      	ldrb	r3, [r7, #23]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d105      	bne.n	8006c0a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006bfe:	4b52      	ldr	r3, [pc, #328]	; (8006d48 <HAL_RCC_OscConfig+0x4d8>)
 8006c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c02:	4a51      	ldr	r2, [pc, #324]	; (8006d48 <HAL_RCC_OscConfig+0x4d8>)
 8006c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f000 8092 	beq.w	8006d38 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c14:	4b4c      	ldr	r3, [pc, #304]	; (8006d48 <HAL_RCC_OscConfig+0x4d8>)
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f003 030c 	and.w	r3, r3, #12
 8006c1c:	2b08      	cmp	r3, #8
 8006c1e:	d05c      	beq.n	8006cda <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	2b02      	cmp	r3, #2
 8006c26:	d141      	bne.n	8006cac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c28:	4b48      	ldr	r3, [pc, #288]	; (8006d4c <HAL_RCC_OscConfig+0x4dc>)
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c2e:	f7fb fd19 	bl	8002664 <HAL_GetTick>
 8006c32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c34:	e008      	b.n	8006c48 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c36:	f7fb fd15 	bl	8002664 <HAL_GetTick>
 8006c3a:	4602      	mov	r2, r0
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	1ad3      	subs	r3, r2, r3
 8006c40:	2b02      	cmp	r3, #2
 8006c42:	d901      	bls.n	8006c48 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006c44:	2303      	movs	r3, #3
 8006c46:	e078      	b.n	8006d3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c48:	4b3f      	ldr	r3, [pc, #252]	; (8006d48 <HAL_RCC_OscConfig+0x4d8>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1f0      	bne.n	8006c36 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	69da      	ldr	r2, [r3, #28]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	431a      	orrs	r2, r3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c62:	019b      	lsls	r3, r3, #6
 8006c64:	431a      	orrs	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6a:	085b      	lsrs	r3, r3, #1
 8006c6c:	3b01      	subs	r3, #1
 8006c6e:	041b      	lsls	r3, r3, #16
 8006c70:	431a      	orrs	r2, r3
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c76:	061b      	lsls	r3, r3, #24
 8006c78:	4933      	ldr	r1, [pc, #204]	; (8006d48 <HAL_RCC_OscConfig+0x4d8>)
 8006c7a:	4313      	orrs	r3, r2
 8006c7c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c7e:	4b33      	ldr	r3, [pc, #204]	; (8006d4c <HAL_RCC_OscConfig+0x4dc>)
 8006c80:	2201      	movs	r2, #1
 8006c82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c84:	f7fb fcee 	bl	8002664 <HAL_GetTick>
 8006c88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c8a:	e008      	b.n	8006c9e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c8c:	f7fb fcea 	bl	8002664 <HAL_GetTick>
 8006c90:	4602      	mov	r2, r0
 8006c92:	693b      	ldr	r3, [r7, #16]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	2b02      	cmp	r3, #2
 8006c98:	d901      	bls.n	8006c9e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006c9a:	2303      	movs	r3, #3
 8006c9c:	e04d      	b.n	8006d3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c9e:	4b2a      	ldr	r3, [pc, #168]	; (8006d48 <HAL_RCC_OscConfig+0x4d8>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d0f0      	beq.n	8006c8c <HAL_RCC_OscConfig+0x41c>
 8006caa:	e045      	b.n	8006d38 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cac:	4b27      	ldr	r3, [pc, #156]	; (8006d4c <HAL_RCC_OscConfig+0x4dc>)
 8006cae:	2200      	movs	r2, #0
 8006cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cb2:	f7fb fcd7 	bl	8002664 <HAL_GetTick>
 8006cb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006cb8:	e008      	b.n	8006ccc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cba:	f7fb fcd3 	bl	8002664 <HAL_GetTick>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	693b      	ldr	r3, [r7, #16]
 8006cc2:	1ad3      	subs	r3, r2, r3
 8006cc4:	2b02      	cmp	r3, #2
 8006cc6:	d901      	bls.n	8006ccc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006cc8:	2303      	movs	r3, #3
 8006cca:	e036      	b.n	8006d3a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ccc:	4b1e      	ldr	r3, [pc, #120]	; (8006d48 <HAL_RCC_OscConfig+0x4d8>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1f0      	bne.n	8006cba <HAL_RCC_OscConfig+0x44a>
 8006cd8:	e02e      	b.n	8006d38 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	699b      	ldr	r3, [r3, #24]
 8006cde:	2b01      	cmp	r3, #1
 8006ce0:	d101      	bne.n	8006ce6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e029      	b.n	8006d3a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ce6:	4b18      	ldr	r3, [pc, #96]	; (8006d48 <HAL_RCC_OscConfig+0x4d8>)
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	69db      	ldr	r3, [r3, #28]
 8006cf6:	429a      	cmp	r2, r3
 8006cf8:	d11c      	bne.n	8006d34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d115      	bne.n	8006d34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006d08:	68fa      	ldr	r2, [r7, #12]
 8006d0a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d0e:	4013      	ands	r3, r2
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d10d      	bne.n	8006d34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d106      	bne.n	8006d34 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d001      	beq.n	8006d38 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e000      	b.n	8006d3a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006d38:	2300      	movs	r3, #0
}
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	3718      	adds	r7, #24
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	bd80      	pop	{r7, pc}
 8006d42:	bf00      	nop
 8006d44:	40007000 	.word	0x40007000
 8006d48:	40023800 	.word	0x40023800
 8006d4c:	42470060 	.word	0x42470060

08006d50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d101      	bne.n	8006d64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d60:	2301      	movs	r3, #1
 8006d62:	e0cc      	b.n	8006efe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006d64:	4b68      	ldr	r3, [pc, #416]	; (8006f08 <HAL_RCC_ClockConfig+0x1b8>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 030f 	and.w	r3, r3, #15
 8006d6c:	683a      	ldr	r2, [r7, #0]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d90c      	bls.n	8006d8c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d72:	4b65      	ldr	r3, [pc, #404]	; (8006f08 <HAL_RCC_ClockConfig+0x1b8>)
 8006d74:	683a      	ldr	r2, [r7, #0]
 8006d76:	b2d2      	uxtb	r2, r2
 8006d78:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d7a:	4b63      	ldr	r3, [pc, #396]	; (8006f08 <HAL_RCC_ClockConfig+0x1b8>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 030f 	and.w	r3, r3, #15
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	429a      	cmp	r2, r3
 8006d86:	d001      	beq.n	8006d8c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d88:	2301      	movs	r3, #1
 8006d8a:	e0b8      	b.n	8006efe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0302 	and.w	r3, r3, #2
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d020      	beq.n	8006dda <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f003 0304 	and.w	r3, r3, #4
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d005      	beq.n	8006db0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006da4:	4b59      	ldr	r3, [pc, #356]	; (8006f0c <HAL_RCC_ClockConfig+0x1bc>)
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	4a58      	ldr	r2, [pc, #352]	; (8006f0c <HAL_RCC_ClockConfig+0x1bc>)
 8006daa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006dae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f003 0308 	and.w	r3, r3, #8
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d005      	beq.n	8006dc8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006dbc:	4b53      	ldr	r3, [pc, #332]	; (8006f0c <HAL_RCC_ClockConfig+0x1bc>)
 8006dbe:	689b      	ldr	r3, [r3, #8]
 8006dc0:	4a52      	ldr	r2, [pc, #328]	; (8006f0c <HAL_RCC_ClockConfig+0x1bc>)
 8006dc2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006dc6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006dc8:	4b50      	ldr	r3, [pc, #320]	; (8006f0c <HAL_RCC_ClockConfig+0x1bc>)
 8006dca:	689b      	ldr	r3, [r3, #8]
 8006dcc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	494d      	ldr	r1, [pc, #308]	; (8006f0c <HAL_RCC_ClockConfig+0x1bc>)
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0301 	and.w	r3, r3, #1
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d044      	beq.n	8006e70 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d107      	bne.n	8006dfe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dee:	4b47      	ldr	r3, [pc, #284]	; (8006f0c <HAL_RCC_ClockConfig+0x1bc>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d119      	bne.n	8006e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	e07f      	b.n	8006efe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	685b      	ldr	r3, [r3, #4]
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d003      	beq.n	8006e0e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e0a:	2b03      	cmp	r3, #3
 8006e0c:	d107      	bne.n	8006e1e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e0e:	4b3f      	ldr	r3, [pc, #252]	; (8006f0c <HAL_RCC_ClockConfig+0x1bc>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d109      	bne.n	8006e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	e06f      	b.n	8006efe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e1e:	4b3b      	ldr	r3, [pc, #236]	; (8006f0c <HAL_RCC_ClockConfig+0x1bc>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f003 0302 	and.w	r3, r3, #2
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d101      	bne.n	8006e2e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	e067      	b.n	8006efe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e2e:	4b37      	ldr	r3, [pc, #220]	; (8006f0c <HAL_RCC_ClockConfig+0x1bc>)
 8006e30:	689b      	ldr	r3, [r3, #8]
 8006e32:	f023 0203 	bic.w	r2, r3, #3
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	4934      	ldr	r1, [pc, #208]	; (8006f0c <HAL_RCC_ClockConfig+0x1bc>)
 8006e3c:	4313      	orrs	r3, r2
 8006e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006e40:	f7fb fc10 	bl	8002664 <HAL_GetTick>
 8006e44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e46:	e00a      	b.n	8006e5e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e48:	f7fb fc0c 	bl	8002664 <HAL_GetTick>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e56:	4293      	cmp	r3, r2
 8006e58:	d901      	bls.n	8006e5e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e5a:	2303      	movs	r3, #3
 8006e5c:	e04f      	b.n	8006efe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e5e:	4b2b      	ldr	r3, [pc, #172]	; (8006f0c <HAL_RCC_ClockConfig+0x1bc>)
 8006e60:	689b      	ldr	r3, [r3, #8]
 8006e62:	f003 020c 	and.w	r2, r3, #12
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
 8006e6a:	009b      	lsls	r3, r3, #2
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d1eb      	bne.n	8006e48 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006e70:	4b25      	ldr	r3, [pc, #148]	; (8006f08 <HAL_RCC_ClockConfig+0x1b8>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f003 030f 	and.w	r3, r3, #15
 8006e78:	683a      	ldr	r2, [r7, #0]
 8006e7a:	429a      	cmp	r2, r3
 8006e7c:	d20c      	bcs.n	8006e98 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e7e:	4b22      	ldr	r3, [pc, #136]	; (8006f08 <HAL_RCC_ClockConfig+0x1b8>)
 8006e80:	683a      	ldr	r2, [r7, #0]
 8006e82:	b2d2      	uxtb	r2, r2
 8006e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e86:	4b20      	ldr	r3, [pc, #128]	; (8006f08 <HAL_RCC_ClockConfig+0x1b8>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 030f 	and.w	r3, r3, #15
 8006e8e:	683a      	ldr	r2, [r7, #0]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d001      	beq.n	8006e98 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e94:	2301      	movs	r3, #1
 8006e96:	e032      	b.n	8006efe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	f003 0304 	and.w	r3, r3, #4
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d008      	beq.n	8006eb6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ea4:	4b19      	ldr	r3, [pc, #100]	; (8006f0c <HAL_RCC_ClockConfig+0x1bc>)
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	68db      	ldr	r3, [r3, #12]
 8006eb0:	4916      	ldr	r1, [pc, #88]	; (8006f0c <HAL_RCC_ClockConfig+0x1bc>)
 8006eb2:	4313      	orrs	r3, r2
 8006eb4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f003 0308 	and.w	r3, r3, #8
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d009      	beq.n	8006ed6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006ec2:	4b12      	ldr	r3, [pc, #72]	; (8006f0c <HAL_RCC_ClockConfig+0x1bc>)
 8006ec4:	689b      	ldr	r3, [r3, #8]
 8006ec6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	691b      	ldr	r3, [r3, #16]
 8006ece:	00db      	lsls	r3, r3, #3
 8006ed0:	490e      	ldr	r1, [pc, #56]	; (8006f0c <HAL_RCC_ClockConfig+0x1bc>)
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006ed6:	f000 f821 	bl	8006f1c <HAL_RCC_GetSysClockFreq>
 8006eda:	4601      	mov	r1, r0
 8006edc:	4b0b      	ldr	r3, [pc, #44]	; (8006f0c <HAL_RCC_ClockConfig+0x1bc>)
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	091b      	lsrs	r3, r3, #4
 8006ee2:	f003 030f 	and.w	r3, r3, #15
 8006ee6:	4a0a      	ldr	r2, [pc, #40]	; (8006f10 <HAL_RCC_ClockConfig+0x1c0>)
 8006ee8:	5cd3      	ldrb	r3, [r2, r3]
 8006eea:	fa21 f303 	lsr.w	r3, r1, r3
 8006eee:	4a09      	ldr	r2, [pc, #36]	; (8006f14 <HAL_RCC_ClockConfig+0x1c4>)
 8006ef0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006ef2:	4b09      	ldr	r3, [pc, #36]	; (8006f18 <HAL_RCC_ClockConfig+0x1c8>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fb fb70 	bl	80025dc <HAL_InitTick>

  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3710      	adds	r7, #16
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	40023c00 	.word	0x40023c00
 8006f0c:	40023800 	.word	0x40023800
 8006f10:	0803fcac 	.word	0x0803fcac
 8006f14:	200000d0 	.word	0x200000d0
 8006f18:	200000d4 	.word	0x200000d4

08006f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f1e:	b085      	sub	sp, #20
 8006f20:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006f22:	2300      	movs	r3, #0
 8006f24:	607b      	str	r3, [r7, #4]
 8006f26:	2300      	movs	r3, #0
 8006f28:	60fb      	str	r3, [r7, #12]
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f32:	4b63      	ldr	r3, [pc, #396]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006f34:	689b      	ldr	r3, [r3, #8]
 8006f36:	f003 030c 	and.w	r3, r3, #12
 8006f3a:	2b04      	cmp	r3, #4
 8006f3c:	d007      	beq.n	8006f4e <HAL_RCC_GetSysClockFreq+0x32>
 8006f3e:	2b08      	cmp	r3, #8
 8006f40:	d008      	beq.n	8006f54 <HAL_RCC_GetSysClockFreq+0x38>
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f040 80b4 	bne.w	80070b0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f48:	4b5e      	ldr	r3, [pc, #376]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8006f4a:	60bb      	str	r3, [r7, #8]
       break;
 8006f4c:	e0b3      	b.n	80070b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f4e:	4b5e      	ldr	r3, [pc, #376]	; (80070c8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006f50:	60bb      	str	r3, [r7, #8]
      break;
 8006f52:	e0b0      	b.n	80070b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f54:	4b5a      	ldr	r3, [pc, #360]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006f56:	685b      	ldr	r3, [r3, #4]
 8006f58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006f5c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f5e:	4b58      	ldr	r3, [pc, #352]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006f60:	685b      	ldr	r3, [r3, #4]
 8006f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d04a      	beq.n	8007000 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f6a:	4b55      	ldr	r3, [pc, #340]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	099b      	lsrs	r3, r3, #6
 8006f70:	f04f 0400 	mov.w	r4, #0
 8006f74:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006f78:	f04f 0200 	mov.w	r2, #0
 8006f7c:	ea03 0501 	and.w	r5, r3, r1
 8006f80:	ea04 0602 	and.w	r6, r4, r2
 8006f84:	4629      	mov	r1, r5
 8006f86:	4632      	mov	r2, r6
 8006f88:	f04f 0300 	mov.w	r3, #0
 8006f8c:	f04f 0400 	mov.w	r4, #0
 8006f90:	0154      	lsls	r4, r2, #5
 8006f92:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8006f96:	014b      	lsls	r3, r1, #5
 8006f98:	4619      	mov	r1, r3
 8006f9a:	4622      	mov	r2, r4
 8006f9c:	1b49      	subs	r1, r1, r5
 8006f9e:	eb62 0206 	sbc.w	r2, r2, r6
 8006fa2:	f04f 0300 	mov.w	r3, #0
 8006fa6:	f04f 0400 	mov.w	r4, #0
 8006faa:	0194      	lsls	r4, r2, #6
 8006fac:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006fb0:	018b      	lsls	r3, r1, #6
 8006fb2:	1a5b      	subs	r3, r3, r1
 8006fb4:	eb64 0402 	sbc.w	r4, r4, r2
 8006fb8:	f04f 0100 	mov.w	r1, #0
 8006fbc:	f04f 0200 	mov.w	r2, #0
 8006fc0:	00e2      	lsls	r2, r4, #3
 8006fc2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8006fc6:	00d9      	lsls	r1, r3, #3
 8006fc8:	460b      	mov	r3, r1
 8006fca:	4614      	mov	r4, r2
 8006fcc:	195b      	adds	r3, r3, r5
 8006fce:	eb44 0406 	adc.w	r4, r4, r6
 8006fd2:	f04f 0100 	mov.w	r1, #0
 8006fd6:	f04f 0200 	mov.w	r2, #0
 8006fda:	0262      	lsls	r2, r4, #9
 8006fdc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006fe0:	0259      	lsls	r1, r3, #9
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	4614      	mov	r4, r2
 8006fe6:	4618      	mov	r0, r3
 8006fe8:	4621      	mov	r1, r4
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f04f 0400 	mov.w	r4, #0
 8006ff0:	461a      	mov	r2, r3
 8006ff2:	4623      	mov	r3, r4
 8006ff4:	f7f9 f8e8 	bl	80001c8 <__aeabi_uldivmod>
 8006ff8:	4603      	mov	r3, r0
 8006ffa:	460c      	mov	r4, r1
 8006ffc:	60fb      	str	r3, [r7, #12]
 8006ffe:	e049      	b.n	8007094 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007000:	4b2f      	ldr	r3, [pc, #188]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	099b      	lsrs	r3, r3, #6
 8007006:	f04f 0400 	mov.w	r4, #0
 800700a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800700e:	f04f 0200 	mov.w	r2, #0
 8007012:	ea03 0501 	and.w	r5, r3, r1
 8007016:	ea04 0602 	and.w	r6, r4, r2
 800701a:	4629      	mov	r1, r5
 800701c:	4632      	mov	r2, r6
 800701e:	f04f 0300 	mov.w	r3, #0
 8007022:	f04f 0400 	mov.w	r4, #0
 8007026:	0154      	lsls	r4, r2, #5
 8007028:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800702c:	014b      	lsls	r3, r1, #5
 800702e:	4619      	mov	r1, r3
 8007030:	4622      	mov	r2, r4
 8007032:	1b49      	subs	r1, r1, r5
 8007034:	eb62 0206 	sbc.w	r2, r2, r6
 8007038:	f04f 0300 	mov.w	r3, #0
 800703c:	f04f 0400 	mov.w	r4, #0
 8007040:	0194      	lsls	r4, r2, #6
 8007042:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8007046:	018b      	lsls	r3, r1, #6
 8007048:	1a5b      	subs	r3, r3, r1
 800704a:	eb64 0402 	sbc.w	r4, r4, r2
 800704e:	f04f 0100 	mov.w	r1, #0
 8007052:	f04f 0200 	mov.w	r2, #0
 8007056:	00e2      	lsls	r2, r4, #3
 8007058:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800705c:	00d9      	lsls	r1, r3, #3
 800705e:	460b      	mov	r3, r1
 8007060:	4614      	mov	r4, r2
 8007062:	195b      	adds	r3, r3, r5
 8007064:	eb44 0406 	adc.w	r4, r4, r6
 8007068:	f04f 0100 	mov.w	r1, #0
 800706c:	f04f 0200 	mov.w	r2, #0
 8007070:	02a2      	lsls	r2, r4, #10
 8007072:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8007076:	0299      	lsls	r1, r3, #10
 8007078:	460b      	mov	r3, r1
 800707a:	4614      	mov	r4, r2
 800707c:	4618      	mov	r0, r3
 800707e:	4621      	mov	r1, r4
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f04f 0400 	mov.w	r4, #0
 8007086:	461a      	mov	r2, r3
 8007088:	4623      	mov	r3, r4
 800708a:	f7f9 f89d 	bl	80001c8 <__aeabi_uldivmod>
 800708e:	4603      	mov	r3, r0
 8007090:	460c      	mov	r4, r1
 8007092:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007094:	4b0a      	ldr	r3, [pc, #40]	; (80070c0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	0c1b      	lsrs	r3, r3, #16
 800709a:	f003 0303 	and.w	r3, r3, #3
 800709e:	3301      	adds	r3, #1
 80070a0:	005b      	lsls	r3, r3, #1
 80070a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80070a4:	68fa      	ldr	r2, [r7, #12]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80070ac:	60bb      	str	r3, [r7, #8]
      break;
 80070ae:	e002      	b.n	80070b6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070b0:	4b04      	ldr	r3, [pc, #16]	; (80070c4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80070b2:	60bb      	str	r3, [r7, #8]
      break;
 80070b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070b6:	68bb      	ldr	r3, [r7, #8]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3714      	adds	r7, #20
 80070bc:	46bd      	mov	sp, r7
 80070be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80070c0:	40023800 	.word	0x40023800
 80070c4:	00f42400 	.word	0x00f42400
 80070c8:	007a1200 	.word	0x007a1200

080070cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070cc:	b480      	push	{r7}
 80070ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070d0:	4b03      	ldr	r3, [pc, #12]	; (80070e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80070d2:	681b      	ldr	r3, [r3, #0]
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	200000d0 	.word	0x200000d0

080070e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80070e8:	f7ff fff0 	bl	80070cc <HAL_RCC_GetHCLKFreq>
 80070ec:	4601      	mov	r1, r0
 80070ee:	4b05      	ldr	r3, [pc, #20]	; (8007104 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	0a9b      	lsrs	r3, r3, #10
 80070f4:	f003 0307 	and.w	r3, r3, #7
 80070f8:	4a03      	ldr	r2, [pc, #12]	; (8007108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070fa:	5cd3      	ldrb	r3, [r2, r3]
 80070fc:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007100:	4618      	mov	r0, r3
 8007102:	bd80      	pop	{r7, pc}
 8007104:	40023800 	.word	0x40023800
 8007108:	0803fcbc 	.word	0x0803fcbc

0800710c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007110:	f7ff ffdc 	bl	80070cc <HAL_RCC_GetHCLKFreq>
 8007114:	4601      	mov	r1, r0
 8007116:	4b05      	ldr	r3, [pc, #20]	; (800712c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007118:	689b      	ldr	r3, [r3, #8]
 800711a:	0b5b      	lsrs	r3, r3, #13
 800711c:	f003 0307 	and.w	r3, r3, #7
 8007120:	4a03      	ldr	r2, [pc, #12]	; (8007130 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007122:	5cd3      	ldrb	r3, [r2, r3]
 8007124:	fa21 f303 	lsr.w	r3, r1, r3
}
 8007128:	4618      	mov	r0, r3
 800712a:	bd80      	pop	{r7, pc}
 800712c:	40023800 	.word	0x40023800
 8007130:	0803fcbc 	.word	0x0803fcbc

08007134 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b082      	sub	sp, #8
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e01d      	b.n	8007182 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800714c:	b2db      	uxtb	r3, r3
 800714e:	2b00      	cmp	r3, #0
 8007150:	d106      	bne.n	8007160 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	2200      	movs	r2, #0
 8007156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f7fb f8dc 	bl	8002318 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2202      	movs	r2, #2
 8007164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	3304      	adds	r3, #4
 8007170:	4619      	mov	r1, r3
 8007172:	4610      	mov	r0, r2
 8007174:	f000 fa14 	bl	80075a0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800718a:	b480      	push	{r7}
 800718c:	b085      	sub	sp, #20
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68da      	ldr	r2, [r3, #12]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f042 0201 	orr.w	r2, r2, #1
 80071a0:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	689b      	ldr	r3, [r3, #8]
 80071a8:	f003 0307 	and.w	r3, r3, #7
 80071ac:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2b06      	cmp	r3, #6
 80071b2:	d007      	beq.n	80071c4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f042 0201 	orr.w	r2, r2, #1
 80071c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr

080071d2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b082      	sub	sp, #8
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d122      	bne.n	800722e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	f003 0302 	and.w	r3, r3, #2
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d11b      	bne.n	800722e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f06f 0202 	mvn.w	r2, #2
 80071fe:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	699b      	ldr	r3, [r3, #24]
 800720c:	f003 0303 	and.w	r3, r3, #3
 8007210:	2b00      	cmp	r3, #0
 8007212:	d003      	beq.n	800721c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f000 f9a5 	bl	8007564 <HAL_TIM_IC_CaptureCallback>
 800721a:	e005      	b.n	8007228 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 f997 	bl	8007550 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007222:	6878      	ldr	r0, [r7, #4]
 8007224:	f000 f9a8 	bl	8007578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2200      	movs	r2, #0
 800722c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	f003 0304 	and.w	r3, r3, #4
 8007238:	2b04      	cmp	r3, #4
 800723a:	d122      	bne.n	8007282 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	f003 0304 	and.w	r3, r3, #4
 8007246:	2b04      	cmp	r3, #4
 8007248:	d11b      	bne.n	8007282 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f06f 0204 	mvn.w	r2, #4
 8007252:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2202      	movs	r2, #2
 8007258:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007264:	2b00      	cmp	r3, #0
 8007266:	d003      	beq.n	8007270 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007268:	6878      	ldr	r0, [r7, #4]
 800726a:	f000 f97b 	bl	8007564 <HAL_TIM_IC_CaptureCallback>
 800726e:	e005      	b.n	800727c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f96d 	bl	8007550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f000 f97e 	bl	8007578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	691b      	ldr	r3, [r3, #16]
 8007288:	f003 0308 	and.w	r3, r3, #8
 800728c:	2b08      	cmp	r3, #8
 800728e:	d122      	bne.n	80072d6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	f003 0308 	and.w	r3, r3, #8
 800729a:	2b08      	cmp	r3, #8
 800729c:	d11b      	bne.n	80072d6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f06f 0208 	mvn.w	r2, #8
 80072a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2204      	movs	r2, #4
 80072ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	f003 0303 	and.w	r3, r3, #3
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d003      	beq.n	80072c4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80072bc:	6878      	ldr	r0, [r7, #4]
 80072be:	f000 f951 	bl	8007564 <HAL_TIM_IC_CaptureCallback>
 80072c2:	e005      	b.n	80072d0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80072c4:	6878      	ldr	r0, [r7, #4]
 80072c6:	f000 f943 	bl	8007550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 f954 	bl	8007578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	691b      	ldr	r3, [r3, #16]
 80072dc:	f003 0310 	and.w	r3, r3, #16
 80072e0:	2b10      	cmp	r3, #16
 80072e2:	d122      	bne.n	800732a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	f003 0310 	and.w	r3, r3, #16
 80072ee:	2b10      	cmp	r3, #16
 80072f0:	d11b      	bne.n	800732a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f06f 0210 	mvn.w	r2, #16
 80072fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2208      	movs	r2, #8
 8007300:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	69db      	ldr	r3, [r3, #28]
 8007308:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800730c:	2b00      	cmp	r3, #0
 800730e:	d003      	beq.n	8007318 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007310:	6878      	ldr	r0, [r7, #4]
 8007312:	f000 f927 	bl	8007564 <HAL_TIM_IC_CaptureCallback>
 8007316:	e005      	b.n	8007324 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f000 f919 	bl	8007550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f92a 	bl	8007578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	2b01      	cmp	r3, #1
 8007336:	d10e      	bne.n	8007356 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	2b01      	cmp	r3, #1
 8007344:	d107      	bne.n	8007356 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f06f 0201 	mvn.w	r2, #1
 800734e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f7fa fd47 	bl	8001de4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007360:	2b80      	cmp	r3, #128	; 0x80
 8007362:	d10e      	bne.n	8007382 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	68db      	ldr	r3, [r3, #12]
 800736a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800736e:	2b80      	cmp	r3, #128	; 0x80
 8007370:	d107      	bne.n	8007382 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800737a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 facf 	bl	8007920 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	691b      	ldr	r3, [r3, #16]
 8007388:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800738c:	2b40      	cmp	r3, #64	; 0x40
 800738e:	d10e      	bne.n	80073ae <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	68db      	ldr	r3, [r3, #12]
 8007396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739a:	2b40      	cmp	r3, #64	; 0x40
 800739c:	d107      	bne.n	80073ae <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80073a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f8ef 	bl	800758c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	691b      	ldr	r3, [r3, #16]
 80073b4:	f003 0320 	and.w	r3, r3, #32
 80073b8:	2b20      	cmp	r3, #32
 80073ba:	d10e      	bne.n	80073da <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	68db      	ldr	r3, [r3, #12]
 80073c2:	f003 0320 	and.w	r3, r3, #32
 80073c6:	2b20      	cmp	r3, #32
 80073c8:	d107      	bne.n	80073da <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f06f 0220 	mvn.w	r2, #32
 80073d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fa99 	bl	800790c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80073da:	bf00      	nop
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80073e2:	b580      	push	{r7, lr}
 80073e4:	b084      	sub	sp, #16
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073f2:	2b01      	cmp	r3, #1
 80073f4:	d101      	bne.n	80073fa <HAL_TIM_ConfigClockSource+0x18>
 80073f6:	2302      	movs	r3, #2
 80073f8:	e0a6      	b.n	8007548 <HAL_TIM_ConfigClockSource+0x166>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2202      	movs	r2, #2
 8007406:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007418:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007420:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68fa      	ldr	r2, [r7, #12]
 8007428:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	2b40      	cmp	r3, #64	; 0x40
 8007430:	d067      	beq.n	8007502 <HAL_TIM_ConfigClockSource+0x120>
 8007432:	2b40      	cmp	r3, #64	; 0x40
 8007434:	d80b      	bhi.n	800744e <HAL_TIM_ConfigClockSource+0x6c>
 8007436:	2b10      	cmp	r3, #16
 8007438:	d073      	beq.n	8007522 <HAL_TIM_ConfigClockSource+0x140>
 800743a:	2b10      	cmp	r3, #16
 800743c:	d802      	bhi.n	8007444 <HAL_TIM_ConfigClockSource+0x62>
 800743e:	2b00      	cmp	r3, #0
 8007440:	d06f      	beq.n	8007522 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8007442:	e078      	b.n	8007536 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007444:	2b20      	cmp	r3, #32
 8007446:	d06c      	beq.n	8007522 <HAL_TIM_ConfigClockSource+0x140>
 8007448:	2b30      	cmp	r3, #48	; 0x30
 800744a:	d06a      	beq.n	8007522 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800744c:	e073      	b.n	8007536 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800744e:	2b70      	cmp	r3, #112	; 0x70
 8007450:	d00d      	beq.n	800746e <HAL_TIM_ConfigClockSource+0x8c>
 8007452:	2b70      	cmp	r3, #112	; 0x70
 8007454:	d804      	bhi.n	8007460 <HAL_TIM_ConfigClockSource+0x7e>
 8007456:	2b50      	cmp	r3, #80	; 0x50
 8007458:	d033      	beq.n	80074c2 <HAL_TIM_ConfigClockSource+0xe0>
 800745a:	2b60      	cmp	r3, #96	; 0x60
 800745c:	d041      	beq.n	80074e2 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800745e:	e06a      	b.n	8007536 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8007460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007464:	d066      	beq.n	8007534 <HAL_TIM_ConfigClockSource+0x152>
 8007466:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800746a:	d017      	beq.n	800749c <HAL_TIM_ConfigClockSource+0xba>
      break;
 800746c:	e063      	b.n	8007536 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6818      	ldr	r0, [r3, #0]
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	6899      	ldr	r1, [r3, #8]
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	685a      	ldr	r2, [r3, #4]
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	f000 f9a9 	bl	80077d4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007490:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68fa      	ldr	r2, [r7, #12]
 8007498:	609a      	str	r2, [r3, #8]
      break;
 800749a:	e04c      	b.n	8007536 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6818      	ldr	r0, [r3, #0]
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	6899      	ldr	r1, [r3, #8]
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	685a      	ldr	r2, [r3, #4]
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	f000 f992 	bl	80077d4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	689a      	ldr	r2, [r3, #8]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80074be:	609a      	str	r2, [r3, #8]
      break;
 80074c0:	e039      	b.n	8007536 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6818      	ldr	r0, [r3, #0]
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	6859      	ldr	r1, [r3, #4]
 80074ca:	683b      	ldr	r3, [r7, #0]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	461a      	mov	r2, r3
 80074d0:	f000 f906 	bl	80076e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2150      	movs	r1, #80	; 0x50
 80074da:	4618      	mov	r0, r3
 80074dc:	f000 f95f 	bl	800779e <TIM_ITRx_SetConfig>
      break;
 80074e0:	e029      	b.n	8007536 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6818      	ldr	r0, [r3, #0]
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	6859      	ldr	r1, [r3, #4]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	68db      	ldr	r3, [r3, #12]
 80074ee:	461a      	mov	r2, r3
 80074f0:	f000 f925 	bl	800773e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2160      	movs	r1, #96	; 0x60
 80074fa:	4618      	mov	r0, r3
 80074fc:	f000 f94f 	bl	800779e <TIM_ITRx_SetConfig>
      break;
 8007500:	e019      	b.n	8007536 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6818      	ldr	r0, [r3, #0]
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	6859      	ldr	r1, [r3, #4]
 800750a:	683b      	ldr	r3, [r7, #0]
 800750c:	68db      	ldr	r3, [r3, #12]
 800750e:	461a      	mov	r2, r3
 8007510:	f000 f8e6 	bl	80076e0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2140      	movs	r1, #64	; 0x40
 800751a:	4618      	mov	r0, r3
 800751c:	f000 f93f 	bl	800779e <TIM_ITRx_SetConfig>
      break;
 8007520:	e009      	b.n	8007536 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4619      	mov	r1, r3
 800752c:	4610      	mov	r0, r2
 800752e:	f000 f936 	bl	800779e <TIM_ITRx_SetConfig>
      break;
 8007532:	e000      	b.n	8007536 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8007534:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2200      	movs	r2, #0
 8007542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007546:	2300      	movs	r3, #0
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}

08007550 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007594:	bf00      	nop
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b085      	sub	sp, #20
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	4a40      	ldr	r2, [pc, #256]	; (80076b4 <TIM_Base_SetConfig+0x114>)
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d013      	beq.n	80075e0 <TIM_Base_SetConfig+0x40>
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80075be:	d00f      	beq.n	80075e0 <TIM_Base_SetConfig+0x40>
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	4a3d      	ldr	r2, [pc, #244]	; (80076b8 <TIM_Base_SetConfig+0x118>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d00b      	beq.n	80075e0 <TIM_Base_SetConfig+0x40>
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4a3c      	ldr	r2, [pc, #240]	; (80076bc <TIM_Base_SetConfig+0x11c>)
 80075cc:	4293      	cmp	r3, r2
 80075ce:	d007      	beq.n	80075e0 <TIM_Base_SetConfig+0x40>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	4a3b      	ldr	r2, [pc, #236]	; (80076c0 <TIM_Base_SetConfig+0x120>)
 80075d4:	4293      	cmp	r3, r2
 80075d6:	d003      	beq.n	80075e0 <TIM_Base_SetConfig+0x40>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	4a3a      	ldr	r2, [pc, #232]	; (80076c4 <TIM_Base_SetConfig+0x124>)
 80075dc:	4293      	cmp	r3, r2
 80075de:	d108      	bne.n	80075f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80075e8:	683b      	ldr	r3, [r7, #0]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	4313      	orrs	r3, r2
 80075f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	4a2f      	ldr	r2, [pc, #188]	; (80076b4 <TIM_Base_SetConfig+0x114>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d02b      	beq.n	8007652 <TIM_Base_SetConfig+0xb2>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007600:	d027      	beq.n	8007652 <TIM_Base_SetConfig+0xb2>
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	4a2c      	ldr	r2, [pc, #176]	; (80076b8 <TIM_Base_SetConfig+0x118>)
 8007606:	4293      	cmp	r3, r2
 8007608:	d023      	beq.n	8007652 <TIM_Base_SetConfig+0xb2>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a2b      	ldr	r2, [pc, #172]	; (80076bc <TIM_Base_SetConfig+0x11c>)
 800760e:	4293      	cmp	r3, r2
 8007610:	d01f      	beq.n	8007652 <TIM_Base_SetConfig+0xb2>
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	4a2a      	ldr	r2, [pc, #168]	; (80076c0 <TIM_Base_SetConfig+0x120>)
 8007616:	4293      	cmp	r3, r2
 8007618:	d01b      	beq.n	8007652 <TIM_Base_SetConfig+0xb2>
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4a29      	ldr	r2, [pc, #164]	; (80076c4 <TIM_Base_SetConfig+0x124>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d017      	beq.n	8007652 <TIM_Base_SetConfig+0xb2>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	4a28      	ldr	r2, [pc, #160]	; (80076c8 <TIM_Base_SetConfig+0x128>)
 8007626:	4293      	cmp	r3, r2
 8007628:	d013      	beq.n	8007652 <TIM_Base_SetConfig+0xb2>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	4a27      	ldr	r2, [pc, #156]	; (80076cc <TIM_Base_SetConfig+0x12c>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d00f      	beq.n	8007652 <TIM_Base_SetConfig+0xb2>
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a26      	ldr	r2, [pc, #152]	; (80076d0 <TIM_Base_SetConfig+0x130>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d00b      	beq.n	8007652 <TIM_Base_SetConfig+0xb2>
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	4a25      	ldr	r2, [pc, #148]	; (80076d4 <TIM_Base_SetConfig+0x134>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d007      	beq.n	8007652 <TIM_Base_SetConfig+0xb2>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4a24      	ldr	r2, [pc, #144]	; (80076d8 <TIM_Base_SetConfig+0x138>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d003      	beq.n	8007652 <TIM_Base_SetConfig+0xb2>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	4a23      	ldr	r2, [pc, #140]	; (80076dc <TIM_Base_SetConfig+0x13c>)
 800764e:	4293      	cmp	r3, r2
 8007650:	d108      	bne.n	8007664 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007658:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	4313      	orrs	r3, r2
 8007662:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	4313      	orrs	r3, r2
 8007670:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	68fa      	ldr	r2, [r7, #12]
 8007676:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007678:	683b      	ldr	r3, [r7, #0]
 800767a:	689a      	ldr	r2, [r3, #8]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681a      	ldr	r2, [r3, #0]
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	4a0a      	ldr	r2, [pc, #40]	; (80076b4 <TIM_Base_SetConfig+0x114>)
 800768c:	4293      	cmp	r3, r2
 800768e:	d003      	beq.n	8007698 <TIM_Base_SetConfig+0xf8>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	4a0c      	ldr	r2, [pc, #48]	; (80076c4 <TIM_Base_SetConfig+0x124>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d103      	bne.n	80076a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	691a      	ldr	r2, [r3, #16]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2201      	movs	r2, #1
 80076a4:	615a      	str	r2, [r3, #20]
}
 80076a6:	bf00      	nop
 80076a8:	3714      	adds	r7, #20
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	40010000 	.word	0x40010000
 80076b8:	40000400 	.word	0x40000400
 80076bc:	40000800 	.word	0x40000800
 80076c0:	40000c00 	.word	0x40000c00
 80076c4:	40010400 	.word	0x40010400
 80076c8:	40014000 	.word	0x40014000
 80076cc:	40014400 	.word	0x40014400
 80076d0:	40014800 	.word	0x40014800
 80076d4:	40001800 	.word	0x40001800
 80076d8:	40001c00 	.word	0x40001c00
 80076dc:	40002000 	.word	0x40002000

080076e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b087      	sub	sp, #28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	60f8      	str	r0, [r7, #12]
 80076e8:	60b9      	str	r1, [r7, #8]
 80076ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6a1b      	ldr	r3, [r3, #32]
 80076f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	6a1b      	ldr	r3, [r3, #32]
 80076f6:	f023 0201 	bic.w	r2, r3, #1
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	699b      	ldr	r3, [r3, #24]
 8007702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800770a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	011b      	lsls	r3, r3, #4
 8007710:	693a      	ldr	r2, [r7, #16]
 8007712:	4313      	orrs	r3, r2
 8007714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	f023 030a 	bic.w	r3, r3, #10
 800771c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800771e:	697a      	ldr	r2, [r7, #20]
 8007720:	68bb      	ldr	r3, [r7, #8]
 8007722:	4313      	orrs	r3, r2
 8007724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	693a      	ldr	r2, [r7, #16]
 800772a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	697a      	ldr	r2, [r7, #20]
 8007730:	621a      	str	r2, [r3, #32]
}
 8007732:	bf00      	nop
 8007734:	371c      	adds	r7, #28
 8007736:	46bd      	mov	sp, r7
 8007738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773c:	4770      	bx	lr

0800773e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800773e:	b480      	push	{r7}
 8007740:	b087      	sub	sp, #28
 8007742:	af00      	add	r7, sp, #0
 8007744:	60f8      	str	r0, [r7, #12]
 8007746:	60b9      	str	r1, [r7, #8]
 8007748:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	6a1b      	ldr	r3, [r3, #32]
 800774e:	f023 0210 	bic.w	r2, r3, #16
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6a1b      	ldr	r3, [r3, #32]
 8007760:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007768:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	031b      	lsls	r3, r3, #12
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	4313      	orrs	r3, r2
 8007772:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800777a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	011b      	lsls	r3, r3, #4
 8007780:	693a      	ldr	r2, [r7, #16]
 8007782:	4313      	orrs	r3, r2
 8007784:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	697a      	ldr	r2, [r7, #20]
 800778a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	621a      	str	r2, [r3, #32]
}
 8007792:	bf00      	nop
 8007794:	371c      	adds	r7, #28
 8007796:	46bd      	mov	sp, r7
 8007798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779c:	4770      	bx	lr

0800779e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800779e:	b480      	push	{r7}
 80077a0:	b085      	sub	sp, #20
 80077a2:	af00      	add	r7, sp, #0
 80077a4:	6078      	str	r0, [r7, #4]
 80077a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80077b6:	683a      	ldr	r2, [r7, #0]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4313      	orrs	r3, r2
 80077bc:	f043 0307 	orr.w	r3, r3, #7
 80077c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	609a      	str	r2, [r3, #8]
}
 80077c8:	bf00      	nop
 80077ca:	3714      	adds	r7, #20
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b087      	sub	sp, #28
 80077d8:	af00      	add	r7, sp, #0
 80077da:	60f8      	str	r0, [r7, #12]
 80077dc:	60b9      	str	r1, [r7, #8]
 80077de:	607a      	str	r2, [r7, #4]
 80077e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80077ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	021a      	lsls	r2, r3, #8
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	431a      	orrs	r2, r3
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	4313      	orrs	r3, r2
 80077fc:	697a      	ldr	r2, [r7, #20]
 80077fe:	4313      	orrs	r3, r2
 8007800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	697a      	ldr	r2, [r7, #20]
 8007806:	609a      	str	r2, [r3, #8]
}
 8007808:	bf00      	nop
 800780a:	371c      	adds	r7, #28
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007814:	b480      	push	{r7}
 8007816:	b085      	sub	sp, #20
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007824:	2b01      	cmp	r3, #1
 8007826:	d101      	bne.n	800782c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007828:	2302      	movs	r3, #2
 800782a:	e05a      	b.n	80078e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2202      	movs	r2, #2
 8007838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007852:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	4313      	orrs	r3, r2
 800785c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	68fa      	ldr	r2, [r7, #12]
 8007864:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a21      	ldr	r2, [pc, #132]	; (80078f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d022      	beq.n	80078b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007878:	d01d      	beq.n	80078b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a1d      	ldr	r2, [pc, #116]	; (80078f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d018      	beq.n	80078b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a1b      	ldr	r2, [pc, #108]	; (80078f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d013      	beq.n	80078b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a1a      	ldr	r2, [pc, #104]	; (80078fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d00e      	beq.n	80078b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a18      	ldr	r2, [pc, #96]	; (8007900 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d009      	beq.n	80078b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a17      	ldr	r2, [pc, #92]	; (8007904 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d004      	beq.n	80078b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a15      	ldr	r2, [pc, #84]	; (8007908 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d10c      	bne.n	80078d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80078bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	68ba      	ldr	r2, [r7, #8]
 80078c4:	4313      	orrs	r3, r2
 80078c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80078e0:	2300      	movs	r3, #0
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3714      	adds	r7, #20
 80078e6:	46bd      	mov	sp, r7
 80078e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop
 80078f0:	40010000 	.word	0x40010000
 80078f4:	40000400 	.word	0x40000400
 80078f8:	40000800 	.word	0x40000800
 80078fc:	40000c00 	.word	0x40000c00
 8007900:	40010400 	.word	0x40010400
 8007904:	40014000 	.word	0x40014000
 8007908:	40001800 	.word	0x40001800

0800790c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800790c:	b480      	push	{r7}
 800790e:	b083      	sub	sp, #12
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007914:	bf00      	nop
 8007916:	370c      	adds	r7, #12
 8007918:	46bd      	mov	sp, r7
 800791a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791e:	4770      	bx	lr

08007920 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007920:	b480      	push	{r7}
 8007922:	b083      	sub	sp, #12
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007928:	bf00      	nop
 800792a:	370c      	adds	r7, #12
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr

08007934 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d101      	bne.n	8007946 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e03f      	b.n	80079c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b00      	cmp	r3, #0
 8007950:	d106      	bne.n	8007960 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2200      	movs	r2, #0
 8007956:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800795a:	6878      	ldr	r0, [r7, #4]
 800795c:	f7fa fd74 	bl	8002448 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2224      	movs	r2, #36	; 0x24
 8007964:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	68da      	ldr	r2, [r3, #12]
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007976:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 f829 	bl	80079d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	691a      	ldr	r2, [r3, #16]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800798c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	695a      	ldr	r2, [r3, #20]
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800799c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	68da      	ldr	r2, [r3, #12]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80079ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2220      	movs	r2, #32
 80079b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2220      	movs	r2, #32
 80079c0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3708      	adds	r7, #8
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
	...

080079d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80079d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079d4:	b085      	sub	sp, #20
 80079d6:	af00      	add	r7, sp, #0
 80079d8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	68da      	ldr	r2, [r3, #12]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	430a      	orrs	r2, r1
 80079ee:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	689a      	ldr	r2, [r3, #8]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	431a      	orrs	r2, r3
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	695b      	ldr	r3, [r3, #20]
 80079fe:	431a      	orrs	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	69db      	ldr	r3, [r3, #28]
 8007a04:	4313      	orrs	r3, r2
 8007a06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8007a12:	f023 030c 	bic.w	r3, r3, #12
 8007a16:	687a      	ldr	r2, [r7, #4]
 8007a18:	6812      	ldr	r2, [r2, #0]
 8007a1a:	68f9      	ldr	r1, [r7, #12]
 8007a1c:	430b      	orrs	r3, r1
 8007a1e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	695b      	ldr	r3, [r3, #20]
 8007a26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	699a      	ldr	r2, [r3, #24]
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	430a      	orrs	r2, r1
 8007a34:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	69db      	ldr	r3, [r3, #28]
 8007a3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a3e:	f040 818b 	bne.w	8007d58 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4ac1      	ldr	r2, [pc, #772]	; (8007d4c <UART_SetConfig+0x37c>)
 8007a48:	4293      	cmp	r3, r2
 8007a4a:	d005      	beq.n	8007a58 <UART_SetConfig+0x88>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	4abf      	ldr	r2, [pc, #764]	; (8007d50 <UART_SetConfig+0x380>)
 8007a52:	4293      	cmp	r3, r2
 8007a54:	f040 80bd 	bne.w	8007bd2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a58:	f7ff fb58 	bl	800710c <HAL_RCC_GetPCLK2Freq>
 8007a5c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	461d      	mov	r5, r3
 8007a62:	f04f 0600 	mov.w	r6, #0
 8007a66:	46a8      	mov	r8, r5
 8007a68:	46b1      	mov	r9, r6
 8007a6a:	eb18 0308 	adds.w	r3, r8, r8
 8007a6e:	eb49 0409 	adc.w	r4, r9, r9
 8007a72:	4698      	mov	r8, r3
 8007a74:	46a1      	mov	r9, r4
 8007a76:	eb18 0805 	adds.w	r8, r8, r5
 8007a7a:	eb49 0906 	adc.w	r9, r9, r6
 8007a7e:	f04f 0100 	mov.w	r1, #0
 8007a82:	f04f 0200 	mov.w	r2, #0
 8007a86:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007a8a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007a8e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007a92:	4688      	mov	r8, r1
 8007a94:	4691      	mov	r9, r2
 8007a96:	eb18 0005 	adds.w	r0, r8, r5
 8007a9a:	eb49 0106 	adc.w	r1, r9, r6
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	461d      	mov	r5, r3
 8007aa4:	f04f 0600 	mov.w	r6, #0
 8007aa8:	196b      	adds	r3, r5, r5
 8007aaa:	eb46 0406 	adc.w	r4, r6, r6
 8007aae:	461a      	mov	r2, r3
 8007ab0:	4623      	mov	r3, r4
 8007ab2:	f7f8 fb89 	bl	80001c8 <__aeabi_uldivmod>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	460c      	mov	r4, r1
 8007aba:	461a      	mov	r2, r3
 8007abc:	4ba5      	ldr	r3, [pc, #660]	; (8007d54 <UART_SetConfig+0x384>)
 8007abe:	fba3 2302 	umull	r2, r3, r3, r2
 8007ac2:	095b      	lsrs	r3, r3, #5
 8007ac4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	461d      	mov	r5, r3
 8007acc:	f04f 0600 	mov.w	r6, #0
 8007ad0:	46a9      	mov	r9, r5
 8007ad2:	46b2      	mov	sl, r6
 8007ad4:	eb19 0309 	adds.w	r3, r9, r9
 8007ad8:	eb4a 040a 	adc.w	r4, sl, sl
 8007adc:	4699      	mov	r9, r3
 8007ade:	46a2      	mov	sl, r4
 8007ae0:	eb19 0905 	adds.w	r9, r9, r5
 8007ae4:	eb4a 0a06 	adc.w	sl, sl, r6
 8007ae8:	f04f 0100 	mov.w	r1, #0
 8007aec:	f04f 0200 	mov.w	r2, #0
 8007af0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007af4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007af8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007afc:	4689      	mov	r9, r1
 8007afe:	4692      	mov	sl, r2
 8007b00:	eb19 0005 	adds.w	r0, r9, r5
 8007b04:	eb4a 0106 	adc.w	r1, sl, r6
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	461d      	mov	r5, r3
 8007b0e:	f04f 0600 	mov.w	r6, #0
 8007b12:	196b      	adds	r3, r5, r5
 8007b14:	eb46 0406 	adc.w	r4, r6, r6
 8007b18:	461a      	mov	r2, r3
 8007b1a:	4623      	mov	r3, r4
 8007b1c:	f7f8 fb54 	bl	80001c8 <__aeabi_uldivmod>
 8007b20:	4603      	mov	r3, r0
 8007b22:	460c      	mov	r4, r1
 8007b24:	461a      	mov	r2, r3
 8007b26:	4b8b      	ldr	r3, [pc, #556]	; (8007d54 <UART_SetConfig+0x384>)
 8007b28:	fba3 1302 	umull	r1, r3, r3, r2
 8007b2c:	095b      	lsrs	r3, r3, #5
 8007b2e:	2164      	movs	r1, #100	; 0x64
 8007b30:	fb01 f303 	mul.w	r3, r1, r3
 8007b34:	1ad3      	subs	r3, r2, r3
 8007b36:	00db      	lsls	r3, r3, #3
 8007b38:	3332      	adds	r3, #50	; 0x32
 8007b3a:	4a86      	ldr	r2, [pc, #536]	; (8007d54 <UART_SetConfig+0x384>)
 8007b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8007b40:	095b      	lsrs	r3, r3, #5
 8007b42:	005b      	lsls	r3, r3, #1
 8007b44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007b48:	4498      	add	r8, r3
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	461d      	mov	r5, r3
 8007b4e:	f04f 0600 	mov.w	r6, #0
 8007b52:	46a9      	mov	r9, r5
 8007b54:	46b2      	mov	sl, r6
 8007b56:	eb19 0309 	adds.w	r3, r9, r9
 8007b5a:	eb4a 040a 	adc.w	r4, sl, sl
 8007b5e:	4699      	mov	r9, r3
 8007b60:	46a2      	mov	sl, r4
 8007b62:	eb19 0905 	adds.w	r9, r9, r5
 8007b66:	eb4a 0a06 	adc.w	sl, sl, r6
 8007b6a:	f04f 0100 	mov.w	r1, #0
 8007b6e:	f04f 0200 	mov.w	r2, #0
 8007b72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b76:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007b7a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007b7e:	4689      	mov	r9, r1
 8007b80:	4692      	mov	sl, r2
 8007b82:	eb19 0005 	adds.w	r0, r9, r5
 8007b86:	eb4a 0106 	adc.w	r1, sl, r6
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685b      	ldr	r3, [r3, #4]
 8007b8e:	461d      	mov	r5, r3
 8007b90:	f04f 0600 	mov.w	r6, #0
 8007b94:	196b      	adds	r3, r5, r5
 8007b96:	eb46 0406 	adc.w	r4, r6, r6
 8007b9a:	461a      	mov	r2, r3
 8007b9c:	4623      	mov	r3, r4
 8007b9e:	f7f8 fb13 	bl	80001c8 <__aeabi_uldivmod>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	460c      	mov	r4, r1
 8007ba6:	461a      	mov	r2, r3
 8007ba8:	4b6a      	ldr	r3, [pc, #424]	; (8007d54 <UART_SetConfig+0x384>)
 8007baa:	fba3 1302 	umull	r1, r3, r3, r2
 8007bae:	095b      	lsrs	r3, r3, #5
 8007bb0:	2164      	movs	r1, #100	; 0x64
 8007bb2:	fb01 f303 	mul.w	r3, r1, r3
 8007bb6:	1ad3      	subs	r3, r2, r3
 8007bb8:	00db      	lsls	r3, r3, #3
 8007bba:	3332      	adds	r3, #50	; 0x32
 8007bbc:	4a65      	ldr	r2, [pc, #404]	; (8007d54 <UART_SetConfig+0x384>)
 8007bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8007bc2:	095b      	lsrs	r3, r3, #5
 8007bc4:	f003 0207 	and.w	r2, r3, #7
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4442      	add	r2, r8
 8007bce:	609a      	str	r2, [r3, #8]
 8007bd0:	e26f      	b.n	80080b2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007bd2:	f7ff fa87 	bl	80070e4 <HAL_RCC_GetPCLK1Freq>
 8007bd6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007bd8:	68bb      	ldr	r3, [r7, #8]
 8007bda:	461d      	mov	r5, r3
 8007bdc:	f04f 0600 	mov.w	r6, #0
 8007be0:	46a8      	mov	r8, r5
 8007be2:	46b1      	mov	r9, r6
 8007be4:	eb18 0308 	adds.w	r3, r8, r8
 8007be8:	eb49 0409 	adc.w	r4, r9, r9
 8007bec:	4698      	mov	r8, r3
 8007bee:	46a1      	mov	r9, r4
 8007bf0:	eb18 0805 	adds.w	r8, r8, r5
 8007bf4:	eb49 0906 	adc.w	r9, r9, r6
 8007bf8:	f04f 0100 	mov.w	r1, #0
 8007bfc:	f04f 0200 	mov.w	r2, #0
 8007c00:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007c04:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007c08:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007c0c:	4688      	mov	r8, r1
 8007c0e:	4691      	mov	r9, r2
 8007c10:	eb18 0005 	adds.w	r0, r8, r5
 8007c14:	eb49 0106 	adc.w	r1, r9, r6
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	685b      	ldr	r3, [r3, #4]
 8007c1c:	461d      	mov	r5, r3
 8007c1e:	f04f 0600 	mov.w	r6, #0
 8007c22:	196b      	adds	r3, r5, r5
 8007c24:	eb46 0406 	adc.w	r4, r6, r6
 8007c28:	461a      	mov	r2, r3
 8007c2a:	4623      	mov	r3, r4
 8007c2c:	f7f8 facc 	bl	80001c8 <__aeabi_uldivmod>
 8007c30:	4603      	mov	r3, r0
 8007c32:	460c      	mov	r4, r1
 8007c34:	461a      	mov	r2, r3
 8007c36:	4b47      	ldr	r3, [pc, #284]	; (8007d54 <UART_SetConfig+0x384>)
 8007c38:	fba3 2302 	umull	r2, r3, r3, r2
 8007c3c:	095b      	lsrs	r3, r3, #5
 8007c3e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	461d      	mov	r5, r3
 8007c46:	f04f 0600 	mov.w	r6, #0
 8007c4a:	46a9      	mov	r9, r5
 8007c4c:	46b2      	mov	sl, r6
 8007c4e:	eb19 0309 	adds.w	r3, r9, r9
 8007c52:	eb4a 040a 	adc.w	r4, sl, sl
 8007c56:	4699      	mov	r9, r3
 8007c58:	46a2      	mov	sl, r4
 8007c5a:	eb19 0905 	adds.w	r9, r9, r5
 8007c5e:	eb4a 0a06 	adc.w	sl, sl, r6
 8007c62:	f04f 0100 	mov.w	r1, #0
 8007c66:	f04f 0200 	mov.w	r2, #0
 8007c6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007c72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007c76:	4689      	mov	r9, r1
 8007c78:	4692      	mov	sl, r2
 8007c7a:	eb19 0005 	adds.w	r0, r9, r5
 8007c7e:	eb4a 0106 	adc.w	r1, sl, r6
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	461d      	mov	r5, r3
 8007c88:	f04f 0600 	mov.w	r6, #0
 8007c8c:	196b      	adds	r3, r5, r5
 8007c8e:	eb46 0406 	adc.w	r4, r6, r6
 8007c92:	461a      	mov	r2, r3
 8007c94:	4623      	mov	r3, r4
 8007c96:	f7f8 fa97 	bl	80001c8 <__aeabi_uldivmod>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	460c      	mov	r4, r1
 8007c9e:	461a      	mov	r2, r3
 8007ca0:	4b2c      	ldr	r3, [pc, #176]	; (8007d54 <UART_SetConfig+0x384>)
 8007ca2:	fba3 1302 	umull	r1, r3, r3, r2
 8007ca6:	095b      	lsrs	r3, r3, #5
 8007ca8:	2164      	movs	r1, #100	; 0x64
 8007caa:	fb01 f303 	mul.w	r3, r1, r3
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	00db      	lsls	r3, r3, #3
 8007cb2:	3332      	adds	r3, #50	; 0x32
 8007cb4:	4a27      	ldr	r2, [pc, #156]	; (8007d54 <UART_SetConfig+0x384>)
 8007cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cba:	095b      	lsrs	r3, r3, #5
 8007cbc:	005b      	lsls	r3, r3, #1
 8007cbe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007cc2:	4498      	add	r8, r3
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	461d      	mov	r5, r3
 8007cc8:	f04f 0600 	mov.w	r6, #0
 8007ccc:	46a9      	mov	r9, r5
 8007cce:	46b2      	mov	sl, r6
 8007cd0:	eb19 0309 	adds.w	r3, r9, r9
 8007cd4:	eb4a 040a 	adc.w	r4, sl, sl
 8007cd8:	4699      	mov	r9, r3
 8007cda:	46a2      	mov	sl, r4
 8007cdc:	eb19 0905 	adds.w	r9, r9, r5
 8007ce0:	eb4a 0a06 	adc.w	sl, sl, r6
 8007ce4:	f04f 0100 	mov.w	r1, #0
 8007ce8:	f04f 0200 	mov.w	r2, #0
 8007cec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cf0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007cf4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007cf8:	4689      	mov	r9, r1
 8007cfa:	4692      	mov	sl, r2
 8007cfc:	eb19 0005 	adds.w	r0, r9, r5
 8007d00:	eb4a 0106 	adc.w	r1, sl, r6
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	685b      	ldr	r3, [r3, #4]
 8007d08:	461d      	mov	r5, r3
 8007d0a:	f04f 0600 	mov.w	r6, #0
 8007d0e:	196b      	adds	r3, r5, r5
 8007d10:	eb46 0406 	adc.w	r4, r6, r6
 8007d14:	461a      	mov	r2, r3
 8007d16:	4623      	mov	r3, r4
 8007d18:	f7f8 fa56 	bl	80001c8 <__aeabi_uldivmod>
 8007d1c:	4603      	mov	r3, r0
 8007d1e:	460c      	mov	r4, r1
 8007d20:	461a      	mov	r2, r3
 8007d22:	4b0c      	ldr	r3, [pc, #48]	; (8007d54 <UART_SetConfig+0x384>)
 8007d24:	fba3 1302 	umull	r1, r3, r3, r2
 8007d28:	095b      	lsrs	r3, r3, #5
 8007d2a:	2164      	movs	r1, #100	; 0x64
 8007d2c:	fb01 f303 	mul.w	r3, r1, r3
 8007d30:	1ad3      	subs	r3, r2, r3
 8007d32:	00db      	lsls	r3, r3, #3
 8007d34:	3332      	adds	r3, #50	; 0x32
 8007d36:	4a07      	ldr	r2, [pc, #28]	; (8007d54 <UART_SetConfig+0x384>)
 8007d38:	fba2 2303 	umull	r2, r3, r2, r3
 8007d3c:	095b      	lsrs	r3, r3, #5
 8007d3e:	f003 0207 	and.w	r2, r3, #7
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	4442      	add	r2, r8
 8007d48:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8007d4a:	e1b2      	b.n	80080b2 <UART_SetConfig+0x6e2>
 8007d4c:	40011000 	.word	0x40011000
 8007d50:	40011400 	.word	0x40011400
 8007d54:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4ad7      	ldr	r2, [pc, #860]	; (80080bc <UART_SetConfig+0x6ec>)
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d005      	beq.n	8007d6e <UART_SetConfig+0x39e>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4ad6      	ldr	r2, [pc, #856]	; (80080c0 <UART_SetConfig+0x6f0>)
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	f040 80d1 	bne.w	8007f10 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d6e:	f7ff f9cd 	bl	800710c <HAL_RCC_GetPCLK2Freq>
 8007d72:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	469a      	mov	sl, r3
 8007d78:	f04f 0b00 	mov.w	fp, #0
 8007d7c:	46d0      	mov	r8, sl
 8007d7e:	46d9      	mov	r9, fp
 8007d80:	eb18 0308 	adds.w	r3, r8, r8
 8007d84:	eb49 0409 	adc.w	r4, r9, r9
 8007d88:	4698      	mov	r8, r3
 8007d8a:	46a1      	mov	r9, r4
 8007d8c:	eb18 080a 	adds.w	r8, r8, sl
 8007d90:	eb49 090b 	adc.w	r9, r9, fp
 8007d94:	f04f 0100 	mov.w	r1, #0
 8007d98:	f04f 0200 	mov.w	r2, #0
 8007d9c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007da0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007da4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007da8:	4688      	mov	r8, r1
 8007daa:	4691      	mov	r9, r2
 8007dac:	eb1a 0508 	adds.w	r5, sl, r8
 8007db0:	eb4b 0609 	adc.w	r6, fp, r9
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	685b      	ldr	r3, [r3, #4]
 8007db8:	4619      	mov	r1, r3
 8007dba:	f04f 0200 	mov.w	r2, #0
 8007dbe:	f04f 0300 	mov.w	r3, #0
 8007dc2:	f04f 0400 	mov.w	r4, #0
 8007dc6:	0094      	lsls	r4, r2, #2
 8007dc8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007dcc:	008b      	lsls	r3, r1, #2
 8007dce:	461a      	mov	r2, r3
 8007dd0:	4623      	mov	r3, r4
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	4631      	mov	r1, r6
 8007dd6:	f7f8 f9f7 	bl	80001c8 <__aeabi_uldivmod>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	460c      	mov	r4, r1
 8007dde:	461a      	mov	r2, r3
 8007de0:	4bb8      	ldr	r3, [pc, #736]	; (80080c4 <UART_SetConfig+0x6f4>)
 8007de2:	fba3 2302 	umull	r2, r3, r3, r2
 8007de6:	095b      	lsrs	r3, r3, #5
 8007de8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	469b      	mov	fp, r3
 8007df0:	f04f 0c00 	mov.w	ip, #0
 8007df4:	46d9      	mov	r9, fp
 8007df6:	46e2      	mov	sl, ip
 8007df8:	eb19 0309 	adds.w	r3, r9, r9
 8007dfc:	eb4a 040a 	adc.w	r4, sl, sl
 8007e00:	4699      	mov	r9, r3
 8007e02:	46a2      	mov	sl, r4
 8007e04:	eb19 090b 	adds.w	r9, r9, fp
 8007e08:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007e0c:	f04f 0100 	mov.w	r1, #0
 8007e10:	f04f 0200 	mov.w	r2, #0
 8007e14:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007e18:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007e1c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007e20:	4689      	mov	r9, r1
 8007e22:	4692      	mov	sl, r2
 8007e24:	eb1b 0509 	adds.w	r5, fp, r9
 8007e28:	eb4c 060a 	adc.w	r6, ip, sl
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	4619      	mov	r1, r3
 8007e32:	f04f 0200 	mov.w	r2, #0
 8007e36:	f04f 0300 	mov.w	r3, #0
 8007e3a:	f04f 0400 	mov.w	r4, #0
 8007e3e:	0094      	lsls	r4, r2, #2
 8007e40:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007e44:	008b      	lsls	r3, r1, #2
 8007e46:	461a      	mov	r2, r3
 8007e48:	4623      	mov	r3, r4
 8007e4a:	4628      	mov	r0, r5
 8007e4c:	4631      	mov	r1, r6
 8007e4e:	f7f8 f9bb 	bl	80001c8 <__aeabi_uldivmod>
 8007e52:	4603      	mov	r3, r0
 8007e54:	460c      	mov	r4, r1
 8007e56:	461a      	mov	r2, r3
 8007e58:	4b9a      	ldr	r3, [pc, #616]	; (80080c4 <UART_SetConfig+0x6f4>)
 8007e5a:	fba3 1302 	umull	r1, r3, r3, r2
 8007e5e:	095b      	lsrs	r3, r3, #5
 8007e60:	2164      	movs	r1, #100	; 0x64
 8007e62:	fb01 f303 	mul.w	r3, r1, r3
 8007e66:	1ad3      	subs	r3, r2, r3
 8007e68:	011b      	lsls	r3, r3, #4
 8007e6a:	3332      	adds	r3, #50	; 0x32
 8007e6c:	4a95      	ldr	r2, [pc, #596]	; (80080c4 <UART_SetConfig+0x6f4>)
 8007e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8007e72:	095b      	lsrs	r3, r3, #5
 8007e74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e78:	4498      	add	r8, r3
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	469b      	mov	fp, r3
 8007e7e:	f04f 0c00 	mov.w	ip, #0
 8007e82:	46d9      	mov	r9, fp
 8007e84:	46e2      	mov	sl, ip
 8007e86:	eb19 0309 	adds.w	r3, r9, r9
 8007e8a:	eb4a 040a 	adc.w	r4, sl, sl
 8007e8e:	4699      	mov	r9, r3
 8007e90:	46a2      	mov	sl, r4
 8007e92:	eb19 090b 	adds.w	r9, r9, fp
 8007e96:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007e9a:	f04f 0100 	mov.w	r1, #0
 8007e9e:	f04f 0200 	mov.w	r2, #0
 8007ea2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007ea6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007eaa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007eae:	4689      	mov	r9, r1
 8007eb0:	4692      	mov	sl, r2
 8007eb2:	eb1b 0509 	adds.w	r5, fp, r9
 8007eb6:	eb4c 060a 	adc.w	r6, ip, sl
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	4619      	mov	r1, r3
 8007ec0:	f04f 0200 	mov.w	r2, #0
 8007ec4:	f04f 0300 	mov.w	r3, #0
 8007ec8:	f04f 0400 	mov.w	r4, #0
 8007ecc:	0094      	lsls	r4, r2, #2
 8007ece:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007ed2:	008b      	lsls	r3, r1, #2
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	4623      	mov	r3, r4
 8007ed8:	4628      	mov	r0, r5
 8007eda:	4631      	mov	r1, r6
 8007edc:	f7f8 f974 	bl	80001c8 <__aeabi_uldivmod>
 8007ee0:	4603      	mov	r3, r0
 8007ee2:	460c      	mov	r4, r1
 8007ee4:	461a      	mov	r2, r3
 8007ee6:	4b77      	ldr	r3, [pc, #476]	; (80080c4 <UART_SetConfig+0x6f4>)
 8007ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8007eec:	095b      	lsrs	r3, r3, #5
 8007eee:	2164      	movs	r1, #100	; 0x64
 8007ef0:	fb01 f303 	mul.w	r3, r1, r3
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	011b      	lsls	r3, r3, #4
 8007ef8:	3332      	adds	r3, #50	; 0x32
 8007efa:	4a72      	ldr	r2, [pc, #456]	; (80080c4 <UART_SetConfig+0x6f4>)
 8007efc:	fba2 2303 	umull	r2, r3, r2, r3
 8007f00:	095b      	lsrs	r3, r3, #5
 8007f02:	f003 020f 	and.w	r2, r3, #15
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4442      	add	r2, r8
 8007f0c:	609a      	str	r2, [r3, #8]
 8007f0e:	e0d0      	b.n	80080b2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8007f10:	f7ff f8e8 	bl	80070e4 <HAL_RCC_GetPCLK1Freq>
 8007f14:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	469a      	mov	sl, r3
 8007f1a:	f04f 0b00 	mov.w	fp, #0
 8007f1e:	46d0      	mov	r8, sl
 8007f20:	46d9      	mov	r9, fp
 8007f22:	eb18 0308 	adds.w	r3, r8, r8
 8007f26:	eb49 0409 	adc.w	r4, r9, r9
 8007f2a:	4698      	mov	r8, r3
 8007f2c:	46a1      	mov	r9, r4
 8007f2e:	eb18 080a 	adds.w	r8, r8, sl
 8007f32:	eb49 090b 	adc.w	r9, r9, fp
 8007f36:	f04f 0100 	mov.w	r1, #0
 8007f3a:	f04f 0200 	mov.w	r2, #0
 8007f3e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8007f42:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8007f46:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8007f4a:	4688      	mov	r8, r1
 8007f4c:	4691      	mov	r9, r2
 8007f4e:	eb1a 0508 	adds.w	r5, sl, r8
 8007f52:	eb4b 0609 	adc.w	r6, fp, r9
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	685b      	ldr	r3, [r3, #4]
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	f04f 0200 	mov.w	r2, #0
 8007f60:	f04f 0300 	mov.w	r3, #0
 8007f64:	f04f 0400 	mov.w	r4, #0
 8007f68:	0094      	lsls	r4, r2, #2
 8007f6a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007f6e:	008b      	lsls	r3, r1, #2
 8007f70:	461a      	mov	r2, r3
 8007f72:	4623      	mov	r3, r4
 8007f74:	4628      	mov	r0, r5
 8007f76:	4631      	mov	r1, r6
 8007f78:	f7f8 f926 	bl	80001c8 <__aeabi_uldivmod>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	460c      	mov	r4, r1
 8007f80:	461a      	mov	r2, r3
 8007f82:	4b50      	ldr	r3, [pc, #320]	; (80080c4 <UART_SetConfig+0x6f4>)
 8007f84:	fba3 2302 	umull	r2, r3, r3, r2
 8007f88:	095b      	lsrs	r3, r3, #5
 8007f8a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	469b      	mov	fp, r3
 8007f92:	f04f 0c00 	mov.w	ip, #0
 8007f96:	46d9      	mov	r9, fp
 8007f98:	46e2      	mov	sl, ip
 8007f9a:	eb19 0309 	adds.w	r3, r9, r9
 8007f9e:	eb4a 040a 	adc.w	r4, sl, sl
 8007fa2:	4699      	mov	r9, r3
 8007fa4:	46a2      	mov	sl, r4
 8007fa6:	eb19 090b 	adds.w	r9, r9, fp
 8007faa:	eb4a 0a0c 	adc.w	sl, sl, ip
 8007fae:	f04f 0100 	mov.w	r1, #0
 8007fb2:	f04f 0200 	mov.w	r2, #0
 8007fb6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007fba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8007fbe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8007fc2:	4689      	mov	r9, r1
 8007fc4:	4692      	mov	sl, r2
 8007fc6:	eb1b 0509 	adds.w	r5, fp, r9
 8007fca:	eb4c 060a 	adc.w	r6, ip, sl
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	685b      	ldr	r3, [r3, #4]
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	f04f 0200 	mov.w	r2, #0
 8007fd8:	f04f 0300 	mov.w	r3, #0
 8007fdc:	f04f 0400 	mov.w	r4, #0
 8007fe0:	0094      	lsls	r4, r2, #2
 8007fe2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8007fe6:	008b      	lsls	r3, r1, #2
 8007fe8:	461a      	mov	r2, r3
 8007fea:	4623      	mov	r3, r4
 8007fec:	4628      	mov	r0, r5
 8007fee:	4631      	mov	r1, r6
 8007ff0:	f7f8 f8ea 	bl	80001c8 <__aeabi_uldivmod>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	460c      	mov	r4, r1
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	4b32      	ldr	r3, [pc, #200]	; (80080c4 <UART_SetConfig+0x6f4>)
 8007ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8008000:	095b      	lsrs	r3, r3, #5
 8008002:	2164      	movs	r1, #100	; 0x64
 8008004:	fb01 f303 	mul.w	r3, r1, r3
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	011b      	lsls	r3, r3, #4
 800800c:	3332      	adds	r3, #50	; 0x32
 800800e:	4a2d      	ldr	r2, [pc, #180]	; (80080c4 <UART_SetConfig+0x6f4>)
 8008010:	fba2 2303 	umull	r2, r3, r2, r3
 8008014:	095b      	lsrs	r3, r3, #5
 8008016:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800801a:	4498      	add	r8, r3
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	469b      	mov	fp, r3
 8008020:	f04f 0c00 	mov.w	ip, #0
 8008024:	46d9      	mov	r9, fp
 8008026:	46e2      	mov	sl, ip
 8008028:	eb19 0309 	adds.w	r3, r9, r9
 800802c:	eb4a 040a 	adc.w	r4, sl, sl
 8008030:	4699      	mov	r9, r3
 8008032:	46a2      	mov	sl, r4
 8008034:	eb19 090b 	adds.w	r9, r9, fp
 8008038:	eb4a 0a0c 	adc.w	sl, sl, ip
 800803c:	f04f 0100 	mov.w	r1, #0
 8008040:	f04f 0200 	mov.w	r2, #0
 8008044:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008048:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800804c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008050:	4689      	mov	r9, r1
 8008052:	4692      	mov	sl, r2
 8008054:	eb1b 0509 	adds.w	r5, fp, r9
 8008058:	eb4c 060a 	adc.w	r6, ip, sl
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	685b      	ldr	r3, [r3, #4]
 8008060:	4619      	mov	r1, r3
 8008062:	f04f 0200 	mov.w	r2, #0
 8008066:	f04f 0300 	mov.w	r3, #0
 800806a:	f04f 0400 	mov.w	r4, #0
 800806e:	0094      	lsls	r4, r2, #2
 8008070:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8008074:	008b      	lsls	r3, r1, #2
 8008076:	461a      	mov	r2, r3
 8008078:	4623      	mov	r3, r4
 800807a:	4628      	mov	r0, r5
 800807c:	4631      	mov	r1, r6
 800807e:	f7f8 f8a3 	bl	80001c8 <__aeabi_uldivmod>
 8008082:	4603      	mov	r3, r0
 8008084:	460c      	mov	r4, r1
 8008086:	461a      	mov	r2, r3
 8008088:	4b0e      	ldr	r3, [pc, #56]	; (80080c4 <UART_SetConfig+0x6f4>)
 800808a:	fba3 1302 	umull	r1, r3, r3, r2
 800808e:	095b      	lsrs	r3, r3, #5
 8008090:	2164      	movs	r1, #100	; 0x64
 8008092:	fb01 f303 	mul.w	r3, r1, r3
 8008096:	1ad3      	subs	r3, r2, r3
 8008098:	011b      	lsls	r3, r3, #4
 800809a:	3332      	adds	r3, #50	; 0x32
 800809c:	4a09      	ldr	r2, [pc, #36]	; (80080c4 <UART_SetConfig+0x6f4>)
 800809e:	fba2 2303 	umull	r2, r3, r2, r3
 80080a2:	095b      	lsrs	r3, r3, #5
 80080a4:	f003 020f 	and.w	r2, r3, #15
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	4442      	add	r2, r8
 80080ae:	609a      	str	r2, [r3, #8]
}
 80080b0:	e7ff      	b.n	80080b2 <UART_SetConfig+0x6e2>
 80080b2:	bf00      	nop
 80080b4:	3714      	adds	r7, #20
 80080b6:	46bd      	mov	sp, r7
 80080b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080bc:	40011000 	.word	0x40011000
 80080c0:	40011400 	.word	0x40011400
 80080c4:	51eb851f 	.word	0x51eb851f

080080c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80080c8:	b084      	sub	sp, #16
 80080ca:	b580      	push	{r7, lr}
 80080cc:	b084      	sub	sp, #16
 80080ce:	af00      	add	r7, sp, #0
 80080d0:	6078      	str	r0, [r7, #4]
 80080d2:	f107 001c 	add.w	r0, r7, #28
 80080d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80080da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080dc:	2b01      	cmp	r3, #1
 80080de:	d122      	bne.n	8008126 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80080f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80080f8:	687a      	ldr	r2, [r7, #4]
 80080fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008108:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800810a:	2b01      	cmp	r3, #1
 800810c:	d105      	bne.n	800811a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	68db      	ldr	r3, [r3, #12]
 8008112:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f001 fab4 	bl	8009688 <USB_CoreReset>
 8008120:	4603      	mov	r3, r0
 8008122:	73fb      	strb	r3, [r7, #15]
 8008124:	e01a      	b.n	800815c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f001 faa8 	bl	8009688 <USB_CoreReset>
 8008138:	4603      	mov	r3, r0
 800813a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800813c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800813e:	2b00      	cmp	r3, #0
 8008140:	d106      	bne.n	8008150 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008146:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	639a      	str	r2, [r3, #56]	; 0x38
 800814e:	e005      	b.n	800815c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008154:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800815c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800815e:	2b01      	cmp	r3, #1
 8008160:	d10b      	bne.n	800817a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	689b      	ldr	r3, [r3, #8]
 8008166:	f043 0206 	orr.w	r2, r3, #6
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	f043 0220 	orr.w	r2, r3, #32
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800817a:	7bfb      	ldrb	r3, [r7, #15]
}
 800817c:	4618      	mov	r0, r3
 800817e:	3710      	adds	r7, #16
 8008180:	46bd      	mov	sp, r7
 8008182:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008186:	b004      	add	sp, #16
 8008188:	4770      	bx	lr
	...

0800818c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800818c:	b480      	push	{r7}
 800818e:	b087      	sub	sp, #28
 8008190:	af00      	add	r7, sp, #0
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	4613      	mov	r3, r2
 8008198:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800819a:	79fb      	ldrb	r3, [r7, #7]
 800819c:	2b02      	cmp	r3, #2
 800819e:	d165      	bne.n	800826c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	4a41      	ldr	r2, [pc, #260]	; (80082a8 <USB_SetTurnaroundTime+0x11c>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d906      	bls.n	80081b6 <USB_SetTurnaroundTime+0x2a>
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	4a40      	ldr	r2, [pc, #256]	; (80082ac <USB_SetTurnaroundTime+0x120>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d802      	bhi.n	80081b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80081b0:	230f      	movs	r3, #15
 80081b2:	617b      	str	r3, [r7, #20]
 80081b4:	e062      	b.n	800827c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	4a3c      	ldr	r2, [pc, #240]	; (80082ac <USB_SetTurnaroundTime+0x120>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d906      	bls.n	80081cc <USB_SetTurnaroundTime+0x40>
 80081be:	68bb      	ldr	r3, [r7, #8]
 80081c0:	4a3b      	ldr	r2, [pc, #236]	; (80082b0 <USB_SetTurnaroundTime+0x124>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d802      	bhi.n	80081cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80081c6:	230e      	movs	r3, #14
 80081c8:	617b      	str	r3, [r7, #20]
 80081ca:	e057      	b.n	800827c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	4a38      	ldr	r2, [pc, #224]	; (80082b0 <USB_SetTurnaroundTime+0x124>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d906      	bls.n	80081e2 <USB_SetTurnaroundTime+0x56>
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	4a37      	ldr	r2, [pc, #220]	; (80082b4 <USB_SetTurnaroundTime+0x128>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d802      	bhi.n	80081e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80081dc:	230d      	movs	r3, #13
 80081de:	617b      	str	r3, [r7, #20]
 80081e0:	e04c      	b.n	800827c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	4a33      	ldr	r2, [pc, #204]	; (80082b4 <USB_SetTurnaroundTime+0x128>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d906      	bls.n	80081f8 <USB_SetTurnaroundTime+0x6c>
 80081ea:	68bb      	ldr	r3, [r7, #8]
 80081ec:	4a32      	ldr	r2, [pc, #200]	; (80082b8 <USB_SetTurnaroundTime+0x12c>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d802      	bhi.n	80081f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80081f2:	230c      	movs	r3, #12
 80081f4:	617b      	str	r3, [r7, #20]
 80081f6:	e041      	b.n	800827c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	4a2f      	ldr	r2, [pc, #188]	; (80082b8 <USB_SetTurnaroundTime+0x12c>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d906      	bls.n	800820e <USB_SetTurnaroundTime+0x82>
 8008200:	68bb      	ldr	r3, [r7, #8]
 8008202:	4a2e      	ldr	r2, [pc, #184]	; (80082bc <USB_SetTurnaroundTime+0x130>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d802      	bhi.n	800820e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008208:	230b      	movs	r3, #11
 800820a:	617b      	str	r3, [r7, #20]
 800820c:	e036      	b.n	800827c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800820e:	68bb      	ldr	r3, [r7, #8]
 8008210:	4a2a      	ldr	r2, [pc, #168]	; (80082bc <USB_SetTurnaroundTime+0x130>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d906      	bls.n	8008224 <USB_SetTurnaroundTime+0x98>
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	4a29      	ldr	r2, [pc, #164]	; (80082c0 <USB_SetTurnaroundTime+0x134>)
 800821a:	4293      	cmp	r3, r2
 800821c:	d802      	bhi.n	8008224 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800821e:	230a      	movs	r3, #10
 8008220:	617b      	str	r3, [r7, #20]
 8008222:	e02b      	b.n	800827c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	4a26      	ldr	r2, [pc, #152]	; (80082c0 <USB_SetTurnaroundTime+0x134>)
 8008228:	4293      	cmp	r3, r2
 800822a:	d906      	bls.n	800823a <USB_SetTurnaroundTime+0xae>
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	4a25      	ldr	r2, [pc, #148]	; (80082c4 <USB_SetTurnaroundTime+0x138>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d802      	bhi.n	800823a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008234:	2309      	movs	r3, #9
 8008236:	617b      	str	r3, [r7, #20]
 8008238:	e020      	b.n	800827c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	4a21      	ldr	r2, [pc, #132]	; (80082c4 <USB_SetTurnaroundTime+0x138>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d906      	bls.n	8008250 <USB_SetTurnaroundTime+0xc4>
 8008242:	68bb      	ldr	r3, [r7, #8]
 8008244:	4a20      	ldr	r2, [pc, #128]	; (80082c8 <USB_SetTurnaroundTime+0x13c>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d802      	bhi.n	8008250 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800824a:	2308      	movs	r3, #8
 800824c:	617b      	str	r3, [r7, #20]
 800824e:	e015      	b.n	800827c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	4a1d      	ldr	r2, [pc, #116]	; (80082c8 <USB_SetTurnaroundTime+0x13c>)
 8008254:	4293      	cmp	r3, r2
 8008256:	d906      	bls.n	8008266 <USB_SetTurnaroundTime+0xda>
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	4a1c      	ldr	r2, [pc, #112]	; (80082cc <USB_SetTurnaroundTime+0x140>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d802      	bhi.n	8008266 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008260:	2307      	movs	r3, #7
 8008262:	617b      	str	r3, [r7, #20]
 8008264:	e00a      	b.n	800827c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008266:	2306      	movs	r3, #6
 8008268:	617b      	str	r3, [r7, #20]
 800826a:	e007      	b.n	800827c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800826c:	79fb      	ldrb	r3, [r7, #7]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d102      	bne.n	8008278 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008272:	2309      	movs	r3, #9
 8008274:	617b      	str	r3, [r7, #20]
 8008276:	e001      	b.n	800827c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008278:	2309      	movs	r3, #9
 800827a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	68db      	ldr	r3, [r3, #12]
 8008280:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	68da      	ldr	r2, [r3, #12]
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	029b      	lsls	r3, r3, #10
 8008290:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008294:	431a      	orrs	r2, r3
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800829a:	2300      	movs	r3, #0
}
 800829c:	4618      	mov	r0, r3
 800829e:	371c      	adds	r7, #28
 80082a0:	46bd      	mov	sp, r7
 80082a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a6:	4770      	bx	lr
 80082a8:	00d8acbf 	.word	0x00d8acbf
 80082ac:	00e4e1bf 	.word	0x00e4e1bf
 80082b0:	00f423ff 	.word	0x00f423ff
 80082b4:	0106737f 	.word	0x0106737f
 80082b8:	011a499f 	.word	0x011a499f
 80082bc:	01312cff 	.word	0x01312cff
 80082c0:	014ca43f 	.word	0x014ca43f
 80082c4:	016e35ff 	.word	0x016e35ff
 80082c8:	01a6ab1f 	.word	0x01a6ab1f
 80082cc:	01e847ff 	.word	0x01e847ff

080082d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082d0:	b480      	push	{r7}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	f043 0201 	orr.w	r2, r3, #1
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80082e4:	2300      	movs	r3, #0
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	370c      	adds	r7, #12
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr

080082f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80082f2:	b480      	push	{r7}
 80082f4:	b083      	sub	sp, #12
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	689b      	ldr	r3, [r3, #8]
 80082fe:	f023 0201 	bic.w	r2, r3, #1
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	460b      	mov	r3, r1
 800831e:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800832c:	78fb      	ldrb	r3, [r7, #3]
 800832e:	2b01      	cmp	r3, #1
 8008330:	d106      	bne.n	8008340 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	68db      	ldr	r3, [r3, #12]
 8008336:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	60da      	str	r2, [r3, #12]
 800833e:	e00b      	b.n	8008358 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8008340:	78fb      	ldrb	r3, [r7, #3]
 8008342:	2b00      	cmp	r3, #0
 8008344:	d106      	bne.n	8008354 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	68db      	ldr	r3, [r3, #12]
 800834a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	60da      	str	r2, [r3, #12]
 8008352:	e001      	b.n	8008358 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	e003      	b.n	8008360 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8008358:	2032      	movs	r0, #50	; 0x32
 800835a:	f7fa f98f 	bl	800267c <HAL_Delay>

  return HAL_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3708      	adds	r7, #8
 8008364:	46bd      	mov	sp, r7
 8008366:	bd80      	pop	{r7, pc}

08008368 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008368:	b084      	sub	sp, #16
 800836a:	b580      	push	{r7, lr}
 800836c:	b086      	sub	sp, #24
 800836e:	af00      	add	r7, sp, #0
 8008370:	6078      	str	r0, [r7, #4]
 8008372:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008376:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800837a:	2300      	movs	r3, #0
 800837c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008382:	2300      	movs	r3, #0
 8008384:	613b      	str	r3, [r7, #16]
 8008386:	e009      	b.n	800839c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008388:	687a      	ldr	r2, [r7, #4]
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	3340      	adds	r3, #64	; 0x40
 800838e:	009b      	lsls	r3, r3, #2
 8008390:	4413      	add	r3, r2
 8008392:	2200      	movs	r2, #0
 8008394:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	3301      	adds	r3, #1
 800839a:	613b      	str	r3, [r7, #16]
 800839c:	693b      	ldr	r3, [r7, #16]
 800839e:	2b0e      	cmp	r3, #14
 80083a0:	d9f2      	bls.n	8008388 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80083a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d11c      	bne.n	80083e2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	68fa      	ldr	r2, [r7, #12]
 80083b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80083b6:	f043 0302 	orr.w	r3, r3, #2
 80083ba:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083cc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083d8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	639a      	str	r2, [r3, #56]	; 0x38
 80083e0:	e00b      	b.n	80083fa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083f2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008400:	461a      	mov	r2, r3
 8008402:	2300      	movs	r3, #0
 8008404:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800840c:	4619      	mov	r1, r3
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008414:	461a      	mov	r2, r3
 8008416:	680b      	ldr	r3, [r1, #0]
 8008418:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800841a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800841c:	2b01      	cmp	r3, #1
 800841e:	d10c      	bne.n	800843a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008422:	2b00      	cmp	r3, #0
 8008424:	d104      	bne.n	8008430 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008426:	2100      	movs	r1, #0
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f000 f949 	bl	80086c0 <USB_SetDevSpeed>
 800842e:	e008      	b.n	8008442 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008430:	2101      	movs	r1, #1
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 f944 	bl	80086c0 <USB_SetDevSpeed>
 8008438:	e003      	b.n	8008442 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800843a:	2103      	movs	r1, #3
 800843c:	6878      	ldr	r0, [r7, #4]
 800843e:	f000 f93f 	bl	80086c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008442:	2110      	movs	r1, #16
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 f8f3 	bl	8008630 <USB_FlushTxFifo>
 800844a:	4603      	mov	r3, r0
 800844c:	2b00      	cmp	r3, #0
 800844e:	d001      	beq.n	8008454 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 f911 	bl	800867c <USB_FlushRxFifo>
 800845a:	4603      	mov	r3, r0
 800845c:	2b00      	cmp	r3, #0
 800845e:	d001      	beq.n	8008464 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008460:	2301      	movs	r3, #1
 8008462:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800846a:	461a      	mov	r2, r3
 800846c:	2300      	movs	r3, #0
 800846e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008476:	461a      	mov	r2, r3
 8008478:	2300      	movs	r3, #0
 800847a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008482:	461a      	mov	r2, r3
 8008484:	2300      	movs	r3, #0
 8008486:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008488:	2300      	movs	r3, #0
 800848a:	613b      	str	r3, [r7, #16]
 800848c:	e043      	b.n	8008516 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	015a      	lsls	r2, r3, #5
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	4413      	add	r3, r2
 8008496:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80084a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80084a4:	d118      	bne.n	80084d8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d10a      	bne.n	80084c2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	015a      	lsls	r2, r3, #5
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	4413      	add	r3, r2
 80084b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084b8:	461a      	mov	r2, r3
 80084ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80084be:	6013      	str	r3, [r2, #0]
 80084c0:	e013      	b.n	80084ea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80084c2:	693b      	ldr	r3, [r7, #16]
 80084c4:	015a      	lsls	r2, r3, #5
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	4413      	add	r3, r2
 80084ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ce:	461a      	mov	r2, r3
 80084d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80084d4:	6013      	str	r3, [r2, #0]
 80084d6:	e008      	b.n	80084ea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	015a      	lsls	r2, r3, #5
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4413      	add	r3, r2
 80084e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084e4:	461a      	mov	r2, r3
 80084e6:	2300      	movs	r3, #0
 80084e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	015a      	lsls	r2, r3, #5
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	4413      	add	r3, r2
 80084f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084f6:	461a      	mov	r2, r3
 80084f8:	2300      	movs	r3, #0
 80084fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	015a      	lsls	r2, r3, #5
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	4413      	add	r3, r2
 8008504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008508:	461a      	mov	r2, r3
 800850a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800850e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	3301      	adds	r3, #1
 8008514:	613b      	str	r3, [r7, #16]
 8008516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008518:	693a      	ldr	r2, [r7, #16]
 800851a:	429a      	cmp	r2, r3
 800851c:	d3b7      	bcc.n	800848e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800851e:	2300      	movs	r3, #0
 8008520:	613b      	str	r3, [r7, #16]
 8008522:	e043      	b.n	80085ac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	015a      	lsls	r2, r3, #5
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	4413      	add	r3, r2
 800852c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008536:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800853a:	d118      	bne.n	800856e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d10a      	bne.n	8008558 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008542:	693b      	ldr	r3, [r7, #16]
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	4413      	add	r3, r2
 800854a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854e:	461a      	mov	r2, r3
 8008550:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008554:	6013      	str	r3, [r2, #0]
 8008556:	e013      	b.n	8008580 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008558:	693b      	ldr	r3, [r7, #16]
 800855a:	015a      	lsls	r2, r3, #5
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	4413      	add	r3, r2
 8008560:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008564:	461a      	mov	r2, r3
 8008566:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800856a:	6013      	str	r3, [r2, #0]
 800856c:	e008      	b.n	8008580 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800856e:	693b      	ldr	r3, [r7, #16]
 8008570:	015a      	lsls	r2, r3, #5
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	4413      	add	r3, r2
 8008576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800857a:	461a      	mov	r2, r3
 800857c:	2300      	movs	r3, #0
 800857e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	015a      	lsls	r2, r3, #5
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	4413      	add	r3, r2
 8008588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800858c:	461a      	mov	r2, r3
 800858e:	2300      	movs	r3, #0
 8008590:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008592:	693b      	ldr	r3, [r7, #16]
 8008594:	015a      	lsls	r2, r3, #5
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	4413      	add	r3, r2
 800859a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800859e:	461a      	mov	r2, r3
 80085a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80085a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80085a6:	693b      	ldr	r3, [r7, #16]
 80085a8:	3301      	adds	r3, #1
 80085aa:	613b      	str	r3, [r7, #16]
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	693a      	ldr	r2, [r7, #16]
 80085b0:	429a      	cmp	r2, r3
 80085b2:	d3b7      	bcc.n	8008524 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ba:	691b      	ldr	r3, [r3, #16]
 80085bc:	68fa      	ldr	r2, [r7, #12]
 80085be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80085c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80085c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2200      	movs	r2, #0
 80085cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80085d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80085d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d105      	bne.n	80085e8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	f043 0210 	orr.w	r2, r3, #16
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	699a      	ldr	r2, [r3, #24]
 80085ec:	4b0f      	ldr	r3, [pc, #60]	; (800862c <USB_DevInit+0x2c4>)
 80085ee:	4313      	orrs	r3, r2
 80085f0:	687a      	ldr	r2, [r7, #4]
 80085f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80085f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d005      	beq.n	8008606 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	699b      	ldr	r3, [r3, #24]
 80085fe:	f043 0208 	orr.w	r2, r3, #8
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008606:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008608:	2b01      	cmp	r3, #1
 800860a:	d107      	bne.n	800861c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	699b      	ldr	r3, [r3, #24]
 8008610:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008614:	f043 0304 	orr.w	r3, r3, #4
 8008618:	687a      	ldr	r2, [r7, #4]
 800861a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800861c:	7dfb      	ldrb	r3, [r7, #23]
}
 800861e:	4618      	mov	r0, r3
 8008620:	3718      	adds	r7, #24
 8008622:	46bd      	mov	sp, r7
 8008624:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008628:	b004      	add	sp, #16
 800862a:	4770      	bx	lr
 800862c:	803c3800 	.word	0x803c3800

08008630 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800863a:	2300      	movs	r3, #0
 800863c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	019b      	lsls	r3, r3, #6
 8008642:	f043 0220 	orr.w	r2, r3, #32
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	3301      	adds	r3, #1
 800864e:	60fb      	str	r3, [r7, #12]
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	4a09      	ldr	r2, [pc, #36]	; (8008678 <USB_FlushTxFifo+0x48>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d901      	bls.n	800865c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8008658:	2303      	movs	r3, #3
 800865a:	e006      	b.n	800866a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	f003 0320 	and.w	r3, r3, #32
 8008664:	2b20      	cmp	r3, #32
 8008666:	d0f0      	beq.n	800864a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8008668:	2300      	movs	r3, #0
}
 800866a:	4618      	mov	r0, r3
 800866c:	3714      	adds	r7, #20
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr
 8008676:	bf00      	nop
 8008678:	00030d40 	.word	0x00030d40

0800867c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800867c:	b480      	push	{r7}
 800867e:	b085      	sub	sp, #20
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8008684:	2300      	movs	r3, #0
 8008686:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	2210      	movs	r2, #16
 800868c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	3301      	adds	r3, #1
 8008692:	60fb      	str	r3, [r7, #12]
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	4a09      	ldr	r2, [pc, #36]	; (80086bc <USB_FlushRxFifo+0x40>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d901      	bls.n	80086a0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800869c:	2303      	movs	r3, #3
 800869e:	e006      	b.n	80086ae <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	691b      	ldr	r3, [r3, #16]
 80086a4:	f003 0310 	and.w	r3, r3, #16
 80086a8:	2b10      	cmp	r3, #16
 80086aa:	d0f0      	beq.n	800868e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3714      	adds	r7, #20
 80086b2:	46bd      	mov	sp, r7
 80086b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b8:	4770      	bx	lr
 80086ba:	bf00      	nop
 80086bc:	00030d40 	.word	0x00030d40

080086c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b085      	sub	sp, #20
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
 80086c8:	460b      	mov	r3, r1
 80086ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086d6:	681a      	ldr	r2, [r3, #0]
 80086d8:	78fb      	ldrb	r3, [r7, #3]
 80086da:	68f9      	ldr	r1, [r7, #12]
 80086dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086e0:	4313      	orrs	r3, r2
 80086e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3714      	adds	r7, #20
 80086ea:	46bd      	mov	sp, r7
 80086ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f0:	4770      	bx	lr

080086f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80086f2:	b480      	push	{r7}
 80086f4:	b087      	sub	sp, #28
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	f003 0306 	and.w	r3, r3, #6
 800870a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d102      	bne.n	8008718 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008712:	2300      	movs	r3, #0
 8008714:	75fb      	strb	r3, [r7, #23]
 8008716:	e00a      	b.n	800872e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2b02      	cmp	r3, #2
 800871c:	d002      	beq.n	8008724 <USB_GetDevSpeed+0x32>
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2b06      	cmp	r3, #6
 8008722:	d102      	bne.n	800872a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008724:	2302      	movs	r3, #2
 8008726:	75fb      	strb	r3, [r7, #23]
 8008728:	e001      	b.n	800872e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800872a:	230f      	movs	r3, #15
 800872c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800872e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008730:	4618      	mov	r0, r3
 8008732:	371c      	adds	r7, #28
 8008734:	46bd      	mov	sp, r7
 8008736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873a:	4770      	bx	lr

0800873c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800873c:	b480      	push	{r7}
 800873e:	b085      	sub	sp, #20
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
 8008744:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	785b      	ldrb	r3, [r3, #1]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d13a      	bne.n	80087ce <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800875e:	69da      	ldr	r2, [r3, #28]
 8008760:	683b      	ldr	r3, [r7, #0]
 8008762:	781b      	ldrb	r3, [r3, #0]
 8008764:	f003 030f 	and.w	r3, r3, #15
 8008768:	2101      	movs	r1, #1
 800876a:	fa01 f303 	lsl.w	r3, r1, r3
 800876e:	b29b      	uxth	r3, r3
 8008770:	68f9      	ldr	r1, [r7, #12]
 8008772:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008776:	4313      	orrs	r3, r2
 8008778:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800877a:	68bb      	ldr	r3, [r7, #8]
 800877c:	015a      	lsls	r2, r3, #5
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	4413      	add	r3, r2
 8008782:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d155      	bne.n	800883c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	015a      	lsls	r2, r3, #5
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	4413      	add	r3, r2
 8008798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	689b      	ldr	r3, [r3, #8]
 80087a2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	78db      	ldrb	r3, [r3, #3]
 80087aa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80087ac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	059b      	lsls	r3, r3, #22
 80087b2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80087b4:	4313      	orrs	r3, r2
 80087b6:	68ba      	ldr	r2, [r7, #8]
 80087b8:	0151      	lsls	r1, r2, #5
 80087ba:	68fa      	ldr	r2, [r7, #12]
 80087bc:	440a      	add	r2, r1
 80087be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80087c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087ca:	6013      	str	r3, [r2, #0]
 80087cc:	e036      	b.n	800883c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80087d4:	69da      	ldr	r2, [r3, #28]
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	781b      	ldrb	r3, [r3, #0]
 80087da:	f003 030f 	and.w	r3, r3, #15
 80087de:	2101      	movs	r1, #1
 80087e0:	fa01 f303 	lsl.w	r3, r1, r3
 80087e4:	041b      	lsls	r3, r3, #16
 80087e6:	68f9      	ldr	r1, [r7, #12]
 80087e8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80087ec:	4313      	orrs	r3, r2
 80087ee:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	015a      	lsls	r2, r3, #5
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	4413      	add	r3, r2
 80087f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008802:	2b00      	cmp	r3, #0
 8008804:	d11a      	bne.n	800883c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	015a      	lsls	r2, r3, #5
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	4413      	add	r3, r2
 800880e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008812:	681a      	ldr	r2, [r3, #0]
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	78db      	ldrb	r3, [r3, #3]
 8008820:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008822:	430b      	orrs	r3, r1
 8008824:	4313      	orrs	r3, r2
 8008826:	68ba      	ldr	r2, [r7, #8]
 8008828:	0151      	lsls	r1, r2, #5
 800882a:	68fa      	ldr	r2, [r7, #12]
 800882c:	440a      	add	r2, r1
 800882e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008836:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800883a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3714      	adds	r7, #20
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
	...

0800884c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800884c:	b480      	push	{r7}
 800884e:	b085      	sub	sp, #20
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
 8008854:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	781b      	ldrb	r3, [r3, #0]
 800885e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	785b      	ldrb	r3, [r3, #1]
 8008864:	2b01      	cmp	r3, #1
 8008866:	d161      	bne.n	800892c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	015a      	lsls	r2, r3, #5
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	4413      	add	r3, r2
 8008870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800887a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800887e:	d11f      	bne.n	80088c0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	015a      	lsls	r2, r3, #5
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	4413      	add	r3, r2
 8008888:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	68ba      	ldr	r2, [r7, #8]
 8008890:	0151      	lsls	r1, r2, #5
 8008892:	68fa      	ldr	r2, [r7, #12]
 8008894:	440a      	add	r2, r1
 8008896:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800889a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800889e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	015a      	lsls	r2, r3, #5
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	4413      	add	r3, r2
 80088a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	68ba      	ldr	r2, [r7, #8]
 80088b0:	0151      	lsls	r1, r2, #5
 80088b2:	68fa      	ldr	r2, [r7, #12]
 80088b4:	440a      	add	r2, r1
 80088b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80088ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	781b      	ldrb	r3, [r3, #0]
 80088cc:	f003 030f 	and.w	r3, r3, #15
 80088d0:	2101      	movs	r1, #1
 80088d2:	fa01 f303 	lsl.w	r3, r1, r3
 80088d6:	b29b      	uxth	r3, r3
 80088d8:	43db      	mvns	r3, r3
 80088da:	68f9      	ldr	r1, [r7, #12]
 80088dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80088e0:	4013      	ands	r3, r2
 80088e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ea:	69da      	ldr	r2, [r3, #28]
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	781b      	ldrb	r3, [r3, #0]
 80088f0:	f003 030f 	and.w	r3, r3, #15
 80088f4:	2101      	movs	r1, #1
 80088f6:	fa01 f303 	lsl.w	r3, r1, r3
 80088fa:	b29b      	uxth	r3, r3
 80088fc:	43db      	mvns	r3, r3
 80088fe:	68f9      	ldr	r1, [r7, #12]
 8008900:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008904:	4013      	ands	r3, r2
 8008906:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	015a      	lsls	r2, r3, #5
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	4413      	add	r3, r2
 8008910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	0159      	lsls	r1, r3, #5
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	440b      	add	r3, r1
 800891e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008922:	4619      	mov	r1, r3
 8008924:	4b35      	ldr	r3, [pc, #212]	; (80089fc <USB_DeactivateEndpoint+0x1b0>)
 8008926:	4013      	ands	r3, r2
 8008928:	600b      	str	r3, [r1, #0]
 800892a:	e060      	b.n	80089ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	015a      	lsls	r2, r3, #5
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	4413      	add	r3, r2
 8008934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800893e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008942:	d11f      	bne.n	8008984 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	015a      	lsls	r2, r3, #5
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	4413      	add	r3, r2
 800894c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	68ba      	ldr	r2, [r7, #8]
 8008954:	0151      	lsls	r1, r2, #5
 8008956:	68fa      	ldr	r2, [r7, #12]
 8008958:	440a      	add	r2, r1
 800895a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800895e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008962:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008964:	68bb      	ldr	r3, [r7, #8]
 8008966:	015a      	lsls	r2, r3, #5
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	4413      	add	r3, r2
 800896c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	68ba      	ldr	r2, [r7, #8]
 8008974:	0151      	lsls	r1, r2, #5
 8008976:	68fa      	ldr	r2, [r7, #12]
 8008978:	440a      	add	r2, r1
 800897a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800897e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008982:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800898a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	f003 030f 	and.w	r3, r3, #15
 8008994:	2101      	movs	r1, #1
 8008996:	fa01 f303 	lsl.w	r3, r1, r3
 800899a:	041b      	lsls	r3, r3, #16
 800899c:	43db      	mvns	r3, r3
 800899e:	68f9      	ldr	r1, [r7, #12]
 80089a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089a4:	4013      	ands	r3, r2
 80089a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089ae:	69da      	ldr	r2, [r3, #28]
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	f003 030f 	and.w	r3, r3, #15
 80089b8:	2101      	movs	r1, #1
 80089ba:	fa01 f303 	lsl.w	r3, r1, r3
 80089be:	041b      	lsls	r3, r3, #16
 80089c0:	43db      	mvns	r3, r3
 80089c2:	68f9      	ldr	r1, [r7, #12]
 80089c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80089c8:	4013      	ands	r3, r2
 80089ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	015a      	lsls	r2, r3, #5
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	4413      	add	r3, r2
 80089d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089d8:	681a      	ldr	r2, [r3, #0]
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	0159      	lsls	r1, r3, #5
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	440b      	add	r3, r1
 80089e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80089e6:	4619      	mov	r1, r3
 80089e8:	4b05      	ldr	r3, [pc, #20]	; (8008a00 <USB_DeactivateEndpoint+0x1b4>)
 80089ea:	4013      	ands	r3, r2
 80089ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80089ee:	2300      	movs	r3, #0
}
 80089f0:	4618      	mov	r0, r3
 80089f2:	3714      	adds	r7, #20
 80089f4:	46bd      	mov	sp, r7
 80089f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fa:	4770      	bx	lr
 80089fc:	ec337800 	.word	0xec337800
 8008a00:	eff37800 	.word	0xeff37800

08008a04 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008a04:	b580      	push	{r7, lr}
 8008a06:	b08a      	sub	sp, #40	; 0x28
 8008a08:	af02      	add	r7, sp, #8
 8008a0a:	60f8      	str	r0, [r7, #12]
 8008a0c:	60b9      	str	r1, [r7, #8]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	781b      	ldrb	r3, [r3, #0]
 8008a1a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	785b      	ldrb	r3, [r3, #1]
 8008a20:	2b01      	cmp	r3, #1
 8008a22:	f040 815c 	bne.w	8008cde <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	695b      	ldr	r3, [r3, #20]
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d132      	bne.n	8008a94 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a2e:	69bb      	ldr	r3, [r7, #24]
 8008a30:	015a      	lsls	r2, r3, #5
 8008a32:	69fb      	ldr	r3, [r7, #28]
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a3a:	691b      	ldr	r3, [r3, #16]
 8008a3c:	69ba      	ldr	r2, [r7, #24]
 8008a3e:	0151      	lsls	r1, r2, #5
 8008a40:	69fa      	ldr	r2, [r7, #28]
 8008a42:	440a      	add	r2, r1
 8008a44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008a52:	69bb      	ldr	r3, [r7, #24]
 8008a54:	015a      	lsls	r2, r3, #5
 8008a56:	69fb      	ldr	r3, [r7, #28]
 8008a58:	4413      	add	r3, r2
 8008a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a5e:	691b      	ldr	r3, [r3, #16]
 8008a60:	69ba      	ldr	r2, [r7, #24]
 8008a62:	0151      	lsls	r1, r2, #5
 8008a64:	69fa      	ldr	r2, [r7, #28]
 8008a66:	440a      	add	r2, r1
 8008a68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008a70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	015a      	lsls	r2, r3, #5
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	4413      	add	r3, r2
 8008a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a7e:	691b      	ldr	r3, [r3, #16]
 8008a80:	69ba      	ldr	r2, [r7, #24]
 8008a82:	0151      	lsls	r1, r2, #5
 8008a84:	69fa      	ldr	r2, [r7, #28]
 8008a86:	440a      	add	r2, r1
 8008a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a8c:	0cdb      	lsrs	r3, r3, #19
 8008a8e:	04db      	lsls	r3, r3, #19
 8008a90:	6113      	str	r3, [r2, #16]
 8008a92:	e074      	b.n	8008b7e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a94:	69bb      	ldr	r3, [r7, #24]
 8008a96:	015a      	lsls	r2, r3, #5
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	4413      	add	r3, r2
 8008a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa0:	691b      	ldr	r3, [r3, #16]
 8008aa2:	69ba      	ldr	r2, [r7, #24]
 8008aa4:	0151      	lsls	r1, r2, #5
 8008aa6:	69fa      	ldr	r2, [r7, #28]
 8008aa8:	440a      	add	r2, r1
 8008aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008aae:	0cdb      	lsrs	r3, r3, #19
 8008ab0:	04db      	lsls	r3, r3, #19
 8008ab2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008ab4:	69bb      	ldr	r3, [r7, #24]
 8008ab6:	015a      	lsls	r2, r3, #5
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	4413      	add	r3, r2
 8008abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ac0:	691b      	ldr	r3, [r3, #16]
 8008ac2:	69ba      	ldr	r2, [r7, #24]
 8008ac4:	0151      	lsls	r1, r2, #5
 8008ac6:	69fa      	ldr	r2, [r7, #28]
 8008ac8:	440a      	add	r2, r1
 8008aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ace:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ad2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ad6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008ad8:	69bb      	ldr	r3, [r7, #24]
 8008ada:	015a      	lsls	r2, r3, #5
 8008adc:	69fb      	ldr	r3, [r7, #28]
 8008ade:	4413      	add	r3, r2
 8008ae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ae4:	691a      	ldr	r2, [r3, #16]
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	6959      	ldr	r1, [r3, #20]
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	689b      	ldr	r3, [r3, #8]
 8008aee:	440b      	add	r3, r1
 8008af0:	1e59      	subs	r1, r3, #1
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	689b      	ldr	r3, [r3, #8]
 8008af6:	fbb1 f3f3 	udiv	r3, r1, r3
 8008afa:	04d9      	lsls	r1, r3, #19
 8008afc:	4b9d      	ldr	r3, [pc, #628]	; (8008d74 <USB_EPStartXfer+0x370>)
 8008afe:	400b      	ands	r3, r1
 8008b00:	69b9      	ldr	r1, [r7, #24]
 8008b02:	0148      	lsls	r0, r1, #5
 8008b04:	69f9      	ldr	r1, [r7, #28]
 8008b06:	4401      	add	r1, r0
 8008b08:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b0c:	4313      	orrs	r3, r2
 8008b0e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	015a      	lsls	r2, r3, #5
 8008b14:	69fb      	ldr	r3, [r7, #28]
 8008b16:	4413      	add	r3, r2
 8008b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b1c:	691a      	ldr	r2, [r3, #16]
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	695b      	ldr	r3, [r3, #20]
 8008b22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b26:	69b9      	ldr	r1, [r7, #24]
 8008b28:	0148      	lsls	r0, r1, #5
 8008b2a:	69f9      	ldr	r1, [r7, #28]
 8008b2c:	4401      	add	r1, r0
 8008b2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008b32:	4313      	orrs	r3, r2
 8008b34:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	78db      	ldrb	r3, [r3, #3]
 8008b3a:	2b01      	cmp	r3, #1
 8008b3c:	d11f      	bne.n	8008b7e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	015a      	lsls	r2, r3, #5
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	4413      	add	r3, r2
 8008b46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	69ba      	ldr	r2, [r7, #24]
 8008b4e:	0151      	lsls	r1, r2, #5
 8008b50:	69fa      	ldr	r2, [r7, #28]
 8008b52:	440a      	add	r2, r1
 8008b54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b58:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008b5c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	015a      	lsls	r2, r3, #5
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	4413      	add	r3, r2
 8008b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b6a:	691b      	ldr	r3, [r3, #16]
 8008b6c:	69ba      	ldr	r2, [r7, #24]
 8008b6e:	0151      	lsls	r1, r2, #5
 8008b70:	69fa      	ldr	r2, [r7, #28]
 8008b72:	440a      	add	r2, r1
 8008b74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b7c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008b7e:	79fb      	ldrb	r3, [r7, #7]
 8008b80:	2b01      	cmp	r3, #1
 8008b82:	d14b      	bne.n	8008c1c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	691b      	ldr	r3, [r3, #16]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d009      	beq.n	8008ba0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	015a      	lsls	r2, r3, #5
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	4413      	add	r3, r2
 8008b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b98:	461a      	mov	r2, r3
 8008b9a:	68bb      	ldr	r3, [r7, #8]
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	78db      	ldrb	r3, [r3, #3]
 8008ba4:	2b01      	cmp	r3, #1
 8008ba6:	d128      	bne.n	8008bfa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ba8:	69fb      	ldr	r3, [r7, #28]
 8008baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d110      	bne.n	8008bda <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	015a      	lsls	r2, r3, #5
 8008bbc:	69fb      	ldr	r3, [r7, #28]
 8008bbe:	4413      	add	r3, r2
 8008bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	69ba      	ldr	r2, [r7, #24]
 8008bc8:	0151      	lsls	r1, r2, #5
 8008bca:	69fa      	ldr	r2, [r7, #28]
 8008bcc:	440a      	add	r2, r1
 8008bce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bd2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008bd6:	6013      	str	r3, [r2, #0]
 8008bd8:	e00f      	b.n	8008bfa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	015a      	lsls	r2, r3, #5
 8008bde:	69fb      	ldr	r3, [r7, #28]
 8008be0:	4413      	add	r3, r2
 8008be2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	69ba      	ldr	r2, [r7, #24]
 8008bea:	0151      	lsls	r1, r2, #5
 8008bec:	69fa      	ldr	r2, [r7, #28]
 8008bee:	440a      	add	r2, r1
 8008bf0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bf8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008bfa:	69bb      	ldr	r3, [r7, #24]
 8008bfc:	015a      	lsls	r2, r3, #5
 8008bfe:	69fb      	ldr	r3, [r7, #28]
 8008c00:	4413      	add	r3, r2
 8008c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	69ba      	ldr	r2, [r7, #24]
 8008c0a:	0151      	lsls	r1, r2, #5
 8008c0c:	69fa      	ldr	r2, [r7, #28]
 8008c0e:	440a      	add	r2, r1
 8008c10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c18:	6013      	str	r3, [r2, #0]
 8008c1a:	e12f      	b.n	8008e7c <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	015a      	lsls	r2, r3, #5
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	4413      	add	r3, r2
 8008c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	69ba      	ldr	r2, [r7, #24]
 8008c2c:	0151      	lsls	r1, r2, #5
 8008c2e:	69fa      	ldr	r2, [r7, #28]
 8008c30:	440a      	add	r2, r1
 8008c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008c3a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008c3c:	68bb      	ldr	r3, [r7, #8]
 8008c3e:	78db      	ldrb	r3, [r3, #3]
 8008c40:	2b01      	cmp	r3, #1
 8008c42:	d015      	beq.n	8008c70 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	695b      	ldr	r3, [r3, #20]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	f000 8117 	beq.w	8008e7c <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	f003 030f 	and.w	r3, r3, #15
 8008c5e:	2101      	movs	r1, #1
 8008c60:	fa01 f303 	lsl.w	r3, r1, r3
 8008c64:	69f9      	ldr	r1, [r7, #28]
 8008c66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	634b      	str	r3, [r1, #52]	; 0x34
 8008c6e:	e105      	b.n	8008e7c <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d110      	bne.n	8008ca2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	015a      	lsls	r2, r3, #5
 8008c84:	69fb      	ldr	r3, [r7, #28]
 8008c86:	4413      	add	r3, r2
 8008c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	69ba      	ldr	r2, [r7, #24]
 8008c90:	0151      	lsls	r1, r2, #5
 8008c92:	69fa      	ldr	r2, [r7, #28]
 8008c94:	440a      	add	r2, r1
 8008c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c9e:	6013      	str	r3, [r2, #0]
 8008ca0:	e00f      	b.n	8008cc2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008ca2:	69bb      	ldr	r3, [r7, #24]
 8008ca4:	015a      	lsls	r2, r3, #5
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	4413      	add	r3, r2
 8008caa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	69ba      	ldr	r2, [r7, #24]
 8008cb2:	0151      	lsls	r1, r2, #5
 8008cb4:	69fa      	ldr	r2, [r7, #28]
 8008cb6:	440a      	add	r2, r1
 8008cb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cc0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	68d9      	ldr	r1, [r3, #12]
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	781a      	ldrb	r2, [r3, #0]
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	695b      	ldr	r3, [r3, #20]
 8008cce:	b298      	uxth	r0, r3
 8008cd0:	79fb      	ldrb	r3, [r7, #7]
 8008cd2:	9300      	str	r3, [sp, #0]
 8008cd4:	4603      	mov	r3, r0
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f000 fa2b 	bl	8009132 <USB_WritePacket>
 8008cdc:	e0ce      	b.n	8008e7c <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008cde:	69bb      	ldr	r3, [r7, #24]
 8008ce0:	015a      	lsls	r2, r3, #5
 8008ce2:	69fb      	ldr	r3, [r7, #28]
 8008ce4:	4413      	add	r3, r2
 8008ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008cea:	691b      	ldr	r3, [r3, #16]
 8008cec:	69ba      	ldr	r2, [r7, #24]
 8008cee:	0151      	lsls	r1, r2, #5
 8008cf0:	69fa      	ldr	r2, [r7, #28]
 8008cf2:	440a      	add	r2, r1
 8008cf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cf8:	0cdb      	lsrs	r3, r3, #19
 8008cfa:	04db      	lsls	r3, r3, #19
 8008cfc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	015a      	lsls	r2, r3, #5
 8008d02:	69fb      	ldr	r3, [r7, #28]
 8008d04:	4413      	add	r3, r2
 8008d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d0a:	691b      	ldr	r3, [r3, #16]
 8008d0c:	69ba      	ldr	r2, [r7, #24]
 8008d0e:	0151      	lsls	r1, r2, #5
 8008d10:	69fa      	ldr	r2, [r7, #28]
 8008d12:	440a      	add	r2, r1
 8008d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d18:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008d1c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008d20:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	695b      	ldr	r3, [r3, #20]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d126      	bne.n	8008d78 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008d2a:	69bb      	ldr	r3, [r7, #24]
 8008d2c:	015a      	lsls	r2, r3, #5
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	4413      	add	r3, r2
 8008d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d36:	691a      	ldr	r2, [r3, #16]
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d40:	69b9      	ldr	r1, [r7, #24]
 8008d42:	0148      	lsls	r0, r1, #5
 8008d44:	69f9      	ldr	r1, [r7, #28]
 8008d46:	4401      	add	r1, r0
 8008d48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008d50:	69bb      	ldr	r3, [r7, #24]
 8008d52:	015a      	lsls	r2, r3, #5
 8008d54:	69fb      	ldr	r3, [r7, #28]
 8008d56:	4413      	add	r3, r2
 8008d58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d5c:	691b      	ldr	r3, [r3, #16]
 8008d5e:	69ba      	ldr	r2, [r7, #24]
 8008d60:	0151      	lsls	r1, r2, #5
 8008d62:	69fa      	ldr	r2, [r7, #28]
 8008d64:	440a      	add	r2, r1
 8008d66:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008d6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d6e:	6113      	str	r3, [r2, #16]
 8008d70:	e036      	b.n	8008de0 <USB_EPStartXfer+0x3dc>
 8008d72:	bf00      	nop
 8008d74:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	695a      	ldr	r2, [r3, #20]
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	4413      	add	r3, r2
 8008d82:	1e5a      	subs	r2, r3, #1
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d8c:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	015a      	lsls	r2, r3, #5
 8008d92:	69fb      	ldr	r3, [r7, #28]
 8008d94:	4413      	add	r3, r2
 8008d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d9a:	691a      	ldr	r2, [r3, #16]
 8008d9c:	8afb      	ldrh	r3, [r7, #22]
 8008d9e:	04d9      	lsls	r1, r3, #19
 8008da0:	4b39      	ldr	r3, [pc, #228]	; (8008e88 <USB_EPStartXfer+0x484>)
 8008da2:	400b      	ands	r3, r1
 8008da4:	69b9      	ldr	r1, [r7, #24]
 8008da6:	0148      	lsls	r0, r1, #5
 8008da8:	69f9      	ldr	r1, [r7, #28]
 8008daa:	4401      	add	r1, r0
 8008dac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008db0:	4313      	orrs	r3, r2
 8008db2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	015a      	lsls	r2, r3, #5
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	4413      	add	r3, r2
 8008dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc0:	691a      	ldr	r2, [r3, #16]
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	689b      	ldr	r3, [r3, #8]
 8008dc6:	8af9      	ldrh	r1, [r7, #22]
 8008dc8:	fb01 f303 	mul.w	r3, r1, r3
 8008dcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dd0:	69b9      	ldr	r1, [r7, #24]
 8008dd2:	0148      	lsls	r0, r1, #5
 8008dd4:	69f9      	ldr	r1, [r7, #28]
 8008dd6:	4401      	add	r1, r0
 8008dd8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008ddc:	4313      	orrs	r3, r2
 8008dde:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008de0:	79fb      	ldrb	r3, [r7, #7]
 8008de2:	2b01      	cmp	r3, #1
 8008de4:	d10d      	bne.n	8008e02 <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	68db      	ldr	r3, [r3, #12]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d009      	beq.n	8008e02 <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008dee:	68bb      	ldr	r3, [r7, #8]
 8008df0:	68d9      	ldr	r1, [r3, #12]
 8008df2:	69bb      	ldr	r3, [r7, #24]
 8008df4:	015a      	lsls	r2, r3, #5
 8008df6:	69fb      	ldr	r3, [r7, #28]
 8008df8:	4413      	add	r3, r2
 8008dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dfe:	460a      	mov	r2, r1
 8008e00:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	78db      	ldrb	r3, [r3, #3]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d128      	bne.n	8008e5c <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e0a:	69fb      	ldr	r3, [r7, #28]
 8008e0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d110      	bne.n	8008e3c <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	015a      	lsls	r2, r3, #5
 8008e1e:	69fb      	ldr	r3, [r7, #28]
 8008e20:	4413      	add	r3, r2
 8008e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	69ba      	ldr	r2, [r7, #24]
 8008e2a:	0151      	lsls	r1, r2, #5
 8008e2c:	69fa      	ldr	r2, [r7, #28]
 8008e2e:	440a      	add	r2, r1
 8008e30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e34:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e38:	6013      	str	r3, [r2, #0]
 8008e3a:	e00f      	b.n	8008e5c <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008e3c:	69bb      	ldr	r3, [r7, #24]
 8008e3e:	015a      	lsls	r2, r3, #5
 8008e40:	69fb      	ldr	r3, [r7, #28]
 8008e42:	4413      	add	r3, r2
 8008e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	69ba      	ldr	r2, [r7, #24]
 8008e4c:	0151      	lsls	r1, r2, #5
 8008e4e:	69fa      	ldr	r2, [r7, #28]
 8008e50:	440a      	add	r2, r1
 8008e52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e5a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	015a      	lsls	r2, r3, #5
 8008e60:	69fb      	ldr	r3, [r7, #28]
 8008e62:	4413      	add	r3, r2
 8008e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	69ba      	ldr	r2, [r7, #24]
 8008e6c:	0151      	lsls	r1, r2, #5
 8008e6e:	69fa      	ldr	r2, [r7, #28]
 8008e70:	440a      	add	r2, r1
 8008e72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008e76:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008e7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008e7c:	2300      	movs	r3, #0
}
 8008e7e:	4618      	mov	r0, r3
 8008e80:	3720      	adds	r7, #32
 8008e82:	46bd      	mov	sp, r7
 8008e84:	bd80      	pop	{r7, pc}
 8008e86:	bf00      	nop
 8008e88:	1ff80000 	.word	0x1ff80000

08008e8c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b087      	sub	sp, #28
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	4613      	mov	r3, r2
 8008e98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008e9e:	68bb      	ldr	r3, [r7, #8]
 8008ea0:	781b      	ldrb	r3, [r3, #0]
 8008ea2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	785b      	ldrb	r3, [r3, #1]
 8008ea8:	2b01      	cmp	r3, #1
 8008eaa:	f040 80cd 	bne.w	8009048 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	695b      	ldr	r3, [r3, #20]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d132      	bne.n	8008f1c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	015a      	lsls	r2, r3, #5
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	4413      	add	r3, r2
 8008ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec2:	691b      	ldr	r3, [r3, #16]
 8008ec4:	693a      	ldr	r2, [r7, #16]
 8008ec6:	0151      	lsls	r1, r2, #5
 8008ec8:	697a      	ldr	r2, [r7, #20]
 8008eca:	440a      	add	r2, r1
 8008ecc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ed0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ed4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ed8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	015a      	lsls	r2, r3, #5
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	4413      	add	r3, r2
 8008ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ee6:	691b      	ldr	r3, [r3, #16]
 8008ee8:	693a      	ldr	r2, [r7, #16]
 8008eea:	0151      	lsls	r1, r2, #5
 8008eec:	697a      	ldr	r2, [r7, #20]
 8008eee:	440a      	add	r2, r1
 8008ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ef4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008ef8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	015a      	lsls	r2, r3, #5
 8008efe:	697b      	ldr	r3, [r7, #20]
 8008f00:	4413      	add	r3, r2
 8008f02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f06:	691b      	ldr	r3, [r3, #16]
 8008f08:	693a      	ldr	r2, [r7, #16]
 8008f0a:	0151      	lsls	r1, r2, #5
 8008f0c:	697a      	ldr	r2, [r7, #20]
 8008f0e:	440a      	add	r2, r1
 8008f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f14:	0cdb      	lsrs	r3, r3, #19
 8008f16:	04db      	lsls	r3, r3, #19
 8008f18:	6113      	str	r3, [r2, #16]
 8008f1a:	e04e      	b.n	8008fba <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	015a      	lsls	r2, r3, #5
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	4413      	add	r3, r2
 8008f24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f28:	691b      	ldr	r3, [r3, #16]
 8008f2a:	693a      	ldr	r2, [r7, #16]
 8008f2c:	0151      	lsls	r1, r2, #5
 8008f2e:	697a      	ldr	r2, [r7, #20]
 8008f30:	440a      	add	r2, r1
 8008f32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f36:	0cdb      	lsrs	r3, r3, #19
 8008f38:	04db      	lsls	r3, r3, #19
 8008f3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	015a      	lsls	r2, r3, #5
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	4413      	add	r3, r2
 8008f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f48:	691b      	ldr	r3, [r3, #16]
 8008f4a:	693a      	ldr	r2, [r7, #16]
 8008f4c:	0151      	lsls	r1, r2, #5
 8008f4e:	697a      	ldr	r2, [r7, #20]
 8008f50:	440a      	add	r2, r1
 8008f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f56:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008f5a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008f5e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	695a      	ldr	r2, [r3, #20]
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	429a      	cmp	r2, r3
 8008f6a:	d903      	bls.n	8008f74 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	689a      	ldr	r2, [r3, #8]
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008f74:	693b      	ldr	r3, [r7, #16]
 8008f76:	015a      	lsls	r2, r3, #5
 8008f78:	697b      	ldr	r3, [r7, #20]
 8008f7a:	4413      	add	r3, r2
 8008f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f80:	691b      	ldr	r3, [r3, #16]
 8008f82:	693a      	ldr	r2, [r7, #16]
 8008f84:	0151      	lsls	r1, r2, #5
 8008f86:	697a      	ldr	r2, [r7, #20]
 8008f88:	440a      	add	r2, r1
 8008f8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f92:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	015a      	lsls	r2, r3, #5
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fa0:	691a      	ldr	r2, [r3, #16]
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	695b      	ldr	r3, [r3, #20]
 8008fa6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008faa:	6939      	ldr	r1, [r7, #16]
 8008fac:	0148      	lsls	r0, r1, #5
 8008fae:	6979      	ldr	r1, [r7, #20]
 8008fb0:	4401      	add	r1, r0
 8008fb2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008fba:	79fb      	ldrb	r3, [r7, #7]
 8008fbc:	2b01      	cmp	r3, #1
 8008fbe:	d11e      	bne.n	8008ffe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	691b      	ldr	r3, [r3, #16]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d009      	beq.n	8008fdc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	015a      	lsls	r2, r3, #5
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	4413      	add	r3, r2
 8008fd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fd4:	461a      	mov	r2, r3
 8008fd6:	68bb      	ldr	r3, [r7, #8]
 8008fd8:	691b      	ldr	r3, [r3, #16]
 8008fda:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	015a      	lsls	r2, r3, #5
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	4413      	add	r3, r2
 8008fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	693a      	ldr	r2, [r7, #16]
 8008fec:	0151      	lsls	r1, r2, #5
 8008fee:	697a      	ldr	r2, [r7, #20]
 8008ff0:	440a      	add	r2, r1
 8008ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ff6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008ffa:	6013      	str	r3, [r2, #0]
 8008ffc:	e092      	b.n	8009124 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	015a      	lsls	r2, r3, #5
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	4413      	add	r3, r2
 8009006:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	693a      	ldr	r2, [r7, #16]
 800900e:	0151      	lsls	r1, r2, #5
 8009010:	697a      	ldr	r2, [r7, #20]
 8009012:	440a      	add	r2, r1
 8009014:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009018:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800901c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800901e:	68bb      	ldr	r3, [r7, #8]
 8009020:	695b      	ldr	r3, [r3, #20]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d07e      	beq.n	8009124 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009026:	697b      	ldr	r3, [r7, #20]
 8009028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800902c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800902e:	68bb      	ldr	r3, [r7, #8]
 8009030:	781b      	ldrb	r3, [r3, #0]
 8009032:	f003 030f 	and.w	r3, r3, #15
 8009036:	2101      	movs	r1, #1
 8009038:	fa01 f303 	lsl.w	r3, r1, r3
 800903c:	6979      	ldr	r1, [r7, #20]
 800903e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009042:	4313      	orrs	r3, r2
 8009044:	634b      	str	r3, [r1, #52]	; 0x34
 8009046:	e06d      	b.n	8009124 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	015a      	lsls	r2, r3, #5
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	4413      	add	r3, r2
 8009050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009054:	691b      	ldr	r3, [r3, #16]
 8009056:	693a      	ldr	r2, [r7, #16]
 8009058:	0151      	lsls	r1, r2, #5
 800905a:	697a      	ldr	r2, [r7, #20]
 800905c:	440a      	add	r2, r1
 800905e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009062:	0cdb      	lsrs	r3, r3, #19
 8009064:	04db      	lsls	r3, r3, #19
 8009066:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	015a      	lsls	r2, r3, #5
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	4413      	add	r3, r2
 8009070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	693a      	ldr	r2, [r7, #16]
 8009078:	0151      	lsls	r1, r2, #5
 800907a:	697a      	ldr	r2, [r7, #20]
 800907c:	440a      	add	r2, r1
 800907e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009082:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009086:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800908a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	695b      	ldr	r3, [r3, #20]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d003      	beq.n	800909c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	689a      	ldr	r2, [r3, #8]
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	015a      	lsls	r2, r3, #5
 80090a0:	697b      	ldr	r3, [r7, #20]
 80090a2:	4413      	add	r3, r2
 80090a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090a8:	691b      	ldr	r3, [r3, #16]
 80090aa:	693a      	ldr	r2, [r7, #16]
 80090ac:	0151      	lsls	r1, r2, #5
 80090ae:	697a      	ldr	r2, [r7, #20]
 80090b0:	440a      	add	r2, r1
 80090b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80090ba:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	015a      	lsls	r2, r3, #5
 80090c0:	697b      	ldr	r3, [r7, #20]
 80090c2:	4413      	add	r3, r2
 80090c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80090c8:	691a      	ldr	r2, [r3, #16]
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090d2:	6939      	ldr	r1, [r7, #16]
 80090d4:	0148      	lsls	r0, r1, #5
 80090d6:	6979      	ldr	r1, [r7, #20]
 80090d8:	4401      	add	r1, r0
 80090da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80090de:	4313      	orrs	r3, r2
 80090e0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80090e2:	79fb      	ldrb	r3, [r7, #7]
 80090e4:	2b01      	cmp	r3, #1
 80090e6:	d10d      	bne.n	8009104 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80090e8:	68bb      	ldr	r3, [r7, #8]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d009      	beq.n	8009104 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80090f0:	68bb      	ldr	r3, [r7, #8]
 80090f2:	68d9      	ldr	r1, [r3, #12]
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	015a      	lsls	r2, r3, #5
 80090f8:	697b      	ldr	r3, [r7, #20]
 80090fa:	4413      	add	r3, r2
 80090fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009100:	460a      	mov	r2, r1
 8009102:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	015a      	lsls	r2, r3, #5
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	4413      	add	r3, r2
 800910c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	693a      	ldr	r2, [r7, #16]
 8009114:	0151      	lsls	r1, r2, #5
 8009116:	697a      	ldr	r2, [r7, #20]
 8009118:	440a      	add	r2, r1
 800911a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800911e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009122:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009124:	2300      	movs	r3, #0
}
 8009126:	4618      	mov	r0, r3
 8009128:	371c      	adds	r7, #28
 800912a:	46bd      	mov	sp, r7
 800912c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009130:	4770      	bx	lr

08009132 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009132:	b480      	push	{r7}
 8009134:	b089      	sub	sp, #36	; 0x24
 8009136:	af00      	add	r7, sp, #0
 8009138:	60f8      	str	r0, [r7, #12]
 800913a:	60b9      	str	r1, [r7, #8]
 800913c:	4611      	mov	r1, r2
 800913e:	461a      	mov	r2, r3
 8009140:	460b      	mov	r3, r1
 8009142:	71fb      	strb	r3, [r7, #7]
 8009144:	4613      	mov	r3, r2
 8009146:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800914c:	68bb      	ldr	r3, [r7, #8]
 800914e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8009150:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009154:	2b00      	cmp	r3, #0
 8009156:	d11a      	bne.n	800918e <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009158:	88bb      	ldrh	r3, [r7, #4]
 800915a:	3303      	adds	r3, #3
 800915c:	089b      	lsrs	r3, r3, #2
 800915e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009160:	2300      	movs	r3, #0
 8009162:	61bb      	str	r3, [r7, #24]
 8009164:	e00f      	b.n	8009186 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009166:	79fb      	ldrb	r3, [r7, #7]
 8009168:	031a      	lsls	r2, r3, #12
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	4413      	add	r3, r2
 800916e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009172:	461a      	mov	r2, r3
 8009174:	69fb      	ldr	r3, [r7, #28]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	6013      	str	r3, [r2, #0]
      pSrc++;
 800917a:	69fb      	ldr	r3, [r7, #28]
 800917c:	3304      	adds	r3, #4
 800917e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009180:	69bb      	ldr	r3, [r7, #24]
 8009182:	3301      	adds	r3, #1
 8009184:	61bb      	str	r3, [r7, #24]
 8009186:	69ba      	ldr	r2, [r7, #24]
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	429a      	cmp	r2, r3
 800918c:	d3eb      	bcc.n	8009166 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800918e:	2300      	movs	r3, #0
}
 8009190:	4618      	mov	r0, r3
 8009192:	3724      	adds	r7, #36	; 0x24
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800919c:	b480      	push	{r7}
 800919e:	b089      	sub	sp, #36	; 0x24
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	60f8      	str	r0, [r7, #12]
 80091a4:	60b9      	str	r1, [r7, #8]
 80091a6:	4613      	mov	r3, r2
 80091a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80091b2:	88fb      	ldrh	r3, [r7, #6]
 80091b4:	3303      	adds	r3, #3
 80091b6:	089b      	lsrs	r3, r3, #2
 80091b8:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80091ba:	2300      	movs	r3, #0
 80091bc:	61bb      	str	r3, [r7, #24]
 80091be:	e00b      	b.n	80091d8 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	601a      	str	r2, [r3, #0]
    pDest++;
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	3304      	adds	r3, #4
 80091d0:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	3301      	adds	r3, #1
 80091d6:	61bb      	str	r3, [r7, #24]
 80091d8:	69ba      	ldr	r2, [r7, #24]
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	429a      	cmp	r2, r3
 80091de:	d3ef      	bcc.n	80091c0 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80091e0:	69fb      	ldr	r3, [r7, #28]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3724      	adds	r7, #36	; 0x24
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80091ee:	b480      	push	{r7}
 80091f0:	b085      	sub	sp, #20
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
 80091f6:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	781b      	ldrb	r3, [r3, #0]
 8009200:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	785b      	ldrb	r3, [r3, #1]
 8009206:	2b01      	cmp	r3, #1
 8009208:	d12c      	bne.n	8009264 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	015a      	lsls	r2, r3, #5
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	4413      	add	r3, r2
 8009212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2b00      	cmp	r3, #0
 800921a:	db12      	blt.n	8009242 <USB_EPSetStall+0x54>
 800921c:	68bb      	ldr	r3, [r7, #8]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d00f      	beq.n	8009242 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	015a      	lsls	r2, r3, #5
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	4413      	add	r3, r2
 800922a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	68ba      	ldr	r2, [r7, #8]
 8009232:	0151      	lsls	r1, r2, #5
 8009234:	68fa      	ldr	r2, [r7, #12]
 8009236:	440a      	add	r2, r1
 8009238:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800923c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009240:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	015a      	lsls	r2, r3, #5
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	4413      	add	r3, r2
 800924a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	68ba      	ldr	r2, [r7, #8]
 8009252:	0151      	lsls	r1, r2, #5
 8009254:	68fa      	ldr	r2, [r7, #12]
 8009256:	440a      	add	r2, r1
 8009258:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800925c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009260:	6013      	str	r3, [r2, #0]
 8009262:	e02b      	b.n	80092bc <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	015a      	lsls	r2, r3, #5
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	4413      	add	r3, r2
 800926c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	2b00      	cmp	r3, #0
 8009274:	db12      	blt.n	800929c <USB_EPSetStall+0xae>
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d00f      	beq.n	800929c <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	015a      	lsls	r2, r3, #5
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	4413      	add	r3, r2
 8009284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	68ba      	ldr	r2, [r7, #8]
 800928c:	0151      	lsls	r1, r2, #5
 800928e:	68fa      	ldr	r2, [r7, #12]
 8009290:	440a      	add	r2, r1
 8009292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009296:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800929a:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	015a      	lsls	r2, r3, #5
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	4413      	add	r3, r2
 80092a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	68ba      	ldr	r2, [r7, #8]
 80092ac:	0151      	lsls	r1, r2, #5
 80092ae:	68fa      	ldr	r2, [r7, #12]
 80092b0:	440a      	add	r2, r1
 80092b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092b6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80092ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80092bc:	2300      	movs	r3, #0
}
 80092be:	4618      	mov	r0, r3
 80092c0:	3714      	adds	r7, #20
 80092c2:	46bd      	mov	sp, r7
 80092c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092c8:	4770      	bx	lr

080092ca <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80092ca:	b480      	push	{r7}
 80092cc:	b085      	sub	sp, #20
 80092ce:	af00      	add	r7, sp, #0
 80092d0:	6078      	str	r0, [r7, #4]
 80092d2:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80092d8:	683b      	ldr	r3, [r7, #0]
 80092da:	781b      	ldrb	r3, [r3, #0]
 80092dc:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80092de:	683b      	ldr	r3, [r7, #0]
 80092e0:	785b      	ldrb	r3, [r3, #1]
 80092e2:	2b01      	cmp	r3, #1
 80092e4:	d128      	bne.n	8009338 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	015a      	lsls	r2, r3, #5
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	4413      	add	r3, r2
 80092ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68ba      	ldr	r2, [r7, #8]
 80092f6:	0151      	lsls	r1, r2, #5
 80092f8:	68fa      	ldr	r2, [r7, #12]
 80092fa:	440a      	add	r2, r1
 80092fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009300:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009304:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009306:	683b      	ldr	r3, [r7, #0]
 8009308:	78db      	ldrb	r3, [r3, #3]
 800930a:	2b03      	cmp	r3, #3
 800930c:	d003      	beq.n	8009316 <USB_EPClearStall+0x4c>
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	78db      	ldrb	r3, [r3, #3]
 8009312:	2b02      	cmp	r3, #2
 8009314:	d138      	bne.n	8009388 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	015a      	lsls	r2, r3, #5
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	4413      	add	r3, r2
 800931e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	68ba      	ldr	r2, [r7, #8]
 8009326:	0151      	lsls	r1, r2, #5
 8009328:	68fa      	ldr	r2, [r7, #12]
 800932a:	440a      	add	r2, r1
 800932c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009334:	6013      	str	r3, [r2, #0]
 8009336:	e027      	b.n	8009388 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	015a      	lsls	r2, r3, #5
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	4413      	add	r3, r2
 8009340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	68ba      	ldr	r2, [r7, #8]
 8009348:	0151      	lsls	r1, r2, #5
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	440a      	add	r2, r1
 800934e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009352:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009356:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	78db      	ldrb	r3, [r3, #3]
 800935c:	2b03      	cmp	r3, #3
 800935e:	d003      	beq.n	8009368 <USB_EPClearStall+0x9e>
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	78db      	ldrb	r3, [r3, #3]
 8009364:	2b02      	cmp	r3, #2
 8009366:	d10f      	bne.n	8009388 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	015a      	lsls	r2, r3, #5
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	4413      	add	r3, r2
 8009370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68ba      	ldr	r2, [r7, #8]
 8009378:	0151      	lsls	r1, r2, #5
 800937a:	68fa      	ldr	r2, [r7, #12]
 800937c:	440a      	add	r2, r1
 800937e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009386:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	4618      	mov	r0, r3
 800938c:	3714      	adds	r7, #20
 800938e:	46bd      	mov	sp, r7
 8009390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009394:	4770      	bx	lr

08009396 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009396:	b480      	push	{r7}
 8009398:	b085      	sub	sp, #20
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
 800939e:	460b      	mov	r3, r1
 80093a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	68fa      	ldr	r2, [r7, #12]
 80093b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093b4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80093b8:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093c0:	681a      	ldr	r2, [r3, #0]
 80093c2:	78fb      	ldrb	r3, [r7, #3]
 80093c4:	011b      	lsls	r3, r3, #4
 80093c6:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80093ca:	68f9      	ldr	r1, [r7, #12]
 80093cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80093d0:	4313      	orrs	r3, r2
 80093d2:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3714      	adds	r7, #20
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b084      	sub	sp, #16
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	68fa      	ldr	r2, [r7, #12]
 80093f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80093fc:	f023 0302 	bic.w	r3, r3, #2
 8009400:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009402:	2003      	movs	r0, #3
 8009404:	f7f9 f93a 	bl	800267c <HAL_Delay>

  return HAL_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b084      	sub	sp, #16
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	68fa      	ldr	r2, [r7, #12]
 8009428:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800942c:	f043 0302 	orr.w	r3, r3, #2
 8009430:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8009432:	2003      	movs	r0, #3
 8009434:	f7f9 f922 	bl	800267c <HAL_Delay>

  return HAL_OK;
 8009438:	2300      	movs	r3, #0
}
 800943a:	4618      	mov	r0, r3
 800943c:	3710      	adds	r7, #16
 800943e:	46bd      	mov	sp, r7
 8009440:	bd80      	pop	{r7, pc}

08009442 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8009442:	b480      	push	{r7}
 8009444:	b085      	sub	sp, #20
 8009446:	af00      	add	r7, sp, #0
 8009448:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	695b      	ldr	r3, [r3, #20]
 800944e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	68fa      	ldr	r2, [r7, #12]
 8009456:	4013      	ands	r3, r2
 8009458:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800945a:	68fb      	ldr	r3, [r7, #12]
}
 800945c:	4618      	mov	r0, r3
 800945e:	3714      	adds	r7, #20
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009468:	b480      	push	{r7}
 800946a:	b085      	sub	sp, #20
 800946c:	af00      	add	r7, sp, #0
 800946e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800947a:	699b      	ldr	r3, [r3, #24]
 800947c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009484:	69db      	ldr	r3, [r3, #28]
 8009486:	68ba      	ldr	r2, [r7, #8]
 8009488:	4013      	ands	r3, r2
 800948a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	0c1b      	lsrs	r3, r3, #16
}
 8009490:	4618      	mov	r0, r3
 8009492:	3714      	adds	r7, #20
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr

0800949c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800949c:	b480      	push	{r7}
 800949e:	b085      	sub	sp, #20
 80094a0:	af00      	add	r7, sp, #0
 80094a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094ae:	699b      	ldr	r3, [r3, #24]
 80094b0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094b8:	69db      	ldr	r3, [r3, #28]
 80094ba:	68ba      	ldr	r2, [r7, #8]
 80094bc:	4013      	ands	r3, r2
 80094be:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	b29b      	uxth	r3, r3
}
 80094c4:	4618      	mov	r0, r3
 80094c6:	3714      	adds	r7, #20
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80094d0:	b480      	push	{r7}
 80094d2:	b085      	sub	sp, #20
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	460b      	mov	r3, r1
 80094da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80094e0:	78fb      	ldrb	r3, [r7, #3]
 80094e2:	015a      	lsls	r2, r3, #5
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	4413      	add	r3, r2
 80094e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ec:	689b      	ldr	r3, [r3, #8]
 80094ee:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094f6:	695b      	ldr	r3, [r3, #20]
 80094f8:	68ba      	ldr	r2, [r7, #8]
 80094fa:	4013      	ands	r3, r2
 80094fc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80094fe:	68bb      	ldr	r3, [r7, #8]
}
 8009500:	4618      	mov	r0, r3
 8009502:	3714      	adds	r7, #20
 8009504:	46bd      	mov	sp, r7
 8009506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950a:	4770      	bx	lr

0800950c <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800950c:	b480      	push	{r7}
 800950e:	b087      	sub	sp, #28
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	460b      	mov	r3, r1
 8009516:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800951c:	697b      	ldr	r3, [r7, #20]
 800951e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009522:	691b      	ldr	r3, [r3, #16]
 8009524:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800952c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800952e:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009530:	78fb      	ldrb	r3, [r7, #3]
 8009532:	f003 030f 	and.w	r3, r3, #15
 8009536:	68fa      	ldr	r2, [r7, #12]
 8009538:	fa22 f303 	lsr.w	r3, r2, r3
 800953c:	01db      	lsls	r3, r3, #7
 800953e:	b2db      	uxtb	r3, r3
 8009540:	693a      	ldr	r2, [r7, #16]
 8009542:	4313      	orrs	r3, r2
 8009544:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009546:	78fb      	ldrb	r3, [r7, #3]
 8009548:	015a      	lsls	r2, r3, #5
 800954a:	697b      	ldr	r3, [r7, #20]
 800954c:	4413      	add	r3, r2
 800954e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009552:	689b      	ldr	r3, [r3, #8]
 8009554:	693a      	ldr	r2, [r7, #16]
 8009556:	4013      	ands	r3, r2
 8009558:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800955a:	68bb      	ldr	r3, [r7, #8]
}
 800955c:	4618      	mov	r0, r3
 800955e:	371c      	adds	r7, #28
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	695b      	ldr	r3, [r3, #20]
 8009574:	f003 0301 	and.w	r3, r3, #1
}
 8009578:	4618      	mov	r0, r3
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8009584:	b480      	push	{r7}
 8009586:	b085      	sub	sp, #20
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	68fa      	ldr	r2, [r7, #12]
 800959a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800959e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80095a2:	f023 0307 	bic.w	r3, r3, #7
 80095a6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	68fa      	ldr	r2, [r7, #12]
 80095b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80095b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095ba:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80095bc:	2300      	movs	r3, #0
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3714      	adds	r7, #20
 80095c2:	46bd      	mov	sp, r7
 80095c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c8:	4770      	bx	lr
	...

080095cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80095cc:	b480      	push	{r7}
 80095ce:	b087      	sub	sp, #28
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	460b      	mov	r3, r1
 80095d6:	607a      	str	r2, [r7, #4]
 80095d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	333c      	adds	r3, #60	; 0x3c
 80095e2:	3304      	adds	r3, #4
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80095e8:	693b      	ldr	r3, [r7, #16]
 80095ea:	4a26      	ldr	r2, [pc, #152]	; (8009684 <USB_EP0_OutStart+0xb8>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d90a      	bls.n	8009606 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80095f0:	697b      	ldr	r3, [r7, #20]
 80095f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80095fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009600:	d101      	bne.n	8009606 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009602:	2300      	movs	r3, #0
 8009604:	e037      	b.n	8009676 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009606:	697b      	ldr	r3, [r7, #20]
 8009608:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800960c:	461a      	mov	r2, r3
 800960e:	2300      	movs	r3, #0
 8009610:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009612:	697b      	ldr	r3, [r7, #20]
 8009614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009618:	691b      	ldr	r3, [r3, #16]
 800961a:	697a      	ldr	r2, [r7, #20]
 800961c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009620:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009624:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	697a      	ldr	r2, [r7, #20]
 8009630:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009634:	f043 0318 	orr.w	r3, r3, #24
 8009638:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009640:	691b      	ldr	r3, [r3, #16]
 8009642:	697a      	ldr	r2, [r7, #20]
 8009644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009648:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800964c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800964e:	7afb      	ldrb	r3, [r7, #11]
 8009650:	2b01      	cmp	r3, #1
 8009652:	d10f      	bne.n	8009674 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800965a:	461a      	mov	r2, r3
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009660:	697b      	ldr	r3, [r7, #20]
 8009662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	697a      	ldr	r2, [r7, #20]
 800966a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800966e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8009672:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009674:	2300      	movs	r3, #0
}
 8009676:	4618      	mov	r0, r3
 8009678:	371c      	adds	r7, #28
 800967a:	46bd      	mov	sp, r7
 800967c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009680:	4770      	bx	lr
 8009682:	bf00      	nop
 8009684:	4f54300a 	.word	0x4f54300a

08009688 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8009690:	2300      	movs	r3, #0
 8009692:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	3301      	adds	r3, #1
 8009698:	60fb      	str	r3, [r7, #12]
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	4a13      	ldr	r2, [pc, #76]	; (80096ec <USB_CoreReset+0x64>)
 800969e:	4293      	cmp	r3, r2
 80096a0:	d901      	bls.n	80096a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80096a2:	2303      	movs	r3, #3
 80096a4:	e01b      	b.n	80096de <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	691b      	ldr	r3, [r3, #16]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	daf2      	bge.n	8009694 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80096ae:	2300      	movs	r3, #0
 80096b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	f043 0201 	orr.w	r2, r3, #1
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	3301      	adds	r3, #1
 80096c2:	60fb      	str	r3, [r7, #12]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	4a09      	ldr	r2, [pc, #36]	; (80096ec <USB_CoreReset+0x64>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d901      	bls.n	80096d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80096cc:	2303      	movs	r3, #3
 80096ce:	e006      	b.n	80096de <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	691b      	ldr	r3, [r3, #16]
 80096d4:	f003 0301 	and.w	r3, r3, #1
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d0f0      	beq.n	80096be <USB_CoreReset+0x36>

  return HAL_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3714      	adds	r7, #20
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	00030d40 	.word	0x00030d40

080096f0 <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80096f0:	b580      	push	{r7, lr}
 80096f2:	b084      	sub	sp, #16
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	460b      	mov	r3, r1
 80096fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

    /* Allocate Audio structure */
  haudio = USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 80096fc:	f641 30d0 	movw	r0, #7120	; 0x1bd0
 8009700:	f002 fa68 	bl	800bbd4 <malloc>
 8009704:	4603      	mov	r3, r0
 8009706:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	2b00      	cmp	r3, #0
 800970c:	d105      	bne.n	800971a <USBD_AUDIO_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8009716:	2302      	movs	r3, #2
 8009718:	e04b      	b.n	80097b2 <USBD_AUDIO_Init+0xc2>
  }

  pdev->pClassData = (void *)haudio;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	68fa      	ldr	r2, [r7, #12]
 800971e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	7c1b      	ldrb	r3, [r3, #16]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d104      	bne.n	8009734 <USBD_AUDIO_Init+0x44>
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	2201      	movs	r2, #1
 800972e:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
 8009732:	e003      	b.n	800973c <USBD_AUDIO_Init+0x4c>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2201      	movs	r2, #1
 8009738:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIO_OUT_EP, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 800973c:	2358      	movs	r3, #88	; 0x58
 800973e:	2201      	movs	r2, #1
 8009740:	2101      	movs	r1, #1
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f002 f8cd 	bl	800b8e2 <USBD_LL_OpenEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 1U;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2201      	movs	r2, #1
 800974c:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  haudio->alt_setting = 0U;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2200      	movs	r2, #0
 8009754:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800975c:	3304      	adds	r3, #4
 800975e:	2203      	movs	r2, #3
 8009760:	701a      	strb	r2, [r3, #0]
  haudio->wr_ptr = 0U;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8009768:	3308      	adds	r3, #8
 800976a:	2200      	movs	r2, #0
 800976c:	801a      	strh	r2, [r3, #0]
  haudio->rd_ptr = 0U;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8009774:	3306      	adds	r3, #6
 8009776:	2200      	movs	r2, #0
 8009778:	801a      	strh	r2, [r3, #0]
  haudio->rd_enable = 0U;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8009780:	3305      	adds	r3, #5
 8009782:	2200      	movs	r2, #0
 8009784:	701a      	strb	r2, [r3, #0]

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->Init(USBD_AUDIO_FREQ,
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	2200      	movs	r2, #0
 8009790:	2146      	movs	r1, #70	; 0x46
 8009792:	f245 6054 	movw	r0, #22100	; 0x5654
 8009796:	4798      	blx	r3
 8009798:	4603      	mov	r3, r0
 800979a:	2b00      	cmp	r3, #0
 800979c:	d001      	beq.n	80097a2 <USBD_AUDIO_Init+0xb2>
                                                       AUDIO_DEFAULT_VOLUME,
                                                       0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 800979e:	2303      	movs	r3, #3
 80097a0:	e007      	b.n	80097b2 <USBD_AUDIO_Init+0xc2>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP, haudio->buffer,
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	1d1a      	adds	r2, r3, #4
 80097a6:	2358      	movs	r3, #88	; 0x58
 80097a8:	2101      	movs	r1, #1
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f002 f988 	bl	800bac0 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 80097b0:	2300      	movs	r3, #0
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}

080097ba <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80097ba:	b580      	push	{r7, lr}
 80097bc:	b082      	sub	sp, #8
 80097be:	af00      	add	r7, sp, #0
 80097c0:	6078      	str	r0, [r7, #4]
 80097c2:	460b      	mov	r3, r1
 80097c4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIO_OUT_EP);
 80097c6:	2101      	movs	r1, #1
 80097c8:	6878      	ldr	r0, [r7, #4]
 80097ca:	f002 f8b0 	bl	800b92e <USBD_LL_CloseEP>
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].is_used = 0U;
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	2200      	movs	r2, #0
 80097d2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178
  pdev->ep_out[AUDIO_OUT_EP & 0xFU].bInterval = 0U;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2200      	movs	r2, #0
 80097da:	f8a3 217a 	strh.w	r2, [r3, #378]	; 0x17a

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d00f      	beq.n	8009808 <USBD_AUDIO_DeInit+0x4e>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->DeInit(0U);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80097ee:	685b      	ldr	r3, [r3, #4]
 80097f0:	2000      	movs	r0, #0
 80097f2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80097fa:	4618      	mov	r0, r3
 80097fc:	f002 f9f2 	bl	800bbe4 <free>
    pdev->pClassData = NULL;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2200      	movs	r2, #0
 8009804:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009808:	2300      	movs	r3, #0
}
 800980a:	4618      	mov	r0, r3
 800980c:	3708      	adds	r7, #8
 800980e:	46bd      	mov	sp, r7
 8009810:	bd80      	pop	{r7, pc}
	...

08009814 <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b086      	sub	sp, #24
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
 800981c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800981e:	2300      	movs	r3, #0
 8009820:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 8009822:	2300      	movs	r3, #0
 8009824:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800982c:	613b      	str	r3, [r7, #16]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800982e:	683b      	ldr	r3, [r7, #0]
 8009830:	781b      	ldrb	r3, [r3, #0]
 8009832:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009836:	2b00      	cmp	r3, #0
 8009838:	d01a      	beq.n	8009870 <USBD_AUDIO_Setup+0x5c>
 800983a:	2b20      	cmp	r3, #32
 800983c:	f040 809e 	bne.w	800997c <USBD_AUDIO_Setup+0x168>
  {
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	785b      	ldrb	r3, [r3, #1]
 8009844:	2b01      	cmp	r3, #1
 8009846:	d006      	beq.n	8009856 <USBD_AUDIO_Setup+0x42>
 8009848:	2b81      	cmp	r3, #129	; 0x81
 800984a:	d109      	bne.n	8009860 <USBD_AUDIO_Setup+0x4c>
    {
    case AUDIO_REQ_GET_CUR:
      AUDIO_REQ_GetCurrent(pdev, req);
 800984c:	6839      	ldr	r1, [r7, #0]
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 f9a0 	bl	8009b94 <AUDIO_REQ_GetCurrent>
      break;
 8009854:	e00b      	b.n	800986e <USBD_AUDIO_Setup+0x5a>

    case AUDIO_REQ_SET_CUR:
      AUDIO_REQ_SetCurrent(pdev, req);
 8009856:	6839      	ldr	r1, [r7, #0]
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 f9bb 	bl	8009bd4 <AUDIO_REQ_SetCurrent>
      break;
 800985e:	e006      	b.n	800986e <USBD_AUDIO_Setup+0x5a>

    default:
      USBD_CtlError(pdev, req);
 8009860:	6839      	ldr	r1, [r7, #0]
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f001 fb36 	bl	800aed4 <USBD_CtlError>
      ret = USBD_FAIL;
 8009868:	2303      	movs	r3, #3
 800986a:	75fb      	strb	r3, [r7, #23]
      break;
 800986c:	bf00      	nop
    }
    break;
 800986e:	e08c      	b.n	800998a <USBD_AUDIO_Setup+0x176>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	785b      	ldrb	r3, [r3, #1]
 8009874:	2b0b      	cmp	r3, #11
 8009876:	d876      	bhi.n	8009966 <USBD_AUDIO_Setup+0x152>
 8009878:	a201      	add	r2, pc, #4	; (adr r2, 8009880 <USBD_AUDIO_Setup+0x6c>)
 800987a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800987e:	bf00      	nop
 8009880:	080098b1 	.word	0x080098b1
 8009884:	08009975 	.word	0x08009975
 8009888:	08009967 	.word	0x08009967
 800988c:	08009967 	.word	0x08009967
 8009890:	08009967 	.word	0x08009967
 8009894:	08009967 	.word	0x08009967
 8009898:	080098d9 	.word	0x080098d9
 800989c:	08009967 	.word	0x08009967
 80098a0:	08009967 	.word	0x08009967
 80098a4:	08009967 	.word	0x08009967
 80098a8:	08009903 	.word	0x08009903
 80098ac:	08009929 	.word	0x08009929
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098b6:	2b03      	cmp	r3, #3
 80098b8:	d107      	bne.n	80098ca <USBD_AUDIO_Setup+0xb6>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80098ba:	f107 0308 	add.w	r3, r7, #8
 80098be:	2202      	movs	r2, #2
 80098c0:	4619      	mov	r1, r3
 80098c2:	6878      	ldr	r0, [r7, #4]
 80098c4:	f001 fb77 	bl	800afb6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80098c8:	e057      	b.n	800997a <USBD_AUDIO_Setup+0x166>
        USBD_CtlError(pdev, req);
 80098ca:	6839      	ldr	r1, [r7, #0]
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f001 fb01 	bl	800aed4 <USBD_CtlError>
        ret = USBD_FAIL;
 80098d2:	2303      	movs	r3, #3
 80098d4:	75fb      	strb	r3, [r7, #23]
      break;
 80098d6:	e050      	b.n	800997a <USBD_AUDIO_Setup+0x166>

    case USB_REQ_GET_DESCRIPTOR:
      if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	885b      	ldrh	r3, [r3, #2]
 80098dc:	0a1b      	lsrs	r3, r3, #8
 80098de:	b29b      	uxth	r3, r3
 80098e0:	2b21      	cmp	r3, #33	; 0x21
 80098e2:	d149      	bne.n	8009978 <USBD_AUDIO_Setup+0x164>
      {
        pbuf = USBD_AUDIO_CfgDesc + 18;
 80098e4:	4b2b      	ldr	r3, [pc, #172]	; (8009994 <USBD_AUDIO_Setup+0x180>)
 80098e6:	60fb      	str	r3, [r7, #12]
        len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 80098e8:	683b      	ldr	r3, [r7, #0]
 80098ea:	88db      	ldrh	r3, [r3, #6]
 80098ec:	2b09      	cmp	r3, #9
 80098ee:	bf28      	it	cs
 80098f0:	2309      	movcs	r3, #9
 80098f2:	817b      	strh	r3, [r7, #10]

        (void)USBD_CtlSendData(pdev, pbuf, len);
 80098f4:	897b      	ldrh	r3, [r7, #10]
 80098f6:	461a      	mov	r2, r3
 80098f8:	68f9      	ldr	r1, [r7, #12]
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f001 fb5b 	bl	800afb6 <USBD_CtlSendData>
      }
      break;
 8009900:	e03a      	b.n	8009978 <USBD_AUDIO_Setup+0x164>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009908:	2b03      	cmp	r3, #3
 800990a:	d106      	bne.n	800991a <USBD_AUDIO_Setup+0x106>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 800990c:	693b      	ldr	r3, [r7, #16]
 800990e:	2201      	movs	r2, #1
 8009910:	4619      	mov	r1, r3
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	f001 fb4f 	bl	800afb6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009918:	e02f      	b.n	800997a <USBD_AUDIO_Setup+0x166>
        USBD_CtlError(pdev, req);
 800991a:	6839      	ldr	r1, [r7, #0]
 800991c:	6878      	ldr	r0, [r7, #4]
 800991e:	f001 fad9 	bl	800aed4 <USBD_CtlError>
        ret = USBD_FAIL;
 8009922:	2303      	movs	r3, #3
 8009924:	75fb      	strb	r3, [r7, #23]
      break;
 8009926:	e028      	b.n	800997a <USBD_AUDIO_Setup+0x166>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800992e:	2b03      	cmp	r3, #3
 8009930:	d112      	bne.n	8009958 <USBD_AUDIO_Setup+0x144>
      {
        if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	885b      	ldrh	r3, [r3, #2]
 8009936:	b2db      	uxtb	r3, r3
 8009938:	2b02      	cmp	r3, #2
 800993a:	d806      	bhi.n	800994a <USBD_AUDIO_Setup+0x136>
        {
          haudio->alt_setting = (uint8_t)(req->wValue);
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	885b      	ldrh	r3, [r3, #2]
 8009940:	b2db      	uxtb	r3, r3
 8009942:	461a      	mov	r2, r3
 8009944:	693b      	ldr	r3, [r7, #16]
 8009946:	601a      	str	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8009948:	e017      	b.n	800997a <USBD_AUDIO_Setup+0x166>
          USBD_CtlError(pdev, req);
 800994a:	6839      	ldr	r1, [r7, #0]
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	f001 fac1 	bl	800aed4 <USBD_CtlError>
          ret = USBD_FAIL;
 8009952:	2303      	movs	r3, #3
 8009954:	75fb      	strb	r3, [r7, #23]
      break;
 8009956:	e010      	b.n	800997a <USBD_AUDIO_Setup+0x166>
        USBD_CtlError(pdev, req);
 8009958:	6839      	ldr	r1, [r7, #0]
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f001 faba 	bl	800aed4 <USBD_CtlError>
        ret = USBD_FAIL;
 8009960:	2303      	movs	r3, #3
 8009962:	75fb      	strb	r3, [r7, #23]
      break;
 8009964:	e009      	b.n	800997a <USBD_AUDIO_Setup+0x166>

    case USB_REQ_CLEAR_FEATURE:
      break;

    default:
      USBD_CtlError(pdev, req);
 8009966:	6839      	ldr	r1, [r7, #0]
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f001 fab3 	bl	800aed4 <USBD_CtlError>
      ret = USBD_FAIL;
 800996e:	2303      	movs	r3, #3
 8009970:	75fb      	strb	r3, [r7, #23]
      break;
 8009972:	e002      	b.n	800997a <USBD_AUDIO_Setup+0x166>
      break;
 8009974:	bf00      	nop
 8009976:	e008      	b.n	800998a <USBD_AUDIO_Setup+0x176>
      break;
 8009978:	bf00      	nop
    }
    break;
 800997a:	e006      	b.n	800998a <USBD_AUDIO_Setup+0x176>
  default:
    USBD_CtlError(pdev, req);
 800997c:	6839      	ldr	r1, [r7, #0]
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f001 faa8 	bl	800aed4 <USBD_CtlError>
    ret = USBD_FAIL;
 8009984:	2303      	movs	r3, #3
 8009986:	75fb      	strb	r3, [r7, #23]
    break;
 8009988:	bf00      	nop
  }

  return (uint8_t)ret;
 800998a:	7dfb      	ldrb	r3, [r7, #23]
}
 800998c:	4618      	mov	r0, r3
 800998e:	3718      	adds	r7, #24
 8009990:	46bd      	mov	sp, r7
 8009992:	bd80      	pop	{r7, pc}
 8009994:	20000126 	.word	0x20000126

08009998 <USBD_AUDIO_GetCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	226d      	movs	r2, #109	; 0x6d
 80099a4:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 80099a6:	4b03      	ldr	r3, [pc, #12]	; (80099b4 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	370c      	adds	r7, #12
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr
 80099b4:	20000114 	.word	0x20000114

080099b8 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80099b8:	b480      	push	{r7}
 80099ba:	b083      	sub	sp, #12
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	460b      	mov	r3, r1
 80099c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 80099c4:	2300      	movs	r3, #0
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	370c      	adds	r7, #12
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80099d2:	b580      	push	{r7, lr}
 80099d4:	b084      	sub	sp, #16
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80099e0:	60fb      	str	r3, [r7, #12]

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 80099e8:	330a      	adds	r3, #10
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	2b01      	cmp	r3, #1
 80099ee:	d11d      	bne.n	8009a2c <USBD_AUDIO_EP0_RxReady+0x5a>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 80099f6:	330c      	adds	r3, #12
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d116      	bne.n	8009a2c <USBD_AUDIO_EP0_RxReady+0x5a>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->MuteCtl(haudio->control.data[0]);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a04:	691a      	ldr	r2, [r3, #16]
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8009a0c:	330b      	adds	r3, #11
 8009a0e:	781b      	ldrb	r3, [r3, #0]
 8009a10:	4618      	mov	r0, r3
 8009a12:	4790      	blx	r2
      haudio->control.cmd = 0U;
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8009a1a:	330a      	adds	r3, #10
 8009a1c:	2200      	movs	r2, #0
 8009a1e:	701a      	strb	r2, [r3, #0]
      haudio->control.len = 0U;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 8009a26:	330b      	adds	r3, #11
 8009a28:	2200      	movs	r2, #0
 8009a2a:	701a      	strb	r2, [r3, #0]
    }
  }

  return (uint8_t)USBD_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3710      	adds	r7, #16
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}

08009a36 <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 8009a36:	b480      	push	{r7}
 8009a38:	b083      	sub	sp, #12
 8009a3a:	af00      	add	r7, sp, #0
 8009a3c:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 8009a3e:	2300      	movs	r3, #0
}
 8009a40:	4618      	mov	r0, r3
 8009a42:	370c      	adds	r7, #12
 8009a44:	46bd      	mov	sp, r7
 8009a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4a:	4770      	bx	lr

08009a4c <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 8009a4c:	b480      	push	{r7}
 8009a4e:	b083      	sub	sp, #12
 8009a50:	af00      	add	r7, sp, #0
 8009a52:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 8009a54:	2300      	movs	r3, #0
}
 8009a56:	4618      	mov	r0, r3
 8009a58:	370c      	adds	r7, #12
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a60:	4770      	bx	lr

08009a62 <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a62:	b480      	push	{r7}
 8009a64:	b083      	sub	sp, #12
 8009a66:	af00      	add	r7, sp, #0
 8009a68:	6078      	str	r0, [r7, #4]
 8009a6a:	460b      	mov	r3, r1
 8009a6c:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8009a6e:	2300      	movs	r3, #0
}
 8009a70:	4618      	mov	r0, r3
 8009a72:	370c      	adds	r7, #12
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr

08009a7c <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a7c:	b480      	push	{r7}
 8009a7e:	b083      	sub	sp, #12
 8009a80:	af00      	add	r7, sp, #0
 8009a82:	6078      	str	r0, [r7, #4]
 8009a84:	460b      	mov	r3, r1
 8009a86:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8009a88:	2300      	movs	r3, #0
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	370c      	adds	r7, #12
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr

08009a96 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009a96:	b590      	push	{r4, r7, lr}
 8009a98:	b085      	sub	sp, #20
 8009a9a:	af00      	add	r7, sp, #0
 8009a9c:	6078      	str	r0, [r7, #4]
 8009a9e:	460b      	mov	r3, r1
 8009aa0:	70fb      	strb	r3, [r7, #3]
  uint16_t PacketSize;
  USBD_AUDIO_HandleTypeDef *haudio;

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009aa8:	60fb      	str	r3, [r7, #12]

  if (epnum == AUDIO_OUT_EP)
 8009aaa:	78fb      	ldrb	r3, [r7, #3]
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d16c      	bne.n	8009b8a <USBD_AUDIO_DataOut+0xf4>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 8009ab0:	78fb      	ldrb	r3, [r7, #3]
 8009ab2:	4619      	mov	r1, r3
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f002 f824 	bl	800bb02 <USBD_LL_GetRxDataSize>
 8009aba:	4603      	mov	r3, r0
 8009abc:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ac4:	695c      	ldr	r4, [r3, #20]
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8009acc:	3308      	adds	r3, #8
 8009ace:	881b      	ldrh	r3, [r3, #0]
 8009ad0:	461a      	mov	r2, r3
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	4413      	add	r3, r2
 8009ad6:	3304      	adds	r3, #4
 8009ad8:	8979      	ldrh	r1, [r7, #10]
 8009ada:	2201      	movs	r2, #1
 8009adc:	4618      	mov	r0, r3
 8009ade:	47a0      	blx	r4
                                                           PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8009ae6:	3308      	adds	r3, #8
 8009ae8:	881a      	ldrh	r2, [r3, #0]
 8009aea:	897b      	ldrh	r3, [r7, #10]
 8009aec:	4413      	add	r3, r2
 8009aee:	b29a      	uxth	r2, r3
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8009af6:	3308      	adds	r3, #8
 8009af8:	801a      	strh	r2, [r3, #0]

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8009b00:	3308      	adds	r3, #8
 8009b02:	881b      	ldrh	r3, [r3, #0]
 8009b04:	f5b3 5fdc 	cmp.w	r3, #7040	; 0x1b80
 8009b08:	d11c      	bne.n	8009b44 <USBD_AUDIO_DataOut+0xae>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8009b10:	3308      	adds	r3, #8
 8009b12:	2200      	movs	r2, #0
 8009b14:	801a      	strh	r2, [r3, #0]

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8009b1c:	3304      	adds	r3, #4
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	2b03      	cmp	r3, #3
 8009b22:	d10f      	bne.n	8009b44 <USBD_AUDIO_DataOut+0xae>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData)->AudioCmd(&haudio->buffer[0],
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009b2a:	689b      	ldr	r3, [r3, #8]
 8009b2c:	68fa      	ldr	r2, [r7, #12]
 8009b2e:	1d10      	adds	r0, r2, #4
 8009b30:	2201      	movs	r2, #1
 8009b32:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 8009b36:	4798      	blx	r3
                                                             AUDIO_TOTAL_BUF_SIZE / 2U,
                                                             AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8009b3e:	3304      	adds	r3, #4
 8009b40:	2200      	movs	r2, #0
 8009b42:	701a      	strb	r2, [r3, #0]
      }
    }

    if (haudio->rd_enable == 0U)
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8009b4a:	3305      	adds	r3, #5
 8009b4c:	781b      	ldrb	r3, [r3, #0]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d10d      	bne.n	8009b6e <USBD_AUDIO_DataOut+0xd8>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8009b58:	3308      	adds	r3, #8
 8009b5a:	881b      	ldrh	r3, [r3, #0]
 8009b5c:	f5b3 6f5c 	cmp.w	r3, #3520	; 0xdc0
 8009b60:	d105      	bne.n	8009b6e <USBD_AUDIO_DataOut+0xd8>
      {
        haudio->rd_enable = 1U;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8009b68:	3305      	adds	r3, #5
 8009b6a:	2201      	movs	r2, #1
 8009b6c:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
                                 &haudio->buffer[haudio->wr_ptr],
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8009b74:	3308      	adds	r3, #8
 8009b76:	881b      	ldrh	r3, [r3, #0]
 8009b78:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIO_OUT_EP,
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	4413      	add	r3, r2
 8009b7e:	1d1a      	adds	r2, r3, #4
 8009b80:	2358      	movs	r3, #88	; 0x58
 8009b82:	2101      	movs	r1, #1
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f001 ff9b 	bl	800bac0 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3714      	adds	r7, #20
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd90      	pop	{r4, r7, pc}

08009b94 <AUDIO_REQ_GetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009ba4:	60fb      	str	r3, [r7, #12]

  (void)USBD_memset(haudio->control.data, 0, 64U);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8009bac:	330b      	adds	r3, #11
 8009bae:	2240      	movs	r2, #64	; 0x40
 8009bb0:	2100      	movs	r1, #0
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	f002 f81e 	bl	800bbf4 <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data, req->wLength);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8009bbe:	330b      	adds	r3, #11
 8009bc0:	683a      	ldr	r2, [r7, #0]
 8009bc2:	88d2      	ldrh	r2, [r2, #6]
 8009bc4:	4619      	mov	r1, r3
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f001 f9f5 	bl	800afb6 <USBD_CtlSendData>
}
 8009bcc:	bf00      	nop
 8009bce:	3710      	adds	r7, #16
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassData;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009be4:	60fb      	str	r3, [r7, #12]

  if (req->wLength != 0U)
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	88db      	ldrh	r3, [r3, #6]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d021      	beq.n	8009c32 <AUDIO_REQ_SetCurrent+0x5e>
  {
    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, req->wLength);
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8009bf4:	330b      	adds	r3, #11
 8009bf6:	683a      	ldr	r2, [r7, #0]
 8009bf8:	88d2      	ldrh	r2, [r2, #6]
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f001 fa06 	bl	800b00e <USBD_CtlPrepareRx>

    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 8009c08:	330a      	adds	r3, #10
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	701a      	strb	r2, [r3, #0]
    haudio->control.len = (uint8_t)req->wLength; /* Set the request data length */
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	88db      	ldrh	r3, [r3, #6]
 8009c12:	b2da      	uxtb	r2, r3
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 8009c1a:	330b      	adds	r3, #11
 8009c1c:	701a      	strb	r2, [r3, #0]
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	889b      	ldrh	r3, [r3, #4]
 8009c22:	0a1b      	lsrs	r3, r3, #8
 8009c24:	b29b      	uxth	r3, r3
 8009c26:	b2da      	uxtb	r2, r3
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f503 53de 	add.w	r3, r3, #7104	; 0x1bc0
 8009c2e:	330c      	adds	r3, #12
 8009c30:	701a      	strb	r2, [r3, #0]
  }
}
 8009c32:	bf00      	nop
 8009c34:	3710      	adds	r7, #16
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
	...

08009c3c <USBD_AUDIO_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 8009c3c:	b480      	push	{r7}
 8009c3e:	b083      	sub	sp, #12
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	220a      	movs	r2, #10
 8009c48:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 8009c4a:	4b03      	ldr	r3, [pc, #12]	; (8009c58 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr
 8009c58:	20000184 	.word	0x20000184

08009c5c <USBD_AUDIO_RegisterInterface>:
* @param  fops: Audio interface callback
* @retval status
*/
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b083      	sub	sp, #12
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d101      	bne.n	8009c70 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009c6c:	2303      	movs	r3, #3
 8009c6e:	e004      	b.n	8009c7a <USBD_AUDIO_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	683a      	ldr	r2, [r7, #0]
 8009c74:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8009c78:	2300      	movs	r3, #0
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	370c      	adds	r7, #12
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c84:	4770      	bx	lr
	...

08009c88 <USBD_MIDI_Init>:
  // IN endpoint descriptor
  0x09, 0x05, MIDI_IN_EP, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x25, 0x01, 0x01, 0x03,
};

static uint8_t USBD_MIDI_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b082      	sub	sp, #8
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	460b      	mov	r3, r1
 8009c92:	70fb      	strb	r3, [r7, #3]
  pInstance = pdev;
 8009c94:	4a0c      	ldr	r2, [pc, #48]	; (8009cc8 <USBD_MIDI_Init+0x40>)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6013      	str	r3, [r2, #0]
  USBD_LL_OpenEP(pdev,MIDI_IN_EP,USBD_EP_TYPE_BULK,MIDI_DATA_IN_PACKET_SIZE);
 8009c9a:	2340      	movs	r3, #64	; 0x40
 8009c9c:	2202      	movs	r2, #2
 8009c9e:	2181      	movs	r1, #129	; 0x81
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f001 fe1e 	bl	800b8e2 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,MIDI_OUT_EP,USBD_EP_TYPE_BULK,MIDI_DATA_OUT_PACKET_SIZE);
 8009ca6:	2340      	movs	r3, #64	; 0x40
 8009ca8:	2202      	movs	r2, #2
 8009caa:	2101      	movs	r1, #1
 8009cac:	6878      	ldr	r0, [r7, #4]
 8009cae:	f001 fe18 	bl	800b8e2 <USBD_LL_OpenEP>
  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 8009cb2:	2340      	movs	r3, #64	; 0x40
 8009cb4:	4a05      	ldr	r2, [pc, #20]	; (8009ccc <USBD_MIDI_Init+0x44>)
 8009cb6:	2101      	movs	r1, #1
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f001 ff01 	bl	800bac0 <USBD_LL_PrepareReceive>
  return 0;
 8009cbe:	2300      	movs	r3, #0
}
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	3708      	adds	r7, #8
 8009cc4:	46bd      	mov	sp, r7
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	200003c0 	.word	0x200003c0
 8009ccc:	200008a4 	.word	0x200008a4

08009cd0 <USBD_MIDI_DeInit>:

static uint8_t USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 8009cd0:	b580      	push	{r7, lr}
 8009cd2:	b082      	sub	sp, #8
 8009cd4:	af00      	add	r7, sp, #0
 8009cd6:	6078      	str	r0, [r7, #4]
 8009cd8:	460b      	mov	r3, r1
 8009cda:	70fb      	strb	r3, [r7, #3]
  pInstance = NULL;
 8009cdc:	4b07      	ldr	r3, [pc, #28]	; (8009cfc <USBD_MIDI_DeInit+0x2c>)
 8009cde:	2200      	movs	r2, #0
 8009ce0:	601a      	str	r2, [r3, #0]
  USBD_LL_CloseEP(pdev,MIDI_IN_EP);
 8009ce2:	2181      	movs	r1, #129	; 0x81
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f001 fe22 	bl	800b92e <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,MIDI_OUT_EP);
 8009cea:	2101      	movs	r1, #1
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f001 fe1e 	bl	800b92e <USBD_LL_CloseEP>
  return 0;
 8009cf2:	2300      	movs	r3, #0
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3708      	adds	r7, #8
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}
 8009cfc:	200003c0 	.word	0x200003c0

08009d00 <USBD_MIDI_DataIn>:

//midi data incoming to host
static uint8_t USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum){
 8009d00:	b480      	push	{r7}
 8009d02:	b083      	sub	sp, #12
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	460b      	mov	r3, r1
 8009d0a:	70fb      	strb	r3, [r7, #3]

  if (USB_Tx_State == 1){
 8009d0c:	4b06      	ldr	r3, [pc, #24]	; (8009d28 <USBD_MIDI_DataIn+0x28>)
 8009d0e:	781b      	ldrb	r3, [r3, #0]
 8009d10:	2b01      	cmp	r3, #1
 8009d12:	d102      	bne.n	8009d1a <USBD_MIDI_DataIn+0x1a>
    USB_Tx_State = 0;
 8009d14:	4b04      	ldr	r3, [pc, #16]	; (8009d28 <USBD_MIDI_DataIn+0x28>)
 8009d16:	2200      	movs	r2, #0
 8009d18:	701a      	strb	r2, [r3, #0]
  }

  return USBD_OK;
 8009d1a:	2300      	movs	r3, #0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	370c      	adds	r7, #12
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr
 8009d28:	200003d0 	.word	0x200003d0

08009d2c <USBD_MIDI_DataOut>:

//midi data outcoming from host
static uint8_t  USBD_MIDI_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b084      	sub	sp, #16
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	460b      	mov	r3, r1
 8009d36:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Rx_Cnt;

  USBD_MIDI_ItfTypeDef *pmidi;
  pmidi = (USBD_MIDI_ItfTypeDef *)(pdev->pUserData);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009d3e:	60fb      	str	r3, [r7, #12]

  USB_Rx_Cnt = ((PCD_HandleTypeDef*)pdev->pData)->OUT_ep[epnum].xfer_count;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 12c4 	ldr.w	r1, [r3, #708]	; 0x2c4
 8009d46:	78fa      	ldrb	r2, [r7, #3]
 8009d48:	4613      	mov	r3, r2
 8009d4a:	00db      	lsls	r3, r3, #3
 8009d4c:	1a9b      	subs	r3, r3, r2
 8009d4e:	009b      	lsls	r3, r3, #2
 8009d50:	440b      	add	r3, r1
 8009d52:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	817b      	strh	r3, [r7, #10]

  pmidi->pIf_MidiRx((uint8_t *)&USB_Rx_Buffer, USB_Rx_Cnt);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	897a      	ldrh	r2, [r7, #10]
 8009d60:	4611      	mov	r1, r2
 8009d62:	4806      	ldr	r0, [pc, #24]	; (8009d7c <USBD_MIDI_DataOut+0x50>)
 8009d64:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 8009d66:	2340      	movs	r3, #64	; 0x40
 8009d68:	4a04      	ldr	r2, [pc, #16]	; (8009d7c <USBD_MIDI_DataOut+0x50>)
 8009d6a:	2101      	movs	r1, #1
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f001 fea7 	bl	800bac0 <USBD_LL_PrepareReceive>
  return USBD_OK;
 8009d72:	2300      	movs	r3, #0
}
 8009d74:	4618      	mov	r0, r3
 8009d76:	3710      	adds	r7, #16
 8009d78:	46bd      	mov	sp, r7
 8009d7a:	bd80      	pop	{r7, pc}
 8009d7c:	200008a4 	.word	0x200008a4

08009d80 <USBD_MIDI_SendPacket>:

void USBD_MIDI_SendPacket (){
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;

  if(USB_Tx_State != 1){
 8009d86:	4b30      	ldr	r3, [pc, #192]	; (8009e48 <USBD_MIDI_SendPacket+0xc8>)
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d059      	beq.n	8009e42 <USBD_MIDI_SendPacket+0xc2>
    if (APP_Rx_ptr_out == APP_RX_DATA_SIZE){
 8009d8e:	4b2f      	ldr	r3, [pc, #188]	; (8009e4c <USBD_MIDI_SendPacket+0xcc>)
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d96:	d102      	bne.n	8009d9e <USBD_MIDI_SendPacket+0x1e>
      APP_Rx_ptr_out = 0;
 8009d98:	4b2c      	ldr	r3, [pc, #176]	; (8009e4c <USBD_MIDI_SendPacket+0xcc>)
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	601a      	str	r2, [r3, #0]
    }

    if(APP_Rx_ptr_out == APP_Rx_ptr_in){
 8009d9e:	4b2b      	ldr	r3, [pc, #172]	; (8009e4c <USBD_MIDI_SendPacket+0xcc>)
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	4b2b      	ldr	r3, [pc, #172]	; (8009e50 <USBD_MIDI_SendPacket+0xd0>)
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d103      	bne.n	8009db2 <USBD_MIDI_SendPacket+0x32>
      USB_Tx_State = 0;
 8009daa:	4b27      	ldr	r3, [pc, #156]	; (8009e48 <USBD_MIDI_SendPacket+0xc8>)
 8009dac:	2200      	movs	r2, #0
 8009dae:	701a      	strb	r2, [r3, #0]
      return;
 8009db0:	e047      	b.n	8009e42 <USBD_MIDI_SendPacket+0xc2>
    }

    if(APP_Rx_ptr_out > APP_Rx_ptr_in){
 8009db2:	4b26      	ldr	r3, [pc, #152]	; (8009e4c <USBD_MIDI_SendPacket+0xcc>)
 8009db4:	681a      	ldr	r2, [r3, #0]
 8009db6:	4b26      	ldr	r3, [pc, #152]	; (8009e50 <USBD_MIDI_SendPacket+0xd0>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	429a      	cmp	r2, r3
 8009dbc:	d906      	bls.n	8009dcc <USBD_MIDI_SendPacket+0x4c>
      APP_Rx_length = APP_RX_DATA_SIZE - APP_Rx_ptr_out;
 8009dbe:	4b23      	ldr	r3, [pc, #140]	; (8009e4c <USBD_MIDI_SendPacket+0xcc>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009dc6:	4a23      	ldr	r2, [pc, #140]	; (8009e54 <USBD_MIDI_SendPacket+0xd4>)
 8009dc8:	6013      	str	r3, [r2, #0]
 8009dca:	e006      	b.n	8009dda <USBD_MIDI_SendPacket+0x5a>
    }else{
      APP_Rx_length = APP_Rx_ptr_in - APP_Rx_ptr_out;
 8009dcc:	4b20      	ldr	r3, [pc, #128]	; (8009e50 <USBD_MIDI_SendPacket+0xd0>)
 8009dce:	681a      	ldr	r2, [r3, #0]
 8009dd0:	4b1e      	ldr	r3, [pc, #120]	; (8009e4c <USBD_MIDI_SendPacket+0xcc>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	4a1f      	ldr	r2, [pc, #124]	; (8009e54 <USBD_MIDI_SendPacket+0xd4>)
 8009dd8:	6013      	str	r3, [r2, #0]
    }

    if (APP_Rx_length > MIDI_DATA_IN_PACKET_SIZE){
 8009dda:	4b1e      	ldr	r3, [pc, #120]	; (8009e54 <USBD_MIDI_SendPacket+0xd4>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	2b40      	cmp	r3, #64	; 0x40
 8009de0:	d90f      	bls.n	8009e02 <USBD_MIDI_SendPacket+0x82>
      USB_Tx_ptr = APP_Rx_ptr_out;
 8009de2:	4b1a      	ldr	r3, [pc, #104]	; (8009e4c <USBD_MIDI_SendPacket+0xcc>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = MIDI_DATA_IN_PACKET_SIZE;
 8009de8:	2340      	movs	r3, #64	; 0x40
 8009dea:	80bb      	strh	r3, [r7, #4]
      APP_Rx_ptr_out += MIDI_DATA_IN_PACKET_SIZE;
 8009dec:	4b17      	ldr	r3, [pc, #92]	; (8009e4c <USBD_MIDI_SendPacket+0xcc>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	3340      	adds	r3, #64	; 0x40
 8009df2:	4a16      	ldr	r2, [pc, #88]	; (8009e4c <USBD_MIDI_SendPacket+0xcc>)
 8009df4:	6013      	str	r3, [r2, #0]
      APP_Rx_length -= MIDI_DATA_IN_PACKET_SIZE;
 8009df6:	4b17      	ldr	r3, [pc, #92]	; (8009e54 <USBD_MIDI_SendPacket+0xd4>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	3b40      	subs	r3, #64	; 0x40
 8009dfc:	4a15      	ldr	r2, [pc, #84]	; (8009e54 <USBD_MIDI_SendPacket+0xd4>)
 8009dfe:	6013      	str	r3, [r2, #0]
 8009e00:	e00f      	b.n	8009e22 <USBD_MIDI_SendPacket+0xa2>
    }else{
      USB_Tx_ptr = APP_Rx_ptr_out;
 8009e02:	4b12      	ldr	r3, [pc, #72]	; (8009e4c <USBD_MIDI_SendPacket+0xcc>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = APP_Rx_length;
 8009e08:	4b12      	ldr	r3, [pc, #72]	; (8009e54 <USBD_MIDI_SendPacket+0xd4>)
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	80bb      	strh	r3, [r7, #4]
      APP_Rx_ptr_out += APP_Rx_length;
 8009e0e:	4b0f      	ldr	r3, [pc, #60]	; (8009e4c <USBD_MIDI_SendPacket+0xcc>)
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	4b10      	ldr	r3, [pc, #64]	; (8009e54 <USBD_MIDI_SendPacket+0xd4>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4413      	add	r3, r2
 8009e18:	4a0c      	ldr	r2, [pc, #48]	; (8009e4c <USBD_MIDI_SendPacket+0xcc>)
 8009e1a:	6013      	str	r3, [r2, #0]
      APP_Rx_length = 0;
 8009e1c:	4b0d      	ldr	r3, [pc, #52]	; (8009e54 <USBD_MIDI_SendPacket+0xd4>)
 8009e1e:	2200      	movs	r2, #0
 8009e20:	601a      	str	r2, [r3, #0]
    }
    USB_Tx_State = 1;
 8009e22:	4b09      	ldr	r3, [pc, #36]	; (8009e48 <USBD_MIDI_SendPacket+0xc8>)
 8009e24:	2201      	movs	r2, #1
 8009e26:	701a      	strb	r2, [r3, #0]
    while(USBD_LL_Transmit(pInstance,
 8009e28:	bf00      	nop
 8009e2a:	4b0b      	ldr	r3, [pc, #44]	; (8009e58 <USBD_MIDI_SendPacket+0xd8>)
 8009e2c:	6818      	ldr	r0, [r3, #0]
    		MIDI_IN_EP,(uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],USB_Tx_length) != USBD_OK);
 8009e2e:	88fb      	ldrh	r3, [r7, #6]
    while(USBD_LL_Transmit(pInstance,
 8009e30:	4a0a      	ldr	r2, [pc, #40]	; (8009e5c <USBD_MIDI_SendPacket+0xdc>)
 8009e32:	441a      	add	r2, r3
 8009e34:	88bb      	ldrh	r3, [r7, #4]
 8009e36:	2181      	movs	r1, #129	; 0x81
 8009e38:	f001 fe21 	bl	800ba7e <USBD_LL_Transmit>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d1f3      	bne.n	8009e2a <USBD_MIDI_SendPacket+0xaa>
  }
}
 8009e42:	3708      	adds	r7, #8
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}
 8009e48:	200003d0 	.word	0x200003d0
 8009e4c:	200003c8 	.word	0x200003c8
 8009e50:	200003c4 	.word	0x200003c4
 8009e54:	200003cc 	.word	0x200003cc
 8009e58:	200003c0 	.word	0x200003c0
 8009e5c:	200008e4 	.word	0x200008e4

08009e60 <USBD_MIDI_GetCfgDesc>:

static uint8_t *USBD_MIDI_GetCfgDesc (uint16_t *length){
 8009e60:	b480      	push	{r7}
 8009e62:	b083      	sub	sp, #12
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_CfgDesc);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2265      	movs	r2, #101	; 0x65
 8009e6c:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_CfgDesc;
 8009e6e:	4b03      	ldr	r3, [pc, #12]	; (8009e7c <USBD_MIDI_GetCfgDesc+0x1c>)
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr
 8009e7c:	200001c8 	.word	0x200001c8

08009e80 <USBD_MIDI_RegisterInterface>:
//  *length = sizeof (USBD_MIDI_DeviceQualifierDesc);
//  return USBD_MIDI_DeviceQualifierDesc;
//}

uint8_t USBD_MIDI_RegisterInterface(USBD_HandleTypeDef *pdev, USBD_MIDI_ItfTypeDef *fops)
{
 8009e80:	b480      	push	{r7}
 8009e82:	b085      	sub	sp, #20
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  uint8_t ret = USBD_FAIL;
 8009e8a:	2303      	movs	r3, #3
 8009e8c:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL){
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d005      	beq.n	8009ea0 <USBD_MIDI_RegisterInterface+0x20>
    pdev->pUserData= fops;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	683a      	ldr	r2, [r7, #0]
 8009e98:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;    
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 8009ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ea2:	4618      	mov	r0, r3
 8009ea4:	3714      	adds	r7, #20
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eac:	4770      	bx	lr

08009eae <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009eae:	b580      	push	{r7, lr}
 8009eb0:	b086      	sub	sp, #24
 8009eb2:	af00      	add	r7, sp, #0
 8009eb4:	60f8      	str	r0, [r7, #12]
 8009eb6:	60b9      	str	r1, [r7, #8]
 8009eb8:	4613      	mov	r3, r2
 8009eba:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d101      	bne.n	8009ec6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8009ec2:	2303      	movs	r3, #3
 8009ec4:	e025      	b.n	8009f12 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d003      	beq.n	8009ed8 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d003      	beq.n	8009eea <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d003      	beq.n	8009ef8 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	68ba      	ldr	r2, [r7, #8]
 8009ef4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2201      	movs	r2, #1
 8009efc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	79fa      	ldrb	r2, [r7, #7]
 8009f04:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009f06:	68f8      	ldr	r0, [r7, #12]
 8009f08:	f001 fc84 	bl	800b814 <USBD_LL_Init>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3718      	adds	r7, #24
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}

08009f1a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009f1a:	b580      	push	{r7, lr}
 8009f1c:	b084      	sub	sp, #16
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
 8009f22:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009f24:	2300      	movs	r3, #0
 8009f26:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d101      	bne.n	8009f32 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8009f2e:	2303      	movs	r3, #3
 8009f30:	e010      	b.n	8009f54 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	683a      	ldr	r2, [r7, #0]
 8009f36:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f42:	f107 020e 	add.w	r2, r7, #14
 8009f46:	4610      	mov	r0, r2
 8009f48:	4798      	blx	r3
 8009f4a:	4602      	mov	r2, r0
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
#endif /* USE_USB_FS */


  return USBD_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3710      	adds	r7, #16
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	bd80      	pop	{r7, pc}

08009f5c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b082      	sub	sp, #8
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f001 fca1 	bl	800b8ac <USBD_LL_Start>
 8009f6a:	4603      	mov	r3, r0
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3708      	adds	r7, #8
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b083      	sub	sp, #12
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009f7c:	2300      	movs	r3, #0
}
 8009f7e:	4618      	mov	r0, r3
 8009f80:	370c      	adds	r7, #12
 8009f82:	46bd      	mov	sp, r7
 8009f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f88:	4770      	bx	lr

08009f8a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009f8a:	b580      	push	{r7, lr}
 8009f8c:	b084      	sub	sp, #16
 8009f8e:	af00      	add	r7, sp, #0
 8009f90:	6078      	str	r0, [r7, #4]
 8009f92:	460b      	mov	r3, r1
 8009f94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8009f96:	2303      	movs	r3, #3
 8009f98:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d009      	beq.n	8009fb8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	78fa      	ldrb	r2, [r7, #3]
 8009fae:	4611      	mov	r1, r2
 8009fb0:	6878      	ldr	r0, [r7, #4]
 8009fb2:	4798      	blx	r3
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8009fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3710      	adds	r7, #16
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}

08009fc2 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009fc2:	b580      	push	{r7, lr}
 8009fc4:	b082      	sub	sp, #8
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]
 8009fca:	460b      	mov	r3, r1
 8009fcc:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d007      	beq.n	8009fe8 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	78fa      	ldrb	r2, [r7, #3]
 8009fe2:	4611      	mov	r1, r2
 8009fe4:	6878      	ldr	r0, [r7, #4]
 8009fe6:	4798      	blx	r3
  }

  return USBD_OK;
 8009fe8:	2300      	movs	r3, #0
}
 8009fea:	4618      	mov	r0, r3
 8009fec:	3708      	adds	r7, #8
 8009fee:	46bd      	mov	sp, r7
 8009ff0:	bd80      	pop	{r7, pc}

08009ff2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009ff2:	b580      	push	{r7, lr}
 8009ff4:	b084      	sub	sp, #16
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
 8009ffa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a002:	6839      	ldr	r1, [r7, #0]
 800a004:	4618      	mov	r0, r3
 800a006:	f000 ff2b 	bl	800ae60 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	2201      	movs	r2, #1
 800a00e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a018:	461a      	mov	r2, r3
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a026:	f003 031f 	and.w	r3, r3, #31
 800a02a:	2b01      	cmp	r3, #1
 800a02c:	d00e      	beq.n	800a04c <USBD_LL_SetupStage+0x5a>
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d302      	bcc.n	800a038 <USBD_LL_SetupStage+0x46>
 800a032:	2b02      	cmp	r3, #2
 800a034:	d014      	beq.n	800a060 <USBD_LL_SetupStage+0x6e>
 800a036:	e01d      	b.n	800a074 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a03e:	4619      	mov	r1, r3
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	f000 fa17 	bl	800a474 <USBD_StdDevReq>
 800a046:	4603      	mov	r3, r0
 800a048:	73fb      	strb	r3, [r7, #15]
      break;
 800a04a:	e020      	b.n	800a08e <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a052:	4619      	mov	r1, r3
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 fa7b 	bl	800a550 <USBD_StdItfReq>
 800a05a:	4603      	mov	r3, r0
 800a05c:	73fb      	strb	r3, [r7, #15]
      break;
 800a05e:	e016      	b.n	800a08e <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a066:	4619      	mov	r1, r3
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	f000 fab7 	bl	800a5dc <USBD_StdEPReq>
 800a06e:	4603      	mov	r3, r0
 800a070:	73fb      	strb	r3, [r7, #15]
      break;
 800a072:	e00c      	b.n	800a08e <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a07a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a07e:	b2db      	uxtb	r3, r3
 800a080:	4619      	mov	r1, r3
 800a082:	6878      	ldr	r0, [r7, #4]
 800a084:	f001 fc72 	bl	800b96c <USBD_LL_StallEP>
 800a088:	4603      	mov	r3, r0
 800a08a:	73fb      	strb	r3, [r7, #15]
      break;
 800a08c:	bf00      	nop
  }

  return ret;
 800a08e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a090:	4618      	mov	r0, r3
 800a092:	3710      	adds	r7, #16
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}

0800a098 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b086      	sub	sp, #24
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	460b      	mov	r3, r1
 800a0a2:	607a      	str	r2, [r7, #4]
 800a0a4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a0a6:	7afb      	ldrb	r3, [r7, #11]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d137      	bne.n	800a11c <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800a0b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a0ba:	2b03      	cmp	r3, #3
 800a0bc:	d14a      	bne.n	800a154 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800a0be:	693b      	ldr	r3, [r7, #16]
 800a0c0:	689a      	ldr	r2, [r3, #8]
 800a0c2:	693b      	ldr	r3, [r7, #16]
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d913      	bls.n	800a0f2 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a0ca:	693b      	ldr	r3, [r7, #16]
 800a0cc:	689a      	ldr	r2, [r3, #8]
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	68db      	ldr	r3, [r3, #12]
 800a0d2:	1ad2      	subs	r2, r2, r3
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	68da      	ldr	r2, [r3, #12]
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	689b      	ldr	r3, [r3, #8]
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	bf28      	it	cs
 800a0e4:	4613      	movcs	r3, r2
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	6879      	ldr	r1, [r7, #4]
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	f000 ffac 	bl	800b048 <USBD_CtlContinueRx>
 800a0f0:	e030      	b.n	800a154 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0f8:	691b      	ldr	r3, [r3, #16]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00a      	beq.n	800a114 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800a104:	2b03      	cmp	r3, #3
 800a106:	d105      	bne.n	800a114 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a10e:	691b      	ldr	r3, [r3, #16]
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800a114:	68f8      	ldr	r0, [r7, #12]
 800a116:	f000 ffa8 	bl	800b06a <USBD_CtlSendStatus>
 800a11a:	e01b      	b.n	800a154 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a122:	699b      	ldr	r3, [r3, #24]
 800a124:	2b00      	cmp	r3, #0
 800a126:	d013      	beq.n	800a150 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800a12e:	2b03      	cmp	r3, #3
 800a130:	d10e      	bne.n	800a150 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a138:	699b      	ldr	r3, [r3, #24]
 800a13a:	7afa      	ldrb	r2, [r7, #11]
 800a13c:	4611      	mov	r1, r2
 800a13e:	68f8      	ldr	r0, [r7, #12]
 800a140:	4798      	blx	r3
 800a142:	4603      	mov	r3, r0
 800a144:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a146:	7dfb      	ldrb	r3, [r7, #23]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d003      	beq.n	800a154 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800a14c:	7dfb      	ldrb	r3, [r7, #23]
 800a14e:	e002      	b.n	800a156 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a150:	2303      	movs	r3, #3
 800a152:	e000      	b.n	800a156 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800a154:	2300      	movs	r3, #0
}
 800a156:	4618      	mov	r0, r3
 800a158:	3718      	adds	r7, #24
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}

0800a15e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a15e:	b580      	push	{r7, lr}
 800a160:	b086      	sub	sp, #24
 800a162:	af00      	add	r7, sp, #0
 800a164:	60f8      	str	r0, [r7, #12]
 800a166:	460b      	mov	r3, r1
 800a168:	607a      	str	r2, [r7, #4]
 800a16a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800a16c:	7afb      	ldrb	r3, [r7, #11]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d16a      	bne.n	800a248 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	3314      	adds	r3, #20
 800a176:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a17e:	2b02      	cmp	r3, #2
 800a180:	d155      	bne.n	800a22e <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800a182:	693b      	ldr	r3, [r7, #16]
 800a184:	689a      	ldr	r2, [r3, #8]
 800a186:	693b      	ldr	r3, [r7, #16]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	429a      	cmp	r2, r3
 800a18c:	d914      	bls.n	800a1b8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	689a      	ldr	r2, [r3, #8]
 800a192:	693b      	ldr	r3, [r7, #16]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	1ad2      	subs	r2, r2, r3
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a19c:	693b      	ldr	r3, [r7, #16]
 800a19e:	689b      	ldr	r3, [r3, #8]
 800a1a0:	461a      	mov	r2, r3
 800a1a2:	6879      	ldr	r1, [r7, #4]
 800a1a4:	68f8      	ldr	r0, [r7, #12]
 800a1a6:	f000 ff21 	bl	800afec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	2100      	movs	r1, #0
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f001 fc85 	bl	800bac0 <USBD_LL_PrepareReceive>
 800a1b6:	e03a      	b.n	800a22e <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a1b8:	693b      	ldr	r3, [r7, #16]
 800a1ba:	68da      	ldr	r2, [r3, #12]
 800a1bc:	693b      	ldr	r3, [r7, #16]
 800a1be:	689b      	ldr	r3, [r3, #8]
 800a1c0:	429a      	cmp	r2, r3
 800a1c2:	d11c      	bne.n	800a1fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	685a      	ldr	r2, [r3, #4]
 800a1c8:	693b      	ldr	r3, [r7, #16]
 800a1ca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a1cc:	429a      	cmp	r2, r3
 800a1ce:	d316      	bcc.n	800a1fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a1d0:	693b      	ldr	r3, [r7, #16]
 800a1d2:	685a      	ldr	r2, [r3, #4]
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a1da:	429a      	cmp	r2, r3
 800a1dc:	d20f      	bcs.n	800a1fe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a1de:	2200      	movs	r2, #0
 800a1e0:	2100      	movs	r1, #0
 800a1e2:	68f8      	ldr	r0, [r7, #12]
 800a1e4:	f000 ff02 	bl	800afec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	2100      	movs	r1, #0
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f001 fc62 	bl	800bac0 <USBD_LL_PrepareReceive>
 800a1fc:	e017      	b.n	800a22e <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a204:	68db      	ldr	r3, [r3, #12]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d00a      	beq.n	800a220 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800a210:	2b03      	cmp	r3, #3
 800a212:	d105      	bne.n	800a220 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a21a:	68db      	ldr	r3, [r3, #12]
 800a21c:	68f8      	ldr	r0, [r7, #12]
 800a21e:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a220:	2180      	movs	r1, #128	; 0x80
 800a222:	68f8      	ldr	r0, [r7, #12]
 800a224:	f001 fba2 	bl	800b96c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a228:	68f8      	ldr	r0, [r7, #12]
 800a22a:	f000 ff31 	bl	800b090 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a234:	2b01      	cmp	r3, #1
 800a236:	d123      	bne.n	800a280 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800a238:	68f8      	ldr	r0, [r7, #12]
 800a23a:	f7ff fe9b 	bl	8009f74 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2200      	movs	r2, #0
 800a242:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a246:	e01b      	b.n	800a280 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a24e:	695b      	ldr	r3, [r3, #20]
 800a250:	2b00      	cmp	r3, #0
 800a252:	d013      	beq.n	800a27c <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800a25a:	2b03      	cmp	r3, #3
 800a25c:	d10e      	bne.n	800a27c <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a264:	695b      	ldr	r3, [r3, #20]
 800a266:	7afa      	ldrb	r2, [r7, #11]
 800a268:	4611      	mov	r1, r2
 800a26a:	68f8      	ldr	r0, [r7, #12]
 800a26c:	4798      	blx	r3
 800a26e:	4603      	mov	r3, r0
 800a270:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800a272:	7dfb      	ldrb	r3, [r7, #23]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d003      	beq.n	800a280 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800a278:	7dfb      	ldrb	r3, [r7, #23]
 800a27a:	e002      	b.n	800a282 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800a27c:	2303      	movs	r3, #3
 800a27e:	e000      	b.n	800a282 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800a280:	2300      	movs	r3, #0
}
 800a282:	4618      	mov	r0, r3
 800a284:	3718      	adds	r7, #24
 800a286:	46bd      	mov	sp, r7
 800a288:	bd80      	pop	{r7, pc}

0800a28a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a28a:	b580      	push	{r7, lr}
 800a28c:	b082      	sub	sp, #8
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	2201      	movs	r2, #1
 800a296:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	2200      	movs	r2, #0
 800a29e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d009      	beq.n	800a2ce <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	6852      	ldr	r2, [r2, #4]
 800a2c6:	b2d2      	uxtb	r2, r2
 800a2c8:	4611      	mov	r1, r2
 800a2ca:	6878      	ldr	r0, [r7, #4]
 800a2cc:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a2ce:	2340      	movs	r3, #64	; 0x40
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	2100      	movs	r1, #0
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f001 fb04 	bl	800b8e2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2240      	movs	r2, #64	; 0x40
 800a2e6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a2ea:	2340      	movs	r3, #64	; 0x40
 800a2ec:	2200      	movs	r2, #0
 800a2ee:	2180      	movs	r1, #128	; 0x80
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f001 faf6 	bl	800b8e2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	2201      	movs	r2, #1
 800a2fa:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2240      	movs	r2, #64	; 0x40
 800a300:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800a302:	2300      	movs	r3, #0
}
 800a304:	4618      	mov	r0, r3
 800a306:	3708      	adds	r7, #8
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	460b      	mov	r3, r1
 800a316:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	78fa      	ldrb	r2, [r7, #3]
 800a31c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	370c      	adds	r7, #12
 800a324:	46bd      	mov	sp, r7
 800a326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a32a:	4770      	bx	lr

0800a32c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b083      	sub	sp, #12
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2204      	movs	r2, #4
 800a344:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a348:	2300      	movs	r3, #0
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	370c      	adds	r7, #12
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr

0800a356 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a356:	b480      	push	{r7}
 800a358:	b083      	sub	sp, #12
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a364:	2b04      	cmp	r3, #4
 800a366:	d105      	bne.n	800a374 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a374:	2300      	movs	r3, #0
}
 800a376:	4618      	mov	r0, r3
 800a378:	370c      	adds	r7, #12
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr

0800a382 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a382:	b580      	push	{r7, lr}
 800a384:	b082      	sub	sp, #8
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a390:	2b03      	cmp	r3, #3
 800a392:	d10b      	bne.n	800a3ac <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a39a:	69db      	ldr	r3, [r3, #28]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d005      	beq.n	800a3ac <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3a6:	69db      	ldr	r3, [r3, #28]
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a3ac:	2300      	movs	r3, #0
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3708      	adds	r7, #8
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}

0800a3b6 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a3b6:	b480      	push	{r7}
 800a3b8:	b083      	sub	sp, #12
 800a3ba:	af00      	add	r7, sp, #0
 800a3bc:	6078      	str	r0, [r7, #4]
 800a3be:	460b      	mov	r3, r1
 800a3c0:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a3c2:	2300      	movs	r3, #0
}
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr

0800a3d0 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
 800a3d8:	460b      	mov	r3, r1
 800a3da:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800a3dc:	2300      	movs	r3, #0
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	370c      	adds	r7, #12
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr

0800a3ea <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a3ea:	b480      	push	{r7}
 800a3ec:	b083      	sub	sp, #12
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a3f2:	2300      	movs	r3, #0
}
 800a3f4:	4618      	mov	r0, r3
 800a3f6:	370c      	adds	r7, #12
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr

0800a400 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b082      	sub	sp, #8
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	2201      	movs	r2, #1
 800a40c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a416:	2b00      	cmp	r3, #0
 800a418:	d009      	beq.n	800a42e <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	6852      	ldr	r2, [r2, #4]
 800a426:	b2d2      	uxtb	r2, r2
 800a428:	4611      	mov	r1, r2
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	4798      	blx	r3
  }

  return USBD_OK;
 800a42e:	2300      	movs	r3, #0
}
 800a430:	4618      	mov	r0, r3
 800a432:	3708      	adds	r7, #8
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}

0800a438 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a438:	b480      	push	{r7}
 800a43a:	b087      	sub	sp, #28
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a444:	697b      	ldr	r3, [r7, #20]
 800a446:	781b      	ldrb	r3, [r3, #0]
 800a448:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	3301      	adds	r3, #1
 800a44e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a450:	697b      	ldr	r3, [r7, #20]
 800a452:	781b      	ldrb	r3, [r3, #0]
 800a454:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a456:	8a3b      	ldrh	r3, [r7, #16]
 800a458:	021b      	lsls	r3, r3, #8
 800a45a:	b21a      	sxth	r2, r3
 800a45c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a460:	4313      	orrs	r3, r2
 800a462:	b21b      	sxth	r3, r3
 800a464:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a466:	89fb      	ldrh	r3, [r7, #14]
}
 800a468:	4618      	mov	r0, r3
 800a46a:	371c      	adds	r7, #28
 800a46c:	46bd      	mov	sp, r7
 800a46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a472:	4770      	bx	lr

0800a474 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a474:	b580      	push	{r7, lr}
 800a476:	b084      	sub	sp, #16
 800a478:	af00      	add	r7, sp, #0
 800a47a:	6078      	str	r0, [r7, #4]
 800a47c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a47e:	2300      	movs	r3, #0
 800a480:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	781b      	ldrb	r3, [r3, #0]
 800a486:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a48a:	2b20      	cmp	r3, #32
 800a48c:	d004      	beq.n	800a498 <USBD_StdDevReq+0x24>
 800a48e:	2b40      	cmp	r3, #64	; 0x40
 800a490:	d002      	beq.n	800a498 <USBD_StdDevReq+0x24>
 800a492:	2b00      	cmp	r3, #0
 800a494:	d00a      	beq.n	800a4ac <USBD_StdDevReq+0x38>
 800a496:	e050      	b.n	800a53a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a49e:	689b      	ldr	r3, [r3, #8]
 800a4a0:	6839      	ldr	r1, [r7, #0]
 800a4a2:	6878      	ldr	r0, [r7, #4]
 800a4a4:	4798      	blx	r3
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	73fb      	strb	r3, [r7, #15]
    break;
 800a4aa:	e04b      	b.n	800a544 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	785b      	ldrb	r3, [r3, #1]
 800a4b0:	2b09      	cmp	r3, #9
 800a4b2:	d83c      	bhi.n	800a52e <USBD_StdDevReq+0xba>
 800a4b4:	a201      	add	r2, pc, #4	; (adr r2, 800a4bc <USBD_StdDevReq+0x48>)
 800a4b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4ba:	bf00      	nop
 800a4bc:	0800a511 	.word	0x0800a511
 800a4c0:	0800a525 	.word	0x0800a525
 800a4c4:	0800a52f 	.word	0x0800a52f
 800a4c8:	0800a51b 	.word	0x0800a51b
 800a4cc:	0800a52f 	.word	0x0800a52f
 800a4d0:	0800a4ef 	.word	0x0800a4ef
 800a4d4:	0800a4e5 	.word	0x0800a4e5
 800a4d8:	0800a52f 	.word	0x0800a52f
 800a4dc:	0800a507 	.word	0x0800a507
 800a4e0:	0800a4f9 	.word	0x0800a4f9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800a4e4:	6839      	ldr	r1, [r7, #0]
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f000 f9ce 	bl	800a888 <USBD_GetDescriptor>
      break;
 800a4ec:	e024      	b.n	800a538 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800a4ee:	6839      	ldr	r1, [r7, #0]
 800a4f0:	6878      	ldr	r0, [r7, #4]
 800a4f2:	f000 fb33 	bl	800ab5c <USBD_SetAddress>
      break;
 800a4f6:	e01f      	b.n	800a538 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800a4f8:	6839      	ldr	r1, [r7, #0]
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f000 fb70 	bl	800abe0 <USBD_SetConfig>
 800a500:	4603      	mov	r3, r0
 800a502:	73fb      	strb	r3, [r7, #15]
      break;
 800a504:	e018      	b.n	800a538 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800a506:	6839      	ldr	r1, [r7, #0]
 800a508:	6878      	ldr	r0, [r7, #4]
 800a50a:	f000 fc0d 	bl	800ad28 <USBD_GetConfig>
      break;
 800a50e:	e013      	b.n	800a538 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800a510:	6839      	ldr	r1, [r7, #0]
 800a512:	6878      	ldr	r0, [r7, #4]
 800a514:	f000 fc3c 	bl	800ad90 <USBD_GetStatus>
      break;
 800a518:	e00e      	b.n	800a538 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800a51a:	6839      	ldr	r1, [r7, #0]
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 fc6a 	bl	800adf6 <USBD_SetFeature>
      break;
 800a522:	e009      	b.n	800a538 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800a524:	6839      	ldr	r1, [r7, #0]
 800a526:	6878      	ldr	r0, [r7, #4]
 800a528:	f000 fc79 	bl	800ae1e <USBD_ClrFeature>
      break;
 800a52c:	e004      	b.n	800a538 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800a52e:	6839      	ldr	r1, [r7, #0]
 800a530:	6878      	ldr	r0, [r7, #4]
 800a532:	f000 fccf 	bl	800aed4 <USBD_CtlError>
      break;
 800a536:	bf00      	nop
    }
    break;
 800a538:	e004      	b.n	800a544 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800a53a:	6839      	ldr	r1, [r7, #0]
 800a53c:	6878      	ldr	r0, [r7, #4]
 800a53e:	f000 fcc9 	bl	800aed4 <USBD_CtlError>
    break;
 800a542:	bf00      	nop
  }

  return ret;
 800a544:	7bfb      	ldrb	r3, [r7, #15]
}
 800a546:	4618      	mov	r0, r3
 800a548:	3710      	adds	r7, #16
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop

0800a550 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b084      	sub	sp, #16
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a55a:	2300      	movs	r3, #0
 800a55c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a566:	2b20      	cmp	r3, #32
 800a568:	d003      	beq.n	800a572 <USBD_StdItfReq+0x22>
 800a56a:	2b40      	cmp	r3, #64	; 0x40
 800a56c:	d001      	beq.n	800a572 <USBD_StdItfReq+0x22>
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d12a      	bne.n	800a5c8 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a578:	3b01      	subs	r3, #1
 800a57a:	2b02      	cmp	r3, #2
 800a57c:	d81d      	bhi.n	800a5ba <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	889b      	ldrh	r3, [r3, #4]
 800a582:	b2db      	uxtb	r3, r3
 800a584:	2b02      	cmp	r3, #2
 800a586:	d813      	bhi.n	800a5b0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a58e:	689b      	ldr	r3, [r3, #8]
 800a590:	6839      	ldr	r1, [r7, #0]
 800a592:	6878      	ldr	r0, [r7, #4]
 800a594:	4798      	blx	r3
 800a596:	4603      	mov	r3, r0
 800a598:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	88db      	ldrh	r3, [r3, #6]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d110      	bne.n	800a5c4 <USBD_StdItfReq+0x74>
 800a5a2:	7bfb      	ldrb	r3, [r7, #15]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d10d      	bne.n	800a5c4 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	f000 fd5e 	bl	800b06a <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800a5ae:	e009      	b.n	800a5c4 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800a5b0:	6839      	ldr	r1, [r7, #0]
 800a5b2:	6878      	ldr	r0, [r7, #4]
 800a5b4:	f000 fc8e 	bl	800aed4 <USBD_CtlError>
      break;
 800a5b8:	e004      	b.n	800a5c4 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800a5ba:	6839      	ldr	r1, [r7, #0]
 800a5bc:	6878      	ldr	r0, [r7, #4]
 800a5be:	f000 fc89 	bl	800aed4 <USBD_CtlError>
      break;
 800a5c2:	e000      	b.n	800a5c6 <USBD_StdItfReq+0x76>
      break;
 800a5c4:	bf00      	nop
    }
    break;
 800a5c6:	e004      	b.n	800a5d2 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800a5c8:	6839      	ldr	r1, [r7, #0]
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f000 fc82 	bl	800aed4 <USBD_CtlError>
    break;
 800a5d0:	bf00      	nop
  }

  return ret;
 800a5d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	3710      	adds	r7, #16
 800a5d8:	46bd      	mov	sp, r7
 800a5da:	bd80      	pop	{r7, pc}

0800a5dc <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
 800a5e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	889b      	ldrh	r3, [r3, #4]
 800a5ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	781b      	ldrb	r3, [r3, #0]
 800a5f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a5f8:	2b20      	cmp	r3, #32
 800a5fa:	d004      	beq.n	800a606 <USBD_StdEPReq+0x2a>
 800a5fc:	2b40      	cmp	r3, #64	; 0x40
 800a5fe:	d002      	beq.n	800a606 <USBD_StdEPReq+0x2a>
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00a      	beq.n	800a61a <USBD_StdEPReq+0x3e>
 800a604:	e135      	b.n	800a872 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a60c:	689b      	ldr	r3, [r3, #8]
 800a60e:	6839      	ldr	r1, [r7, #0]
 800a610:	6878      	ldr	r0, [r7, #4]
 800a612:	4798      	blx	r3
 800a614:	4603      	mov	r3, r0
 800a616:	73fb      	strb	r3, [r7, #15]
    break;
 800a618:	e130      	b.n	800a87c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	785b      	ldrb	r3, [r3, #1]
 800a61e:	2b01      	cmp	r3, #1
 800a620:	d03e      	beq.n	800a6a0 <USBD_StdEPReq+0xc4>
 800a622:	2b03      	cmp	r3, #3
 800a624:	d002      	beq.n	800a62c <USBD_StdEPReq+0x50>
 800a626:	2b00      	cmp	r3, #0
 800a628:	d077      	beq.n	800a71a <USBD_StdEPReq+0x13e>
 800a62a:	e11c      	b.n	800a866 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a632:	2b02      	cmp	r3, #2
 800a634:	d002      	beq.n	800a63c <USBD_StdEPReq+0x60>
 800a636:	2b03      	cmp	r3, #3
 800a638:	d015      	beq.n	800a666 <USBD_StdEPReq+0x8a>
 800a63a:	e02b      	b.n	800a694 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a63c:	7bbb      	ldrb	r3, [r7, #14]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d00c      	beq.n	800a65c <USBD_StdEPReq+0x80>
 800a642:	7bbb      	ldrb	r3, [r7, #14]
 800a644:	2b80      	cmp	r3, #128	; 0x80
 800a646:	d009      	beq.n	800a65c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800a648:	7bbb      	ldrb	r3, [r7, #14]
 800a64a:	4619      	mov	r1, r3
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f001 f98d 	bl	800b96c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a652:	2180      	movs	r1, #128	; 0x80
 800a654:	6878      	ldr	r0, [r7, #4]
 800a656:	f001 f989 	bl	800b96c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a65a:	e020      	b.n	800a69e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800a65c:	6839      	ldr	r1, [r7, #0]
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 fc38 	bl	800aed4 <USBD_CtlError>
        break;
 800a664:	e01b      	b.n	800a69e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a666:	683b      	ldr	r3, [r7, #0]
 800a668:	885b      	ldrh	r3, [r3, #2]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d10e      	bne.n	800a68c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a66e:	7bbb      	ldrb	r3, [r7, #14]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d00b      	beq.n	800a68c <USBD_StdEPReq+0xb0>
 800a674:	7bbb      	ldrb	r3, [r7, #14]
 800a676:	2b80      	cmp	r3, #128	; 0x80
 800a678:	d008      	beq.n	800a68c <USBD_StdEPReq+0xb0>
 800a67a:	683b      	ldr	r3, [r7, #0]
 800a67c:	88db      	ldrh	r3, [r3, #6]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d104      	bne.n	800a68c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800a682:	7bbb      	ldrb	r3, [r7, #14]
 800a684:	4619      	mov	r1, r3
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f001 f970 	bl	800b96c <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 fcec 	bl	800b06a <USBD_CtlSendStatus>

        break;
 800a692:	e004      	b.n	800a69e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800a694:	6839      	ldr	r1, [r7, #0]
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 fc1c 	bl	800aed4 <USBD_CtlError>
        break;
 800a69c:	bf00      	nop
      }
      break;
 800a69e:	e0e7      	b.n	800a870 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d002      	beq.n	800a6b0 <USBD_StdEPReq+0xd4>
 800a6aa:	2b03      	cmp	r3, #3
 800a6ac:	d015      	beq.n	800a6da <USBD_StdEPReq+0xfe>
 800a6ae:	e02d      	b.n	800a70c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a6b0:	7bbb      	ldrb	r3, [r7, #14]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d00c      	beq.n	800a6d0 <USBD_StdEPReq+0xf4>
 800a6b6:	7bbb      	ldrb	r3, [r7, #14]
 800a6b8:	2b80      	cmp	r3, #128	; 0x80
 800a6ba:	d009      	beq.n	800a6d0 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800a6bc:	7bbb      	ldrb	r3, [r7, #14]
 800a6be:	4619      	mov	r1, r3
 800a6c0:	6878      	ldr	r0, [r7, #4]
 800a6c2:	f001 f953 	bl	800b96c <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a6c6:	2180      	movs	r1, #128	; 0x80
 800a6c8:	6878      	ldr	r0, [r7, #4]
 800a6ca:	f001 f94f 	bl	800b96c <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800a6ce:	e023      	b.n	800a718 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800a6d0:	6839      	ldr	r1, [r7, #0]
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 fbfe 	bl	800aed4 <USBD_CtlError>
        break;
 800a6d8:	e01e      	b.n	800a718 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	885b      	ldrh	r3, [r3, #2]
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d119      	bne.n	800a716 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800a6e2:	7bbb      	ldrb	r3, [r7, #14]
 800a6e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d004      	beq.n	800a6f6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a6ec:	7bbb      	ldrb	r3, [r7, #14]
 800a6ee:	4619      	mov	r1, r3
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f001 f95a 	bl	800b9aa <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f000 fcb7 	bl	800b06a <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	6839      	ldr	r1, [r7, #0]
 800a706:	6878      	ldr	r0, [r7, #4]
 800a708:	4798      	blx	r3
        }
        break;
 800a70a:	e004      	b.n	800a716 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800a70c:	6839      	ldr	r1, [r7, #0]
 800a70e:	6878      	ldr	r0, [r7, #4]
 800a710:	f000 fbe0 	bl	800aed4 <USBD_CtlError>
        break;
 800a714:	e000      	b.n	800a718 <USBD_StdEPReq+0x13c>
        break;
 800a716:	bf00      	nop
      }
      break;
 800a718:	e0aa      	b.n	800a870 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a720:	2b02      	cmp	r3, #2
 800a722:	d002      	beq.n	800a72a <USBD_StdEPReq+0x14e>
 800a724:	2b03      	cmp	r3, #3
 800a726:	d032      	beq.n	800a78e <USBD_StdEPReq+0x1b2>
 800a728:	e097      	b.n	800a85a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a72a:	7bbb      	ldrb	r3, [r7, #14]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d007      	beq.n	800a740 <USBD_StdEPReq+0x164>
 800a730:	7bbb      	ldrb	r3, [r7, #14]
 800a732:	2b80      	cmp	r3, #128	; 0x80
 800a734:	d004      	beq.n	800a740 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800a736:	6839      	ldr	r1, [r7, #0]
 800a738:	6878      	ldr	r0, [r7, #4]
 800a73a:	f000 fbcb 	bl	800aed4 <USBD_CtlError>
          break;
 800a73e:	e091      	b.n	800a864 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a740:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a744:	2b00      	cmp	r3, #0
 800a746:	da0b      	bge.n	800a760 <USBD_StdEPReq+0x184>
 800a748:	7bbb      	ldrb	r3, [r7, #14]
 800a74a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a74e:	4613      	mov	r3, r2
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	4413      	add	r3, r2
 800a754:	009b      	lsls	r3, r3, #2
 800a756:	3310      	adds	r3, #16
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	4413      	add	r3, r2
 800a75c:	3304      	adds	r3, #4
 800a75e:	e00b      	b.n	800a778 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800a760:	7bbb      	ldrb	r3, [r7, #14]
 800a762:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a766:	4613      	mov	r3, r2
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	4413      	add	r3, r2
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	4413      	add	r3, r2
 800a776:	3304      	adds	r3, #4
 800a778:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800a77a:	68bb      	ldr	r3, [r7, #8]
 800a77c:	2200      	movs	r2, #0
 800a77e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	2202      	movs	r2, #2
 800a784:	4619      	mov	r1, r3
 800a786:	6878      	ldr	r0, [r7, #4]
 800a788:	f000 fc15 	bl	800afb6 <USBD_CtlSendData>
        break;
 800a78c:	e06a      	b.n	800a864 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800a78e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a792:	2b00      	cmp	r3, #0
 800a794:	da11      	bge.n	800a7ba <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a796:	7bbb      	ldrb	r3, [r7, #14]
 800a798:	f003 020f 	and.w	r2, r3, #15
 800a79c:	6879      	ldr	r1, [r7, #4]
 800a79e:	4613      	mov	r3, r2
 800a7a0:	009b      	lsls	r3, r3, #2
 800a7a2:	4413      	add	r3, r2
 800a7a4:	009b      	lsls	r3, r3, #2
 800a7a6:	440b      	add	r3, r1
 800a7a8:	3324      	adds	r3, #36	; 0x24
 800a7aa:	881b      	ldrh	r3, [r3, #0]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d117      	bne.n	800a7e0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800a7b0:	6839      	ldr	r1, [r7, #0]
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 fb8e 	bl	800aed4 <USBD_CtlError>
            break;
 800a7b8:	e054      	b.n	800a864 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a7ba:	7bbb      	ldrb	r3, [r7, #14]
 800a7bc:	f003 020f 	and.w	r2, r3, #15
 800a7c0:	6879      	ldr	r1, [r7, #4]
 800a7c2:	4613      	mov	r3, r2
 800a7c4:	009b      	lsls	r3, r3, #2
 800a7c6:	4413      	add	r3, r2
 800a7c8:	009b      	lsls	r3, r3, #2
 800a7ca:	440b      	add	r3, r1
 800a7cc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a7d0:	881b      	ldrh	r3, [r3, #0]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d104      	bne.n	800a7e0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800a7d6:	6839      	ldr	r1, [r7, #0]
 800a7d8:	6878      	ldr	r0, [r7, #4]
 800a7da:	f000 fb7b 	bl	800aed4 <USBD_CtlError>
            break;
 800a7de:	e041      	b.n	800a864 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a7e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	da0b      	bge.n	800a800 <USBD_StdEPReq+0x224>
 800a7e8:	7bbb      	ldrb	r3, [r7, #14]
 800a7ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	4413      	add	r3, r2
 800a7f4:	009b      	lsls	r3, r3, #2
 800a7f6:	3310      	adds	r3, #16
 800a7f8:	687a      	ldr	r2, [r7, #4]
 800a7fa:	4413      	add	r3, r2
 800a7fc:	3304      	adds	r3, #4
 800a7fe:	e00b      	b.n	800a818 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800a800:	7bbb      	ldrb	r3, [r7, #14]
 800a802:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a806:	4613      	mov	r3, r2
 800a808:	009b      	lsls	r3, r3, #2
 800a80a:	4413      	add	r3, r2
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	4413      	add	r3, r2
 800a816:	3304      	adds	r3, #4
 800a818:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a81a:	7bbb      	ldrb	r3, [r7, #14]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d002      	beq.n	800a826 <USBD_StdEPReq+0x24a>
 800a820:	7bbb      	ldrb	r3, [r7, #14]
 800a822:	2b80      	cmp	r3, #128	; 0x80
 800a824:	d103      	bne.n	800a82e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800a826:	68bb      	ldr	r3, [r7, #8]
 800a828:	2200      	movs	r2, #0
 800a82a:	601a      	str	r2, [r3, #0]
 800a82c:	e00e      	b.n	800a84c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a82e:	7bbb      	ldrb	r3, [r7, #14]
 800a830:	4619      	mov	r1, r3
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f001 f8d8 	bl	800b9e8 <USBD_LL_IsStallEP>
 800a838:	4603      	mov	r3, r0
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d003      	beq.n	800a846 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	2201      	movs	r2, #1
 800a842:	601a      	str	r2, [r3, #0]
 800a844:	e002      	b.n	800a84c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800a846:	68bb      	ldr	r3, [r7, #8]
 800a848:	2200      	movs	r2, #0
 800a84a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	2202      	movs	r2, #2
 800a850:	4619      	mov	r1, r3
 800a852:	6878      	ldr	r0, [r7, #4]
 800a854:	f000 fbaf 	bl	800afb6 <USBD_CtlSendData>
          break;
 800a858:	e004      	b.n	800a864 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800a85a:	6839      	ldr	r1, [r7, #0]
 800a85c:	6878      	ldr	r0, [r7, #4]
 800a85e:	f000 fb39 	bl	800aed4 <USBD_CtlError>
        break;
 800a862:	bf00      	nop
      }
      break;
 800a864:	e004      	b.n	800a870 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800a866:	6839      	ldr	r1, [r7, #0]
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f000 fb33 	bl	800aed4 <USBD_CtlError>
      break;
 800a86e:	bf00      	nop
    }
    break;
 800a870:	e004      	b.n	800a87c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800a872:	6839      	ldr	r1, [r7, #0]
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 fb2d 	bl	800aed4 <USBD_CtlError>
    break;
 800a87a:	bf00      	nop
  }

  return ret;
 800a87c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
	...

0800a888 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b084      	sub	sp, #16
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a892:	2300      	movs	r3, #0
 800a894:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800a896:	2300      	movs	r3, #0
 800a898:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800a89a:	2300      	movs	r3, #0
 800a89c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800a89e:	683b      	ldr	r3, [r7, #0]
 800a8a0:	885b      	ldrh	r3, [r3, #2]
 800a8a2:	0a1b      	lsrs	r3, r3, #8
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	3b01      	subs	r3, #1
 800a8a8:	2b06      	cmp	r3, #6
 800a8aa:	f200 8128 	bhi.w	800aafe <USBD_GetDescriptor+0x276>
 800a8ae:	a201      	add	r2, pc, #4	; (adr r2, 800a8b4 <USBD_GetDescriptor+0x2c>)
 800a8b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8b4:	0800a8d1 	.word	0x0800a8d1
 800a8b8:	0800a8e9 	.word	0x0800a8e9
 800a8bc:	0800a929 	.word	0x0800a929
 800a8c0:	0800aaff 	.word	0x0800aaff
 800a8c4:	0800aaff 	.word	0x0800aaff
 800a8c8:	0800aa9f 	.word	0x0800aa9f
 800a8cc:	0800aacb 	.word	0x0800aacb
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	687a      	ldr	r2, [r7, #4]
 800a8da:	7c12      	ldrb	r2, [r2, #16]
 800a8dc:	f107 0108 	add.w	r1, r7, #8
 800a8e0:	4610      	mov	r0, r2
 800a8e2:	4798      	blx	r3
 800a8e4:	60f8      	str	r0, [r7, #12]
    break;
 800a8e6:	e112      	b.n	800ab0e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	7c1b      	ldrb	r3, [r3, #16]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d10d      	bne.n	800a90c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8f8:	f107 0208 	add.w	r2, r7, #8
 800a8fc:	4610      	mov	r0, r2
 800a8fe:	4798      	blx	r3
 800a900:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	3301      	adds	r3, #1
 800a906:	2202      	movs	r2, #2
 800a908:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800a90a:	e100      	b.n	800ab0e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a914:	f107 0208 	add.w	r2, r7, #8
 800a918:	4610      	mov	r0, r2
 800a91a:	4798      	blx	r3
 800a91c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	3301      	adds	r3, #1
 800a922:	2202      	movs	r2, #2
 800a924:	701a      	strb	r2, [r3, #0]
    break;
 800a926:	e0f2      	b.n	800ab0e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	885b      	ldrh	r3, [r3, #2]
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	2b05      	cmp	r3, #5
 800a930:	f200 80ac 	bhi.w	800aa8c <USBD_GetDescriptor+0x204>
 800a934:	a201      	add	r2, pc, #4	; (adr r2, 800a93c <USBD_GetDescriptor+0xb4>)
 800a936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a93a:	bf00      	nop
 800a93c:	0800a955 	.word	0x0800a955
 800a940:	0800a989 	.word	0x0800a989
 800a944:	0800a9bd 	.word	0x0800a9bd
 800a948:	0800a9f1 	.word	0x0800a9f1
 800a94c:	0800aa25 	.word	0x0800aa25
 800a950:	0800aa59 	.word	0x0800aa59
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d00b      	beq.n	800a978 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a966:	685b      	ldr	r3, [r3, #4]
 800a968:	687a      	ldr	r2, [r7, #4]
 800a96a:	7c12      	ldrb	r2, [r2, #16]
 800a96c:	f107 0108 	add.w	r1, r7, #8
 800a970:	4610      	mov	r0, r2
 800a972:	4798      	blx	r3
 800a974:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a976:	e091      	b.n	800aa9c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a978:	6839      	ldr	r1, [r7, #0]
 800a97a:	6878      	ldr	r0, [r7, #4]
 800a97c:	f000 faaa 	bl	800aed4 <USBD_CtlError>
        err++;
 800a980:	7afb      	ldrb	r3, [r7, #11]
 800a982:	3301      	adds	r3, #1
 800a984:	72fb      	strb	r3, [r7, #11]
      break;
 800a986:	e089      	b.n	800aa9c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a98e:	689b      	ldr	r3, [r3, #8]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d00b      	beq.n	800a9ac <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a99a:	689b      	ldr	r3, [r3, #8]
 800a99c:	687a      	ldr	r2, [r7, #4]
 800a99e:	7c12      	ldrb	r2, [r2, #16]
 800a9a0:	f107 0108 	add.w	r1, r7, #8
 800a9a4:	4610      	mov	r0, r2
 800a9a6:	4798      	blx	r3
 800a9a8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a9aa:	e077      	b.n	800aa9c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a9ac:	6839      	ldr	r1, [r7, #0]
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 fa90 	bl	800aed4 <USBD_CtlError>
        err++;
 800a9b4:	7afb      	ldrb	r3, [r7, #11]
 800a9b6:	3301      	adds	r3, #1
 800a9b8:	72fb      	strb	r3, [r7, #11]
      break;
 800a9ba:	e06f      	b.n	800aa9c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d00b      	beq.n	800a9e0 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9ce:	68db      	ldr	r3, [r3, #12]
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	7c12      	ldrb	r2, [r2, #16]
 800a9d4:	f107 0108 	add.w	r1, r7, #8
 800a9d8:	4610      	mov	r0, r2
 800a9da:	4798      	blx	r3
 800a9dc:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a9de:	e05d      	b.n	800aa9c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800a9e0:	6839      	ldr	r1, [r7, #0]
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 fa76 	bl	800aed4 <USBD_CtlError>
        err++;
 800a9e8:	7afb      	ldrb	r3, [r7, #11]
 800a9ea:	3301      	adds	r3, #1
 800a9ec:	72fb      	strb	r3, [r7, #11]
      break;
 800a9ee:	e055      	b.n	800aa9c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800a9f6:	691b      	ldr	r3, [r3, #16]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d00b      	beq.n	800aa14 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa02:	691b      	ldr	r3, [r3, #16]
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	7c12      	ldrb	r2, [r2, #16]
 800aa08:	f107 0108 	add.w	r1, r7, #8
 800aa0c:	4610      	mov	r0, r2
 800aa0e:	4798      	blx	r3
 800aa10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa12:	e043      	b.n	800aa9c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800aa14:	6839      	ldr	r1, [r7, #0]
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f000 fa5c 	bl	800aed4 <USBD_CtlError>
        err++;
 800aa1c:	7afb      	ldrb	r3, [r7, #11]
 800aa1e:	3301      	adds	r3, #1
 800aa20:	72fb      	strb	r3, [r7, #11]
      break;
 800aa22:	e03b      	b.n	800aa9c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa2a:	695b      	ldr	r3, [r3, #20]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d00b      	beq.n	800aa48 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa36:	695b      	ldr	r3, [r3, #20]
 800aa38:	687a      	ldr	r2, [r7, #4]
 800aa3a:	7c12      	ldrb	r2, [r2, #16]
 800aa3c:	f107 0108 	add.w	r1, r7, #8
 800aa40:	4610      	mov	r0, r2
 800aa42:	4798      	blx	r3
 800aa44:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa46:	e029      	b.n	800aa9c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800aa48:	6839      	ldr	r1, [r7, #0]
 800aa4a:	6878      	ldr	r0, [r7, #4]
 800aa4c:	f000 fa42 	bl	800aed4 <USBD_CtlError>
        err++;
 800aa50:	7afb      	ldrb	r3, [r7, #11]
 800aa52:	3301      	adds	r3, #1
 800aa54:	72fb      	strb	r3, [r7, #11]
      break;
 800aa56:	e021      	b.n	800aa9c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa5e:	699b      	ldr	r3, [r3, #24]
 800aa60:	2b00      	cmp	r3, #0
 800aa62:	d00b      	beq.n	800aa7c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa6a:	699b      	ldr	r3, [r3, #24]
 800aa6c:	687a      	ldr	r2, [r7, #4]
 800aa6e:	7c12      	ldrb	r2, [r2, #16]
 800aa70:	f107 0108 	add.w	r1, r7, #8
 800aa74:	4610      	mov	r0, r2
 800aa76:	4798      	blx	r3
 800aa78:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800aa7a:	e00f      	b.n	800aa9c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800aa7c:	6839      	ldr	r1, [r7, #0]
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 fa28 	bl	800aed4 <USBD_CtlError>
        err++;
 800aa84:	7afb      	ldrb	r3, [r7, #11]
 800aa86:	3301      	adds	r3, #1
 800aa88:	72fb      	strb	r3, [r7, #11]
      break;
 800aa8a:	e007      	b.n	800aa9c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800aa8c:	6839      	ldr	r1, [r7, #0]
 800aa8e:	6878      	ldr	r0, [r7, #4]
 800aa90:	f000 fa20 	bl	800aed4 <USBD_CtlError>
      err++;
 800aa94:	7afb      	ldrb	r3, [r7, #11]
 800aa96:	3301      	adds	r3, #1
 800aa98:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800aa9a:	bf00      	nop
    }
    break;
 800aa9c:	e037      	b.n	800ab0e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	7c1b      	ldrb	r3, [r3, #16]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d109      	bne.n	800aaba <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaae:	f107 0208 	add.w	r2, r7, #8
 800aab2:	4610      	mov	r0, r2
 800aab4:	4798      	blx	r3
 800aab6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800aab8:	e029      	b.n	800ab0e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800aaba:	6839      	ldr	r1, [r7, #0]
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	f000 fa09 	bl	800aed4 <USBD_CtlError>
      err++;
 800aac2:	7afb      	ldrb	r3, [r7, #11]
 800aac4:	3301      	adds	r3, #1
 800aac6:	72fb      	strb	r3, [r7, #11]
    break;
 800aac8:	e021      	b.n	800ab0e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	7c1b      	ldrb	r3, [r3, #16]
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d10d      	bne.n	800aaee <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aada:	f107 0208 	add.w	r2, r7, #8
 800aade:	4610      	mov	r0, r2
 800aae0:	4798      	blx	r3
 800aae2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	3301      	adds	r3, #1
 800aae8:	2207      	movs	r2, #7
 800aaea:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800aaec:	e00f      	b.n	800ab0e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800aaee:	6839      	ldr	r1, [r7, #0]
 800aaf0:	6878      	ldr	r0, [r7, #4]
 800aaf2:	f000 f9ef 	bl	800aed4 <USBD_CtlError>
      err++;
 800aaf6:	7afb      	ldrb	r3, [r7, #11]
 800aaf8:	3301      	adds	r3, #1
 800aafa:	72fb      	strb	r3, [r7, #11]
    break;
 800aafc:	e007      	b.n	800ab0e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800aafe:	6839      	ldr	r1, [r7, #0]
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 f9e7 	bl	800aed4 <USBD_CtlError>
    err++;
 800ab06:	7afb      	ldrb	r3, [r7, #11]
 800ab08:	3301      	adds	r3, #1
 800ab0a:	72fb      	strb	r3, [r7, #11]
    break;
 800ab0c:	bf00      	nop
  }

  if (err != 0U)
 800ab0e:	7afb      	ldrb	r3, [r7, #11]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d11e      	bne.n	800ab52 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	88db      	ldrh	r3, [r3, #6]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d016      	beq.n	800ab4a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800ab1c:	893b      	ldrh	r3, [r7, #8]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00e      	beq.n	800ab40 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	88da      	ldrh	r2, [r3, #6]
 800ab26:	893b      	ldrh	r3, [r7, #8]
 800ab28:	4293      	cmp	r3, r2
 800ab2a:	bf28      	it	cs
 800ab2c:	4613      	movcs	r3, r2
 800ab2e:	b29b      	uxth	r3, r3
 800ab30:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800ab32:	893b      	ldrh	r3, [r7, #8]
 800ab34:	461a      	mov	r2, r3
 800ab36:	68f9      	ldr	r1, [r7, #12]
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f000 fa3c 	bl	800afb6 <USBD_CtlSendData>
 800ab3e:	e009      	b.n	800ab54 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800ab40:	6839      	ldr	r1, [r7, #0]
 800ab42:	6878      	ldr	r0, [r7, #4]
 800ab44:	f000 f9c6 	bl	800aed4 <USBD_CtlError>
 800ab48:	e004      	b.n	800ab54 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 fa8d 	bl	800b06a <USBD_CtlSendStatus>
 800ab50:	e000      	b.n	800ab54 <USBD_GetDescriptor+0x2cc>
    return;
 800ab52:	bf00      	nop
    }
  }
}
 800ab54:	3710      	adds	r7, #16
 800ab56:	46bd      	mov	sp, r7
 800ab58:	bd80      	pop	{r7, pc}
 800ab5a:	bf00      	nop

0800ab5c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab5c:	b580      	push	{r7, lr}
 800ab5e:	b084      	sub	sp, #16
 800ab60:	af00      	add	r7, sp, #0
 800ab62:	6078      	str	r0, [r7, #4]
 800ab64:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	889b      	ldrh	r3, [r3, #4]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d130      	bne.n	800abd0 <USBD_SetAddress+0x74>
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	88db      	ldrh	r3, [r3, #6]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d12c      	bne.n	800abd0 <USBD_SetAddress+0x74>
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	885b      	ldrh	r3, [r3, #2]
 800ab7a:	2b7f      	cmp	r3, #127	; 0x7f
 800ab7c:	d828      	bhi.n	800abd0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ab7e:	683b      	ldr	r3, [r7, #0]
 800ab80:	885b      	ldrh	r3, [r3, #2]
 800ab82:	b2db      	uxtb	r3, r3
 800ab84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab88:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab90:	2b03      	cmp	r3, #3
 800ab92:	d104      	bne.n	800ab9e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800ab94:	6839      	ldr	r1, [r7, #0]
 800ab96:	6878      	ldr	r0, [r7, #4]
 800ab98:	f000 f99c 	bl	800aed4 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ab9c:	e01c      	b.n	800abd8 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	7bfa      	ldrb	r2, [r7, #15]
 800aba2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800aba6:	7bfb      	ldrb	r3, [r7, #15]
 800aba8:	4619      	mov	r1, r3
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f000 ff48 	bl	800ba40 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800abb0:	6878      	ldr	r0, [r7, #4]
 800abb2:	f000 fa5a 	bl	800b06a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800abb6:	7bfb      	ldrb	r3, [r7, #15]
 800abb8:	2b00      	cmp	r3, #0
 800abba:	d004      	beq.n	800abc6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	2202      	movs	r2, #2
 800abc0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abc4:	e008      	b.n	800abd8 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	2201      	movs	r2, #1
 800abca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abce:	e003      	b.n	800abd8 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800abd0:	6839      	ldr	r1, [r7, #0]
 800abd2:	6878      	ldr	r0, [r7, #4]
 800abd4:	f000 f97e 	bl	800aed4 <USBD_CtlError>
  }
}
 800abd8:	bf00      	nop
 800abda:	3710      	adds	r7, #16
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd80      	pop	{r7, pc}

0800abe0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b084      	sub	sp, #16
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
 800abe8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800abea:	2300      	movs	r3, #0
 800abec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	885b      	ldrh	r3, [r3, #2]
 800abf2:	b2da      	uxtb	r2, r3
 800abf4:	4b4b      	ldr	r3, [pc, #300]	; (800ad24 <USBD_SetConfig+0x144>)
 800abf6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800abf8:	4b4a      	ldr	r3, [pc, #296]	; (800ad24 <USBD_SetConfig+0x144>)
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d905      	bls.n	800ac0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ac00:	6839      	ldr	r1, [r7, #0]
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 f966 	bl	800aed4 <USBD_CtlError>
    return USBD_FAIL;
 800ac08:	2303      	movs	r3, #3
 800ac0a:	e087      	b.n	800ad1c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac12:	2b02      	cmp	r3, #2
 800ac14:	d002      	beq.n	800ac1c <USBD_SetConfig+0x3c>
 800ac16:	2b03      	cmp	r3, #3
 800ac18:	d025      	beq.n	800ac66 <USBD_SetConfig+0x86>
 800ac1a:	e071      	b.n	800ad00 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800ac1c:	4b41      	ldr	r3, [pc, #260]	; (800ad24 <USBD_SetConfig+0x144>)
 800ac1e:	781b      	ldrb	r3, [r3, #0]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d01c      	beq.n	800ac5e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800ac24:	4b3f      	ldr	r3, [pc, #252]	; (800ad24 <USBD_SetConfig+0x144>)
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	461a      	mov	r2, r3
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800ac2e:	4b3d      	ldr	r3, [pc, #244]	; (800ad24 <USBD_SetConfig+0x144>)
 800ac30:	781b      	ldrb	r3, [r3, #0]
 800ac32:	4619      	mov	r1, r3
 800ac34:	6878      	ldr	r0, [r7, #4]
 800ac36:	f7ff f9a8 	bl	8009f8a <USBD_SetClassConfig>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800ac3e:	7bfb      	ldrb	r3, [r7, #15]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d004      	beq.n	800ac4e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800ac44:	6839      	ldr	r1, [r7, #0]
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 f944 	bl	800aed4 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ac4c:	e065      	b.n	800ad1a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 fa0b 	bl	800b06a <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2203      	movs	r2, #3
 800ac58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800ac5c:	e05d      	b.n	800ad1a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 fa03 	bl	800b06a <USBD_CtlSendStatus>
    break;
 800ac64:	e059      	b.n	800ad1a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800ac66:	4b2f      	ldr	r3, [pc, #188]	; (800ad24 <USBD_SetConfig+0x144>)
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d112      	bne.n	800ac94 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	2202      	movs	r2, #2
 800ac72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800ac76:	4b2b      	ldr	r3, [pc, #172]	; (800ad24 <USBD_SetConfig+0x144>)
 800ac78:	781b      	ldrb	r3, [r3, #0]
 800ac7a:	461a      	mov	r2, r3
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ac80:	4b28      	ldr	r3, [pc, #160]	; (800ad24 <USBD_SetConfig+0x144>)
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	4619      	mov	r1, r3
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f7ff f99b 	bl	8009fc2 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800ac8c:	6878      	ldr	r0, [r7, #4]
 800ac8e:	f000 f9ec 	bl	800b06a <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800ac92:	e042      	b.n	800ad1a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800ac94:	4b23      	ldr	r3, [pc, #140]	; (800ad24 <USBD_SetConfig+0x144>)
 800ac96:	781b      	ldrb	r3, [r3, #0]
 800ac98:	461a      	mov	r2, r3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	685b      	ldr	r3, [r3, #4]
 800ac9e:	429a      	cmp	r2, r3
 800aca0:	d02a      	beq.n	800acf8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	685b      	ldr	r3, [r3, #4]
 800aca6:	b2db      	uxtb	r3, r3
 800aca8:	4619      	mov	r1, r3
 800acaa:	6878      	ldr	r0, [r7, #4]
 800acac:	f7ff f989 	bl	8009fc2 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800acb0:	4b1c      	ldr	r3, [pc, #112]	; (800ad24 <USBD_SetConfig+0x144>)
 800acb2:	781b      	ldrb	r3, [r3, #0]
 800acb4:	461a      	mov	r2, r3
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800acba:	4b1a      	ldr	r3, [pc, #104]	; (800ad24 <USBD_SetConfig+0x144>)
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	4619      	mov	r1, r3
 800acc0:	6878      	ldr	r0, [r7, #4]
 800acc2:	f7ff f962 	bl	8009f8a <USBD_SetClassConfig>
 800acc6:	4603      	mov	r3, r0
 800acc8:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800acca:	7bfb      	ldrb	r3, [r7, #15]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d00f      	beq.n	800acf0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800acd0:	6839      	ldr	r1, [r7, #0]
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f000 f8fe 	bl	800aed4 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	b2db      	uxtb	r3, r3
 800acde:	4619      	mov	r1, r3
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f7ff f96e 	bl	8009fc2 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	2202      	movs	r2, #2
 800acea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800acee:	e014      	b.n	800ad1a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800acf0:	6878      	ldr	r0, [r7, #4]
 800acf2:	f000 f9ba 	bl	800b06a <USBD_CtlSendStatus>
    break;
 800acf6:	e010      	b.n	800ad1a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800acf8:	6878      	ldr	r0, [r7, #4]
 800acfa:	f000 f9b6 	bl	800b06a <USBD_CtlSendStatus>
    break;
 800acfe:	e00c      	b.n	800ad1a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800ad00:	6839      	ldr	r1, [r7, #0]
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f000 f8e6 	bl	800aed4 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ad08:	4b06      	ldr	r3, [pc, #24]	; (800ad24 <USBD_SetConfig+0x144>)
 800ad0a:	781b      	ldrb	r3, [r3, #0]
 800ad0c:	4619      	mov	r1, r3
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f7ff f957 	bl	8009fc2 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800ad14:	2303      	movs	r3, #3
 800ad16:	73fb      	strb	r3, [r7, #15]
    break;
 800ad18:	bf00      	nop
  }

  return ret;
 800ad1a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad1c:	4618      	mov	r0, r3
 800ad1e:	3710      	adds	r7, #16
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bd80      	pop	{r7, pc}
 800ad24:	200003d1 	.word	0x200003d1

0800ad28 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	b082      	sub	sp, #8
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
 800ad30:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	88db      	ldrh	r3, [r3, #6]
 800ad36:	2b01      	cmp	r3, #1
 800ad38:	d004      	beq.n	800ad44 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ad3a:	6839      	ldr	r1, [r7, #0]
 800ad3c:	6878      	ldr	r0, [r7, #4]
 800ad3e:	f000 f8c9 	bl	800aed4 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800ad42:	e021      	b.n	800ad88 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad4a:	2b01      	cmp	r3, #1
 800ad4c:	db17      	blt.n	800ad7e <USBD_GetConfig+0x56>
 800ad4e:	2b02      	cmp	r3, #2
 800ad50:	dd02      	ble.n	800ad58 <USBD_GetConfig+0x30>
 800ad52:	2b03      	cmp	r3, #3
 800ad54:	d00b      	beq.n	800ad6e <USBD_GetConfig+0x46>
 800ad56:	e012      	b.n	800ad7e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	3308      	adds	r3, #8
 800ad62:	2201      	movs	r2, #1
 800ad64:	4619      	mov	r1, r3
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 f925 	bl	800afb6 <USBD_CtlSendData>
      break;
 800ad6c:	e00c      	b.n	800ad88 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	3304      	adds	r3, #4
 800ad72:	2201      	movs	r2, #1
 800ad74:	4619      	mov	r1, r3
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 f91d 	bl	800afb6 <USBD_CtlSendData>
      break;
 800ad7c:	e004      	b.n	800ad88 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800ad7e:	6839      	ldr	r1, [r7, #0]
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f8a7 	bl	800aed4 <USBD_CtlError>
      break;
 800ad86:	bf00      	nop
}
 800ad88:	bf00      	nop
 800ad8a:	3708      	adds	r7, #8
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b082      	sub	sp, #8
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ada0:	3b01      	subs	r3, #1
 800ada2:	2b02      	cmp	r3, #2
 800ada4:	d81e      	bhi.n	800ade4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800ada6:	683b      	ldr	r3, [r7, #0]
 800ada8:	88db      	ldrh	r3, [r3, #6]
 800adaa:	2b02      	cmp	r3, #2
 800adac:	d004      	beq.n	800adb8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800adae:	6839      	ldr	r1, [r7, #0]
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f000 f88f 	bl	800aed4 <USBD_CtlError>
      break;
 800adb6:	e01a      	b.n	800adee <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2201      	movs	r2, #1
 800adbc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d005      	beq.n	800add4 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	68db      	ldr	r3, [r3, #12]
 800adcc:	f043 0202 	orr.w	r2, r3, #2
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	330c      	adds	r3, #12
 800add8:	2202      	movs	r2, #2
 800adda:	4619      	mov	r1, r3
 800addc:	6878      	ldr	r0, [r7, #4]
 800adde:	f000 f8ea 	bl	800afb6 <USBD_CtlSendData>
    break;
 800ade2:	e004      	b.n	800adee <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800ade4:	6839      	ldr	r1, [r7, #0]
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 f874 	bl	800aed4 <USBD_CtlError>
    break;
 800adec:	bf00      	nop
  }
}
 800adee:	bf00      	nop
 800adf0:	3708      	adds	r7, #8
 800adf2:	46bd      	mov	sp, r7
 800adf4:	bd80      	pop	{r7, pc}

0800adf6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adf6:	b580      	push	{r7, lr}
 800adf8:	b082      	sub	sp, #8
 800adfa:	af00      	add	r7, sp, #0
 800adfc:	6078      	str	r0, [r7, #4]
 800adfe:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	885b      	ldrh	r3, [r3, #2]
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d106      	bne.n	800ae16 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ae10:	6878      	ldr	r0, [r7, #4]
 800ae12:	f000 f92a 	bl	800b06a <USBD_CtlSendStatus>
  }
}
 800ae16:	bf00      	nop
 800ae18:	3708      	adds	r7, #8
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}

0800ae1e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b082      	sub	sp, #8
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
 800ae26:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae2e:	3b01      	subs	r3, #1
 800ae30:	2b02      	cmp	r3, #2
 800ae32:	d80b      	bhi.n	800ae4c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ae34:	683b      	ldr	r3, [r7, #0]
 800ae36:	885b      	ldrh	r3, [r3, #2]
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d10c      	bne.n	800ae56 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	2200      	movs	r2, #0
 800ae40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 f910 	bl	800b06a <USBD_CtlSendStatus>
      }
      break;
 800ae4a:	e004      	b.n	800ae56 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800ae4c:	6839      	ldr	r1, [r7, #0]
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f000 f840 	bl	800aed4 <USBD_CtlError>
      break;
 800ae54:	e000      	b.n	800ae58 <USBD_ClrFeature+0x3a>
      break;
 800ae56:	bf00      	nop
  }
}
 800ae58:	bf00      	nop
 800ae5a:	3708      	adds	r7, #8
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	bd80      	pop	{r7, pc}

0800ae60 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	b084      	sub	sp, #16
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
 800ae68:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	781a      	ldrb	r2, [r3, #0]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	3301      	adds	r3, #1
 800ae7a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	781a      	ldrb	r2, [r3, #0]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	3301      	adds	r3, #1
 800ae88:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800ae8a:	68f8      	ldr	r0, [r7, #12]
 800ae8c:	f7ff fad4 	bl	800a438 <SWAPBYTE>
 800ae90:	4603      	mov	r3, r0
 800ae92:	461a      	mov	r2, r3
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	3301      	adds	r3, #1
 800ae9c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	3301      	adds	r3, #1
 800aea2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800aea4:	68f8      	ldr	r0, [r7, #12]
 800aea6:	f7ff fac7 	bl	800a438 <SWAPBYTE>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	461a      	mov	r2, r3
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	3301      	adds	r3, #1
 800aeb6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	3301      	adds	r3, #1
 800aebc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800aebe:	68f8      	ldr	r0, [r7, #12]
 800aec0:	f7ff faba 	bl	800a438 <SWAPBYTE>
 800aec4:	4603      	mov	r3, r0
 800aec6:	461a      	mov	r2, r3
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	80da      	strh	r2, [r3, #6]
}
 800aecc:	bf00      	nop
 800aece:	3710      	adds	r7, #16
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b082      	sub	sp, #8
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800aede:	2180      	movs	r1, #128	; 0x80
 800aee0:	6878      	ldr	r0, [r7, #4]
 800aee2:	f000 fd43 	bl	800b96c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800aee6:	2100      	movs	r1, #0
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f000 fd3f 	bl	800b96c <USBD_LL_StallEP>
}
 800aeee:	bf00      	nop
 800aef0:	3708      	adds	r7, #8
 800aef2:	46bd      	mov	sp, r7
 800aef4:	bd80      	pop	{r7, pc}

0800aef6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800aef6:	b580      	push	{r7, lr}
 800aef8:	b086      	sub	sp, #24
 800aefa:	af00      	add	r7, sp, #0
 800aefc:	60f8      	str	r0, [r7, #12]
 800aefe:	60b9      	str	r1, [r7, #8]
 800af00:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800af02:	2300      	movs	r3, #0
 800af04:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d036      	beq.n	800af7a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800af10:	6938      	ldr	r0, [r7, #16]
 800af12:	f000 f836 	bl	800af82 <USBD_GetLen>
 800af16:	4603      	mov	r3, r0
 800af18:	3301      	adds	r3, #1
 800af1a:	b29b      	uxth	r3, r3
 800af1c:	005b      	lsls	r3, r3, #1
 800af1e:	b29a      	uxth	r2, r3
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800af24:	7dfb      	ldrb	r3, [r7, #23]
 800af26:	68ba      	ldr	r2, [r7, #8]
 800af28:	4413      	add	r3, r2
 800af2a:	687a      	ldr	r2, [r7, #4]
 800af2c:	7812      	ldrb	r2, [r2, #0]
 800af2e:	701a      	strb	r2, [r3, #0]
  idx++;
 800af30:	7dfb      	ldrb	r3, [r7, #23]
 800af32:	3301      	adds	r3, #1
 800af34:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800af36:	7dfb      	ldrb	r3, [r7, #23]
 800af38:	68ba      	ldr	r2, [r7, #8]
 800af3a:	4413      	add	r3, r2
 800af3c:	2203      	movs	r2, #3
 800af3e:	701a      	strb	r2, [r3, #0]
  idx++;
 800af40:	7dfb      	ldrb	r3, [r7, #23]
 800af42:	3301      	adds	r3, #1
 800af44:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800af46:	e013      	b.n	800af70 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800af48:	7dfb      	ldrb	r3, [r7, #23]
 800af4a:	68ba      	ldr	r2, [r7, #8]
 800af4c:	4413      	add	r3, r2
 800af4e:	693a      	ldr	r2, [r7, #16]
 800af50:	7812      	ldrb	r2, [r2, #0]
 800af52:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800af54:	693b      	ldr	r3, [r7, #16]
 800af56:	3301      	adds	r3, #1
 800af58:	613b      	str	r3, [r7, #16]
    idx++;
 800af5a:	7dfb      	ldrb	r3, [r7, #23]
 800af5c:	3301      	adds	r3, #1
 800af5e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800af60:	7dfb      	ldrb	r3, [r7, #23]
 800af62:	68ba      	ldr	r2, [r7, #8]
 800af64:	4413      	add	r3, r2
 800af66:	2200      	movs	r2, #0
 800af68:	701a      	strb	r2, [r3, #0]
    idx++;
 800af6a:	7dfb      	ldrb	r3, [r7, #23]
 800af6c:	3301      	adds	r3, #1
 800af6e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d1e7      	bne.n	800af48 <USBD_GetString+0x52>
 800af78:	e000      	b.n	800af7c <USBD_GetString+0x86>
    return;
 800af7a:	bf00      	nop
  }
}
 800af7c:	3718      	adds	r7, #24
 800af7e:	46bd      	mov	sp, r7
 800af80:	bd80      	pop	{r7, pc}

0800af82 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800af82:	b480      	push	{r7}
 800af84:	b085      	sub	sp, #20
 800af86:	af00      	add	r7, sp, #0
 800af88:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800af8a:	2300      	movs	r3, #0
 800af8c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800af92:	e005      	b.n	800afa0 <USBD_GetLen+0x1e>
  {
    len++;
 800af94:	7bfb      	ldrb	r3, [r7, #15]
 800af96:	3301      	adds	r3, #1
 800af98:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	3301      	adds	r3, #1
 800af9e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800afa0:	68bb      	ldr	r3, [r7, #8]
 800afa2:	781b      	ldrb	r3, [r3, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d1f5      	bne.n	800af94 <USBD_GetLen+0x12>
  }

  return len;
 800afa8:	7bfb      	ldrb	r3, [r7, #15]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3714      	adds	r7, #20
 800afae:	46bd      	mov	sp, r7
 800afb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb4:	4770      	bx	lr

0800afb6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800afb6:	b580      	push	{r7, lr}
 800afb8:	b084      	sub	sp, #16
 800afba:	af00      	add	r7, sp, #0
 800afbc:	60f8      	str	r0, [r7, #12]
 800afbe:	60b9      	str	r1, [r7, #8]
 800afc0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2202      	movs	r2, #2
 800afc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	687a      	ldr	r2, [r7, #4]
 800afd4:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	68ba      	ldr	r2, [r7, #8]
 800afda:	2100      	movs	r1, #0
 800afdc:	68f8      	ldr	r0, [r7, #12]
 800afde:	f000 fd4e 	bl	800ba7e <USBD_LL_Transmit>

  return USBD_OK;
 800afe2:	2300      	movs	r3, #0
}
 800afe4:	4618      	mov	r0, r3
 800afe6:	3710      	adds	r7, #16
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	60f8      	str	r0, [r7, #12]
 800aff4:	60b9      	str	r1, [r7, #8]
 800aff6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	68ba      	ldr	r2, [r7, #8]
 800affc:	2100      	movs	r1, #0
 800affe:	68f8      	ldr	r0, [r7, #12]
 800b000:	f000 fd3d 	bl	800ba7e <USBD_LL_Transmit>

  return USBD_OK;
 800b004:	2300      	movs	r3, #0
}
 800b006:	4618      	mov	r0, r3
 800b008:	3710      	adds	r7, #16
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}

0800b00e <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b00e:	b580      	push	{r7, lr}
 800b010:	b084      	sub	sp, #16
 800b012:	af00      	add	r7, sp, #0
 800b014:	60f8      	str	r0, [r7, #12]
 800b016:	60b9      	str	r1, [r7, #8]
 800b018:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2203      	movs	r2, #3
 800b01e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  pdev->ep_out[0].rem_length = len;
 800b02a:	68fb      	ldr	r3, [r7, #12]
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	68ba      	ldr	r2, [r7, #8]
 800b036:	2100      	movs	r1, #0
 800b038:	68f8      	ldr	r0, [r7, #12]
 800b03a:	f000 fd41 	bl	800bac0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b03e:	2300      	movs	r3, #0
}
 800b040:	4618      	mov	r0, r3
 800b042:	3710      	adds	r7, #16
 800b044:	46bd      	mov	sp, r7
 800b046:	bd80      	pop	{r7, pc}

0800b048 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b084      	sub	sp, #16
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	60b9      	str	r1, [r7, #8]
 800b052:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	68ba      	ldr	r2, [r7, #8]
 800b058:	2100      	movs	r1, #0
 800b05a:	68f8      	ldr	r0, [r7, #12]
 800b05c:	f000 fd30 	bl	800bac0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b060:	2300      	movs	r3, #0
}
 800b062:	4618      	mov	r0, r3
 800b064:	3710      	adds	r7, #16
 800b066:	46bd      	mov	sp, r7
 800b068:	bd80      	pop	{r7, pc}

0800b06a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b06a:	b580      	push	{r7, lr}
 800b06c:	b082      	sub	sp, #8
 800b06e:	af00      	add	r7, sp, #0
 800b070:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2204      	movs	r2, #4
 800b076:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b07a:	2300      	movs	r3, #0
 800b07c:	2200      	movs	r2, #0
 800b07e:	2100      	movs	r1, #0
 800b080:	6878      	ldr	r0, [r7, #4]
 800b082:	f000 fcfc 	bl	800ba7e <USBD_LL_Transmit>

  return USBD_OK;
 800b086:	2300      	movs	r3, #0
}
 800b088:	4618      	mov	r0, r3
 800b08a:	3708      	adds	r7, #8
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bd80      	pop	{r7, pc}

0800b090 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2205      	movs	r2, #5
 800b09c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b0a0:	2300      	movs	r3, #0
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	2100      	movs	r1, #0
 800b0a6:	6878      	ldr	r0, [r7, #4]
 800b0a8:	f000 fd0a 	bl	800bac0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b0ac:	2300      	movs	r3, #0
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3708      	adds	r7, #8
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
	...

0800b0b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b0bc:	2200      	movs	r2, #0
 800b0be:	4918      	ldr	r1, [pc, #96]	; (800b120 <MX_USB_DEVICE_Init+0x68>)
 800b0c0:	4818      	ldr	r0, [pc, #96]	; (800b124 <MX_USB_DEVICE_Init+0x6c>)
 800b0c2:	f7fe fef4 	bl	8009eae <USBD_Init>
 800b0c6:	4603      	mov	r3, r0
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d001      	beq.n	800b0d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b0cc:	f7f6 feb6 	bl	8001e3c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_AUDIO) != USBD_OK)
 800b0d0:	4915      	ldr	r1, [pc, #84]	; (800b128 <MX_USB_DEVICE_Init+0x70>)
 800b0d2:	4814      	ldr	r0, [pc, #80]	; (800b124 <MX_USB_DEVICE_Init+0x6c>)
 800b0d4:	f7fe ff21 	bl	8009f1a <USBD_RegisterClass>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d001      	beq.n	800b0e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b0de:	f7f6 fead 	bl	8001e3c <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceFS, &USBD_AUDIO_fops_FS) != USBD_OK)
 800b0e2:	4912      	ldr	r1, [pc, #72]	; (800b12c <MX_USB_DEVICE_Init+0x74>)
 800b0e4:	480f      	ldr	r0, [pc, #60]	; (800b124 <MX_USB_DEVICE_Init+0x6c>)
 800b0e6:	f7fe fdb9 	bl	8009c5c <USBD_AUDIO_RegisterInterface>
 800b0ea:	4603      	mov	r3, r0
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d001      	beq.n	800b0f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b0f0:	f7f6 fea4 	bl	8001e3c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b0f4:	480b      	ldr	r0, [pc, #44]	; (800b124 <MX_USB_DEVICE_Init+0x6c>)
 800b0f6:	f7fe ff31 	bl	8009f5c <USBD_Start>
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d001      	beq.n	800b104 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b100:	f7f6 fe9c 	bl	8001e3c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
	USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI);
 800b104:	490a      	ldr	r1, [pc, #40]	; (800b130 <MX_USB_DEVICE_Init+0x78>)
 800b106:	4807      	ldr	r0, [pc, #28]	; (800b124 <MX_USB_DEVICE_Init+0x6c>)
 800b108:	f7fe ff07 	bl	8009f1a <USBD_RegisterClass>

	USBD_MIDI_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800b10c:	4909      	ldr	r1, [pc, #36]	; (800b134 <MX_USB_DEVICE_Init+0x7c>)
 800b10e:	4805      	ldr	r0, [pc, #20]	; (800b124 <MX_USB_DEVICE_Init+0x6c>)
 800b110:	f7fe feb6 	bl	8009e80 <USBD_MIDI_RegisterInterface>

	USBD_Start(&hUsbDeviceFS);
 800b114:	4803      	ldr	r0, [pc, #12]	; (800b124 <MX_USB_DEVICE_Init+0x6c>)
 800b116:	f7fe ff21 	bl	8009f5c <USBD_Start>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b11a:	bf00      	nop
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	2000024c 	.word	0x2000024c
 800b124:	200009e4 	.word	0x200009e4
 800b128:	200000dc 	.word	0x200000dc
 800b12c:	20000230 	.word	0x20000230
 800b130:	20000190 	.word	0x20000190
 800b134:	200002ac 	.word	0x200002ac

0800b138 <AUDIO_Init_FS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_FS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 800b138:	b480      	push	{r7}
 800b13a:	b085      	sub	sp, #20
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	60f8      	str	r0, [r7, #12]
 800b140:	60b9      	str	r1, [r7, #8]
 800b142:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 0 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 800b144:	2300      	movs	r3, #0
  /* USER CODE END 0 */
}
 800b146:	4618      	mov	r0, r3
 800b148:	3714      	adds	r7, #20
 800b14a:	46bd      	mov	sp, r7
 800b14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b150:	4770      	bx	lr

0800b152 <AUDIO_DeInit_FS>:
  * @brief  De-Initializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_FS(uint32_t options)
{
 800b152:	b480      	push	{r7}
 800b154:	b083      	sub	sp, #12
 800b156:	af00      	add	r7, sp, #0
 800b158:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 1 */
  UNUSED(options);
  return (USBD_OK);
 800b15a:	2300      	movs	r3, #0
  /* USER CODE END 1 */
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	370c      	adds	r7, #12
 800b160:	46bd      	mov	sp, r7
 800b162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b166:	4770      	bx	lr

0800b168 <AUDIO_AudioCmd_FS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_FS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 800b168:	b480      	push	{r7}
 800b16a:	b085      	sub	sp, #20
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	60f8      	str	r0, [r7, #12]
 800b170:	60b9      	str	r1, [r7, #8]
 800b172:	4613      	mov	r3, r2
 800b174:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  switch(cmd)
 800b176:	79fb      	ldrb	r3, [r7, #7]
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d001      	beq.n	800b180 <AUDIO_AudioCmd_FS+0x18>
 800b17c:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 800b17e:	e000      	b.n	800b182 <AUDIO_AudioCmd_FS+0x1a>
    break;
 800b180:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800b182:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800b184:	4618      	mov	r0, r3
 800b186:	3714      	adds	r7, #20
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <AUDIO_VolumeCtl_FS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_FS(uint8_t vol)
{
 800b190:	b480      	push	{r7}
 800b192:	b083      	sub	sp, #12
 800b194:	af00      	add	r7, sp, #0
 800b196:	4603      	mov	r3, r0
 800b198:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 3 */
  UNUSED(vol);
  return (USBD_OK);
 800b19a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	370c      	adds	r7, #12
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a6:	4770      	bx	lr

0800b1a8 <AUDIO_MuteCtl_FS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_FS(uint8_t cmd)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b083      	sub	sp, #12
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	4603      	mov	r3, r0
 800b1b0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  UNUSED(cmd);
  return (USBD_OK);
 800b1b2:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b1b4:	4618      	mov	r0, r3
 800b1b6:	370c      	adds	r7, #12
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1be:	4770      	bx	lr

0800b1c0 <AUDIO_PeriodicTC_FS>:
  * @brief  AUDIO_PeriodicT_FS
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_FS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 800b1c0:	b480      	push	{r7}
 800b1c2:	b085      	sub	sp, #20
 800b1c4:	af00      	add	r7, sp, #0
 800b1c6:	60f8      	str	r0, [r7, #12]
 800b1c8:	60b9      	str	r1, [r7, #8]
 800b1ca:	4613      	mov	r3, r2
 800b1cc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 800b1ce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3714      	adds	r7, #20
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1da:	4770      	bx	lr

0800b1dc <AUDIO_GetState_FS>:
/**
  * @brief  Gets AUDIO State.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_FS(void)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800b1e0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ea:	4770      	bx	lr

0800b1ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b1ec:	b480      	push	{r7}
 800b1ee:	b083      	sub	sp, #12
 800b1f0:	af00      	add	r7, sp, #0
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	6039      	str	r1, [r7, #0]
 800b1f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b1f8:	683b      	ldr	r3, [r7, #0]
 800b1fa:	2212      	movs	r2, #18
 800b1fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b1fe:	4b03      	ldr	r3, [pc, #12]	; (800b20c <USBD_FS_DeviceDescriptor+0x20>)
}
 800b200:	4618      	mov	r0, r3
 800b202:	370c      	adds	r7, #12
 800b204:	46bd      	mov	sp, r7
 800b206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20a:	4770      	bx	lr
 800b20c:	20000268 	.word	0x20000268

0800b210 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b210:	b480      	push	{r7}
 800b212:	b083      	sub	sp, #12
 800b214:	af00      	add	r7, sp, #0
 800b216:	4603      	mov	r3, r0
 800b218:	6039      	str	r1, [r7, #0]
 800b21a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b21c:	683b      	ldr	r3, [r7, #0]
 800b21e:	2204      	movs	r2, #4
 800b220:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b222:	4b03      	ldr	r3, [pc, #12]	; (800b230 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b224:	4618      	mov	r0, r3
 800b226:	370c      	adds	r7, #12
 800b228:	46bd      	mov	sp, r7
 800b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22e:	4770      	bx	lr
 800b230:	2000027c 	.word	0x2000027c

0800b234 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b082      	sub	sp, #8
 800b238:	af00      	add	r7, sp, #0
 800b23a:	4603      	mov	r3, r0
 800b23c:	6039      	str	r1, [r7, #0]
 800b23e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b240:	79fb      	ldrb	r3, [r7, #7]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d105      	bne.n	800b252 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b246:	683a      	ldr	r2, [r7, #0]
 800b248:	4907      	ldr	r1, [pc, #28]	; (800b268 <USBD_FS_ProductStrDescriptor+0x34>)
 800b24a:	4808      	ldr	r0, [pc, #32]	; (800b26c <USBD_FS_ProductStrDescriptor+0x38>)
 800b24c:	f7ff fe53 	bl	800aef6 <USBD_GetString>
 800b250:	e004      	b.n	800b25c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b252:	683a      	ldr	r2, [r7, #0]
 800b254:	4904      	ldr	r1, [pc, #16]	; (800b268 <USBD_FS_ProductStrDescriptor+0x34>)
 800b256:	4805      	ldr	r0, [pc, #20]	; (800b26c <USBD_FS_ProductStrDescriptor+0x38>)
 800b258:	f7ff fe4d 	bl	800aef6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b25c:	4b02      	ldr	r3, [pc, #8]	; (800b268 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3708      	adds	r7, #8
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop
 800b268:	20000cb4 	.word	0x20000cb4
 800b26c:	0800bf54 	.word	0x0800bf54

0800b270 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b270:	b580      	push	{r7, lr}
 800b272:	b082      	sub	sp, #8
 800b274:	af00      	add	r7, sp, #0
 800b276:	4603      	mov	r3, r0
 800b278:	6039      	str	r1, [r7, #0]
 800b27a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b27c:	683a      	ldr	r2, [r7, #0]
 800b27e:	4904      	ldr	r1, [pc, #16]	; (800b290 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b280:	4804      	ldr	r0, [pc, #16]	; (800b294 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b282:	f7ff fe38 	bl	800aef6 <USBD_GetString>
  return USBD_StrDesc;
 800b286:	4b02      	ldr	r3, [pc, #8]	; (800b290 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b288:	4618      	mov	r0, r3
 800b28a:	3708      	adds	r7, #8
 800b28c:	46bd      	mov	sp, r7
 800b28e:	bd80      	pop	{r7, pc}
 800b290:	20000cb4 	.word	0x20000cb4
 800b294:	0800bf54 	.word	0x0800bf54

0800b298 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b082      	sub	sp, #8
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	4603      	mov	r3, r0
 800b2a0:	6039      	str	r1, [r7, #0]
 800b2a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	221a      	movs	r2, #26
 800b2a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b2aa:	f000 f843 	bl	800b334 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b2ae:	4b02      	ldr	r3, [pc, #8]	; (800b2b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3708      	adds	r7, #8
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}
 800b2b8:	20000280 	.word	0x20000280

0800b2bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b082      	sub	sp, #8
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	4603      	mov	r3, r0
 800b2c4:	6039      	str	r1, [r7, #0]
 800b2c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b2c8:	79fb      	ldrb	r3, [r7, #7]
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d105      	bne.n	800b2da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b2ce:	683a      	ldr	r2, [r7, #0]
 800b2d0:	4907      	ldr	r1, [pc, #28]	; (800b2f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b2d2:	4808      	ldr	r0, [pc, #32]	; (800b2f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b2d4:	f7ff fe0f 	bl	800aef6 <USBD_GetString>
 800b2d8:	e004      	b.n	800b2e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b2da:	683a      	ldr	r2, [r7, #0]
 800b2dc:	4904      	ldr	r1, [pc, #16]	; (800b2f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b2de:	4805      	ldr	r0, [pc, #20]	; (800b2f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b2e0:	f7ff fe09 	bl	800aef6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b2e4:	4b02      	ldr	r3, [pc, #8]	; (800b2f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3708      	adds	r7, #8
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	20000cb4 	.word	0x20000cb4
 800b2f4:	0800bf68 	.word	0x0800bf68

0800b2f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	4603      	mov	r3, r0
 800b300:	6039      	str	r1, [r7, #0]
 800b302:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b304:	79fb      	ldrb	r3, [r7, #7]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d105      	bne.n	800b316 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b30a:	683a      	ldr	r2, [r7, #0]
 800b30c:	4907      	ldr	r1, [pc, #28]	; (800b32c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b30e:	4808      	ldr	r0, [pc, #32]	; (800b330 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b310:	f7ff fdf1 	bl	800aef6 <USBD_GetString>
 800b314:	e004      	b.n	800b320 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b316:	683a      	ldr	r2, [r7, #0]
 800b318:	4904      	ldr	r1, [pc, #16]	; (800b32c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b31a:	4805      	ldr	r0, [pc, #20]	; (800b330 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b31c:	f7ff fdeb 	bl	800aef6 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b320:	4b02      	ldr	r3, [pc, #8]	; (800b32c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b322:	4618      	mov	r0, r3
 800b324:	3708      	adds	r7, #8
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	20000cb4 	.word	0x20000cb4
 800b330:	0800bf80 	.word	0x0800bf80

0800b334 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b084      	sub	sp, #16
 800b338:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b33a:	4b0f      	ldr	r3, [pc, #60]	; (800b378 <Get_SerialNum+0x44>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b340:	4b0e      	ldr	r3, [pc, #56]	; (800b37c <Get_SerialNum+0x48>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b346:	4b0e      	ldr	r3, [pc, #56]	; (800b380 <Get_SerialNum+0x4c>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b34c:	68fa      	ldr	r2, [r7, #12]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	4413      	add	r3, r2
 800b352:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d009      	beq.n	800b36e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b35a:	2208      	movs	r2, #8
 800b35c:	4909      	ldr	r1, [pc, #36]	; (800b384 <Get_SerialNum+0x50>)
 800b35e:	68f8      	ldr	r0, [r7, #12]
 800b360:	f000 f814 	bl	800b38c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b364:	2204      	movs	r2, #4
 800b366:	4908      	ldr	r1, [pc, #32]	; (800b388 <Get_SerialNum+0x54>)
 800b368:	68b8      	ldr	r0, [r7, #8]
 800b36a:	f000 f80f 	bl	800b38c <IntToUnicode>
  }
}
 800b36e:	bf00      	nop
 800b370:	3710      	adds	r7, #16
 800b372:	46bd      	mov	sp, r7
 800b374:	bd80      	pop	{r7, pc}
 800b376:	bf00      	nop
 800b378:	1fff7a10 	.word	0x1fff7a10
 800b37c:	1fff7a14 	.word	0x1fff7a14
 800b380:	1fff7a18 	.word	0x1fff7a18
 800b384:	20000282 	.word	0x20000282
 800b388:	20000292 	.word	0x20000292

0800b38c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b087      	sub	sp, #28
 800b390:	af00      	add	r7, sp, #0
 800b392:	60f8      	str	r0, [r7, #12]
 800b394:	60b9      	str	r1, [r7, #8]
 800b396:	4613      	mov	r3, r2
 800b398:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b39a:	2300      	movs	r3, #0
 800b39c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b39e:	2300      	movs	r3, #0
 800b3a0:	75fb      	strb	r3, [r7, #23]
 800b3a2:	e027      	b.n	800b3f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	0f1b      	lsrs	r3, r3, #28
 800b3a8:	2b09      	cmp	r3, #9
 800b3aa:	d80b      	bhi.n	800b3c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	0f1b      	lsrs	r3, r3, #28
 800b3b0:	b2da      	uxtb	r2, r3
 800b3b2:	7dfb      	ldrb	r3, [r7, #23]
 800b3b4:	005b      	lsls	r3, r3, #1
 800b3b6:	4619      	mov	r1, r3
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	440b      	add	r3, r1
 800b3bc:	3230      	adds	r2, #48	; 0x30
 800b3be:	b2d2      	uxtb	r2, r2
 800b3c0:	701a      	strb	r2, [r3, #0]
 800b3c2:	e00a      	b.n	800b3da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	0f1b      	lsrs	r3, r3, #28
 800b3c8:	b2da      	uxtb	r2, r3
 800b3ca:	7dfb      	ldrb	r3, [r7, #23]
 800b3cc:	005b      	lsls	r3, r3, #1
 800b3ce:	4619      	mov	r1, r3
 800b3d0:	68bb      	ldr	r3, [r7, #8]
 800b3d2:	440b      	add	r3, r1
 800b3d4:	3237      	adds	r2, #55	; 0x37
 800b3d6:	b2d2      	uxtb	r2, r2
 800b3d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	011b      	lsls	r3, r3, #4
 800b3de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b3e0:	7dfb      	ldrb	r3, [r7, #23]
 800b3e2:	005b      	lsls	r3, r3, #1
 800b3e4:	3301      	adds	r3, #1
 800b3e6:	68ba      	ldr	r2, [r7, #8]
 800b3e8:	4413      	add	r3, r2
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b3ee:	7dfb      	ldrb	r3, [r7, #23]
 800b3f0:	3301      	adds	r3, #1
 800b3f2:	75fb      	strb	r3, [r7, #23]
 800b3f4:	7dfa      	ldrb	r2, [r7, #23]
 800b3f6:	79fb      	ldrb	r3, [r7, #7]
 800b3f8:	429a      	cmp	r2, r3
 800b3fa:	d3d3      	bcc.n	800b3a4 <IntToUnicode+0x18>
  }
}
 800b3fc:	bf00      	nop
 800b3fe:	371c      	adds	r7, #28
 800b400:	46bd      	mov	sp, r7
 800b402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b406:	4770      	bx	lr

0800b408 <MIDI_DataRx>:
};

uint8_t flag_sendMidi = 0;

uint16_t MIDI_DataRx(uint8_t *msg, uint16_t length)
{
 800b408:	b580      	push	{r7, lr}
 800b40a:	b084      	sub	sp, #16
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	460b      	mov	r3, r1
 800b412:	807b      	strh	r3, [r7, #2]
  //uint8_t chan = msg[0] & 0x0F;
  uint8_t msgtype = msg[0] & 0xF0;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	781b      	ldrb	r3, [r3, #0]
 800b418:	f023 030f 	bic.w	r3, r3, #15
 800b41c:	73fb      	strb	r3, [r7, #15]
  uint8_t b1 =  msg[2];
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	789b      	ldrb	r3, [r3, #2]
 800b422:	73bb      	strb	r3, [r7, #14]
  uint8_t b2 =  msg[3];
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	78db      	ldrb	r3, [r3, #3]
 800b428:	737b      	strb	r3, [r7, #13]
 // uint16_t b = ((b2 & 0x7F) << 7) | (b1 & 0x7F);
 
  switch (msgtype)
 800b42a:	7bfb      	ldrb	r3, [r7, #15]
 800b42c:	2bb0      	cmp	r3, #176	; 0xb0
 800b42e:	d01c      	beq.n	800b46a <MIDI_DataRx+0x62>
 800b430:	2bb0      	cmp	r3, #176	; 0xb0
 800b432:	dc05      	bgt.n	800b440 <MIDI_DataRx+0x38>
 800b434:	2b90      	cmp	r3, #144	; 0x90
 800b436:	d01a      	beq.n	800b46e <MIDI_DataRx+0x66>
 800b438:	2ba0      	cmp	r3, #160	; 0xa0
 800b43a:	d01a      	beq.n	800b472 <MIDI_DataRx+0x6a>
 800b43c:	2b80      	cmp	r3, #128	; 0x80
	  //key = b1;
	  //velocity = b2;
	  //notepos = key - 8 + transpose;
	  //stop_note(notepos);
	  //HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7); //blink LED
	  break;
 800b43e:	e01f      	b.n	800b480 <MIDI_DataRx+0x78>
  switch (msgtype)
 800b440:	2bd0      	cmp	r3, #208	; 0xd0
 800b442:	d018      	beq.n	800b476 <MIDI_DataRx+0x6e>
 800b444:	2bd0      	cmp	r3, #208	; 0xd0
 800b446:	dc01      	bgt.n	800b44c <MIDI_DataRx+0x44>
 800b448:	2bc0      	cmp	r3, #192	; 0xc0
							break;
					}*/
	  break;
  case 0xC0:
	  //data = b1;
	  break;
 800b44a:	e019      	b.n	800b480 <MIDI_DataRx+0x78>
  switch (msgtype)
 800b44c:	2be0      	cmp	r3, #224	; 0xe0
 800b44e:	d014      	beq.n	800b47a <MIDI_DataRx+0x72>
 800b450:	2bf0      	cmp	r3, #240	; 0xf0
 800b452:	d115      	bne.n	800b480 <MIDI_DataRx+0x78>
  case 0xE0:
	  //data = b2;
	  //		bend = data;
	  break;
  case 0xF0: {
	  if((b1 == 0x7E) && (b2 == 0x7F)) {
 800b454:	7bbb      	ldrb	r3, [r7, #14]
 800b456:	2b7e      	cmp	r3, #126	; 0x7e
 800b458:	d111      	bne.n	800b47e <MIDI_DataRx+0x76>
 800b45a:	7b7b      	ldrb	r3, [r7, #13]
 800b45c:	2b7f      	cmp	r3, #127	; 0x7f
 800b45e:	d10e      	bne.n	800b47e <MIDI_DataRx+0x76>
		  MIDI_DataTx(SysexID, 15);
 800b460:	210f      	movs	r1, #15
 800b462:	480a      	ldr	r0, [pc, #40]	; (800b48c <MIDI_DataRx+0x84>)
 800b464:	f000 f814 	bl	800b490 <MIDI_DataTx>
	  }
	  break;
 800b468:	e009      	b.n	800b47e <MIDI_DataRx+0x76>
	  break;
 800b46a:	bf00      	nop
 800b46c:	e008      	b.n	800b480 <MIDI_DataRx+0x78>
	  break;
 800b46e:	bf00      	nop
 800b470:	e006      	b.n	800b480 <MIDI_DataRx+0x78>
	  break;
 800b472:	bf00      	nop
 800b474:	e004      	b.n	800b480 <MIDI_DataRx+0x78>
	  break;
 800b476:	bf00      	nop
 800b478:	e002      	b.n	800b480 <MIDI_DataRx+0x78>
	  break;
 800b47a:	bf00      	nop
 800b47c:	e000      	b.n	800b480 <MIDI_DataRx+0x78>
	  break;
 800b47e:	bf00      	nop
  }
  }
  return 0;
 800b480:	2300      	movs	r3, #0
}
 800b482:	4618      	mov	r0, r3
 800b484:	3710      	adds	r7, #16
 800b486:	46bd      	mov	sp, r7
 800b488:	bd80      	pop	{r7, pc}
 800b48a:	bf00      	nop
 800b48c:	2000029c 	.word	0x2000029c

0800b490 <MIDI_DataTx>:

uint16_t MIDI_DataTx(uint8_t *msg, uint16_t length)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	460b      	mov	r3, r1
 800b49a:	807b      	strh	r3, [r7, #2]
  uint32_t i = 0;
 800b49c:	2300      	movs	r3, #0
 800b49e:	60fb      	str	r3, [r7, #12]
  while (i < length) {
 800b4a0:	e017      	b.n	800b4d2 <MIDI_DataTx+0x42>
    APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
 800b4a2:	687a      	ldr	r2, [r7, #4]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	441a      	add	r2, r3
 800b4a8:	4b0f      	ldr	r3, [pc, #60]	; (800b4e8 <MIDI_DataTx+0x58>)
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	7811      	ldrb	r1, [r2, #0]
 800b4ae:	4a0f      	ldr	r2, [pc, #60]	; (800b4ec <MIDI_DataTx+0x5c>)
 800b4b0:	54d1      	strb	r1, [r2, r3]
    APP_Rx_ptr_in++;
 800b4b2:	4b0d      	ldr	r3, [pc, #52]	; (800b4e8 <MIDI_DataTx+0x58>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	4a0b      	ldr	r2, [pc, #44]	; (800b4e8 <MIDI_DataTx+0x58>)
 800b4ba:	6013      	str	r3, [r2, #0]
    i++;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	3301      	adds	r3, #1
 800b4c0:	60fb      	str	r3, [r7, #12]
    if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 800b4c2:	4b09      	ldr	r3, [pc, #36]	; (800b4e8 <MIDI_DataTx+0x58>)
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4ca:	d102      	bne.n	800b4d2 <MIDI_DataTx+0x42>
      APP_Rx_ptr_in = 0;
 800b4cc:	4b06      	ldr	r3, [pc, #24]	; (800b4e8 <MIDI_DataTx+0x58>)
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	601a      	str	r2, [r3, #0]
  while (i < length) {
 800b4d2:	887b      	ldrh	r3, [r7, #2]
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d3e3      	bcc.n	800b4a2 <MIDI_DataTx+0x12>
    }
  }
  USBD_MIDI_SendPacket();
 800b4da:	f7fe fc51 	bl	8009d80 <USBD_MIDI_SendPacket>
  return USBD_OK;
 800b4de:	2300      	movs	r3, #0
}
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	3710      	adds	r7, #16
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	200003c4 	.word	0x200003c4
 800b4ec:	200008e4 	.word	0x200008e4

0800b4f0 <MIDI_SendBuffer>:

uint16_t MIDI_SendBuffer(uint8_t *msg, uint16_t length){
 800b4f0:	b480      	push	{r7}
 800b4f2:	b085      	sub	sp, #20
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	460b      	mov	r3, r1
 800b4fa:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800b4fc:	2300      	movs	r3, #0
 800b4fe:	60fb      	str	r3, [r7, #12]
	while (i < length) {
 800b500:	e017      	b.n	800b532 <MIDI_SendBuffer+0x42>
		APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
 800b502:	687a      	ldr	r2, [r7, #4]
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	441a      	add	r2, r3
 800b508:	4b11      	ldr	r3, [pc, #68]	; (800b550 <MIDI_SendBuffer+0x60>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	7811      	ldrb	r1, [r2, #0]
 800b50e:	4a11      	ldr	r2, [pc, #68]	; (800b554 <MIDI_SendBuffer+0x64>)
 800b510:	54d1      	strb	r1, [r2, r3]
		APP_Rx_ptr_in++;
 800b512:	4b0f      	ldr	r3, [pc, #60]	; (800b550 <MIDI_SendBuffer+0x60>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	3301      	adds	r3, #1
 800b518:	4a0d      	ldr	r2, [pc, #52]	; (800b550 <MIDI_SendBuffer+0x60>)
 800b51a:	6013      	str	r3, [r2, #0]
		i++;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	3301      	adds	r3, #1
 800b520:	60fb      	str	r3, [r7, #12]
		if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 800b522:	4b0b      	ldr	r3, [pc, #44]	; (800b550 <MIDI_SendBuffer+0x60>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b52a:	d102      	bne.n	800b532 <MIDI_SendBuffer+0x42>
			APP_Rx_ptr_in = 0;
 800b52c:	4b08      	ldr	r3, [pc, #32]	; (800b550 <MIDI_SendBuffer+0x60>)
 800b52e:	2200      	movs	r2, #0
 800b530:	601a      	str	r2, [r3, #0]
	while (i < length) {
 800b532:	887b      	ldrh	r3, [r7, #2]
 800b534:	68fa      	ldr	r2, [r7, #12]
 800b536:	429a      	cmp	r2, r3
 800b538:	d3e3      	bcc.n	800b502 <MIDI_SendBuffer+0x12>
		}
	}
	flag_sendMidi = 1;
 800b53a:	4b07      	ldr	r3, [pc, #28]	; (800b558 <MIDI_SendBuffer+0x68>)
 800b53c:	2201      	movs	r2, #1
 800b53e:	701a      	strb	r2, [r3, #0]
  return USBD_OK;
 800b540:	2300      	movs	r3, #0
}
 800b542:	4618      	mov	r0, r3
 800b544:	3714      	adds	r7, #20
 800b546:	46bd      	mov	sp, r7
 800b548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b54c:	4770      	bx	lr
 800b54e:	bf00      	nop
 800b550:	200003c4 	.word	0x200003c4
 800b554:	200008e4 	.word	0x200008e4
 800b558:	200003d2 	.word	0x200003d2

0800b55c <MIDI_SendCheck>:

void MIDI_SendCheck(void){
 800b55c:	b580      	push	{r7, lr}
 800b55e:	af00      	add	r7, sp, #0
	if (flag_sendMidi != 0){
 800b560:	4b07      	ldr	r3, [pc, #28]	; (800b580 <MIDI_SendCheck+0x24>)
 800b562:	781b      	ldrb	r3, [r3, #0]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d008      	beq.n	800b57a <MIDI_SendCheck+0x1e>
		if (USB_Tx_State == 0){
 800b568:	4b06      	ldr	r3, [pc, #24]	; (800b584 <MIDI_SendCheck+0x28>)
 800b56a:	781b      	ldrb	r3, [r3, #0]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d104      	bne.n	800b57a <MIDI_SendCheck+0x1e>
			USBD_MIDI_SendPacket();
 800b570:	f7fe fc06 	bl	8009d80 <USBD_MIDI_SendPacket>
			flag_sendMidi = 0;
 800b574:	4b02      	ldr	r3, [pc, #8]	; (800b580 <MIDI_SendCheck+0x24>)
 800b576:	2200      	movs	r2, #0
 800b578:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800b57a:	bf00      	nop
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	200003d2 	.word	0x200003d2
 800b584:	200003d0 	.word	0x200003d0

0800b588 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b08a      	sub	sp, #40	; 0x28
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b590:	f107 0314 	add.w	r3, r7, #20
 800b594:	2200      	movs	r2, #0
 800b596:	601a      	str	r2, [r3, #0]
 800b598:	605a      	str	r2, [r3, #4]
 800b59a:	609a      	str	r2, [r3, #8]
 800b59c:	60da      	str	r2, [r3, #12]
 800b59e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b5a8:	d13a      	bne.n	800b620 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	613b      	str	r3, [r7, #16]
 800b5ae:	4b1e      	ldr	r3, [pc, #120]	; (800b628 <HAL_PCD_MspInit+0xa0>)
 800b5b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5b2:	4a1d      	ldr	r2, [pc, #116]	; (800b628 <HAL_PCD_MspInit+0xa0>)
 800b5b4:	f043 0301 	orr.w	r3, r3, #1
 800b5b8:	6313      	str	r3, [r2, #48]	; 0x30
 800b5ba:	4b1b      	ldr	r3, [pc, #108]	; (800b628 <HAL_PCD_MspInit+0xa0>)
 800b5bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5be:	f003 0301 	and.w	r3, r3, #1
 800b5c2:	613b      	str	r3, [r7, #16]
 800b5c4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b5c6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b5ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b5cc:	2302      	movs	r3, #2
 800b5ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b5d4:	2303      	movs	r3, #3
 800b5d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b5d8:	230a      	movs	r3, #10
 800b5da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b5dc:	f107 0314 	add.w	r3, r7, #20
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	4812      	ldr	r0, [pc, #72]	; (800b62c <HAL_PCD_MspInit+0xa4>)
 800b5e4:	f7f7 fd0a 	bl	8002ffc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b5e8:	4b0f      	ldr	r3, [pc, #60]	; (800b628 <HAL_PCD_MspInit+0xa0>)
 800b5ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5ec:	4a0e      	ldr	r2, [pc, #56]	; (800b628 <HAL_PCD_MspInit+0xa0>)
 800b5ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b5f2:	6353      	str	r3, [r2, #52]	; 0x34
 800b5f4:	2300      	movs	r3, #0
 800b5f6:	60fb      	str	r3, [r7, #12]
 800b5f8:	4b0b      	ldr	r3, [pc, #44]	; (800b628 <HAL_PCD_MspInit+0xa0>)
 800b5fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5fc:	4a0a      	ldr	r2, [pc, #40]	; (800b628 <HAL_PCD_MspInit+0xa0>)
 800b5fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b602:	6453      	str	r3, [r2, #68]	; 0x44
 800b604:	4b08      	ldr	r3, [pc, #32]	; (800b628 <HAL_PCD_MspInit+0xa0>)
 800b606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b608:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b60c:	60fb      	str	r3, [r7, #12]
 800b60e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b610:	2200      	movs	r2, #0
 800b612:	2100      	movs	r1, #0
 800b614:	2043      	movs	r0, #67	; 0x43
 800b616:	f7f7 fb90 	bl	8002d3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b61a:	2043      	movs	r0, #67	; 0x43
 800b61c:	f7f7 fba9 	bl	8002d72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b620:	bf00      	nop
 800b622:	3728      	adds	r7, #40	; 0x28
 800b624:	46bd      	mov	sp, r7
 800b626:	bd80      	pop	{r7, pc}
 800b628:	40023800 	.word	0x40023800
 800b62c:	40020000 	.word	0x40020000

0800b630 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b082      	sub	sp, #8
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800b644:	4619      	mov	r1, r3
 800b646:	4610      	mov	r0, r2
 800b648:	f7fe fcd3 	bl	8009ff2 <USBD_LL_SetupStage>
}
 800b64c:	bf00      	nop
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b082      	sub	sp, #8
 800b658:	af00      	add	r7, sp, #0
 800b65a:	6078      	str	r0, [r7, #4]
 800b65c:	460b      	mov	r3, r1
 800b65e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b666:	78fa      	ldrb	r2, [r7, #3]
 800b668:	6879      	ldr	r1, [r7, #4]
 800b66a:	4613      	mov	r3, r2
 800b66c:	00db      	lsls	r3, r3, #3
 800b66e:	1a9b      	subs	r3, r3, r2
 800b670:	009b      	lsls	r3, r3, #2
 800b672:	440b      	add	r3, r1
 800b674:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	78fb      	ldrb	r3, [r7, #3]
 800b67c:	4619      	mov	r1, r3
 800b67e:	f7fe fd0b 	bl	800a098 <USBD_LL_DataOutStage>
}
 800b682:	bf00      	nop
 800b684:	3708      	adds	r7, #8
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}

0800b68a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b68a:	b580      	push	{r7, lr}
 800b68c:	b082      	sub	sp, #8
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
 800b692:	460b      	mov	r3, r1
 800b694:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800b69c:	78fa      	ldrb	r2, [r7, #3]
 800b69e:	6879      	ldr	r1, [r7, #4]
 800b6a0:	4613      	mov	r3, r2
 800b6a2:	00db      	lsls	r3, r3, #3
 800b6a4:	1a9b      	subs	r3, r3, r2
 800b6a6:	009b      	lsls	r3, r3, #2
 800b6a8:	440b      	add	r3, r1
 800b6aa:	3348      	adds	r3, #72	; 0x48
 800b6ac:	681a      	ldr	r2, [r3, #0]
 800b6ae:	78fb      	ldrb	r3, [r7, #3]
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	f7fe fd54 	bl	800a15e <USBD_LL_DataInStage>
}
 800b6b6:	bf00      	nop
 800b6b8:	3708      	adds	r7, #8
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bd80      	pop	{r7, pc}

0800b6be <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6be:	b580      	push	{r7, lr}
 800b6c0:	b082      	sub	sp, #8
 800b6c2:	af00      	add	r7, sp, #0
 800b6c4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f7fe fe58 	bl	800a382 <USBD_LL_SOF>
}
 800b6d2:	bf00      	nop
 800b6d4:	3708      	adds	r7, #8
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b084      	sub	sp, #16
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b6e2:	2301      	movs	r3, #1
 800b6e4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	68db      	ldr	r3, [r3, #12]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d102      	bne.n	800b6f4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800b6ee:	2300      	movs	r3, #0
 800b6f0:	73fb      	strb	r3, [r7, #15]
 800b6f2:	e008      	b.n	800b706 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	68db      	ldr	r3, [r3, #12]
 800b6f8:	2b02      	cmp	r3, #2
 800b6fa:	d102      	bne.n	800b702 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	73fb      	strb	r3, [r7, #15]
 800b700:	e001      	b.n	800b706 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800b702:	f7f6 fb9b 	bl	8001e3c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b70c:	7bfa      	ldrb	r2, [r7, #15]
 800b70e:	4611      	mov	r1, r2
 800b710:	4618      	mov	r0, r3
 800b712:	f7fe fdfb 	bl	800a30c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7fe fdb4 	bl	800a28a <USBD_LL_Reset>
}
 800b722:	bf00      	nop
 800b724:	3710      	adds	r7, #16
 800b726:	46bd      	mov	sp, r7
 800b728:	bd80      	pop	{r7, pc}
	...

0800b72c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b72c:	b580      	push	{r7, lr}
 800b72e:	b082      	sub	sp, #8
 800b730:	af00      	add	r7, sp, #0
 800b732:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b73a:	4618      	mov	r0, r3
 800b73c:	f7fe fdf6 	bl	800a32c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	687a      	ldr	r2, [r7, #4]
 800b74c:	6812      	ldr	r2, [r2, #0]
 800b74e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b752:	f043 0301 	orr.w	r3, r3, #1
 800b756:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	6a1b      	ldr	r3, [r3, #32]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d005      	beq.n	800b76c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b760:	4b04      	ldr	r3, [pc, #16]	; (800b774 <HAL_PCD_SuspendCallback+0x48>)
 800b762:	691b      	ldr	r3, [r3, #16]
 800b764:	4a03      	ldr	r2, [pc, #12]	; (800b774 <HAL_PCD_SuspendCallback+0x48>)
 800b766:	f043 0306 	orr.w	r3, r3, #6
 800b76a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b76c:	bf00      	nop
 800b76e:	3708      	adds	r7, #8
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	e000ed00 	.word	0xe000ed00

0800b778 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b786:	4618      	mov	r0, r3
 800b788:	f7fe fde5 	bl	800a356 <USBD_LL_Resume>
}
 800b78c:	bf00      	nop
 800b78e:	3708      	adds	r7, #8
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b082      	sub	sp, #8
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
 800b79c:	460b      	mov	r3, r1
 800b79e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b7a6:	78fa      	ldrb	r2, [r7, #3]
 800b7a8:	4611      	mov	r1, r2
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	f7fe fe10 	bl	800a3d0 <USBD_LL_IsoOUTIncomplete>
}
 800b7b0:	bf00      	nop
 800b7b2:	3708      	adds	r7, #8
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}

0800b7b8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7b8:	b580      	push	{r7, lr}
 800b7ba:	b082      	sub	sp, #8
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
 800b7c0:	460b      	mov	r3, r1
 800b7c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b7ca:	78fa      	ldrb	r2, [r7, #3]
 800b7cc:	4611      	mov	r1, r2
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f7fe fdf1 	bl	800a3b6 <USBD_LL_IsoINIncomplete>
}
 800b7d4:	bf00      	nop
 800b7d6:	3708      	adds	r7, #8
 800b7d8:	46bd      	mov	sp, r7
 800b7da:	bd80      	pop	{r7, pc}

0800b7dc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7dc:	b580      	push	{r7, lr}
 800b7de:	b082      	sub	sp, #8
 800b7e0:	af00      	add	r7, sp, #0
 800b7e2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	f7fe fdfd 	bl	800a3ea <USBD_LL_DevConnected>
}
 800b7f0:	bf00      	nop
 800b7f2:	3708      	adds	r7, #8
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800b806:	4618      	mov	r0, r3
 800b808:	f7fe fdfa 	bl	800a400 <USBD_LL_DevDisconnected>
}
 800b80c:	bf00      	nop
 800b80e:	3708      	adds	r7, #8
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b082      	sub	sp, #8
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	781b      	ldrb	r3, [r3, #0]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d13c      	bne.n	800b89e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b824:	4a20      	ldr	r2, [pc, #128]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	4a1e      	ldr	r2, [pc, #120]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b830:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b834:	4b1c      	ldr	r3, [pc, #112]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b836:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b83a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b83c:	4b1a      	ldr	r3, [pc, #104]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b83e:	2204      	movs	r2, #4
 800b840:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b842:	4b19      	ldr	r3, [pc, #100]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b844:	2202      	movs	r2, #2
 800b846:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b848:	4b17      	ldr	r3, [pc, #92]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b84a:	2200      	movs	r2, #0
 800b84c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b84e:	4b16      	ldr	r3, [pc, #88]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b850:	2202      	movs	r2, #2
 800b852:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b854:	4b14      	ldr	r3, [pc, #80]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b856:	2200      	movs	r2, #0
 800b858:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b85a:	4b13      	ldr	r3, [pc, #76]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b85c:	2200      	movs	r2, #0
 800b85e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b860:	4b11      	ldr	r3, [pc, #68]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b862:	2200      	movs	r2, #0
 800b864:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b866:	4b10      	ldr	r3, [pc, #64]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b868:	2200      	movs	r2, #0
 800b86a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b86c:	4b0e      	ldr	r3, [pc, #56]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b86e:	2200      	movs	r2, #0
 800b870:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b872:	480d      	ldr	r0, [pc, #52]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b874:	f7f9 fe79 	bl	800556a <HAL_PCD_Init>
 800b878:	4603      	mov	r3, r0
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d001      	beq.n	800b882 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b87e:	f7f6 fadd 	bl	8001e3c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b882:	2180      	movs	r1, #128	; 0x80
 800b884:	4808      	ldr	r0, [pc, #32]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b886:	f7fa ffd6 	bl	8006836 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b88a:	2240      	movs	r2, #64	; 0x40
 800b88c:	2100      	movs	r1, #0
 800b88e:	4806      	ldr	r0, [pc, #24]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b890:	f7fa ff8a 	bl	80067a8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b894:	2280      	movs	r2, #128	; 0x80
 800b896:	2101      	movs	r1, #1
 800b898:	4803      	ldr	r0, [pc, #12]	; (800b8a8 <USBD_LL_Init+0x94>)
 800b89a:	f7fa ff85 	bl	80067a8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b89e:	2300      	movs	r3, #0
}
 800b8a0:	4618      	mov	r0, r3
 800b8a2:	3708      	adds	r7, #8
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}
 800b8a8:	20000eb4 	.word	0x20000eb4

0800b8ac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b084      	sub	sp, #16
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8b4:	2300      	movs	r3, #0
 800b8b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8b8:	2300      	movs	r3, #0
 800b8ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b8c2:	4618      	mov	r0, r3
 800b8c4:	f7f9 ff6e 	bl	80057a4 <HAL_PCD_Start>
 800b8c8:	4603      	mov	r3, r0
 800b8ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8cc:	7bfb      	ldrb	r3, [r7, #15]
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f000 f92a 	bl	800bb28 <USBD_Get_USB_Status>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8da:	4618      	mov	r0, r3
 800b8dc:	3710      	adds	r7, #16
 800b8de:	46bd      	mov	sp, r7
 800b8e0:	bd80      	pop	{r7, pc}

0800b8e2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b8e2:	b580      	push	{r7, lr}
 800b8e4:	b084      	sub	sp, #16
 800b8e6:	af00      	add	r7, sp, #0
 800b8e8:	6078      	str	r0, [r7, #4]
 800b8ea:	4608      	mov	r0, r1
 800b8ec:	4611      	mov	r1, r2
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	70fb      	strb	r3, [r7, #3]
 800b8f4:	460b      	mov	r3, r1
 800b8f6:	70bb      	strb	r3, [r7, #2]
 800b8f8:	4613      	mov	r3, r2
 800b8fa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8fc:	2300      	movs	r3, #0
 800b8fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b900:	2300      	movs	r3, #0
 800b902:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800b90a:	78bb      	ldrb	r3, [r7, #2]
 800b90c:	883a      	ldrh	r2, [r7, #0]
 800b90e:	78f9      	ldrb	r1, [r7, #3]
 800b910:	f7fa fb52 	bl	8005fb8 <HAL_PCD_EP_Open>
 800b914:	4603      	mov	r3, r0
 800b916:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b918:	7bfb      	ldrb	r3, [r7, #15]
 800b91a:	4618      	mov	r0, r3
 800b91c:	f000 f904 	bl	800bb28 <USBD_Get_USB_Status>
 800b920:	4603      	mov	r3, r0
 800b922:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b924:	7bbb      	ldrb	r3, [r7, #14]
}
 800b926:	4618      	mov	r0, r3
 800b928:	3710      	adds	r7, #16
 800b92a:	46bd      	mov	sp, r7
 800b92c:	bd80      	pop	{r7, pc}

0800b92e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b92e:	b580      	push	{r7, lr}
 800b930:	b084      	sub	sp, #16
 800b932:	af00      	add	r7, sp, #0
 800b934:	6078      	str	r0, [r7, #4]
 800b936:	460b      	mov	r3, r1
 800b938:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b93a:	2300      	movs	r3, #0
 800b93c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b93e:	2300      	movs	r3, #0
 800b940:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b948:	78fa      	ldrb	r2, [r7, #3]
 800b94a:	4611      	mov	r1, r2
 800b94c:	4618      	mov	r0, r3
 800b94e:	f7fa fb9b 	bl	8006088 <HAL_PCD_EP_Close>
 800b952:	4603      	mov	r3, r0
 800b954:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b956:	7bfb      	ldrb	r3, [r7, #15]
 800b958:	4618      	mov	r0, r3
 800b95a:	f000 f8e5 	bl	800bb28 <USBD_Get_USB_Status>
 800b95e:	4603      	mov	r3, r0
 800b960:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b962:	7bbb      	ldrb	r3, [r7, #14]
}
 800b964:	4618      	mov	r0, r3
 800b966:	3710      	adds	r7, #16
 800b968:	46bd      	mov	sp, r7
 800b96a:	bd80      	pop	{r7, pc}

0800b96c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	460b      	mov	r3, r1
 800b976:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b978:	2300      	movs	r3, #0
 800b97a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b97c:	2300      	movs	r3, #0
 800b97e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b986:	78fa      	ldrb	r2, [r7, #3]
 800b988:	4611      	mov	r1, r2
 800b98a:	4618      	mov	r0, r3
 800b98c:	f7fa fc73 	bl	8006276 <HAL_PCD_EP_SetStall>
 800b990:	4603      	mov	r3, r0
 800b992:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b994:	7bfb      	ldrb	r3, [r7, #15]
 800b996:	4618      	mov	r0, r3
 800b998:	f000 f8c6 	bl	800bb28 <USBD_Get_USB_Status>
 800b99c:	4603      	mov	r3, r0
 800b99e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	3710      	adds	r7, #16
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}

0800b9aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9aa:	b580      	push	{r7, lr}
 800b9ac:	b084      	sub	sp, #16
 800b9ae:	af00      	add	r7, sp, #0
 800b9b0:	6078      	str	r0, [r7, #4]
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b9c4:	78fa      	ldrb	r2, [r7, #3]
 800b9c6:	4611      	mov	r1, r2
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7fa fcb8 	bl	800633e <HAL_PCD_EP_ClrStall>
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9d2:	7bfb      	ldrb	r3, [r7, #15]
 800b9d4:	4618      	mov	r0, r3
 800b9d6:	f000 f8a7 	bl	800bb28 <USBD_Get_USB_Status>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9de:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3710      	adds	r7, #16
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	bd80      	pop	{r7, pc}

0800b9e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b9e8:	b480      	push	{r7}
 800b9ea:	b085      	sub	sp, #20
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
 800b9f0:	460b      	mov	r3, r1
 800b9f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800b9fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b9fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	da0b      	bge.n	800ba1c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800ba04:	78fb      	ldrb	r3, [r7, #3]
 800ba06:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba0a:	68f9      	ldr	r1, [r7, #12]
 800ba0c:	4613      	mov	r3, r2
 800ba0e:	00db      	lsls	r3, r3, #3
 800ba10:	1a9b      	subs	r3, r3, r2
 800ba12:	009b      	lsls	r3, r3, #2
 800ba14:	440b      	add	r3, r1
 800ba16:	333e      	adds	r3, #62	; 0x3e
 800ba18:	781b      	ldrb	r3, [r3, #0]
 800ba1a:	e00b      	b.n	800ba34 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800ba1c:	78fb      	ldrb	r3, [r7, #3]
 800ba1e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ba22:	68f9      	ldr	r1, [r7, #12]
 800ba24:	4613      	mov	r3, r2
 800ba26:	00db      	lsls	r3, r3, #3
 800ba28:	1a9b      	subs	r3, r3, r2
 800ba2a:	009b      	lsls	r3, r3, #2
 800ba2c:	440b      	add	r3, r1
 800ba2e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ba32:	781b      	ldrb	r3, [r3, #0]
  }
}
 800ba34:	4618      	mov	r0, r3
 800ba36:	3714      	adds	r7, #20
 800ba38:	46bd      	mov	sp, r7
 800ba3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3e:	4770      	bx	lr

0800ba40 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b084      	sub	sp, #16
 800ba44:	af00      	add	r7, sp, #0
 800ba46:	6078      	str	r0, [r7, #4]
 800ba48:	460b      	mov	r3, r1
 800ba4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba50:	2300      	movs	r3, #0
 800ba52:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ba5a:	78fa      	ldrb	r2, [r7, #3]
 800ba5c:	4611      	mov	r1, r2
 800ba5e:	4618      	mov	r0, r3
 800ba60:	f7fa fa85 	bl	8005f6e <HAL_PCD_SetAddress>
 800ba64:	4603      	mov	r3, r0
 800ba66:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba68:	7bfb      	ldrb	r3, [r7, #15]
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	f000 f85c 	bl	800bb28 <USBD_Get_USB_Status>
 800ba70:	4603      	mov	r3, r0
 800ba72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba74:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}

0800ba7e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ba7e:	b580      	push	{r7, lr}
 800ba80:	b086      	sub	sp, #24
 800ba82:	af00      	add	r7, sp, #0
 800ba84:	60f8      	str	r0, [r7, #12]
 800ba86:	607a      	str	r2, [r7, #4]
 800ba88:	603b      	str	r3, [r7, #0]
 800ba8a:	460b      	mov	r3, r1
 800ba8c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba92:	2300      	movs	r3, #0
 800ba94:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ba9c:	7af9      	ldrb	r1, [r7, #11]
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	687a      	ldr	r2, [r7, #4]
 800baa2:	f7fa fb9e 	bl	80061e2 <HAL_PCD_EP_Transmit>
 800baa6:	4603      	mov	r3, r0
 800baa8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baaa:	7dfb      	ldrb	r3, [r7, #23]
 800baac:	4618      	mov	r0, r3
 800baae:	f000 f83b 	bl	800bb28 <USBD_Get_USB_Status>
 800bab2:	4603      	mov	r3, r0
 800bab4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bab6:	7dbb      	ldrb	r3, [r7, #22]
}
 800bab8:	4618      	mov	r0, r3
 800baba:	3718      	adds	r7, #24
 800babc:	46bd      	mov	sp, r7
 800babe:	bd80      	pop	{r7, pc}

0800bac0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b086      	sub	sp, #24
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	607a      	str	r2, [r7, #4]
 800baca:	603b      	str	r3, [r7, #0]
 800bacc:	460b      	mov	r3, r1
 800bace:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bad0:	2300      	movs	r3, #0
 800bad2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bad4:	2300      	movs	r3, #0
 800bad6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800bade:	7af9      	ldrb	r1, [r7, #11]
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	687a      	ldr	r2, [r7, #4]
 800bae4:	f7fa fb1a 	bl	800611c <HAL_PCD_EP_Receive>
 800bae8:	4603      	mov	r3, r0
 800baea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baec:	7dfb      	ldrb	r3, [r7, #23]
 800baee:	4618      	mov	r0, r3
 800baf0:	f000 f81a 	bl	800bb28 <USBD_Get_USB_Status>
 800baf4:	4603      	mov	r3, r0
 800baf6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800baf8:	7dbb      	ldrb	r3, [r7, #22]
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3718      	adds	r7, #24
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}

0800bb02 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bb02:	b580      	push	{r7, lr}
 800bb04:	b082      	sub	sp, #8
 800bb06:	af00      	add	r7, sp, #0
 800bb08:	6078      	str	r0, [r7, #4]
 800bb0a:	460b      	mov	r3, r1
 800bb0c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800bb14:	78fa      	ldrb	r2, [r7, #3]
 800bb16:	4611      	mov	r1, r2
 800bb18:	4618      	mov	r0, r3
 800bb1a:	f7fa fb4a 	bl	80061b2 <HAL_PCD_EP_GetRxCount>
 800bb1e:	4603      	mov	r3, r0
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3708      	adds	r7, #8
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}

0800bb28 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bb28:	b480      	push	{r7}
 800bb2a:	b085      	sub	sp, #20
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	4603      	mov	r3, r0
 800bb30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb32:	2300      	movs	r3, #0
 800bb34:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bb36:	79fb      	ldrb	r3, [r7, #7]
 800bb38:	2b03      	cmp	r3, #3
 800bb3a:	d817      	bhi.n	800bb6c <USBD_Get_USB_Status+0x44>
 800bb3c:	a201      	add	r2, pc, #4	; (adr r2, 800bb44 <USBD_Get_USB_Status+0x1c>)
 800bb3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb42:	bf00      	nop
 800bb44:	0800bb55 	.word	0x0800bb55
 800bb48:	0800bb5b 	.word	0x0800bb5b
 800bb4c:	0800bb61 	.word	0x0800bb61
 800bb50:	0800bb67 	.word	0x0800bb67
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bb54:	2300      	movs	r3, #0
 800bb56:	73fb      	strb	r3, [r7, #15]
    break;
 800bb58:	e00b      	b.n	800bb72 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bb5a:	2303      	movs	r3, #3
 800bb5c:	73fb      	strb	r3, [r7, #15]
    break;
 800bb5e:	e008      	b.n	800bb72 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bb60:	2301      	movs	r3, #1
 800bb62:	73fb      	strb	r3, [r7, #15]
    break;
 800bb64:	e005      	b.n	800bb72 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bb66:	2303      	movs	r3, #3
 800bb68:	73fb      	strb	r3, [r7, #15]
    break;
 800bb6a:	e002      	b.n	800bb72 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bb6c:	2303      	movs	r3, #3
 800bb6e:	73fb      	strb	r3, [r7, #15]
    break;
 800bb70:	bf00      	nop
  }
  return usb_status;
 800bb72:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb74:	4618      	mov	r0, r3
 800bb76:	3714      	adds	r7, #20
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr

0800bb80 <__errno>:
 800bb80:	4b01      	ldr	r3, [pc, #4]	; (800bb88 <__errno+0x8>)
 800bb82:	6818      	ldr	r0, [r3, #0]
 800bb84:	4770      	bx	lr
 800bb86:	bf00      	nop
 800bb88:	200002b4 	.word	0x200002b4

0800bb8c <__libc_init_array>:
 800bb8c:	b570      	push	{r4, r5, r6, lr}
 800bb8e:	4e0d      	ldr	r6, [pc, #52]	; (800bbc4 <__libc_init_array+0x38>)
 800bb90:	4c0d      	ldr	r4, [pc, #52]	; (800bbc8 <__libc_init_array+0x3c>)
 800bb92:	1ba4      	subs	r4, r4, r6
 800bb94:	10a4      	asrs	r4, r4, #2
 800bb96:	2500      	movs	r5, #0
 800bb98:	42a5      	cmp	r5, r4
 800bb9a:	d109      	bne.n	800bbb0 <__libc_init_array+0x24>
 800bb9c:	4e0b      	ldr	r6, [pc, #44]	; (800bbcc <__libc_init_array+0x40>)
 800bb9e:	4c0c      	ldr	r4, [pc, #48]	; (800bbd0 <__libc_init_array+0x44>)
 800bba0:	f000 f8ea 	bl	800bd78 <_init>
 800bba4:	1ba4      	subs	r4, r4, r6
 800bba6:	10a4      	asrs	r4, r4, #2
 800bba8:	2500      	movs	r5, #0
 800bbaa:	42a5      	cmp	r5, r4
 800bbac:	d105      	bne.n	800bbba <__libc_init_array+0x2e>
 800bbae:	bd70      	pop	{r4, r5, r6, pc}
 800bbb0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bbb4:	4798      	blx	r3
 800bbb6:	3501      	adds	r5, #1
 800bbb8:	e7ee      	b.n	800bb98 <__libc_init_array+0xc>
 800bbba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800bbbe:	4798      	blx	r3
 800bbc0:	3501      	adds	r5, #1
 800bbc2:	e7f2      	b.n	800bbaa <__libc_init_array+0x1e>
 800bbc4:	0803fccc 	.word	0x0803fccc
 800bbc8:	0803fccc 	.word	0x0803fccc
 800bbcc:	0803fccc 	.word	0x0803fccc
 800bbd0:	0803fcd0 	.word	0x0803fcd0

0800bbd4 <malloc>:
 800bbd4:	4b02      	ldr	r3, [pc, #8]	; (800bbe0 <malloc+0xc>)
 800bbd6:	4601      	mov	r1, r0
 800bbd8:	6818      	ldr	r0, [r3, #0]
 800bbda:	f000 b861 	b.w	800bca0 <_malloc_r>
 800bbde:	bf00      	nop
 800bbe0:	200002b4 	.word	0x200002b4

0800bbe4 <free>:
 800bbe4:	4b02      	ldr	r3, [pc, #8]	; (800bbf0 <free+0xc>)
 800bbe6:	4601      	mov	r1, r0
 800bbe8:	6818      	ldr	r0, [r3, #0]
 800bbea:	f000 b80b 	b.w	800bc04 <_free_r>
 800bbee:	bf00      	nop
 800bbf0:	200002b4 	.word	0x200002b4

0800bbf4 <memset>:
 800bbf4:	4402      	add	r2, r0
 800bbf6:	4603      	mov	r3, r0
 800bbf8:	4293      	cmp	r3, r2
 800bbfa:	d100      	bne.n	800bbfe <memset+0xa>
 800bbfc:	4770      	bx	lr
 800bbfe:	f803 1b01 	strb.w	r1, [r3], #1
 800bc02:	e7f9      	b.n	800bbf8 <memset+0x4>

0800bc04 <_free_r>:
 800bc04:	b538      	push	{r3, r4, r5, lr}
 800bc06:	4605      	mov	r5, r0
 800bc08:	2900      	cmp	r1, #0
 800bc0a:	d045      	beq.n	800bc98 <_free_r+0x94>
 800bc0c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc10:	1f0c      	subs	r4, r1, #4
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	bfb8      	it	lt
 800bc16:	18e4      	addlt	r4, r4, r3
 800bc18:	f000 f8ac 	bl	800bd74 <__malloc_lock>
 800bc1c:	4a1f      	ldr	r2, [pc, #124]	; (800bc9c <_free_r+0x98>)
 800bc1e:	6813      	ldr	r3, [r2, #0]
 800bc20:	4610      	mov	r0, r2
 800bc22:	b933      	cbnz	r3, 800bc32 <_free_r+0x2e>
 800bc24:	6063      	str	r3, [r4, #4]
 800bc26:	6014      	str	r4, [r2, #0]
 800bc28:	4628      	mov	r0, r5
 800bc2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc2e:	f000 b8a2 	b.w	800bd76 <__malloc_unlock>
 800bc32:	42a3      	cmp	r3, r4
 800bc34:	d90c      	bls.n	800bc50 <_free_r+0x4c>
 800bc36:	6821      	ldr	r1, [r4, #0]
 800bc38:	1862      	adds	r2, r4, r1
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	bf04      	itt	eq
 800bc3e:	681a      	ldreq	r2, [r3, #0]
 800bc40:	685b      	ldreq	r3, [r3, #4]
 800bc42:	6063      	str	r3, [r4, #4]
 800bc44:	bf04      	itt	eq
 800bc46:	1852      	addeq	r2, r2, r1
 800bc48:	6022      	streq	r2, [r4, #0]
 800bc4a:	6004      	str	r4, [r0, #0]
 800bc4c:	e7ec      	b.n	800bc28 <_free_r+0x24>
 800bc4e:	4613      	mov	r3, r2
 800bc50:	685a      	ldr	r2, [r3, #4]
 800bc52:	b10a      	cbz	r2, 800bc58 <_free_r+0x54>
 800bc54:	42a2      	cmp	r2, r4
 800bc56:	d9fa      	bls.n	800bc4e <_free_r+0x4a>
 800bc58:	6819      	ldr	r1, [r3, #0]
 800bc5a:	1858      	adds	r0, r3, r1
 800bc5c:	42a0      	cmp	r0, r4
 800bc5e:	d10b      	bne.n	800bc78 <_free_r+0x74>
 800bc60:	6820      	ldr	r0, [r4, #0]
 800bc62:	4401      	add	r1, r0
 800bc64:	1858      	adds	r0, r3, r1
 800bc66:	4282      	cmp	r2, r0
 800bc68:	6019      	str	r1, [r3, #0]
 800bc6a:	d1dd      	bne.n	800bc28 <_free_r+0x24>
 800bc6c:	6810      	ldr	r0, [r2, #0]
 800bc6e:	6852      	ldr	r2, [r2, #4]
 800bc70:	605a      	str	r2, [r3, #4]
 800bc72:	4401      	add	r1, r0
 800bc74:	6019      	str	r1, [r3, #0]
 800bc76:	e7d7      	b.n	800bc28 <_free_r+0x24>
 800bc78:	d902      	bls.n	800bc80 <_free_r+0x7c>
 800bc7a:	230c      	movs	r3, #12
 800bc7c:	602b      	str	r3, [r5, #0]
 800bc7e:	e7d3      	b.n	800bc28 <_free_r+0x24>
 800bc80:	6820      	ldr	r0, [r4, #0]
 800bc82:	1821      	adds	r1, r4, r0
 800bc84:	428a      	cmp	r2, r1
 800bc86:	bf04      	itt	eq
 800bc88:	6811      	ldreq	r1, [r2, #0]
 800bc8a:	6852      	ldreq	r2, [r2, #4]
 800bc8c:	6062      	str	r2, [r4, #4]
 800bc8e:	bf04      	itt	eq
 800bc90:	1809      	addeq	r1, r1, r0
 800bc92:	6021      	streq	r1, [r4, #0]
 800bc94:	605c      	str	r4, [r3, #4]
 800bc96:	e7c7      	b.n	800bc28 <_free_r+0x24>
 800bc98:	bd38      	pop	{r3, r4, r5, pc}
 800bc9a:	bf00      	nop
 800bc9c:	200003d4 	.word	0x200003d4

0800bca0 <_malloc_r>:
 800bca0:	b570      	push	{r4, r5, r6, lr}
 800bca2:	1ccd      	adds	r5, r1, #3
 800bca4:	f025 0503 	bic.w	r5, r5, #3
 800bca8:	3508      	adds	r5, #8
 800bcaa:	2d0c      	cmp	r5, #12
 800bcac:	bf38      	it	cc
 800bcae:	250c      	movcc	r5, #12
 800bcb0:	2d00      	cmp	r5, #0
 800bcb2:	4606      	mov	r6, r0
 800bcb4:	db01      	blt.n	800bcba <_malloc_r+0x1a>
 800bcb6:	42a9      	cmp	r1, r5
 800bcb8:	d903      	bls.n	800bcc2 <_malloc_r+0x22>
 800bcba:	230c      	movs	r3, #12
 800bcbc:	6033      	str	r3, [r6, #0]
 800bcbe:	2000      	movs	r0, #0
 800bcc0:	bd70      	pop	{r4, r5, r6, pc}
 800bcc2:	f000 f857 	bl	800bd74 <__malloc_lock>
 800bcc6:	4a21      	ldr	r2, [pc, #132]	; (800bd4c <_malloc_r+0xac>)
 800bcc8:	6814      	ldr	r4, [r2, #0]
 800bcca:	4621      	mov	r1, r4
 800bccc:	b991      	cbnz	r1, 800bcf4 <_malloc_r+0x54>
 800bcce:	4c20      	ldr	r4, [pc, #128]	; (800bd50 <_malloc_r+0xb0>)
 800bcd0:	6823      	ldr	r3, [r4, #0]
 800bcd2:	b91b      	cbnz	r3, 800bcdc <_malloc_r+0x3c>
 800bcd4:	4630      	mov	r0, r6
 800bcd6:	f000 f83d 	bl	800bd54 <_sbrk_r>
 800bcda:	6020      	str	r0, [r4, #0]
 800bcdc:	4629      	mov	r1, r5
 800bcde:	4630      	mov	r0, r6
 800bce0:	f000 f838 	bl	800bd54 <_sbrk_r>
 800bce4:	1c43      	adds	r3, r0, #1
 800bce6:	d124      	bne.n	800bd32 <_malloc_r+0x92>
 800bce8:	230c      	movs	r3, #12
 800bcea:	6033      	str	r3, [r6, #0]
 800bcec:	4630      	mov	r0, r6
 800bcee:	f000 f842 	bl	800bd76 <__malloc_unlock>
 800bcf2:	e7e4      	b.n	800bcbe <_malloc_r+0x1e>
 800bcf4:	680b      	ldr	r3, [r1, #0]
 800bcf6:	1b5b      	subs	r3, r3, r5
 800bcf8:	d418      	bmi.n	800bd2c <_malloc_r+0x8c>
 800bcfa:	2b0b      	cmp	r3, #11
 800bcfc:	d90f      	bls.n	800bd1e <_malloc_r+0x7e>
 800bcfe:	600b      	str	r3, [r1, #0]
 800bd00:	50cd      	str	r5, [r1, r3]
 800bd02:	18cc      	adds	r4, r1, r3
 800bd04:	4630      	mov	r0, r6
 800bd06:	f000 f836 	bl	800bd76 <__malloc_unlock>
 800bd0a:	f104 000b 	add.w	r0, r4, #11
 800bd0e:	1d23      	adds	r3, r4, #4
 800bd10:	f020 0007 	bic.w	r0, r0, #7
 800bd14:	1ac3      	subs	r3, r0, r3
 800bd16:	d0d3      	beq.n	800bcc0 <_malloc_r+0x20>
 800bd18:	425a      	negs	r2, r3
 800bd1a:	50e2      	str	r2, [r4, r3]
 800bd1c:	e7d0      	b.n	800bcc0 <_malloc_r+0x20>
 800bd1e:	428c      	cmp	r4, r1
 800bd20:	684b      	ldr	r3, [r1, #4]
 800bd22:	bf16      	itet	ne
 800bd24:	6063      	strne	r3, [r4, #4]
 800bd26:	6013      	streq	r3, [r2, #0]
 800bd28:	460c      	movne	r4, r1
 800bd2a:	e7eb      	b.n	800bd04 <_malloc_r+0x64>
 800bd2c:	460c      	mov	r4, r1
 800bd2e:	6849      	ldr	r1, [r1, #4]
 800bd30:	e7cc      	b.n	800bccc <_malloc_r+0x2c>
 800bd32:	1cc4      	adds	r4, r0, #3
 800bd34:	f024 0403 	bic.w	r4, r4, #3
 800bd38:	42a0      	cmp	r0, r4
 800bd3a:	d005      	beq.n	800bd48 <_malloc_r+0xa8>
 800bd3c:	1a21      	subs	r1, r4, r0
 800bd3e:	4630      	mov	r0, r6
 800bd40:	f000 f808 	bl	800bd54 <_sbrk_r>
 800bd44:	3001      	adds	r0, #1
 800bd46:	d0cf      	beq.n	800bce8 <_malloc_r+0x48>
 800bd48:	6025      	str	r5, [r4, #0]
 800bd4a:	e7db      	b.n	800bd04 <_malloc_r+0x64>
 800bd4c:	200003d4 	.word	0x200003d4
 800bd50:	200003d8 	.word	0x200003d8

0800bd54 <_sbrk_r>:
 800bd54:	b538      	push	{r3, r4, r5, lr}
 800bd56:	4c06      	ldr	r4, [pc, #24]	; (800bd70 <_sbrk_r+0x1c>)
 800bd58:	2300      	movs	r3, #0
 800bd5a:	4605      	mov	r5, r0
 800bd5c:	4608      	mov	r0, r1
 800bd5e:	6023      	str	r3, [r4, #0]
 800bd60:	f7f6 f9f6 	bl	8002150 <_sbrk>
 800bd64:	1c43      	adds	r3, r0, #1
 800bd66:	d102      	bne.n	800bd6e <_sbrk_r+0x1a>
 800bd68:	6823      	ldr	r3, [r4, #0]
 800bd6a:	b103      	cbz	r3, 800bd6e <_sbrk_r+0x1a>
 800bd6c:	602b      	str	r3, [r5, #0]
 800bd6e:	bd38      	pop	{r3, r4, r5, pc}
 800bd70:	200012bc 	.word	0x200012bc

0800bd74 <__malloc_lock>:
 800bd74:	4770      	bx	lr

0800bd76 <__malloc_unlock>:
 800bd76:	4770      	bx	lr

0800bd78 <_init>:
 800bd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd7a:	bf00      	nop
 800bd7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd7e:	bc08      	pop	{r3}
 800bd80:	469e      	mov	lr, r3
 800bd82:	4770      	bx	lr

0800bd84 <_fini>:
 800bd84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd86:	bf00      	nop
 800bd88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bd8a:	bc08      	pop	{r3}
 800bd8c:	469e      	mov	lr, r3
 800bd8e:	4770      	bx	lr
