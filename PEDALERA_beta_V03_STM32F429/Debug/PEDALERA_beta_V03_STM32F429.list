
PEDALERA_beta_V03_STM32F429.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008b34  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dd4  08008ce0  08008ce0  00018ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009ab4  08009ab4  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009ab4  08009ab4  00019ab4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009abc  08009abc  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009abc  08009abc  00019abc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009ac0  08009ac0  00019ac0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009ac4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fd8  200001e8  08009cac  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  200011c0  08009cac  000211c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f0c0  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004220  00000000  00000000  0003f2d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000015a8  00000000  00000000  000434f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013c0  00000000  00000000  00044aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00028400  00000000  00000000  00045e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016232  00000000  00000000  0006e260  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000deca2  00000000  00000000  00084492  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00163134  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000058a8  00000000  00000000  001631b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200001e8 	.word	0x200001e8
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008cc8 	.word	0x08008cc8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200001ec 	.word	0x200001ec
 80001e8:	08008cc8 	.word	0x08008cc8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <makeChord>:

	Parameter: fchord		Number of the chord sent. It was made by setChord() and store in "chordSet[]" vector.

	Returns:	unsigned long	(0xXXXXXX) A 3-byte number that contains the fundamental note in the least significant byte, followed by the 2nd and 3rd notes of the chord.
*/
unsigned long makeChord(unsigned long bnote, uint8_t fchord){
 80004ec:	b480      	push	{r7}
 80004ee:	b085      	sub	sp, #20
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	460b      	mov	r3, r1
 80004f6:	70fb      	strb	r3, [r7, #3]

	unsigned long notes;

	notes = bnote;
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	60fb      	str	r3, [r7, #12]
	notes += (bnote << 8);
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	021b      	lsls	r3, r3, #8
 8000500:	68fa      	ldr	r2, [r7, #12]
 8000502:	4413      	add	r3, r2
 8000504:	60fb      	str	r3, [r7, #12]
	notes += (bnote << 16);
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	041b      	lsls	r3, r3, #16
 800050a:	68fa      	ldr	r2, [r7, #12]
 800050c:	4413      	add	r3, r2
 800050e:	60fb      	str	r3, [r7, #12]


	notes += chordSet[fchord];
 8000510:	78fb      	ldrb	r3, [r7, #3]
 8000512:	4a06      	ldr	r2, [pc, #24]	; (800052c <makeChord+0x40>)
 8000514:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000518:	68fa      	ldr	r2, [r7, #12]
 800051a:	4413      	add	r3, r2
 800051c:	60fb      	str	r3, [r7, #12]


	return notes;
 800051e:	68fb      	ldr	r3, [r7, #12]
}
 8000520:	4618      	mov	r0, r3
 8000522:	3714      	adds	r7, #20
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	20000208 	.word	0x20000208

08000530 <setChord>:

	Parameter: fnote		id of the pressed note.

	Returns:	void
*/
void setChord(uint8_t fnote){
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]

chordSet[fnote] = hex_chord[chord] - hex_chordInv[chordInv];
 800053a:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <setChord+0x34>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	4a0a      	ldr	r2, [pc, #40]	; (8000568 <setChord+0x38>)
 8000540:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000544:	4b09      	ldr	r3, [pc, #36]	; (800056c <setChord+0x3c>)
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	4a09      	ldr	r2, [pc, #36]	; (8000570 <setChord+0x40>)
 800054a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	1a8a      	subs	r2, r1, r2
 8000552:	4908      	ldr	r1, [pc, #32]	; (8000574 <setChord+0x44>)
 8000554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	200006a8 	.word	0x200006a8
 8000568:	08008ed4 	.word	0x08008ed4
 800056c:	200006ac 	.word	0x200006ac
 8000570:	08008ef4 	.word	0x08008ef4
 8000574:	20000208 	.word	0x20000208

08000578 <__turnOnScreen>:
	Parameters: void

	Returns:	void
*/

void __turnOnScreen(void){
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af02      	add	r7, sp, #8

	/////////////CARACTERES ESPECIALES

	SSD1306_DrawPicture_custom(0, 0, 128, 64, bmp_logo_128_64);
 800057e:	4b08      	ldr	r3, [pc, #32]	; (80005a0 <__turnOnScreen+0x28>)
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2340      	movs	r3, #64	; 0x40
 8000584:	2280      	movs	r2, #128	; 0x80
 8000586:	2100      	movs	r1, #0
 8000588:	2000      	movs	r0, #0
 800058a:	f000 fa61 	bl	8000a50 <SSD1306_DrawPicture_custom>
	SSD1306_UpdateScreen();
 800058e:	f001 fb05 	bl	8001b9c <SSD1306_UpdateScreen>
	HAL_Delay(3000);
 8000592:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000596:	f001 fe7d 	bl	8002294 <HAL_Delay>
}
 800059a:	bf00      	nop
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	08008f00 	.word	0x08008f00

080005a4 <__chordScreen>:
	Parameters: void

	Returns:	void
*/

void __chordScreen(void){
 80005a4:	b580      	push	{r7, lr}
 80005a6:	af00      	add	r7, sp, #0
	SSD1306_Fill(0);
 80005a8:	2000      	movs	r0, #0
 80005aa:	f001 fb25 	bl	8001bf8 <SSD1306_Fill>
	SSD1306_GotoXY(10,0);
 80005ae:	2100      	movs	r1, #0
 80005b0:	200a      	movs	r0, #10
 80005b2:	f001 fb99 	bl	8001ce8 <SSD1306_GotoXY>
	SSD1306_Puts("Acorde: ", &Font_7x10, 1);
 80005b6:	2201      	movs	r2, #1
 80005b8:	491f      	ldr	r1, [pc, #124]	; (8000638 <__chordScreen+0x94>)
 80005ba:	4820      	ldr	r0, [pc, #128]	; (800063c <__chordScreen+0x98>)
 80005bc:	f001 fc2a 	bl	8001e14 <SSD1306_Puts>

	SSD1306_Puts( str_chord[chord], &Font_7x10, 1);
 80005c0:	4b1f      	ldr	r3, [pc, #124]	; (8000640 <__chordScreen+0x9c>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	4a1f      	ldr	r2, [pc, #124]	; (8000644 <__chordScreen+0xa0>)
 80005c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005ca:	2201      	movs	r2, #1
 80005cc:	491a      	ldr	r1, [pc, #104]	; (8000638 <__chordScreen+0x94>)
 80005ce:	4618      	mov	r0, r3
 80005d0:	f001 fc20 	bl	8001e14 <SSD1306_Puts>
	SSD1306_GotoXY(10,20);
 80005d4:	2114      	movs	r1, #20
 80005d6:	200a      	movs	r0, #10
 80005d8:	f001 fb86 	bl	8001ce8 <SSD1306_GotoXY>
	SSD1306_Puts("Pos:", &Font_7x10, 1);
 80005dc:	2201      	movs	r2, #1
 80005de:	4916      	ldr	r1, [pc, #88]	; (8000638 <__chordScreen+0x94>)
 80005e0:	4819      	ldr	r0, [pc, #100]	; (8000648 <__chordScreen+0xa4>)
 80005e2:	f001 fc17 	bl	8001e14 <SSD1306_Puts>
	SSD1306_Puts( str_chordInv[chordInv], &Font_7x10, 1);
 80005e6:	4b19      	ldr	r3, [pc, #100]	; (800064c <__chordScreen+0xa8>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	4a19      	ldr	r2, [pc, #100]	; (8000650 <__chordScreen+0xac>)
 80005ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f0:	2201      	movs	r2, #1
 80005f2:	4911      	ldr	r1, [pc, #68]	; (8000638 <__chordScreen+0x94>)
 80005f4:	4618      	mov	r0, r3
 80005f6:	f001 fc0d 	bl	8001e14 <SSD1306_Puts>
	SSD1306_GotoXY(10,40);
 80005fa:	2128      	movs	r1, #40	; 0x28
 80005fc:	200a      	movs	r0, #10
 80005fe:	f001 fb73 	bl	8001ce8 <SSD1306_GotoXY>
	SSD1306_Puts("Grabar acorde", &Font_7x10, 1);
 8000602:	2201      	movs	r2, #1
 8000604:	490c      	ldr	r1, [pc, #48]	; (8000638 <__chordScreen+0x94>)
 8000606:	4813      	ldr	r0, [pc, #76]	; (8000654 <__chordScreen+0xb0>)
 8000608:	f001 fc04 	bl	8001e14 <SSD1306_Puts>

	SSD1306_GotoXY(0, chordSelect_cursor*20);
 800060c:	4b12      	ldr	r3, [pc, #72]	; (8000658 <__chordScreen+0xb4>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	b29b      	uxth	r3, r3
 8000612:	461a      	mov	r2, r3
 8000614:	0092      	lsls	r2, r2, #2
 8000616:	4413      	add	r3, r2
 8000618:	009b      	lsls	r3, r3, #2
 800061a:	b29b      	uxth	r3, r3
 800061c:	4619      	mov	r1, r3
 800061e:	2000      	movs	r0, #0
 8000620:	f001 fb62 	bl	8001ce8 <SSD1306_GotoXY>
	SSD1306_Puts(">", &Font_7x10, 1);
 8000624:	2201      	movs	r2, #1
 8000626:	4904      	ldr	r1, [pc, #16]	; (8000638 <__chordScreen+0x94>)
 8000628:	480c      	ldr	r0, [pc, #48]	; (800065c <__chordScreen+0xb8>)
 800062a:	f001 fbf3 	bl	8001e14 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800062e:	f001 fab5 	bl	8001b9c <SSD1306_UpdateScreen>
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000068 	.word	0x20000068
 800063c:	08008d8c 	.word	0x08008d8c
 8000640:	200006a8 	.word	0x200006a8
 8000644:	20000030 	.word	0x20000030
 8000648:	08008d98 	.word	0x08008d98
 800064c:	200006ac 	.word	0x200006ac
 8000650:	20000050 	.word	0x20000050
 8000654:	08008da0 	.word	0x08008da0
 8000658:	200006a0 	.word	0x200006a0
 800065c:	08008db0 	.word	0x08008db0

08000660 <__mainScreen>:
	Parameters: void

	Returns:	void
*/

void __mainScreen(void){
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0

	extern uint8_t sustainMode;
	extern uint8_t acorde;

  	SSD1306_Fill(0);
 8000664:	2000      	movs	r0, #0
 8000666:	f001 fac7 	bl	8001bf8 <SSD1306_Fill>
	SSD1306_GotoXY(0,0);
 800066a:	2100      	movs	r1, #0
 800066c:	2000      	movs	r0, #0
 800066e:	f001 fb3b 	bl	8001ce8 <SSD1306_GotoXY>
	SSD1306_Puts("Afinacion: ", &Font_7x10, 1);
 8000672:	2201      	movs	r2, #1
 8000674:	4932      	ldr	r1, [pc, #200]	; (8000740 <__mainScreen+0xe0>)
 8000676:	4833      	ldr	r0, [pc, #204]	; (8000744 <__mainScreen+0xe4>)
 8000678:	f001 fbcc 	bl	8001e14 <SSD1306_Puts>
	SSD1306_Puts(str_tunne[firstDoTunning - 48], &Font_7x10, 1);
 800067c:	4b32      	ldr	r3, [pc, #200]	; (8000748 <__mainScreen+0xe8>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	3b30      	subs	r3, #48	; 0x30
 8000682:	4a32      	ldr	r2, [pc, #200]	; (800074c <__mainScreen+0xec>)
 8000684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000688:	2201      	movs	r2, #1
 800068a:	492d      	ldr	r1, [pc, #180]	; (8000740 <__mainScreen+0xe0>)
 800068c:	4618      	mov	r0, r3
 800068e:	f001 fbc1 	bl	8001e14 <SSD1306_Puts>
	SSD1306_GotoXY(0,16);
 8000692:	2110      	movs	r1, #16
 8000694:	2000      	movs	r0, #0
 8000696:	f001 fb27 	bl	8001ce8 <SSD1306_GotoXY>
	SSD1306_Puts("Octava: ", &Font_7x10, 1);
 800069a:	2201      	movs	r2, #1
 800069c:	4928      	ldr	r1, [pc, #160]	; (8000740 <__mainScreen+0xe0>)
 800069e:	482c      	ldr	r0, [pc, #176]	; (8000750 <__mainScreen+0xf0>)
 80006a0:	f001 fbb8 	bl	8001e14 <SSD1306_Puts>
	SSD1306_Puts(str_octava[octava + 1], &Font_7x10, 1);
 80006a4:	4b2b      	ldr	r3, [pc, #172]	; (8000754 <__mainScreen+0xf4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	3301      	adds	r3, #1
 80006aa:	4a2b      	ldr	r2, [pc, #172]	; (8000758 <__mainScreen+0xf8>)
 80006ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006b0:	2201      	movs	r2, #1
 80006b2:	4923      	ldr	r1, [pc, #140]	; (8000740 <__mainScreen+0xe0>)
 80006b4:	4618      	mov	r0, r3
 80006b6:	f001 fbad 	bl	8001e14 <SSD1306_Puts>
	SSD1306_GotoXY(0,31);
 80006ba:	211f      	movs	r1, #31
 80006bc:	2000      	movs	r0, #0
 80006be:	f001 fb13 	bl	8001ce8 <SSD1306_GotoXY>
	SSD1306_Puts("Sustain: ", &Font_7x10, 1);
 80006c2:	2201      	movs	r2, #1
 80006c4:	491e      	ldr	r1, [pc, #120]	; (8000740 <__mainScreen+0xe0>)
 80006c6:	4825      	ldr	r0, [pc, #148]	; (800075c <__mainScreen+0xfc>)
 80006c8:	f001 fba4 	bl	8001e14 <SSD1306_Puts>
	switch (sustainMode){
 80006cc:	4b24      	ldr	r3, [pc, #144]	; (8000760 <__mainScreen+0x100>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	2b01      	cmp	r3, #1
 80006d2:	d009      	beq.n	80006e8 <__mainScreen+0x88>
 80006d4:	2b02      	cmp	r3, #2
 80006d6:	d00d      	beq.n	80006f4 <__mainScreen+0x94>
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d111      	bne.n	8000700 <__mainScreen+0xa0>
		case 0:
			SSD1306_Puts("OFF", &Font_7x10, 1);
 80006dc:	2201      	movs	r2, #1
 80006de:	4918      	ldr	r1, [pc, #96]	; (8000740 <__mainScreen+0xe0>)
 80006e0:	4820      	ldr	r0, [pc, #128]	; (8000764 <__mainScreen+0x104>)
 80006e2:	f001 fb97 	bl	8001e14 <SSD1306_Puts>
		break;
 80006e6:	e00b      	b.n	8000700 <__mainScreen+0xa0>
		case 1:
			SSD1306_Puts("smart", &Font_7x10, 1);
 80006e8:	2201      	movs	r2, #1
 80006ea:	4915      	ldr	r1, [pc, #84]	; (8000740 <__mainScreen+0xe0>)
 80006ec:	481e      	ldr	r0, [pc, #120]	; (8000768 <__mainScreen+0x108>)
 80006ee:	f001 fb91 	bl	8001e14 <SSD1306_Puts>
		break;
 80006f2:	e005      	b.n	8000700 <__mainScreen+0xa0>
		case 2:
			SSD1306_Puts("clasico", &Font_7x10, 1);
 80006f4:	2201      	movs	r2, #1
 80006f6:	4912      	ldr	r1, [pc, #72]	; (8000740 <__mainScreen+0xe0>)
 80006f8:	481c      	ldr	r0, [pc, #112]	; (800076c <__mainScreen+0x10c>)
 80006fa:	f001 fb8b 	bl	8001e14 <SSD1306_Puts>
		break;
 80006fe:	bf00      	nop
	}//end switch.
	SSD1306_GotoXY(0,46);
 8000700:	212e      	movs	r1, #46	; 0x2e
 8000702:	2000      	movs	r0, #0
 8000704:	f001 faf0 	bl	8001ce8 <SSD1306_GotoXY>
	SSD1306_Puts("Acordes: ", &Font_7x10, 1);
 8000708:	2201      	movs	r2, #1
 800070a:	490d      	ldr	r1, [pc, #52]	; (8000740 <__mainScreen+0xe0>)
 800070c:	4818      	ldr	r0, [pc, #96]	; (8000770 <__mainScreen+0x110>)
 800070e:	f001 fb81 	bl	8001e14 <SSD1306_Puts>
	switch (acorde){
 8000712:	4b18      	ldr	r3, [pc, #96]	; (8000774 <__mainScreen+0x114>)
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d002      	beq.n	8000720 <__mainScreen+0xc0>
 800071a:	2b01      	cmp	r3, #1
 800071c:	d006      	beq.n	800072c <__mainScreen+0xcc>
 800071e:	e00b      	b.n	8000738 <__mainScreen+0xd8>
		case 0:
			SSD1306_Puts("OFF", &Font_7x10, 1);
 8000720:	2201      	movs	r2, #1
 8000722:	4907      	ldr	r1, [pc, #28]	; (8000740 <__mainScreen+0xe0>)
 8000724:	480f      	ldr	r0, [pc, #60]	; (8000764 <__mainScreen+0x104>)
 8000726:	f001 fb75 	bl	8001e14 <SSD1306_Puts>
		break;
 800072a:	e005      	b.n	8000738 <__mainScreen+0xd8>
		case 1:
			SSD1306_Puts("ON", &Font_7x10, 1);
 800072c:	2201      	movs	r2, #1
 800072e:	4904      	ldr	r1, [pc, #16]	; (8000740 <__mainScreen+0xe0>)
 8000730:	4811      	ldr	r0, [pc, #68]	; (8000778 <__mainScreen+0x118>)
 8000732:	f001 fb6f 	bl	8001e14 <SSD1306_Puts>
		break;
 8000736:	bf00      	nop
	}//end switch.
	SSD1306_UpdateScreen();
 8000738:	f001 fa30 	bl	8001b9c <SSD1306_UpdateScreen>

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	20000068 	.word	0x20000068
 8000744:	08008db4 	.word	0x08008db4
 8000748:	200006a4 	.word	0x200006a4
 800074c:	20000000 	.word	0x20000000
 8000750:	08008dc0 	.word	0x08008dc0
 8000754:	20000204 	.word	0x20000204
 8000758:	2000005c 	.word	0x2000005c
 800075c:	08008dcc 	.word	0x08008dcc
 8000760:	20000274 	.word	0x20000274
 8000764:	08008dd8 	.word	0x08008dd8
 8000768:	08008ddc 	.word	0x08008ddc
 800076c:	08008de4 	.word	0x08008de4
 8000770:	08008dec 	.word	0x08008dec
 8000774:	20000275 	.word	0x20000275
 8000778:	08008df8 	.word	0x08008df8

0800077c <__tunneScreen>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void __tunneScreen(void){
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0

	SSD1306_Fill(0);
 8000780:	2000      	movs	r0, #0
 8000782:	f001 fa39 	bl	8001bf8 <SSD1306_Fill>
	SSD1306_GotoXY(10,0);
 8000786:	2100      	movs	r1, #0
 8000788:	200a      	movs	r0, #10
 800078a:	f001 faad 	bl	8001ce8 <SSD1306_GotoXY>
	SSD1306_Puts("AFINACION:", &Font_7x10, 1);
 800078e:	2201      	movs	r2, #1
 8000790:	490b      	ldr	r1, [pc, #44]	; (80007c0 <__tunneScreen+0x44>)
 8000792:	480c      	ldr	r0, [pc, #48]	; (80007c4 <__tunneScreen+0x48>)
 8000794:	f001 fb3e 	bl	8001e14 <SSD1306_Puts>
	SSD1306_GotoXY(20,20);
 8000798:	2114      	movs	r1, #20
 800079a:	2014      	movs	r0, #20
 800079c:	f001 faa4 	bl	8001ce8 <SSD1306_GotoXY>
	SSD1306_Puts(str_tunne[firstDoTunning - 48], &Font_7x10, 1);
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <__tunneScreen+0x4c>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	3b30      	subs	r3, #48	; 0x30
 80007a6:	4a09      	ldr	r2, [pc, #36]	; (80007cc <__tunneScreen+0x50>)
 80007a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007ac:	2201      	movs	r2, #1
 80007ae:	4904      	ldr	r1, [pc, #16]	; (80007c0 <__tunneScreen+0x44>)
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 fb2f 	bl	8001e14 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80007b6:	f001 f9f1 	bl	8001b9c <SSD1306_UpdateScreen>
}
 80007ba:	bf00      	nop
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000068 	.word	0x20000068
 80007c4:	08008dfc 	.word	0x08008dfc
 80007c8:	200006a4 	.word	0x200006a4
 80007cc:	20000000 	.word	0x20000000

080007d0 <__on_off_octave>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void __on_off_octave (void){
 80007d0:	b580      	push	{r7, lr}
 80007d2:	af00      	add	r7, sp, #0

	SSD1306_Fill(0);
 80007d4:	2000      	movs	r0, #0
 80007d6:	f001 fa0f 	bl	8001bf8 <SSD1306_Fill>
	SSD1306_GotoXY(10,20);
 80007da:	2114      	movs	r1, #20
 80007dc:	200a      	movs	r0, #10
 80007de:	f001 fa83 	bl	8001ce8 <SSD1306_GotoXY>
	SSD1306_Puts("Octava:  ", &Font_7x10, 1);
 80007e2:	2201      	movs	r2, #1
 80007e4:	4909      	ldr	r1, [pc, #36]	; (800080c <__on_off_octave+0x3c>)
 80007e6:	480a      	ldr	r0, [pc, #40]	; (8000810 <__on_off_octave+0x40>)
 80007e8:	f001 fb14 	bl	8001e14 <SSD1306_Puts>
	SSD1306_Puts(str_octava[octava + 1], &Font_7x10, 1);
 80007ec:	4b09      	ldr	r3, [pc, #36]	; (8000814 <__on_off_octave+0x44>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	3301      	adds	r3, #1
 80007f2:	4a09      	ldr	r2, [pc, #36]	; (8000818 <__on_off_octave+0x48>)
 80007f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007f8:	2201      	movs	r2, #1
 80007fa:	4904      	ldr	r1, [pc, #16]	; (800080c <__on_off_octave+0x3c>)
 80007fc:	4618      	mov	r0, r3
 80007fe:	f001 fb09 	bl	8001e14 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8000802:	f001 f9cb 	bl	8001b9c <SSD1306_UpdateScreen>
}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000068 	.word	0x20000068
 8000810:	08008e20 	.word	0x08008e20
 8000814:	20000204 	.word	0x20000204
 8000818:	2000005c 	.word	0x2000005c

0800081c <__recuest_footkey>:
	Parameter: void

	Returns:	void
*/

void __recuest_footkey (void){
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0

	SSD1306_Fill(0);
 8000820:	2000      	movs	r0, #0
 8000822:	f001 f9e9 	bl	8001bf8 <SSD1306_Fill>
	SSD1306_GotoXY(10,0);
 8000826:	2100      	movs	r1, #0
 8000828:	200a      	movs	r0, #10
 800082a:	f001 fa5d 	bl	8001ce8 <SSD1306_GotoXY>
	SSD1306_Puts("Pulse una tecla para", &Font_7x10, 1);
 800082e:	2201      	movs	r2, #1
 8000830:	4908      	ldr	r1, [pc, #32]	; (8000854 <__recuest_footkey+0x38>)
 8000832:	4809      	ldr	r0, [pc, #36]	; (8000858 <__recuest_footkey+0x3c>)
 8000834:	f001 faee 	bl	8001e14 <SSD1306_Puts>
	SSD1306_GotoXY(10,20);
 8000838:	2114      	movs	r1, #20
 800083a:	200a      	movs	r0, #10
 800083c:	f001 fa54 	bl	8001ce8 <SSD1306_GotoXY>
	SSD1306_Puts("grabar el acorde...", &Font_7x10, 1);
 8000840:	2201      	movs	r2, #1
 8000842:	4904      	ldr	r1, [pc, #16]	; (8000854 <__recuest_footkey+0x38>)
 8000844:	4805      	ldr	r0, [pc, #20]	; (800085c <__recuest_footkey+0x40>)
 8000846:	f001 fae5 	bl	8001e14 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 800084a:	f001 f9a7 	bl	8001b9c <SSD1306_UpdateScreen>
}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20000068 	.word	0x20000068
 8000858:	08008e2c 	.word	0x08008e2c
 800085c:	08008e44 	.word	0x08008e44

08000860 <__pop_up_savedChord>:
	Parameter: void

	Returns:	void
*/

void __pop_up_savedChord (uint8_t fk){
 8000860:	b580      	push	{r7, lr}
 8000862:	b082      	sub	sp, #8
 8000864:	af00      	add	r7, sp, #0
 8000866:	4603      	mov	r3, r0
 8000868:	71fb      	strb	r3, [r7, #7]

	SSD1306_Fill(0);
 800086a:	2000      	movs	r0, #0
 800086c:	f001 f9c4 	bl	8001bf8 <SSD1306_Fill>
	SSD1306_GotoXY(10,0);
 8000870:	2100      	movs	r1, #0
 8000872:	200a      	movs	r0, #10
 8000874:	f001 fa38 	bl	8001ce8 <SSD1306_GotoXY>
	SSD1306_Puts("ACORDE GRABADO EN LA", &Font_7x10, 1);
 8000878:	2201      	movs	r2, #1
 800087a:	490e      	ldr	r1, [pc, #56]	; (80008b4 <__pop_up_savedChord+0x54>)
 800087c:	480e      	ldr	r0, [pc, #56]	; (80008b8 <__pop_up_savedChord+0x58>)
 800087e:	f001 fac9 	bl	8001e14 <SSD1306_Puts>
	SSD1306_GotoXY(10,20);
 8000882:	2114      	movs	r1, #20
 8000884:	200a      	movs	r0, #10
 8000886:	f001 fa2f 	bl	8001ce8 <SSD1306_GotoXY>
	SSD1306_Puts("TECLA ", &Font_7x10, 1);
 800088a:	2201      	movs	r2, #1
 800088c:	4909      	ldr	r1, [pc, #36]	; (80008b4 <__pop_up_savedChord+0x54>)
 800088e:	480b      	ldr	r0, [pc, #44]	; (80008bc <__pop_up_savedChord+0x5c>)
 8000890:	f001 fac0 	bl	8001e14 <SSD1306_Puts>
	SSD1306_Puts(str_tunne[fk], &Font_7x10, 1);
 8000894:	79fb      	ldrb	r3, [r7, #7]
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <__pop_up_savedChord+0x60>)
 8000898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800089c:	2201      	movs	r2, #1
 800089e:	4905      	ldr	r1, [pc, #20]	; (80008b4 <__pop_up_savedChord+0x54>)
 80008a0:	4618      	mov	r0, r3
 80008a2:	f001 fab7 	bl	8001e14 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 80008a6:	f001 f979 	bl	8001b9c <SSD1306_UpdateScreen>
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000068 	.word	0x20000068
 80008b8:	08008e58 	.word	0x08008e58
 80008bc:	08008e70 	.word	0x08008e70
 80008c0:	20000000 	.word	0x20000000

080008c4 <__pop_up_sustain>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void __pop_up_sustain (void){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0

	extern uint8_t sustainMode;

	SSD1306_Fill(0);
 80008c8:	2000      	movs	r0, #0
 80008ca:	f001 f995 	bl	8001bf8 <SSD1306_Fill>
	SSD1306_GotoXY(10,20);
 80008ce:	2114      	movs	r1, #20
 80008d0:	200a      	movs	r0, #10
 80008d2:	f001 fa09 	bl	8001ce8 <SSD1306_GotoXY>
	SSD1306_Puts("Sustain: ", &Font_7x10, 1);
 80008d6:	2201      	movs	r2, #1
 80008d8:	4910      	ldr	r1, [pc, #64]	; (800091c <__pop_up_sustain+0x58>)
 80008da:	4811      	ldr	r0, [pc, #68]	; (8000920 <__pop_up_sustain+0x5c>)
 80008dc:	f001 fa9a 	bl	8001e14 <SSD1306_Puts>
	switch (sustainMode){
 80008e0:	4b10      	ldr	r3, [pc, #64]	; (8000924 <__pop_up_sustain+0x60>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b01      	cmp	r3, #1
 80008e6:	d009      	beq.n	80008fc <__pop_up_sustain+0x38>
 80008e8:	2b02      	cmp	r3, #2
 80008ea:	d00d      	beq.n	8000908 <__pop_up_sustain+0x44>
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d111      	bne.n	8000914 <__pop_up_sustain+0x50>
		case 0:
			SSD1306_Puts("OFF", &Font_7x10, 1);
 80008f0:	2201      	movs	r2, #1
 80008f2:	490a      	ldr	r1, [pc, #40]	; (800091c <__pop_up_sustain+0x58>)
 80008f4:	480c      	ldr	r0, [pc, #48]	; (8000928 <__pop_up_sustain+0x64>)
 80008f6:	f001 fa8d 	bl	8001e14 <SSD1306_Puts>
		break;
 80008fa:	e00b      	b.n	8000914 <__pop_up_sustain+0x50>
		case 1:
			SSD1306_Puts("smart", &Font_7x10, 1);
 80008fc:	2201      	movs	r2, #1
 80008fe:	4907      	ldr	r1, [pc, #28]	; (800091c <__pop_up_sustain+0x58>)
 8000900:	480a      	ldr	r0, [pc, #40]	; (800092c <__pop_up_sustain+0x68>)
 8000902:	f001 fa87 	bl	8001e14 <SSD1306_Puts>
		break;
 8000906:	e005      	b.n	8000914 <__pop_up_sustain+0x50>
		case 2:
			SSD1306_Puts("clasico", &Font_7x10, 1);
 8000908:	2201      	movs	r2, #1
 800090a:	4904      	ldr	r1, [pc, #16]	; (800091c <__pop_up_sustain+0x58>)
 800090c:	4808      	ldr	r0, [pc, #32]	; (8000930 <__pop_up_sustain+0x6c>)
 800090e:	f001 fa81 	bl	8001e14 <SSD1306_Puts>
		break;
 8000912:	bf00      	nop
	}//end switch.
	SSD1306_UpdateScreen();
 8000914:	f001 f942 	bl	8001b9c <SSD1306_UpdateScreen>
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}
 800091c:	20000068 	.word	0x20000068
 8000920:	08008dcc 	.word	0x08008dcc
 8000924:	20000274 	.word	0x20000274
 8000928:	08008dd8 	.word	0x08008dd8
 800092c:	08008ddc 	.word	0x08008ddc
 8000930:	08008de4 	.word	0x08008de4

08000934 <__pop_up_cancel>:
	Parameter: lcd_dir		Is the I2C direcction of LCD display.

	Returns:	void
*/

void __pop_up_cancel (void){
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0

	SSD1306_Fill(0);
 8000938:	2000      	movs	r0, #0
 800093a:	f001 f95d 	bl	8001bf8 <SSD1306_Fill>
	SSD1306_GotoXY(10,20);
 800093e:	2114      	movs	r1, #20
 8000940:	200a      	movs	r0, #10
 8000942:	f001 f9d1 	bl	8001ce8 <SSD1306_GotoXY>
	SSD1306_Puts("ACCION CANCELADA", &Font_7x10, 1);
 8000946:	2201      	movs	r2, #1
 8000948:	4903      	ldr	r1, [pc, #12]	; (8000958 <__pop_up_cancel+0x24>)
 800094a:	4804      	ldr	r0, [pc, #16]	; (800095c <__pop_up_cancel+0x28>)
 800094c:	f001 fa62 	bl	8001e14 <SSD1306_Puts>
	SSD1306_UpdateScreen();
 8000950:	f001 f924 	bl	8001b9c <SSD1306_UpdateScreen>
}
 8000954:	bf00      	nop
 8000956:	bd80      	pop	{r7, pc}
 8000958:	20000068 	.word	0x20000068
 800095c:	08008e78 	.word	0x08008e78

08000960 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000966:	463b      	mov	r3, r7
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800096e:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <MX_DAC_Init+0x60>)
 8000970:	4a14      	ldr	r2, [pc, #80]	; (80009c4 <MX_DAC_Init+0x64>)
 8000972:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000974:	4812      	ldr	r0, [pc, #72]	; (80009c0 <MX_DAC_Init+0x60>)
 8000976:	f001 fdc0 	bl	80024fa <HAL_DAC_Init>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000980:	f001 f846 	bl	8001a10 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000984:	2300      	movs	r3, #0
 8000986:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000988:	2300      	movs	r3, #0
 800098a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800098c:	463b      	mov	r3, r7
 800098e:	2200      	movs	r2, #0
 8000990:	4619      	mov	r1, r3
 8000992:	480b      	ldr	r0, [pc, #44]	; (80009c0 <MX_DAC_Init+0x60>)
 8000994:	f001 fdd3 	bl	800253e <HAL_DAC_ConfigChannel>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800099e:	f001 f837 	bl	8001a10 <Error_Handler>
  }
  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80009a2:	463b      	mov	r3, r7
 80009a4:	2210      	movs	r2, #16
 80009a6:	4619      	mov	r1, r3
 80009a8:	4805      	ldr	r0, [pc, #20]	; (80009c0 <MX_DAC_Init+0x60>)
 80009aa:	f001 fdc8 	bl	800253e <HAL_DAC_ConfigChannel>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80009b4:	f001 f82c 	bl	8001a10 <Error_Handler>
  }

}
 80009b8:	bf00      	nop
 80009ba:	3708      	adds	r7, #8
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}
 80009c0:	200006b4 	.word	0x200006b4
 80009c4:	40007400 	.word	0x40007400

080009c8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08a      	sub	sp, #40	; 0x28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0314 	add.w	r3, r7, #20
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a17      	ldr	r2, [pc, #92]	; (8000a44 <HAL_DAC_MspInit+0x7c>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d127      	bne.n	8000a3a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b16      	ldr	r3, [pc, #88]	; (8000a48 <HAL_DAC_MspInit+0x80>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	4a15      	ldr	r2, [pc, #84]	; (8000a48 <HAL_DAC_MspInit+0x80>)
 80009f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80009f8:	6413      	str	r3, [r2, #64]	; 0x40
 80009fa:	4b13      	ldr	r3, [pc, #76]	; (8000a48 <HAL_DAC_MspInit+0x80>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b0f      	ldr	r3, [pc, #60]	; (8000a48 <HAL_DAC_MspInit+0x80>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <HAL_DAC_MspInit+0x80>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b0c      	ldr	r3, [pc, #48]	; (8000a48 <HAL_DAC_MspInit+0x80>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a22:	2330      	movs	r3, #48	; 0x30
 8000a24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a26:	2303      	movs	r3, #3
 8000a28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	4805      	ldr	r0, [pc, #20]	; (8000a4c <HAL_DAC_MspInit+0x84>)
 8000a36:	f001 fdcf 	bl	80025d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	3728      	adds	r7, #40	; 0x28
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	40007400 	.word	0x40007400
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40020000 	.word	0x40020000

08000a50 <SSD1306_DrawPicture_custom>:
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3C, 0x1F, 0xFE, 0x07, 0xC1, 0xFF, 0xF0,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x1F, 0xFC, 0x0F, 0xC0, 0xFF, 0xF0
};


void SSD1306_DrawPicture_custom(uint8_t x0, uint8_t y0, uint8_t w, uint8_t h, uint8_t picture[]){
 8000a50:	b590      	push	{r4, r7, lr}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4604      	mov	r4, r0
 8000a58:	4608      	mov	r0, r1
 8000a5a:	4611      	mov	r1, r2
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4623      	mov	r3, r4
 8000a60:	71fb      	strb	r3, [r7, #7]
 8000a62:	4603      	mov	r3, r0
 8000a64:	71bb      	strb	r3, [r7, #6]
 8000a66:	460b      	mov	r3, r1
 8000a68:	717b      	strb	r3, [r7, #5]
 8000a6a:	4613      	mov	r3, r2
 8000a6c:	713b      	strb	r3, [r7, #4]
	
	uint8_t lineSizeof = w / 8;
 8000a6e:	797b      	ldrb	r3, [r7, #5]
 8000a70:	08db      	lsrs	r3, r3, #3
 8000a72:	733b      	strb	r3, [r7, #12]
	uint16_t byteToPrint; //datos que corresponden para imprimir.
	uint8_t pos_inline; //que posicion arranco el ultimo for.
	
	for (uint8_t pixel_y = y0; pixel_y < y0 + h; pixel_y++){
 8000a74:	79bb      	ldrb	r3, [r7, #6]
 8000a76:	73fb      	strb	r3, [r7, #15]
 8000a78:	e041      	b.n	8000afe <SSD1306_DrawPicture_custom+0xae>
		for (uint8_t line_byte = 0; line_byte < lineSizeof; line_byte++){
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	73bb      	strb	r3, [r7, #14]
 8000a7e:	e037      	b.n	8000af0 <SSD1306_DrawPicture_custom+0xa0>
			byteToPrint = line_byte+(pixel_y-y0)*lineSizeof;
 8000a80:	7bbb      	ldrb	r3, [r7, #14]
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	7bf9      	ldrb	r1, [r7, #15]
 8000a86:	79bb      	ldrb	r3, [r7, #6]
 8000a88:	1acb      	subs	r3, r1, r3
 8000a8a:	b299      	uxth	r1, r3
 8000a8c:	7b3b      	ldrb	r3, [r7, #12]
 8000a8e:	b29b      	uxth	r3, r3
 8000a90:	fb11 f303 	smulbb	r3, r1, r3
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	4413      	add	r3, r2
 8000a98:	817b      	strh	r3, [r7, #10]
			pos_inline = x0+(line_byte*8);
 8000a9a:	7bbb      	ldrb	r3, [r7, #14]
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	b2da      	uxtb	r2, r3
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	4413      	add	r3, r2
 8000aa4:	727b      	strb	r3, [r7, #9]
			for (uint8_t pixel_x = 0; pixel_x <= 7; pixel_x++){
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	737b      	strb	r3, [r7, #13]
 8000aaa:	e01b      	b.n	8000ae4 <SSD1306_DrawPicture_custom+0x94>
				SSD1306_DrawPixel(pos_inline+pixel_x, pixel_y, (picture[byteToPrint] >> (7-pixel_x)) & 0b1 );
 8000aac:	7a7b      	ldrb	r3, [r7, #9]
 8000aae:	b29a      	uxth	r2, r3
 8000ab0:	7b7b      	ldrb	r3, [r7, #13]
 8000ab2:	b29b      	uxth	r3, r3
 8000ab4:	4413      	add	r3, r2
 8000ab6:	b298      	uxth	r0, r3
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	b299      	uxth	r1, r3
 8000abc:	897b      	ldrh	r3, [r7, #10]
 8000abe:	6a3a      	ldr	r2, [r7, #32]
 8000ac0:	4413      	add	r3, r2
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461a      	mov	r2, r3
 8000ac6:	7b7b      	ldrb	r3, [r7, #13]
 8000ac8:	f1c3 0307 	rsb	r3, r3, #7
 8000acc:	fa42 f303 	asr.w	r3, r2, r3
 8000ad0:	b2db      	uxtb	r3, r3
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	461a      	mov	r2, r3
 8000ada:	f001 f8a5 	bl	8001c28 <SSD1306_DrawPixel>
			for (uint8_t pixel_x = 0; pixel_x <= 7; pixel_x++){
 8000ade:	7b7b      	ldrb	r3, [r7, #13]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	737b      	strb	r3, [r7, #13]
 8000ae4:	7b7b      	ldrb	r3, [r7, #13]
 8000ae6:	2b07      	cmp	r3, #7
 8000ae8:	d9e0      	bls.n	8000aac <SSD1306_DrawPicture_custom+0x5c>
		for (uint8_t line_byte = 0; line_byte < lineSizeof; line_byte++){
 8000aea:	7bbb      	ldrb	r3, [r7, #14]
 8000aec:	3301      	adds	r3, #1
 8000aee:	73bb      	strb	r3, [r7, #14]
 8000af0:	7bba      	ldrb	r2, [r7, #14]
 8000af2:	7b3b      	ldrb	r3, [r7, #12]
 8000af4:	429a      	cmp	r2, r3
 8000af6:	d3c3      	bcc.n	8000a80 <SSD1306_DrawPicture_custom+0x30>
	for (uint8_t pixel_y = y0; pixel_y < y0 + h; pixel_y++){
 8000af8:	7bfb      	ldrb	r3, [r7, #15]
 8000afa:	3301      	adds	r3, #1
 8000afc:	73fb      	strb	r3, [r7, #15]
 8000afe:	7bfa      	ldrb	r2, [r7, #15]
 8000b00:	79b9      	ldrb	r1, [r7, #6]
 8000b02:	793b      	ldrb	r3, [r7, #4]
 8000b04:	440b      	add	r3, r1
 8000b06:	429a      	cmp	r2, r3
 8000b08:	dbb7      	blt.n	8000a7a <SSD1306_DrawPicture_custom+0x2a>
			}
		}
	}
}
 8000b0a:	bf00      	nop
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd90      	pop	{r4, r7, pc}
	...

08000b14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08c      	sub	sp, #48	; 0x30
 8000b18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 031c 	add.w	r3, r7, #28
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]
 8000b28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61bb      	str	r3, [r7, #24]
 8000b2e:	4b57      	ldr	r3, [pc, #348]	; (8000c8c <MX_GPIO_Init+0x178>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	4a56      	ldr	r2, [pc, #344]	; (8000c8c <MX_GPIO_Init+0x178>)
 8000b34:	f043 0310 	orr.w	r3, r3, #16
 8000b38:	6313      	str	r3, [r2, #48]	; 0x30
 8000b3a:	4b54      	ldr	r3, [pc, #336]	; (8000c8c <MX_GPIO_Init+0x178>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	f003 0310 	and.w	r3, r3, #16
 8000b42:	61bb      	str	r3, [r7, #24]
 8000b44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b46:	2300      	movs	r3, #0
 8000b48:	617b      	str	r3, [r7, #20]
 8000b4a:	4b50      	ldr	r3, [pc, #320]	; (8000c8c <MX_GPIO_Init+0x178>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	4a4f      	ldr	r2, [pc, #316]	; (8000c8c <MX_GPIO_Init+0x178>)
 8000b50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b54:	6313      	str	r3, [r2, #48]	; 0x30
 8000b56:	4b4d      	ldr	r3, [pc, #308]	; (8000c8c <MX_GPIO_Init+0x178>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	613b      	str	r3, [r7, #16]
 8000b66:	4b49      	ldr	r3, [pc, #292]	; (8000c8c <MX_GPIO_Init+0x178>)
 8000b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6a:	4a48      	ldr	r2, [pc, #288]	; (8000c8c <MX_GPIO_Init+0x178>)
 8000b6c:	f043 0304 	orr.w	r3, r3, #4
 8000b70:	6313      	str	r3, [r2, #48]	; 0x30
 8000b72:	4b46      	ldr	r3, [pc, #280]	; (8000c8c <MX_GPIO_Init+0x178>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	f003 0304 	and.w	r3, r3, #4
 8000b7a:	613b      	str	r3, [r7, #16]
 8000b7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	4b42      	ldr	r3, [pc, #264]	; (8000c8c <MX_GPIO_Init+0x178>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	4a41      	ldr	r2, [pc, #260]	; (8000c8c <MX_GPIO_Init+0x178>)
 8000b88:	f043 0320 	orr.w	r3, r3, #32
 8000b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b8e:	4b3f      	ldr	r3, [pc, #252]	; (8000c8c <MX_GPIO_Init+0x178>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	f003 0320 	and.w	r3, r3, #32
 8000b96:	60fb      	str	r3, [r7, #12]
 8000b98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	60bb      	str	r3, [r7, #8]
 8000b9e:	4b3b      	ldr	r3, [pc, #236]	; (8000c8c <MX_GPIO_Init+0x178>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	4a3a      	ldr	r2, [pc, #232]	; (8000c8c <MX_GPIO_Init+0x178>)
 8000ba4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8000baa:	4b38      	ldr	r3, [pc, #224]	; (8000c8c <MX_GPIO_Init+0x178>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bb2:	60bb      	str	r3, [r7, #8]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	4b34      	ldr	r3, [pc, #208]	; (8000c8c <MX_GPIO_Init+0x178>)
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	4a33      	ldr	r2, [pc, #204]	; (8000c8c <MX_GPIO_Init+0x178>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc6:	4b31      	ldr	r3, [pc, #196]	; (8000c8c <MX_GPIO_Init+0x178>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <MX_GPIO_Init+0x178>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a2c      	ldr	r2, [pc, #176]	; (8000c8c <MX_GPIO_Init+0x178>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <MX_GPIO_Init+0x178>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin */
  GPIO_InitStruct.Pin = DO_Pin|DO8_Pin|REb_Pin|OCT_G_Pin
 8000bee:	237c      	movs	r3, #124	; 0x7c
 8000bf0:	61fb      	str	r3, [r7, #28]
                          |RE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bfa:	f107 031c 	add.w	r3, r7, #28
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4823      	ldr	r0, [pc, #140]	; (8000c90 <MX_GPIO_Init+0x17c>)
 8000c02:	f001 fce9 	bl	80025d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin PIPin PIPin */
  GPIO_InitStruct.Pin = MIb_Pin|FA_Pin|SUST_PROP_Pin|SOLb_Pin;
 8000c06:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c14:	f107 031c 	add.w	r3, r7, #28
 8000c18:	4619      	mov	r1, r3
 8000c1a:	481e      	ldr	r0, [pc, #120]	; (8000c94 <MX_GPIO_Init+0x180>)
 8000c1c:	f001 fcdc 	bl	80025d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin
                           PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = OCT_M_Pin|MI_Pin|OCT_A_Pin|PRESET0_Pin
 8000c20:	f24e 030f 	movw	r3, #57359	; 0xe00f
 8000c24:	61fb      	str	r3, [r7, #28]
                          |PRESET1_Pin|PRESET2_Pin|PRESET3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c26:	2300      	movs	r3, #0
 8000c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c2e:	f107 031c 	add.w	r3, r7, #28
 8000c32:	4619      	mov	r1, r3
 8000c34:	4818      	ldr	r0, [pc, #96]	; (8000c98 <MX_GPIO_Init+0x184>)
 8000c36:	f001 fccf 	bl	80025d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin PFPin
                           PFPin PFPin PFPin */
  GPIO_InitStruct.Pin = SUST_MIDI_Pin|SOL_Pin|CHORD_Pin|LAb_Pin
 8000c3a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000c3e:	61fb      	str	r3, [r7, #28]
                          |UP_Pin|LA_Pin|DOWN_Pin|SIb_Pin
                          |LEFT_Pin|SI_Pin|RIGHT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c40:	2300      	movs	r3, #0
 8000c42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c44:	2301      	movs	r3, #1
 8000c46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c48:	f107 031c 	add.w	r3, r7, #28
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4813      	ldr	r0, [pc, #76]	; (8000c9c <MX_GPIO_Init+0x188>)
 8000c50:	f001 fcc2 	bl	80025d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TUNNE_Pin;
 8000c54:	2304      	movs	r3, #4
 8000c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TUNNE_GPIO_Port, &GPIO_InitStruct);
 8000c60:	f107 031c 	add.w	r3, r7, #28
 8000c64:	4619      	mov	r1, r3
 8000c66:	480e      	ldr	r0, [pc, #56]	; (8000ca0 <MX_GPIO_Init+0x18c>)
 8000c68:	f001 fcb6 	bl	80025d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = PRESET4_Pin|PRESET5_Pin;
 8000c6c:	230c      	movs	r3, #12
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000c78:	f107 031c 	add.w	r3, r7, #28
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4809      	ldr	r0, [pc, #36]	; (8000ca4 <MX_GPIO_Init+0x190>)
 8000c80:	f001 fcaa 	bl	80025d8 <HAL_GPIO_Init>

}
 8000c84:	bf00      	nop
 8000c86:	3730      	adds	r7, #48	; 0x30
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	40021000 	.word	0x40021000
 8000c94:	40022000 	.word	0x40022000
 8000c98:	40020800 	.word	0x40020800
 8000c9c:	40021400 	.word	0x40021400
 8000ca0:	40020000 	.word	0x40020000
 8000ca4:	40021c00 	.word	0x40021c00

08000ca8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000cac:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cae:	4a1c      	ldr	r2, [pc, #112]	; (8000d20 <MX_I2C1_Init+0x78>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000cb2:	4b1a      	ldr	r3, [pc, #104]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cb4:	4a1b      	ldr	r2, [pc, #108]	; (8000d24 <MX_I2C1_Init+0x7c>)
 8000cb6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000cb8:	4b18      	ldr	r3, [pc, #96]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cbe:	4b17      	ldr	r3, [pc, #92]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cc4:	4b15      	ldr	r3, [pc, #84]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cc6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ccc:	4b13      	ldr	r3, [pc, #76]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cd2:	4b12      	ldr	r3, [pc, #72]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cd8:	4b10      	ldr	r3, [pc, #64]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cde:	4b0f      	ldr	r3, [pc, #60]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ce4:	480d      	ldr	r0, [pc, #52]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000ce6:	f001 fe39 	bl	800295c <HAL_I2C_Init>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cf0:	f000 fe8e 	bl	8001a10 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	4809      	ldr	r0, [pc, #36]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000cf8:	f002 fb9d 	bl	8003436 <HAL_I2CEx_ConfigAnalogFilter>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d001      	beq.n	8000d06 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000d02:	f000 fe85 	bl	8001a10 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d06:	2100      	movs	r1, #0
 8000d08:	4804      	ldr	r0, [pc, #16]	; (8000d1c <MX_I2C1_Init+0x74>)
 8000d0a:	f002 fbd0 	bl	80034ae <HAL_I2CEx_ConfigDigitalFilter>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	2b00      	cmp	r3, #0
 8000d12:	d001      	beq.n	8000d18 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000d14:	f000 fe7c 	bl	8001a10 <Error_Handler>
  }

}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	200006c8 	.word	0x200006c8
 8000d20:	40005400 	.word	0x40005400
 8000d24:	00061a80 	.word	0x00061a80

08000d28 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a19      	ldr	r2, [pc, #100]	; (8000dac <HAL_I2C_MspInit+0x84>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d12b      	bne.n	8000da2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <HAL_I2C_MspInit+0x88>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a17      	ldr	r2, [pc, #92]	; (8000db0 <HAL_I2C_MspInit+0x88>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <HAL_I2C_MspInit+0x88>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d66:	23c0      	movs	r3, #192	; 0xc0
 8000d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d6a:	2312      	movs	r3, #18
 8000d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d72:	2303      	movs	r3, #3
 8000d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d76:	2304      	movs	r3, #4
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7a:	f107 0314 	add.w	r3, r7, #20
 8000d7e:	4619      	mov	r1, r3
 8000d80:	480c      	ldr	r0, [pc, #48]	; (8000db4 <HAL_I2C_MspInit+0x8c>)
 8000d82:	f001 fc29 	bl	80025d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60fb      	str	r3, [r7, #12]
 8000d8a:	4b09      	ldr	r3, [pc, #36]	; (8000db0 <HAL_I2C_MspInit+0x88>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	4a08      	ldr	r2, [pc, #32]	; (8000db0 <HAL_I2C_MspInit+0x88>)
 8000d90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d94:	6413      	str	r3, [r2, #64]	; 0x40
 8000d96:	4b06      	ldr	r3, [pc, #24]	; (8000db0 <HAL_I2C_MspInit+0x88>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000da2:	bf00      	nop
 8000da4:	3728      	adds	r7, #40	; 0x28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	40005400 	.word	0x40005400
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020400 	.word	0x40020400

08000db8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dbc:	f001 f9f8 	bl	80021b0 <HAL_Init>

  /* USER CODE BEGIN Init */
  firstDoTunning = 48;
 8000dc0:	4b5c      	ldr	r3, [pc, #368]	; (8000f34 <main+0x17c>)
 8000dc2:	2230      	movs	r2, #48	; 0x30
 8000dc4:	701a      	strb	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dc6:	f000 f8c5 	bl	8000f54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dca:	f7ff fea3 	bl	8000b14 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000dce:	f007 fa75 	bl	80082bc <MX_USB_DEVICE_Init>
  MX_DAC_Init();
 8000dd2:	f7ff fdc5 	bl	8000960 <MX_DAC_Init>
  MX_I2C1_Init();
 8000dd6:	f7ff ff67 	bl	8000ca8 <MX_I2C1_Init>
  MX_TIM2_Init();
 8000dda:	f001 f94d 	bl	8002078 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000dde:	4856      	ldr	r0, [pc, #344]	; (8000f38 <main+0x180>)
 8000de0:	f004 f989 	bl	80050f6 <HAL_TIM_Base_Start_IT>
  SSD1306_Init();
 8000de4:	f000 fe1c 	bl	8001a20 <SSD1306_Init>
  __turnOnScreen();
 8000de8:	f7ff fbc6 	bl	8000578 <__turnOnScreen>
  __mainScreen();
 8000dec:	f7ff fc38 	bl	8000660 <__mainScreen>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	switch (screenNum){
 8000df0:	4b52      	ldr	r3, [pc, #328]	; (8000f3c <main+0x184>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	3b03      	subs	r3, #3
 8000df6:	2b08      	cmp	r3, #8
 8000df8:	d855      	bhi.n	8000ea6 <main+0xee>
 8000dfa:	a201      	add	r2, pc, #4	; (adr r2, 8000e00 <main+0x48>)
 8000dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e00:	08000e25 	.word	0x08000e25
 8000e04:	08000e33 	.word	0x08000e33
 8000e08:	08000e41 	.word	0x08000e41
 8000e0c:	08000ea7 	.word	0x08000ea7
 8000e10:	08000e4f 	.word	0x08000e4f
 8000e14:	08000e6b 	.word	0x08000e6b
 8000e18:	08000e5d 	.word	0x08000e5d
 8000e1c:	08000e85 	.word	0x08000e85
 8000e20:	08000e93 	.word	0x08000e93
	  		case MAIN_SCREEN:
	  			__mainScreen();
 8000e24:	f7ff fc1c 	bl	8000660 <__mainScreen>
	  			last_screenNum = screenNum;
 8000e28:	4b44      	ldr	r3, [pc, #272]	; (8000f3c <main+0x184>)
 8000e2a:	781a      	ldrb	r2, [r3, #0]
 8000e2c:	4b44      	ldr	r3, [pc, #272]	; (8000f40 <main+0x188>)
 8000e2e:	701a      	strb	r2, [r3, #0]
	  		break;
 8000e30:	e03a      	b.n	8000ea8 <main+0xf0>
	  		case CHORD_SCREEN:
	  			__chordScreen();
 8000e32:	f7ff fbb7 	bl	80005a4 <__chordScreen>
	  			last_screenNum = screenNum;
 8000e36:	4b41      	ldr	r3, [pc, #260]	; (8000f3c <main+0x184>)
 8000e38:	781a      	ldrb	r2, [r3, #0]
 8000e3a:	4b41      	ldr	r3, [pc, #260]	; (8000f40 <main+0x188>)
 8000e3c:	701a      	strb	r2, [r3, #0]
	  		break;
 8000e3e:	e033      	b.n	8000ea8 <main+0xf0>
	  		case TUNNE_SCREEN:
	  			__tunneScreen();
 8000e40:	f7ff fc9c 	bl	800077c <__tunneScreen>
	  			last_screenNum = screenNum;
 8000e44:	4b3d      	ldr	r3, [pc, #244]	; (8000f3c <main+0x184>)
 8000e46:	781a      	ldrb	r2, [r3, #0]
 8000e48:	4b3d      	ldr	r3, [pc, #244]	; (8000f40 <main+0x188>)
 8000e4a:	701a      	strb	r2, [r3, #0]
	  		break;
 8000e4c:	e02c      	b.n	8000ea8 <main+0xf0>
	  		case RECUEST_FOOTKEY_SCREEN:
	  			__recuest_footkey();
 8000e4e:	f7ff fce5 	bl	800081c <__recuest_footkey>
	  			last_screenNum = screenNum; //this variable must store the CHORD_SCREEN value, to use it as return point.
 8000e52:	4b3a      	ldr	r3, [pc, #232]	; (8000f3c <main+0x184>)
 8000e54:	781a      	ldrb	r2, [r3, #0]
 8000e56:	4b3a      	ldr	r3, [pc, #232]	; (8000f40 <main+0x188>)
 8000e58:	701a      	strb	r2, [r3, #0]
	  		break;
 8000e5a:	e025      	b.n	8000ea8 <main+0xf0>
	  		case POPUP_OCTAVE:
	  			__on_off_octave();
 8000e5c:	f7ff fcb8 	bl	80007d0 <__on_off_octave>
	  			popup_time = 2000;
 8000e60:	4b38      	ldr	r3, [pc, #224]	; (8000f44 <main+0x18c>)
 8000e62:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e66:	601a      	str	r2, [r3, #0]
	  		break;
 8000e68:	e01e      	b.n	8000ea8 <main+0xf0>
	  		case POPUP_SAVED_CHORD:
	  			__pop_up_savedChord(lastKey_pos);
 8000e6a:	4b37      	ldr	r3, [pc, #220]	; (8000f48 <main+0x190>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff fcf6 	bl	8000860 <__pop_up_savedChord>
	  			last_screenNum = CHORD_SCREEN;
 8000e74:	4b32      	ldr	r3, [pc, #200]	; (8000f40 <main+0x188>)
 8000e76:	2204      	movs	r2, #4
 8000e78:	701a      	strb	r2, [r3, #0]
	  			popup_time = 2000;
 8000e7a:	4b32      	ldr	r3, [pc, #200]	; (8000f44 <main+0x18c>)
 8000e7c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e80:	601a      	str	r2, [r3, #0]
	  		break;
 8000e82:	e011      	b.n	8000ea8 <main+0xf0>
	  		case POPUP_SUSTAIN:
	  			__pop_up_sustain();
 8000e84:	f7ff fd1e 	bl	80008c4 <__pop_up_sustain>
	  			popup_time = 2000;
 8000e88:	4b2e      	ldr	r3, [pc, #184]	; (8000f44 <main+0x18c>)
 8000e8a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e8e:	601a      	str	r2, [r3, #0]
	  		break;
 8000e90:	e00a      	b.n	8000ea8 <main+0xf0>
	  		case POPUP_CANCEL:
	  			__pop_up_cancel();
 8000e92:	f7ff fd4f 	bl	8000934 <__pop_up_cancel>
	  			popup_time = 2000;
 8000e96:	4b2b      	ldr	r3, [pc, #172]	; (8000f44 <main+0x18c>)
 8000e98:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8000e9c:	601a      	str	r2, [r3, #0]
	  			last_screenNum = CHORD_SCREEN;
 8000e9e:	4b28      	ldr	r3, [pc, #160]	; (8000f40 <main+0x188>)
 8000ea0:	2204      	movs	r2, #4
 8000ea2:	701a      	strb	r2, [r3, #0]
	  		break;
 8000ea4:	e000      	b.n	8000ea8 <main+0xf0>
	  		default:
	  		break;
 8000ea6:	bf00      	nop
	  	}
	  	screenNum = NO_SCREEN;
 8000ea8:	4b24      	ldr	r3, [pc, #144]	; (8000f3c <main+0x184>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	701a      	strb	r2, [r3, #0]

	  	if (popup_timeUp){
 8000eae:	4b27      	ldr	r3, [pc, #156]	; (8000f4c <main+0x194>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d00a      	beq.n	8000ece <main+0x116>
	  		if (screenNum == NO_SCREEN) screenNum = last_screenNum;
 8000eb8:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <main+0x184>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d103      	bne.n	8000ec8 <main+0x110>
 8000ec0:	4b1f      	ldr	r3, [pc, #124]	; (8000f40 <main+0x188>)
 8000ec2:	781a      	ldrb	r2, [r3, #0]
 8000ec4:	4b1d      	ldr	r3, [pc, #116]	; (8000f3c <main+0x184>)
 8000ec6:	701a      	strb	r2, [r3, #0]
	  		popup_timeUp = 0;
 8000ec8:	4b20      	ldr	r3, [pc, #128]	; (8000f4c <main+0x194>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	701a      	strb	r2, [r3, #0]
	  	}


	  	inputCursor();
 8000ece:	f000 f8ab 	bl	8001028 <inputCursor>
	  	inputSustains();
 8000ed2:	f000 f8fd 	bl	80010d0 <inputSustains>
	  	inputChord();
 8000ed6:	f000 f9b3 	bl	8001240 <inputChord>
	  	inputOctave();
 8000eda:	f000 f9f1 	bl	80012c0 <inputOctave>
	  	inputTunne();
 8000ede:	f000 fa51 	bl	8001384 <inputTunne>
	  	inputPresets();
 8000ee2:	f000 fa8f 	bl	8001404 <inputPresets>
	  		default:
	  		break;
	  	}
	  	*/

	    switch (menu){ //manage the recuested menu function.
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <main+0x198>)
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	3b03      	subs	r3, #3
 8000eec:	2b04      	cmp	r3, #4
 8000eee:	d81c      	bhi.n	8000f2a <main+0x172>
 8000ef0:	a201      	add	r2, pc, #4	; (adr r2, 8000ef8 <main+0x140>)
 8000ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef6:	bf00      	nop
 8000ef8:	08000f0d 	.word	0x08000f0d
 8000efc:	08000f13 	.word	0x08000f13
 8000f00:	08000f1d 	.word	0x08000f1d
 8000f04:	08000f2b 	.word	0x08000f2b
 8000f08:	08000f27 	.word	0x08000f27
	    	case MAIN_SCREEN:
	    		inputNotes();
 8000f0c:	f000 facc 	bl	80014a8 <inputNotes>
	    	break;
 8000f10:	e00c      	b.n	8000f2c <main+0x174>
	  		case CHORD_SCREEN:
	  			chordSelect();
 8000f12:	f000 fc13 	bl	800173c <chordSelect>
	  			inputNotes();
 8000f16:	f000 fac7 	bl	80014a8 <inputNotes>
	  		break;
 8000f1a:	e007      	b.n	8000f2c <main+0x174>
	  		case TUNNE_SCREEN:
	  			tunneSelect();
 8000f1c:	f000 fcc0 	bl	80018a0 <tunneSelect>
	  			inputNotes();
 8000f20:	f000 fac2 	bl	80014a8 <inputNotes>
	  		break;
 8000f24:	e002      	b.n	8000f2c <main+0x174>
	  		case RECUEST_FOOTKEY_SCREEN:
	  			inputSaveChord();
 8000f26:	f000 fb8b 	bl	8001640 <inputSaveChord>
	  		default:
	  		break;
 8000f2a:	bf00      	nop

	    }
	    MIDI_SendCheck();
 8000f2c:	f007 fba0 	bl	8008670 <MIDI_SendCheck>
	  	switch (screenNum){
 8000f30:	e75e      	b.n	8000df0 <main+0x38>
 8000f32:	bf00      	nop
 8000f34:	200006a4 	.word	0x200006a4
 8000f38:	20000764 	.word	0x20000764
 8000f3c:	20000277 	.word	0x20000277
 8000f40:	200000d1 	.word	0x200000d1
 8000f44:	20000278 	.word	0x20000278
 8000f48:	2000073b 	.word	0x2000073b
 8000f4c:	2000027c 	.word	0x2000027c
 8000f50:	200000d0 	.word	0x200000d0

08000f54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b094      	sub	sp, #80	; 0x50
 8000f58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f5a:	f107 0320 	add.w	r3, r7, #32
 8000f5e:	2230      	movs	r2, #48	; 0x30
 8000f60:	2100      	movs	r1, #0
 8000f62:	4618      	mov	r0, r3
 8000f64:	f007 fea8 	bl	8008cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f68:	f107 030c 	add.w	r3, r7, #12
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	4b28      	ldr	r3, [pc, #160]	; (8001020 <SystemClock_Config+0xcc>)
 8000f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f80:	4a27      	ldr	r2, [pc, #156]	; (8001020 <SystemClock_Config+0xcc>)
 8000f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f86:	6413      	str	r3, [r2, #64]	; 0x40
 8000f88:	4b25      	ldr	r3, [pc, #148]	; (8001020 <SystemClock_Config+0xcc>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f94:	2300      	movs	r3, #0
 8000f96:	607b      	str	r3, [r7, #4]
 8000f98:	4b22      	ldr	r3, [pc, #136]	; (8001024 <SystemClock_Config+0xd0>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a21      	ldr	r2, [pc, #132]	; (8001024 <SystemClock_Config+0xd0>)
 8000f9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fa2:	6013      	str	r3, [r2, #0]
 8000fa4:	4b1f      	ldr	r3, [pc, #124]	; (8001024 <SystemClock_Config+0xd0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fac:	607b      	str	r3, [r7, #4]
 8000fae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fb4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fb8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fba:	2302      	movs	r3, #2
 8000fbc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fbe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fc4:	2304      	movs	r3, #4
 8000fc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fc8:	23a8      	movs	r3, #168	; 0xa8
 8000fca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000fd0:	2307      	movs	r3, #7
 8000fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd4:	f107 0320 	add.w	r3, r7, #32
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f003 fc13 	bl	8004804 <HAL_RCC_OscConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fe4:	f000 fd14 	bl	8001a10 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe8:	230f      	movs	r3, #15
 8000fea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fec:	2302      	movs	r3, #2
 8000fee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ff4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ff8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ffa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	2105      	movs	r1, #5
 8001006:	4618      	mov	r0, r3
 8001008:	f003 fe6c 	bl	8004ce4 <HAL_RCC_ClockConfig>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001012:	f000 fcfd 	bl	8001a10 <Error_Handler>
  }
}
 8001016:	bf00      	nop
 8001018:	3750      	adds	r7, #80	; 0x50
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800
 8001024:	40007000 	.word	0x40007000

08001028 <inputCursor>:

/* USER CODE BEGIN 4 */


void inputCursor(void){
 8001028:	b590      	push	{r4, r7, lr}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0


	for (int i = 0; i < 4; i++){     //from the lowest CURSOR value, to the highest one.                                    // 4 presets en total.
 800102e:	2300      	movs	r3, #0
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	e03b      	b.n	80010ac <inputCursor+0x84>
	buttonFlag = digitalRead(i + CURSOR_UP);

    //buttonState[1] = buttonFlag << (i + _UP);    //bit field method
	*/

	buttonState[i + _UP] = HAL_GPIO_ReadPin(cursorPort_list[i], cursorPin_list[i]);//digitalRead(i + CURSOR_UP);
 8001034:	4a21      	ldr	r2, [pc, #132]	; (80010bc <inputCursor+0x94>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800103c:	4a20      	ldr	r2, [pc, #128]	; (80010c0 <inputCursor+0x98>)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	f103 0413 	add.w	r4, r3, #19
 800104a:	4611      	mov	r1, r2
 800104c:	f001 fc6e 	bl	800292c <HAL_GPIO_ReadPin>
 8001050:	4603      	mov	r3, r0
 8001052:	461a      	mov	r2, r3
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <inputCursor+0x9c>)
 8001056:	551a      	strb	r2, [r3, r4]

    if(!buttonState[i + _UP] && lastState[i + _UP]){                                // If we read 0, and the last time we read 1, means button was just pressed
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3313      	adds	r3, #19
 800105c:	4a19      	ldr	r2, [pc, #100]	; (80010c4 <inputCursor+0x9c>)
 800105e:	5cd3      	ldrb	r3, [r2, r3]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d114      	bne.n	800108e <inputCursor+0x66>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3313      	adds	r3, #19
 8001068:	4a17      	ldr	r2, [pc, #92]	; (80010c8 <inputCursor+0xa0>)
 800106a:	5cd3      	ldrb	r3, [r2, r3]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d00e      	beq.n	800108e <inputCursor+0x66>

		d_pad = i + _UP;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	3313      	adds	r3, #19
 8001074:	461a      	mov	r2, r3
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <inputCursor+0xa4>)
 8001078:	601a      	str	r2, [r3, #0]
        lastState[i + _UP] = buttonState[i + _UP];
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	f103 0213 	add.w	r2, r3, #19
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	3313      	adds	r3, #19
 8001084:	490f      	ldr	r1, [pc, #60]	; (80010c4 <inputCursor+0x9c>)
 8001086:	5c89      	ldrb	r1, [r1, r2]
 8001088:	4a0f      	ldr	r2, [pc, #60]	; (80010c8 <inputCursor+0xa0>)
 800108a:	54d1      	strb	r1, [r2, r3]
		break;
 800108c:	e011      	b.n	80010b2 <inputCursor+0x8a>
    }else{
		d_pad = 0;
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <inputCursor+0xa4>)
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
	}

    lastState[i + _UP] = buttonState[i + _UP];                                        // Update last button state.
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f103 0213 	add.w	r2, r3, #19
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3313      	adds	r3, #19
 800109e:	4909      	ldr	r1, [pc, #36]	; (80010c4 <inputCursor+0x9c>)
 80010a0:	5c89      	ldrb	r1, [r1, r2]
 80010a2:	4a09      	ldr	r2, [pc, #36]	; (80010c8 <inputCursor+0xa0>)
 80010a4:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < 4; i++){     //from the lowest CURSOR value, to the highest one.                                    // 4 presets en total.
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	3301      	adds	r3, #1
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b03      	cmp	r3, #3
 80010b0:	ddc0      	ble.n	8001034 <inputCursor+0xc>
  }
}
 80010b2:	bf00      	nop
 80010b4:	370c      	adds	r7, #12
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd90      	pop	{r4, r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20000074 	.word	0x20000074
 80010c0:	08009a6c 	.word	0x08009a6c
 80010c4:	2000071c 	.word	0x2000071c
 80010c8:	20000740 	.word	0x20000740
 80010cc:	2000073c 	.word	0x2000073c

080010d0 <inputSustains>:


void inputSustains (void){
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0

	buttonState[_SUST_PROP] = HAL_GPIO_ReadPin(SUST_PROP_GPIO_Port, SUST_PROP_Pin);
 80010d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80010da:	484f      	ldr	r0, [pc, #316]	; (8001218 <inputSustains+0x148>)
 80010dc:	f001 fc26 	bl	800292c <HAL_GPIO_ReadPin>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b4d      	ldr	r3, [pc, #308]	; (800121c <inputSustains+0x14c>)
 80010e6:	741a      	strb	r2, [r3, #16]

	if(!buttonState[_SUST_PROP] && lastState[_SUST_PROP]){
 80010e8:	4b4c      	ldr	r3, [pc, #304]	; (800121c <inputSustains+0x14c>)
 80010ea:	7c1b      	ldrb	r3, [r3, #16]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d13f      	bne.n	8001170 <inputSustains+0xa0>
 80010f0:	4b4b      	ldr	r3, [pc, #300]	; (8001220 <inputSustains+0x150>)
 80010f2:	7c1b      	ldrb	r3, [r3, #16]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d03b      	beq.n	8001170 <inputSustains+0xa0>

		for (int j = 0; j <= 12; j++){
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
 80010fc:	e00b      	b.n	8001116 <inputSustains+0x46>
			sendChord(lastSendNote[j], 0, 1); // silents all notes
 80010fe:	4a49      	ldr	r2, [pc, #292]	; (8001224 <inputSustains+0x154>)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001106:	2201      	movs	r2, #1
 8001108:	2100      	movs	r1, #0
 800110a:	4618      	mov	r0, r3
 800110c:	f000 fc06 	bl	800191c <sendChord>
		for (int j = 0; j <= 12; j++){
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	3301      	adds	r3, #1
 8001114:	607b      	str	r3, [r7, #4]
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	2b0c      	cmp	r3, #12
 800111a:	ddf0      	ble.n	80010fe <inputSustains+0x2e>
		}

		switch (sustainMode){
 800111c:	4b42      	ldr	r3, [pc, #264]	; (8001228 <inputSustains+0x158>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d01b      	beq.n	800115c <inputSustains+0x8c>
 8001124:	2b02      	cmp	r3, #2
 8001126:	d002      	beq.n	800112e <inputSustains+0x5e>
 8001128:	2b00      	cmp	r3, #0
 800112a:	d010      	beq.n	800114e <inputSustains+0x7e>
 800112c:	e01d      	b.n	800116a <inputSustains+0x9a>
			case 2:
				//event = {0x0B, 0xB0 | MIDI_CHANNEL, 64, 0};
				//MidiUSB.sendMIDI(event);
				midi_msg[0] = 0x0B; //0x0B == type event (control change)
 800112e:	4b3f      	ldr	r3, [pc, #252]	; (800122c <inputSustains+0x15c>)
 8001130:	220b      	movs	r2, #11
 8001132:	701a      	strb	r2, [r3, #0]
				midi_msg[1] = 0xB0 | 1;
 8001134:	4b3d      	ldr	r3, [pc, #244]	; (800122c <inputSustains+0x15c>)
 8001136:	22b1      	movs	r2, #177	; 0xb1
 8001138:	705a      	strb	r2, [r3, #1]
				midi_msg[2] = 64;	// 64 == sustain.
 800113a:	4b3c      	ldr	r3, [pc, #240]	; (800122c <inputSustains+0x15c>)
 800113c:	2240      	movs	r2, #64	; 0x40
 800113e:	709a      	strb	r2, [r3, #2]
				midi_msg[3] = 0;
 8001140:	4b3a      	ldr	r3, [pc, #232]	; (800122c <inputSustains+0x15c>)
 8001142:	2200      	movs	r2, #0
 8001144:	70da      	strb	r2, [r3, #3]
				MIDI_SendBuffer(midi_msg, 4);
 8001146:	2104      	movs	r1, #4
 8001148:	4838      	ldr	r0, [pc, #224]	; (800122c <inputSustains+0x15c>)
 800114a:	f007 fa5b 	bl	8008604 <MIDI_SendBuffer>
			case 0:
				lastSustainNote = 0;
 800114e:	4b38      	ldr	r3, [pc, #224]	; (8001230 <inputSustains+0x160>)
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
				sustainMode = 1; //prop
 8001154:	4b34      	ldr	r3, [pc, #208]	; (8001228 <inputSustains+0x158>)
 8001156:	2201      	movs	r2, #1
 8001158:	701a      	strb	r2, [r3, #0]
			break;
 800115a:	e006      	b.n	800116a <inputSustains+0x9a>

			case 1:
				sustainFlag = 1;
 800115c:	4b35      	ldr	r3, [pc, #212]	; (8001234 <inputSustains+0x164>)
 800115e:	2201      	movs	r2, #1
 8001160:	701a      	strb	r2, [r3, #0]
				sustainMode = 0;
 8001162:	4b31      	ldr	r3, [pc, #196]	; (8001228 <inputSustains+0x158>)
 8001164:	2200      	movs	r2, #0
 8001166:	701a      	strb	r2, [r3, #0]
			break;
 8001168:	bf00      	nop
		} //end switch

		screenNum = POPUP_SUSTAIN;
 800116a:	4b33      	ldr	r3, [pc, #204]	; (8001238 <inputSustains+0x168>)
 800116c:	220a      	movs	r2, #10
 800116e:	701a      	strb	r2, [r3, #0]
	}
	lastState[_SUST_PROP] = buttonState[_SUST_PROP];
 8001170:	4b2a      	ldr	r3, [pc, #168]	; (800121c <inputSustains+0x14c>)
 8001172:	7c1a      	ldrb	r2, [r3, #16]
 8001174:	4b2a      	ldr	r3, [pc, #168]	; (8001220 <inputSustains+0x150>)
 8001176:	741a      	strb	r2, [r3, #16]


	buttonState[_SUST_MIDI] = HAL_GPIO_ReadPin(SUST_MIDI_GPIO_Port, SUST_MIDI_Pin);
 8001178:	2101      	movs	r1, #1
 800117a:	4830      	ldr	r0, [pc, #192]	; (800123c <inputSustains+0x16c>)
 800117c:	f001 fbd6 	bl	800292c <HAL_GPIO_ReadPin>
 8001180:	4603      	mov	r3, r0
 8001182:	461a      	mov	r2, r3
 8001184:	4b25      	ldr	r3, [pc, #148]	; (800121c <inputSustains+0x14c>)
 8001186:	745a      	strb	r2, [r3, #17]

	if(!buttonState[_SUST_MIDI] && lastState[_SUST_MIDI]){
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <inputSustains+0x14c>)
 800118a:	7c5b      	ldrb	r3, [r3, #17]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d13a      	bne.n	8001206 <inputSustains+0x136>
 8001190:	4b23      	ldr	r3, [pc, #140]	; (8001220 <inputSustains+0x150>)
 8001192:	7c5b      	ldrb	r3, [r3, #17]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d036      	beq.n	8001206 <inputSustains+0x136>

		switch (sustainMode){
 8001198:	4b23      	ldr	r3, [pc, #140]	; (8001228 <inputSustains+0x158>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	db2f      	blt.n	8001200 <inputSustains+0x130>
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	dd02      	ble.n	80011aa <inputSustains+0xda>
 80011a4:	2b02      	cmp	r3, #2
 80011a6:	d017      	beq.n	80011d8 <inputSustains+0x108>
 80011a8:	e02a      	b.n	8001200 <inputSustains+0x130>
			case 0:
			case 1:
				sustainFlag = 1;	// needed to normal notes functioning.
 80011aa:	4b22      	ldr	r3, [pc, #136]	; (8001234 <inputSustains+0x164>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	701a      	strb	r2, [r3, #0]
				//event = {0x0B, 0xB0 | MIDI_CHANNEL, 64, 127}; //64 == sustain.
				//MidiUSB.sendMIDI(event);
				midi_msg[0] = 0x0B;		//0x0B == type event (control change),
 80011b0:	4b1e      	ldr	r3, [pc, #120]	; (800122c <inputSustains+0x15c>)
 80011b2:	220b      	movs	r2, #11
 80011b4:	701a      	strb	r2, [r3, #0]
				midi_msg[1] = 0xB0 | 1;
 80011b6:	4b1d      	ldr	r3, [pc, #116]	; (800122c <inputSustains+0x15c>)
 80011b8:	22b1      	movs	r2, #177	; 0xb1
 80011ba:	705a      	strb	r2, [r3, #1]
				midi_msg[2] = 64;	//64 == sustain.
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <inputSustains+0x15c>)
 80011be:	2240      	movs	r2, #64	; 0x40
 80011c0:	709a      	strb	r2, [r3, #2]
				midi_msg[3] = 127;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <inputSustains+0x15c>)
 80011c4:	227f      	movs	r2, #127	; 0x7f
 80011c6:	70da      	strb	r2, [r3, #3]
				MIDI_SendBuffer(midi_msg, 4);
 80011c8:	2104      	movs	r1, #4
 80011ca:	4818      	ldr	r0, [pc, #96]	; (800122c <inputSustains+0x15c>)
 80011cc:	f007 fa1a 	bl	8008604 <MIDI_SendBuffer>
				sustainMode = 2;
 80011d0:	4b15      	ldr	r3, [pc, #84]	; (8001228 <inputSustains+0x158>)
 80011d2:	2202      	movs	r2, #2
 80011d4:	701a      	strb	r2, [r3, #0]
			break;
 80011d6:	e013      	b.n	8001200 <inputSustains+0x130>
			case 2:
				//event = {0x0B, 0xB0 | MIDI_CHANNEL, 64, 0};
				//MidiUSB.sendMIDI(event);
				midi_msg[0] = 0x0B;	//0x0B == type event (control change)
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <inputSustains+0x15c>)
 80011da:	220b      	movs	r2, #11
 80011dc:	701a      	strb	r2, [r3, #0]
				midi_msg[1] = 0xB0 | 1;
 80011de:	4b13      	ldr	r3, [pc, #76]	; (800122c <inputSustains+0x15c>)
 80011e0:	22b1      	movs	r2, #177	; 0xb1
 80011e2:	705a      	strb	r2, [r3, #1]
				midi_msg[2] = 64;	//64 == sustain.
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <inputSustains+0x15c>)
 80011e6:	2240      	movs	r2, #64	; 0x40
 80011e8:	709a      	strb	r2, [r3, #2]
				midi_msg[3] = 0;
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <inputSustains+0x15c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	70da      	strb	r2, [r3, #3]
				MIDI_SendBuffer(midi_msg, 4);
 80011f0:	2104      	movs	r1, #4
 80011f2:	480e      	ldr	r0, [pc, #56]	; (800122c <inputSustains+0x15c>)
 80011f4:	f007 fa06 	bl	8008604 <MIDI_SendBuffer>
				sustainMode = 0;
 80011f8:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <inputSustains+0x158>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	701a      	strb	r2, [r3, #0]
			break;
 80011fe:	bf00      	nop
		} //end switch

		screenNum = POPUP_SUSTAIN;
 8001200:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <inputSustains+0x168>)
 8001202:	220a      	movs	r2, #10
 8001204:	701a      	strb	r2, [r3, #0]
	}
	lastState[_SUST_MIDI] = buttonState[_SUST_MIDI];
 8001206:	4b05      	ldr	r3, [pc, #20]	; (800121c <inputSustains+0x14c>)
 8001208:	7c5a      	ldrb	r2, [r3, #17]
 800120a:	4b05      	ldr	r3, [pc, #20]	; (8001220 <inputSustains+0x150>)
 800120c:	745a      	strb	r2, [r3, #17]
}
 800120e:	bf00      	nop
 8001210:	3708      	adds	r7, #8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40022000 	.word	0x40022000
 800121c:	2000071c 	.word	0x2000071c
 8001220:	20000740 	.word	0x20000740
 8001224:	2000023c 	.word	0x2000023c
 8001228:	20000274 	.word	0x20000274
 800122c:	20000760 	.word	0x20000760
 8001230:	20000270 	.word	0x20000270
 8001234:	20000070 	.word	0x20000070
 8001238:	20000277 	.word	0x20000277
 800123c:	40021400 	.word	0x40021400

08001240 <inputChord>:


void inputChord (void){
 8001240:	b580      	push	{r7, lr}
 8001242:	af00      	add	r7, sp, #0

	buttonState[_CHORD] = HAL_GPIO_ReadPin(CHORD_GPIO_Port, CHORD_Pin);
 8001244:	2104      	movs	r1, #4
 8001246:	4818      	ldr	r0, [pc, #96]	; (80012a8 <inputChord+0x68>)
 8001248:	f001 fb70 	bl	800292c <HAL_GPIO_ReadPin>
 800124c:	4603      	mov	r3, r0
 800124e:	461a      	mov	r2, r3
 8001250:	4b16      	ldr	r3, [pc, #88]	; (80012ac <inputChord+0x6c>)
 8001252:	749a      	strb	r2, [r3, #18]

	if(!buttonState[_CHORD] && lastState[_CHORD]){
 8001254:	4b15      	ldr	r3, [pc, #84]	; (80012ac <inputChord+0x6c>)
 8001256:	7c9b      	ldrb	r3, [r3, #18]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d11e      	bne.n	800129a <inputChord+0x5a>
 800125c:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <inputChord+0x70>)
 800125e:	7c9b      	ldrb	r3, [r3, #18]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d01a      	beq.n	800129a <inputChord+0x5a>

      acorde = !acorde;
 8001264:	4b13      	ldr	r3, [pc, #76]	; (80012b4 <inputChord+0x74>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	bf0c      	ite	eq
 800126c:	2301      	moveq	r3, #1
 800126e:	2300      	movne	r3, #0
 8001270:	b2db      	uxtb	r3, r3
 8001272:	461a      	mov	r2, r3
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <inputChord+0x74>)
 8001276:	701a      	strb	r2, [r3, #0]

	  if (acorde){
 8001278:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <inputChord+0x74>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b00      	cmp	r3, #0
 800127e:	d006      	beq.n	800128e <inputChord+0x4e>
		screenNum = CHORD_SCREEN;
 8001280:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <inputChord+0x78>)
 8001282:	2204      	movs	r2, #4
 8001284:	701a      	strb	r2, [r3, #0]
		menu = CHORD_SCREEN;
 8001286:	4b0d      	ldr	r3, [pc, #52]	; (80012bc <inputChord+0x7c>)
 8001288:	2204      	movs	r2, #4
 800128a:	701a      	strb	r2, [r3, #0]
 800128c:	e005      	b.n	800129a <inputChord+0x5a>
	  }else{
		screenNum = MAIN_SCREEN;
 800128e:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <inputChord+0x78>)
 8001290:	2203      	movs	r2, #3
 8001292:	701a      	strb	r2, [r3, #0]
		menu = MAIN_SCREEN;
 8001294:	4b09      	ldr	r3, [pc, #36]	; (80012bc <inputChord+0x7c>)
 8001296:	2203      	movs	r2, #3
 8001298:	701a      	strb	r2, [r3, #0]
	/*
	if (acorde){
		chordSelect();
	}
*/
	lastState[_CHORD] = buttonState[_CHORD];
 800129a:	4b04      	ldr	r3, [pc, #16]	; (80012ac <inputChord+0x6c>)
 800129c:	7c9a      	ldrb	r2, [r3, #18]
 800129e:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <inputChord+0x70>)
 80012a0:	749a      	strb	r2, [r3, #18]
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40021400 	.word	0x40021400
 80012ac:	2000071c 	.word	0x2000071c
 80012b0:	20000740 	.word	0x20000740
 80012b4:	20000275 	.word	0x20000275
 80012b8:	20000277 	.word	0x20000277
 80012bc:	200000d0 	.word	0x200000d0

080012c0 <inputOctave>:


void inputOctave (void){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0

  buttonState[_OCT_G] = HAL_GPIO_ReadPin(OCT_G_GPIO_Port, OCT_G_Pin); //octava grave
 80012c4:	2120      	movs	r1, #32
 80012c6:	4829      	ldr	r0, [pc, #164]	; (800136c <inputOctave+0xac>)
 80012c8:	f001 fb30 	bl	800292c <HAL_GPIO_ReadPin>
 80012cc:	4603      	mov	r3, r0
 80012ce:	461a      	mov	r2, r3
 80012d0:	4b27      	ldr	r3, [pc, #156]	; (8001370 <inputOctave+0xb0>)
 80012d2:	735a      	strb	r2, [r3, #13]
  if(!buttonState[_OCT_G] && lastState[_OCT_G]){
 80012d4:	4b26      	ldr	r3, [pc, #152]	; (8001370 <inputOctave+0xb0>)
 80012d6:	7b5b      	ldrb	r3, [r3, #13]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d10a      	bne.n	80012f2 <inputOctave+0x32>
 80012dc:	4b25      	ldr	r3, [pc, #148]	; (8001374 <inputOctave+0xb4>)
 80012de:	7b5b      	ldrb	r3, [r3, #13]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d006      	beq.n	80012f2 <inputOctave+0x32>
      octava = -1;
 80012e4:	4b24      	ldr	r3, [pc, #144]	; (8001378 <inputOctave+0xb8>)
 80012e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012ea:	601a      	str	r2, [r3, #0]
	  screenNum=POPUP_OCTAVE;
 80012ec:	4b23      	ldr	r3, [pc, #140]	; (800137c <inputOctave+0xbc>)
 80012ee:	2209      	movs	r2, #9
 80012f0:	701a      	strb	r2, [r3, #0]
  }

  lastState[_OCT_G] = buttonState[_OCT_G];
 80012f2:	4b1f      	ldr	r3, [pc, #124]	; (8001370 <inputOctave+0xb0>)
 80012f4:	7b5a      	ldrb	r2, [r3, #13]
 80012f6:	4b1f      	ldr	r3, [pc, #124]	; (8001374 <inputOctave+0xb4>)
 80012f8:	735a      	strb	r2, [r3, #13]


  buttonState[_OCT_M] = HAL_GPIO_ReadPin(OCT_M_GPIO_Port, OCT_M_Pin);//octava central
 80012fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012fe:	4820      	ldr	r0, [pc, #128]	; (8001380 <inputOctave+0xc0>)
 8001300:	f001 fb14 	bl	800292c <HAL_GPIO_ReadPin>
 8001304:	4603      	mov	r3, r0
 8001306:	461a      	mov	r2, r3
 8001308:	4b19      	ldr	r3, [pc, #100]	; (8001370 <inputOctave+0xb0>)
 800130a:	739a      	strb	r2, [r3, #14]
  if(!buttonState[_OCT_M] && lastState[_OCT_M]){
 800130c:	4b18      	ldr	r3, [pc, #96]	; (8001370 <inputOctave+0xb0>)
 800130e:	7b9b      	ldrb	r3, [r3, #14]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d109      	bne.n	8001328 <inputOctave+0x68>
 8001314:	4b17      	ldr	r3, [pc, #92]	; (8001374 <inputOctave+0xb4>)
 8001316:	7b9b      	ldrb	r3, [r3, #14]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d005      	beq.n	8001328 <inputOctave+0x68>
      octava = 0;
 800131c:	4b16      	ldr	r3, [pc, #88]	; (8001378 <inputOctave+0xb8>)
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
	  screenNum=POPUP_OCTAVE;
 8001322:	4b16      	ldr	r3, [pc, #88]	; (800137c <inputOctave+0xbc>)
 8001324:	2209      	movs	r2, #9
 8001326:	701a      	strb	r2, [r3, #0]
  }

  lastState[_OCT_M] = buttonState[_OCT_M];
 8001328:	4b11      	ldr	r3, [pc, #68]	; (8001370 <inputOctave+0xb0>)
 800132a:	7b9a      	ldrb	r2, [r3, #14]
 800132c:	4b11      	ldr	r3, [pc, #68]	; (8001374 <inputOctave+0xb4>)
 800132e:	739a      	strb	r2, [r3, #14]


  buttonState[_OCT_A] = HAL_GPIO_ReadPin(OCT_A_GPIO_Port, OCT_A_Pin);//octava aguda
 8001330:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001334:	4812      	ldr	r0, [pc, #72]	; (8001380 <inputOctave+0xc0>)
 8001336:	f001 faf9 	bl	800292c <HAL_GPIO_ReadPin>
 800133a:	4603      	mov	r3, r0
 800133c:	461a      	mov	r2, r3
 800133e:	4b0c      	ldr	r3, [pc, #48]	; (8001370 <inputOctave+0xb0>)
 8001340:	73da      	strb	r2, [r3, #15]
  if(!buttonState[_OCT_A] && lastState[_OCT_A]){
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <inputOctave+0xb0>)
 8001344:	7bdb      	ldrb	r3, [r3, #15]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d109      	bne.n	800135e <inputOctave+0x9e>
 800134a:	4b0a      	ldr	r3, [pc, #40]	; (8001374 <inputOctave+0xb4>)
 800134c:	7bdb      	ldrb	r3, [r3, #15]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d005      	beq.n	800135e <inputOctave+0x9e>
      octava = 1;
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <inputOctave+0xb8>)
 8001354:	2201      	movs	r2, #1
 8001356:	601a      	str	r2, [r3, #0]
      screenNum=POPUP_OCTAVE;
 8001358:	4b08      	ldr	r3, [pc, #32]	; (800137c <inputOctave+0xbc>)
 800135a:	2209      	movs	r2, #9
 800135c:	701a      	strb	r2, [r3, #0]
  }

  lastState[_OCT_A] = buttonState[_OCT_A];
 800135e:	4b04      	ldr	r3, [pc, #16]	; (8001370 <inputOctave+0xb0>)
 8001360:	7bda      	ldrb	r2, [r3, #15]
 8001362:	4b04      	ldr	r3, [pc, #16]	; (8001374 <inputOctave+0xb4>)
 8001364:	73da      	strb	r2, [r3, #15]
}
 8001366:	bf00      	nop
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40021000 	.word	0x40021000
 8001370:	2000071c 	.word	0x2000071c
 8001374:	20000740 	.word	0x20000740
 8001378:	20000204 	.word	0x20000204
 800137c:	20000277 	.word	0x20000277
 8001380:	40020800 	.word	0x40020800

08001384 <inputTunne>:


void inputTunne(void){
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  	buttonState[_TUNNE] = HAL_GPIO_ReadPin(TUNNE_GPIO_Port, TUNNE_Pin);
 8001388:	2104      	movs	r1, #4
 800138a:	4818      	ldr	r0, [pc, #96]	; (80013ec <inputTunne+0x68>)
 800138c:	f001 face 	bl	800292c <HAL_GPIO_ReadPin>
 8001390:	4603      	mov	r3, r0
 8001392:	461a      	mov	r2, r3
 8001394:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <inputTunne+0x6c>)
 8001396:	779a      	strb	r2, [r3, #30]

	if(!buttonState[_TUNNE] && lastState[_TUNNE]){
 8001398:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <inputTunne+0x6c>)
 800139a:	7f9b      	ldrb	r3, [r3, #30]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d11e      	bne.n	80013de <inputTunne+0x5a>
 80013a0:	4b14      	ldr	r3, [pc, #80]	; (80013f4 <inputTunne+0x70>)
 80013a2:	7f9b      	ldrb	r3, [r3, #30]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d01a      	beq.n	80013de <inputTunne+0x5a>
      tunne = !tunne;
 80013a8:	4b13      	ldr	r3, [pc, #76]	; (80013f8 <inputTunne+0x74>)
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	bf0c      	ite	eq
 80013b0:	2301      	moveq	r3, #1
 80013b2:	2300      	movne	r3, #0
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	461a      	mov	r2, r3
 80013b8:	4b0f      	ldr	r3, [pc, #60]	; (80013f8 <inputTunne+0x74>)
 80013ba:	701a      	strb	r2, [r3, #0]

	  if (tunne){
 80013bc:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <inputTunne+0x74>)
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d006      	beq.n	80013d2 <inputTunne+0x4e>
		screenNum = TUNNE_SCREEN;
 80013c4:	4b0d      	ldr	r3, [pc, #52]	; (80013fc <inputTunne+0x78>)
 80013c6:	2205      	movs	r2, #5
 80013c8:	701a      	strb	r2, [r3, #0]
		menu = TUNNE_SCREEN;
 80013ca:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <inputTunne+0x7c>)
 80013cc:	2205      	movs	r2, #5
 80013ce:	701a      	strb	r2, [r3, #0]
 80013d0:	e005      	b.n	80013de <inputTunne+0x5a>
	  }else{
		screenNum = MAIN_SCREEN;
 80013d2:	4b0a      	ldr	r3, [pc, #40]	; (80013fc <inputTunne+0x78>)
 80013d4:	2203      	movs	r2, #3
 80013d6:	701a      	strb	r2, [r3, #0]
		menu = MAIN_SCREEN;
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <inputTunne+0x7c>)
 80013da:	2203      	movs	r2, #3
 80013dc:	701a      	strb	r2, [r3, #0]
	/*
	if (acorde){
		menu = TUNNE_SCREEN;
	}
*/
	lastState[_TUNNE] = buttonState[_TUNNE];
 80013de:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <inputTunne+0x6c>)
 80013e0:	7f9a      	ldrb	r2, [r3, #30]
 80013e2:	4b04      	ldr	r3, [pc, #16]	; (80013f4 <inputTunne+0x70>)
 80013e4:	779a      	strb	r2, [r3, #30]
}
 80013e6:	bf00      	nop
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40020000 	.word	0x40020000
 80013f0:	2000071c 	.word	0x2000071c
 80013f4:	20000740 	.word	0x20000740
 80013f8:	20000276 	.word	0x20000276
 80013fc:	20000277 	.word	0x20000277
 8001400:	200000d0 	.word	0x200000d0

08001404 <inputPresets>:


void inputPresets (void){
 8001404:	b590      	push	{r4, r7, lr}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0

  for (int i = 0; i < 6; i++){                                         // 6 presets en total.
 800140a:	2300      	movs	r3, #0
 800140c:	607b      	str	r3, [r7, #4]
 800140e:	e03a      	b.n	8001486 <inputPresets+0x82>

    buttonState[i + _PRESET0] = HAL_GPIO_ReadPin(presetPort_list[i], presetPin_list[i]);  //internal pullup
 8001410:	4a20      	ldr	r2, [pc, #128]	; (8001494 <inputPresets+0x90>)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001418:	4a1f      	ldr	r2, [pc, #124]	; (8001498 <inputPresets+0x94>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f103 0418 	add.w	r4, r3, #24
 8001426:	4611      	mov	r1, r2
 8001428:	f001 fa80 	bl	800292c <HAL_GPIO_ReadPin>
 800142c:	4603      	mov	r3, r0
 800142e:	461a      	mov	r2, r3
 8001430:	4b1a      	ldr	r3, [pc, #104]	; (800149c <inputPresets+0x98>)
 8001432:	551a      	strb	r2, [r3, r4]

    if(!buttonState[i + _PRESET0] && lastState[i + _PRESET0]){                                // If we read 0, and the last time we read 1, means button was just pressed
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	3318      	adds	r3, #24
 8001438:	4a18      	ldr	r2, [pc, #96]	; (800149c <inputPresets+0x98>)
 800143a:	5cd3      	ldrb	r3, [r2, r3]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d116      	bne.n	800146e <inputPresets+0x6a>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	3318      	adds	r3, #24
 8001444:	4a16      	ldr	r2, [pc, #88]	; (80014a0 <inputPresets+0x9c>)
 8001446:	5cd3      	ldrb	r3, [r2, r3]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d010      	beq.n	800146e <inputPresets+0x6a>

        //MIDI.sendProgramChange(i - PRESET0, MIDI_CHANNEL);

		//event = {0x0C, 0xC0 | MIDI_CHANNEL, i, 0};
		//MidiUSB.sendMIDI(event);
		midi_msg[0] = 0x0C;	//0x0C == type event (program change)
 800144c:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <inputPresets+0xa0>)
 800144e:	220c      	movs	r2, #12
 8001450:	701a      	strb	r2, [r3, #0]
		midi_msg[1] = 0xC0 | 1;
 8001452:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <inputPresets+0xa0>)
 8001454:	22c1      	movs	r2, #193	; 0xc1
 8001456:	705a      	strb	r2, [r3, #1]
		midi_msg[2] = i;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	b2da      	uxtb	r2, r3
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <inputPresets+0xa0>)
 800145e:	709a      	strb	r2, [r3, #2]
		midi_msg[3] = 0;	//last param == 0 (unused in program change).
 8001460:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <inputPresets+0xa0>)
 8001462:	2200      	movs	r2, #0
 8001464:	70da      	strb	r2, [r3, #3]
		MIDI_SendBuffer(midi_msg, 4);
 8001466:	2104      	movs	r1, #4
 8001468:	480e      	ldr	r0, [pc, #56]	; (80014a4 <inputPresets+0xa0>)
 800146a:	f007 f8cb 	bl	8008604 <MIDI_SendBuffer>

    } //end if

    lastState[i + _PRESET0] = buttonState[i + _PRESET0];                                        // Update last button state.
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	f103 0218 	add.w	r2, r3, #24
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3318      	adds	r3, #24
 8001478:	4908      	ldr	r1, [pc, #32]	; (800149c <inputPresets+0x98>)
 800147a:	5c89      	ldrb	r1, [r1, r2]
 800147c:	4a08      	ldr	r2, [pc, #32]	; (80014a0 <inputPresets+0x9c>)
 800147e:	54d1      	strb	r1, [r2, r3]
  for (int i = 0; i < 6; i++){                                         // 6 presets en total.
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3301      	adds	r3, #1
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b05      	cmp	r3, #5
 800148a:	ddc1      	ble.n	8001410 <inputPresets+0xc>
  } //end for

} //end inputPresets
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	bd90      	pop	{r4, r7, pc}
 8001494:	20000084 	.word	0x20000084
 8001498:	08009a74 	.word	0x08009a74
 800149c:	2000071c 	.word	0x2000071c
 80014a0:	20000740 	.word	0x20000740
 80014a4:	20000760 	.word	0x20000760

080014a8 <inputNotes>:


void inputNotes(void){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0

  for (int i = 0; i <= 12; i++){
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	e0a6      	b.n	8001602 <inputNotes+0x15a>

    buttonState[i + _DO] = HAL_GPIO_ReadPin(notePort_list[i], notePin_list[i]);
 80014b4:	4a57      	ldr	r2, [pc, #348]	; (8001614 <inputNotes+0x16c>)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80014bc:	4a56      	ldr	r2, [pc, #344]	; (8001618 <inputNotes+0x170>)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80014c4:	4619      	mov	r1, r3
 80014c6:	f001 fa31 	bl	800292c <HAL_GPIO_ReadPin>
 80014ca:	4603      	mov	r3, r0
 80014cc:	4619      	mov	r1, r3
 80014ce:	4a53      	ldr	r2, [pc, #332]	; (800161c <inputNotes+0x174>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	4413      	add	r3, r2
 80014d4:	460a      	mov	r2, r1
 80014d6:	701a      	strb	r2, [r3, #0]

    if(!buttonState[i + _DO] && lastState[i + _DO]){                                // If we read 1, and the last time we read 0, means button was just pressed
 80014d8:	4a50      	ldr	r2, [pc, #320]	; (800161c <inputNotes+0x174>)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d169      	bne.n	80015b8 <inputNotes+0x110>
 80014e4:	4a4e      	ldr	r2, [pc, #312]	; (8001620 <inputNotes+0x178>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4413      	add	r3, r2
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d063      	beq.n	80015b8 <inputNotes+0x110>

        if (acorde){
 80014f0:	4b4c      	ldr	r3, [pc, #304]	; (8001624 <inputNotes+0x17c>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d018      	beq.n	800152a <inputNotes+0x82>
            lastSendNote[i] = makeChord(firstDoTunning + i + 12 * octava, i);
 80014f8:	4b4b      	ldr	r3, [pc, #300]	; (8001628 <inputNotes+0x180>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	461a      	mov	r2, r3
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	18d1      	adds	r1, r2, r3
 8001502:	4b4a      	ldr	r3, [pc, #296]	; (800162c <inputNotes+0x184>)
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	4613      	mov	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4413      	add	r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	440b      	add	r3, r1
 8001510:	461a      	mov	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	b2db      	uxtb	r3, r3
 8001516:	4619      	mov	r1, r3
 8001518:	4610      	mov	r0, r2
 800151a:	f7fe ffe7 	bl	80004ec <makeChord>
 800151e:	4601      	mov	r1, r0
 8001520:	4a43      	ldr	r2, [pc, #268]	; (8001630 <inputNotes+0x188>)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001528:	e010      	b.n	800154c <inputNotes+0xa4>

        }else{

            lastSendNote[i] = firstDoTunning + i + 12 * octava;
 800152a:	4b3f      	ldr	r3, [pc, #252]	; (8001628 <inputNotes+0x180>)
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	461a      	mov	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	18d1      	adds	r1, r2, r3
 8001534:	4b3d      	ldr	r3, [pc, #244]	; (800162c <inputNotes+0x184>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4613      	mov	r3, r2
 800153a:	005b      	lsls	r3, r3, #1
 800153c:	4413      	add	r3, r2
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	4619      	mov	r1, r3
 8001544:	4a3a      	ldr	r2, [pc, #232]	; (8001630 <inputNotes+0x188>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        }

        if (sustainMode == 1){
 800154c:	4b39      	ldr	r3, [pc, #228]	; (8001634 <inputNotes+0x18c>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b01      	cmp	r3, #1
 8001552:	d122      	bne.n	800159a <inputNotes+0xf2>

			if (lastSustainNote != lastSendNote[i]){
 8001554:	4a36      	ldr	r2, [pc, #216]	; (8001630 <inputNotes+0x188>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800155c:	4b36      	ldr	r3, [pc, #216]	; (8001638 <inputNotes+0x190>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	429a      	cmp	r2, r3
 8001562:	d010      	beq.n	8001586 <inputNotes+0xde>

				sendChord(lastSustainNote, 0, 1);
 8001564:	4b34      	ldr	r3, [pc, #208]	; (8001638 <inputNotes+0x190>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	2201      	movs	r2, #1
 800156a:	2100      	movs	r1, #0
 800156c:	4618      	mov	r0, r3
 800156e:	f000 f9d5 	bl	800191c <sendChord>
				lastSustainNote = lastSendNote[i];
 8001572:	4a2f      	ldr	r2, [pc, #188]	; (8001630 <inputNotes+0x188>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800157a:	4a2f      	ldr	r2, [pc, #188]	; (8001638 <inputNotes+0x190>)
 800157c:	6013      	str	r3, [r2, #0]
				sustainFlag = 1;
 800157e:	4b2f      	ldr	r3, [pc, #188]	; (800163c <inputNotes+0x194>)
 8001580:	2201      	movs	r2, #1
 8001582:	701a      	strb	r2, [r3, #0]
 8001584:	e009      	b.n	800159a <inputNotes+0xf2>

			}else{

				sustainFlag = !sustainFlag;
 8001586:	4b2d      	ldr	r3, [pc, #180]	; (800163c <inputNotes+0x194>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b00      	cmp	r3, #0
 800158c:	bf0c      	ite	eq
 800158e:	2301      	moveq	r3, #1
 8001590:	2300      	movne	r3, #0
 8001592:	b2db      	uxtb	r3, r3
 8001594:	461a      	mov	r2, r3
 8001596:	4b29      	ldr	r3, [pc, #164]	; (800163c <inputNotes+0x194>)
 8001598:	701a      	strb	r2, [r3, #0]





        sendChord(lastSendNote[i], 127 * sustainFlag, 1);
 800159a:	4a25      	ldr	r2, [pc, #148]	; (8001630 <inputNotes+0x188>)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80015a2:	4b26      	ldr	r3, [pc, #152]	; (800163c <inputNotes+0x194>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	4613      	mov	r3, r2
 80015aa:	01db      	lsls	r3, r3, #7
 80015ac:	1a9b      	subs	r3, r3, r2
 80015ae:	2201      	movs	r2, #1
 80015b0:	4619      	mov	r1, r3
 80015b2:	f000 f9b3 	bl	800191c <sendChord>
 80015b6:	e018      	b.n	80015ea <inputNotes+0x142>



    }
    else if(buttonState[i] && !lastState[i]){                           // If we read 0, and the last time we read 1, means button was just released
 80015b8:	4a18      	ldr	r2, [pc, #96]	; (800161c <inputNotes+0x174>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	4413      	add	r3, r2
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d012      	beq.n	80015ea <inputNotes+0x142>
 80015c4:	4a16      	ldr	r2, [pc, #88]	; (8001620 <inputNotes+0x178>)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	4413      	add	r3, r2
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d10c      	bne.n	80015ea <inputNotes+0x142>
        if (sustainMode != 1){
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <inputNotes+0x18c>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d008      	beq.n	80015ea <inputNotes+0x142>
			sendChord(lastSendNote[i], 0, 1);           // 0 in second param meens "noteOff".
 80015d8:	4a15      	ldr	r2, [pc, #84]	; (8001630 <inputNotes+0x188>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e0:	2201      	movs	r2, #1
 80015e2:	2100      	movs	r1, #0
 80015e4:	4618      	mov	r0, r3
 80015e6:	f000 f999 	bl	800191c <sendChord>
        }
    }

    lastState[i] = buttonState[i];                                        // Update last button state.
 80015ea:	4a0c      	ldr	r2, [pc, #48]	; (800161c <inputNotes+0x174>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	4413      	add	r3, r2
 80015f0:	7819      	ldrb	r1, [r3, #0]
 80015f2:	4a0b      	ldr	r2, [pc, #44]	; (8001620 <inputNotes+0x178>)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4413      	add	r3, r2
 80015f8:	460a      	mov	r2, r1
 80015fa:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i <= 12; i++){
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	3301      	adds	r3, #1
 8001600:	607b      	str	r3, [r7, #4]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b0c      	cmp	r3, #12
 8001606:	f77f af55 	ble.w	80014b4 <inputNotes+0xc>
  }
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	2000009c 	.word	0x2000009c
 8001618:	08009a80 	.word	0x08009a80
 800161c:	2000071c 	.word	0x2000071c
 8001620:	20000740 	.word	0x20000740
 8001624:	20000275 	.word	0x20000275
 8001628:	200006a4 	.word	0x200006a4
 800162c:	20000204 	.word	0x20000204
 8001630:	2000023c 	.word	0x2000023c
 8001634:	20000274 	.word	0x20000274
 8001638:	20000270 	.word	0x20000270
 800163c:	20000070 	.word	0x20000070

08001640 <inputSaveChord>:


void inputSaveChord(void){
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0

uint8_t flag = 0;
 8001646:	2300      	movs	r3, #0
 8001648:	71fb      	strb	r3, [r7, #7]

	for (int i = 0; i <= 12; i++){
 800164a:	2300      	movs	r3, #0
 800164c:	603b      	str	r3, [r7, #0]
 800164e:	e04c      	b.n	80016ea <inputSaveChord+0xaa>

		buttonState[i + _DO] = HAL_GPIO_ReadPin(notePort_list[i], notePin_list[i]);
 8001650:	4a31      	ldr	r2, [pc, #196]	; (8001718 <inputSaveChord+0xd8>)
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001658:	4a30      	ldr	r2, [pc, #192]	; (800171c <inputSaveChord+0xdc>)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001660:	4619      	mov	r1, r3
 8001662:	f001 f963 	bl	800292c <HAL_GPIO_ReadPin>
 8001666:	4603      	mov	r3, r0
 8001668:	4619      	mov	r1, r3
 800166a:	4a2d      	ldr	r2, [pc, #180]	; (8001720 <inputSaveChord+0xe0>)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	4413      	add	r3, r2
 8001670:	460a      	mov	r2, r1
 8001672:	701a      	strb	r2, [r3, #0]

		if(!buttonState[i + _DO] && lastState[i + _DO]){       // If we read 1, and the last time we read 0, means button was just pressed
 8001674:	4a2a      	ldr	r2, [pc, #168]	; (8001720 <inputSaveChord+0xe0>)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	4413      	add	r3, r2
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d128      	bne.n	80016d2 <inputSaveChord+0x92>
 8001680:	4a28      	ldr	r2, [pc, #160]	; (8001724 <inputSaveChord+0xe4>)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	4413      	add	r3, r2
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d01d      	beq.n	80016c8 <inputSaveChord+0x88>

			//storing the selected chord:
			setChord(i);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	b2db      	uxtb	r3, r3
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe ff4d 	bl	8000530 <setChord>
			footKey = NORMAL;
 8001696:	4b24      	ldr	r3, [pc, #144]	; (8001728 <inputSaveChord+0xe8>)
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
			screenNum = POPUP_SAVED_CHORD;
 800169c:	4b23      	ldr	r3, [pc, #140]	; (800172c <inputSaveChord+0xec>)
 800169e:	2208      	movs	r2, #8
 80016a0:	701a      	strb	r2, [r3, #0]
			menu = CHORD_SCREEN; 				//return point to chordSelect().
 80016a2:	4b23      	ldr	r3, [pc, #140]	; (8001730 <inputSaveChord+0xf0>)
 80016a4:	2204      	movs	r2, #4
 80016a6:	701a      	strb	r2, [r3, #0]
			lastKey_pos = i; 					// to show in screen the foot key pressed.
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	4b21      	ldr	r3, [pc, #132]	; (8001734 <inputSaveChord+0xf4>)
 80016ae:	701a      	strb	r2, [r3, #0]
			lastState[i] = buttonState[i];       // Update last button state.
 80016b0:	4a1b      	ldr	r2, [pc, #108]	; (8001720 <inputSaveChord+0xe0>)
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	4413      	add	r3, r2
 80016b6:	7819      	ldrb	r1, [r3, #0]
 80016b8:	4a1a      	ldr	r2, [pc, #104]	; (8001724 <inputSaveChord+0xe4>)
 80016ba:	683b      	ldr	r3, [r7, #0]
 80016bc:	4413      	add	r3, r2
 80016be:	460a      	mov	r2, r1
 80016c0:	701a      	strb	r2, [r3, #0]
			flag = 1;
 80016c2:	2301      	movs	r3, #1
 80016c4:	71fb      	strb	r3, [r7, #7]
			break; 								 //it must exit from function.
 80016c6:	e013      	b.n	80016f0 <inputSaveChord+0xb0>
		}
		else if(buttonState[i] && !lastState[i]){                           // If we read 0, and the last time we read 1, means button was just released
 80016c8:	4a15      	ldr	r2, [pc, #84]	; (8001720 <inputSaveChord+0xe0>)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	4413      	add	r3, r2
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	2b00      	cmp	r3, #0
			//POR AHORA NADA
		}
		lastState[i] = buttonState[i];                                        // Update last button state.
 80016d2:	4a13      	ldr	r2, [pc, #76]	; (8001720 <inputSaveChord+0xe0>)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	7819      	ldrb	r1, [r3, #0]
 80016da:	4a12      	ldr	r2, [pc, #72]	; (8001724 <inputSaveChord+0xe4>)
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	4413      	add	r3, r2
 80016e0:	460a      	mov	r2, r1
 80016e2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i <= 12; i++){
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	3301      	adds	r3, #1
 80016e8:	603b      	str	r3, [r7, #0]
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	2b0c      	cmp	r3, #12
 80016ee:	ddaf      	ble.n	8001650 <inputSaveChord+0x10>
	}

	if (!flag){
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d10c      	bne.n	8001710 <inputSaveChord+0xd0>
		if (d_pad == _LEFT){
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <inputSaveChord+0xf8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b15      	cmp	r3, #21
 80016fc:	d108      	bne.n	8001710 <inputSaveChord+0xd0>
			footKey = NORMAL;
 80016fe:	4b0a      	ldr	r3, [pc, #40]	; (8001728 <inputSaveChord+0xe8>)
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
			screenNum = POPUP_CANCEL;
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <inputSaveChord+0xec>)
 8001706:	220b      	movs	r2, #11
 8001708:	701a      	strb	r2, [r3, #0]
			menu = CHORD_SCREEN;
 800170a:	4b09      	ldr	r3, [pc, #36]	; (8001730 <inputSaveChord+0xf0>)
 800170c:	2204      	movs	r2, #4
 800170e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001710:	bf00      	nop
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	2000009c 	.word	0x2000009c
 800171c:	08009a80 	.word	0x08009a80
 8001720:	2000071c 	.word	0x2000071c
 8001724:	20000740 	.word	0x20000740
 8001728:	2000027d 	.word	0x2000027d
 800172c:	20000277 	.word	0x20000277
 8001730:	200000d0 	.word	0x200000d0
 8001734:	2000073b 	.word	0x2000073b
 8001738:	2000073c 	.word	0x2000073c

0800173c <chordSelect>:

void chordSelect(void){
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0

  uint8_t flag = 0;
 8001742:	2300      	movs	r3, #0
 8001744:	71fb      	strb	r3, [r7, #7]

  switch (chordSelect_cursor){
 8001746:	4b4f      	ldr	r3, [pc, #316]	; (8001884 <chordSelect+0x148>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d034      	beq.n	80017b8 <chordSelect+0x7c>
 800174e:	2b01      	cmp	r3, #1
 8001750:	d302      	bcc.n	8001758 <chordSelect+0x1c>
 8001752:	2b02      	cmp	r3, #2
 8001754:	d06f      	beq.n	8001836 <chordSelect+0xfa>
 8001756:	e089      	b.n	800186c <chordSelect+0x130>

		case 0:

			switch (d_pad){
 8001758:	4b4b      	ldr	r3, [pc, #300]	; (8001888 <chordSelect+0x14c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2b15      	cmp	r3, #21
 800175e:	d00c      	beq.n	800177a <chordSelect+0x3e>
 8001760:	2b16      	cmp	r3, #22
 8001762:	d019      	beq.n	8001798 <chordSelect+0x5c>
 8001764:	2b14      	cmp	r3, #20
 8001766:	d000      	beq.n	800176a <chordSelect+0x2e>
					if (chord > 7)
						chord = 0;
					flag = 1;
					break;
			}
			break;
 8001768:	e080      	b.n	800186c <chordSelect+0x130>
					chordSelect_cursor++;
 800176a:	4b46      	ldr	r3, [pc, #280]	; (8001884 <chordSelect+0x148>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	3301      	adds	r3, #1
 8001770:	4a44      	ldr	r2, [pc, #272]	; (8001884 <chordSelect+0x148>)
 8001772:	6013      	str	r3, [r2, #0]
					flag = 1;
 8001774:	2301      	movs	r3, #1
 8001776:	71fb      	strb	r3, [r7, #7]
					break;
 8001778:	e01d      	b.n	80017b6 <chordSelect+0x7a>
					chord--;
 800177a:	4b44      	ldr	r3, [pc, #272]	; (800188c <chordSelect+0x150>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	3b01      	subs	r3, #1
 8001780:	4a42      	ldr	r2, [pc, #264]	; (800188c <chordSelect+0x150>)
 8001782:	6013      	str	r3, [r2, #0]
					if (chord < 0)
 8001784:	4b41      	ldr	r3, [pc, #260]	; (800188c <chordSelect+0x150>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	da02      	bge.n	8001792 <chordSelect+0x56>
						chord = 7;
 800178c:	4b3f      	ldr	r3, [pc, #252]	; (800188c <chordSelect+0x150>)
 800178e:	2207      	movs	r2, #7
 8001790:	601a      	str	r2, [r3, #0]
					flag = 1;
 8001792:	2301      	movs	r3, #1
 8001794:	71fb      	strb	r3, [r7, #7]
					break;
 8001796:	e00e      	b.n	80017b6 <chordSelect+0x7a>
					chord++;
 8001798:	4b3c      	ldr	r3, [pc, #240]	; (800188c <chordSelect+0x150>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	3301      	adds	r3, #1
 800179e:	4a3b      	ldr	r2, [pc, #236]	; (800188c <chordSelect+0x150>)
 80017a0:	6013      	str	r3, [r2, #0]
					if (chord > 7)
 80017a2:	4b3a      	ldr	r3, [pc, #232]	; (800188c <chordSelect+0x150>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	2b07      	cmp	r3, #7
 80017a8:	dd02      	ble.n	80017b0 <chordSelect+0x74>
						chord = 0;
 80017aa:	4b38      	ldr	r3, [pc, #224]	; (800188c <chordSelect+0x150>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
					flag = 1;
 80017b0:	2301      	movs	r3, #1
 80017b2:	71fb      	strb	r3, [r7, #7]
					break;
 80017b4:	bf00      	nop
			break;
 80017b6:	e059      	b.n	800186c <chordSelect+0x130>
		case 1:

			switch (d_pad){
 80017b8:	4b33      	ldr	r3, [pc, #204]	; (8001888 <chordSelect+0x14c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	3b13      	subs	r3, #19
 80017be:	2b03      	cmp	r3, #3
 80017c0:	d853      	bhi.n	800186a <chordSelect+0x12e>
 80017c2:	a201      	add	r2, pc, #4	; (adr r2, 80017c8 <chordSelect+0x8c>)
 80017c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017c8:	080017d9 	.word	0x080017d9
 80017cc:	080017e9 	.word	0x080017e9
 80017d0:	080017f9 	.word	0x080017f9
 80017d4:	08001817 	.word	0x08001817
				case _UP:
					chordSelect_cursor--;
 80017d8:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <chordSelect+0x148>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	3b01      	subs	r3, #1
 80017de:	4a29      	ldr	r2, [pc, #164]	; (8001884 <chordSelect+0x148>)
 80017e0:	6013      	str	r3, [r2, #0]
					flag = 1;
 80017e2:	2301      	movs	r3, #1
 80017e4:	71fb      	strb	r3, [r7, #7]
					break;
 80017e6:	e025      	b.n	8001834 <chordSelect+0xf8>
				case _DOWN:
					chordSelect_cursor++;
 80017e8:	4b26      	ldr	r3, [pc, #152]	; (8001884 <chordSelect+0x148>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	3301      	adds	r3, #1
 80017ee:	4a25      	ldr	r2, [pc, #148]	; (8001884 <chordSelect+0x148>)
 80017f0:	6013      	str	r3, [r2, #0]
					flag = 1;
 80017f2:	2301      	movs	r3, #1
 80017f4:	71fb      	strb	r3, [r7, #7]
					break;
 80017f6:	e01d      	b.n	8001834 <chordSelect+0xf8>
				case _LEFT:
					chordInv--;
 80017f8:	4b25      	ldr	r3, [pc, #148]	; (8001890 <chordSelect+0x154>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	4a24      	ldr	r2, [pc, #144]	; (8001890 <chordSelect+0x154>)
 8001800:	6013      	str	r3, [r2, #0]
					if (chordInv < 0)
 8001802:	4b23      	ldr	r3, [pc, #140]	; (8001890 <chordSelect+0x154>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	da02      	bge.n	8001810 <chordSelect+0xd4>
						chordInv = 2;
 800180a:	4b21      	ldr	r3, [pc, #132]	; (8001890 <chordSelect+0x154>)
 800180c:	2202      	movs	r2, #2
 800180e:	601a      	str	r2, [r3, #0]
					flag = 1;
 8001810:	2301      	movs	r3, #1
 8001812:	71fb      	strb	r3, [r7, #7]
					break;
 8001814:	e00e      	b.n	8001834 <chordSelect+0xf8>
				case _RIGHT:
					chordInv++;
 8001816:	4b1e      	ldr	r3, [pc, #120]	; (8001890 <chordSelect+0x154>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	3301      	adds	r3, #1
 800181c:	4a1c      	ldr	r2, [pc, #112]	; (8001890 <chordSelect+0x154>)
 800181e:	6013      	str	r3, [r2, #0]
					if (chordInv > 2)
 8001820:	4b1b      	ldr	r3, [pc, #108]	; (8001890 <chordSelect+0x154>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	2b02      	cmp	r3, #2
 8001826:	dd02      	ble.n	800182e <chordSelect+0xf2>
						chordInv = 0;
 8001828:	4b19      	ldr	r3, [pc, #100]	; (8001890 <chordSelect+0x154>)
 800182a:	2200      	movs	r2, #0
 800182c:	601a      	str	r2, [r3, #0]
					flag = 1;
 800182e:	2301      	movs	r3, #1
 8001830:	71fb      	strb	r3, [r7, #7]
					break;
 8001832:	bf00      	nop
			}
			break;
 8001834:	e019      	b.n	800186a <chordSelect+0x12e>
		case 2:

			switch (d_pad){
 8001836:	4b14      	ldr	r3, [pc, #80]	; (8001888 <chordSelect+0x14c>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	2b13      	cmp	r3, #19
 800183c:	d002      	beq.n	8001844 <chordSelect+0x108>
 800183e:	2b16      	cmp	r3, #22
 8001840:	d008      	beq.n	8001854 <chordSelect+0x118>
					footKey = SAVE_CHORD; //
					menu = RECUEST_FOOTKEY_SCREEN;
					screenNum = RECUEST_FOOTKEY_SCREEN;
					break;
			}
			break;
 8001842:	e013      	b.n	800186c <chordSelect+0x130>
					chordSelect_cursor--;
 8001844:	4b0f      	ldr	r3, [pc, #60]	; (8001884 <chordSelect+0x148>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	3b01      	subs	r3, #1
 800184a:	4a0e      	ldr	r2, [pc, #56]	; (8001884 <chordSelect+0x148>)
 800184c:	6013      	str	r3, [r2, #0]
					flag = 1;
 800184e:	2301      	movs	r3, #1
 8001850:	71fb      	strb	r3, [r7, #7]
					break;
 8001852:	e009      	b.n	8001868 <chordSelect+0x12c>
					footKey = SAVE_CHORD; //
 8001854:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <chordSelect+0x158>)
 8001856:	2201      	movs	r2, #1
 8001858:	701a      	strb	r2, [r3, #0]
					menu = RECUEST_FOOTKEY_SCREEN;
 800185a:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <chordSelect+0x15c>)
 800185c:	2207      	movs	r2, #7
 800185e:	701a      	strb	r2, [r3, #0]
					screenNum = RECUEST_FOOTKEY_SCREEN;
 8001860:	4b0e      	ldr	r3, [pc, #56]	; (800189c <chordSelect+0x160>)
 8001862:	2207      	movs	r2, #7
 8001864:	701a      	strb	r2, [r3, #0]
					break;
 8001866:	bf00      	nop
			break;
 8001868:	e000      	b.n	800186c <chordSelect+0x130>
			break;
 800186a:	bf00      	nop
	}

  if (flag){        ///flag de impresion
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d002      	beq.n	8001878 <chordSelect+0x13c>

      screenNum = CHORD_SCREEN;
 8001872:	4b0a      	ldr	r3, [pc, #40]	; (800189c <chordSelect+0x160>)
 8001874:	2204      	movs	r2, #4
 8001876:	701a      	strb	r2, [r3, #0]
  }
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	200006a0 	.word	0x200006a0
 8001888:	2000073c 	.word	0x2000073c
 800188c:	200006a8 	.word	0x200006a8
 8001890:	200006ac 	.word	0x200006ac
 8001894:	2000027d 	.word	0x2000027d
 8001898:	200000d0 	.word	0x200000d0
 800189c:	20000277 	.word	0x20000277

080018a0 <tunneSelect>:


void tunneSelect(void){
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
	uint8_t flag = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	71fb      	strb	r3, [r7, #7]

	switch (d_pad){
 80018aa:	4b19      	ldr	r3, [pc, #100]	; (8001910 <tunneSelect+0x70>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b15      	cmp	r3, #21
 80018b0:	d011      	beq.n	80018d6 <tunneSelect+0x36>
 80018b2:	2b16      	cmp	r3, #22
 80018b4:	d11f      	bne.n	80018f6 <tunneSelect+0x56>
		case _RIGHT:
			firstDoTunning++;
 80018b6:	4b17      	ldr	r3, [pc, #92]	; (8001914 <tunneSelect+0x74>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	3301      	adds	r3, #1
 80018bc:	b2da      	uxtb	r2, r3
 80018be:	4b15      	ldr	r3, [pc, #84]	; (8001914 <tunneSelect+0x74>)
 80018c0:	701a      	strb	r2, [r3, #0]
			if (firstDoTunning >59)
 80018c2:	4b14      	ldr	r3, [pc, #80]	; (8001914 <tunneSelect+0x74>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b3b      	cmp	r3, #59	; 0x3b
 80018c8:	d902      	bls.n	80018d0 <tunneSelect+0x30>
				firstDoTunning = 48;
 80018ca:	4b12      	ldr	r3, [pc, #72]	; (8001914 <tunneSelect+0x74>)
 80018cc:	2230      	movs	r2, #48	; 0x30
 80018ce:	701a      	strb	r2, [r3, #0]
			flag = 1;
 80018d0:	2301      	movs	r3, #1
 80018d2:	71fb      	strb	r3, [r7, #7]
			break;
 80018d4:	e00f      	b.n	80018f6 <tunneSelect+0x56>
		case _LEFT:
			firstDoTunning--;
 80018d6:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <tunneSelect+0x74>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	3b01      	subs	r3, #1
 80018dc:	b2da      	uxtb	r2, r3
 80018de:	4b0d      	ldr	r3, [pc, #52]	; (8001914 <tunneSelect+0x74>)
 80018e0:	701a      	strb	r2, [r3, #0]
			if (firstDoTunning < 48)
 80018e2:	4b0c      	ldr	r3, [pc, #48]	; (8001914 <tunneSelect+0x74>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b2f      	cmp	r3, #47	; 0x2f
 80018e8:	d802      	bhi.n	80018f0 <tunneSelect+0x50>
				firstDoTunning = 59;
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <tunneSelect+0x74>)
 80018ec:	223b      	movs	r2, #59	; 0x3b
 80018ee:	701a      	strb	r2, [r3, #0]
			flag = 1;
 80018f0:	2301      	movs	r3, #1
 80018f2:	71fb      	strb	r3, [r7, #7]
			break;
 80018f4:	bf00      	nop
	}

	if (flag){
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d002      	beq.n	8001902 <tunneSelect+0x62>
		screenNum = TUNNE_SCREEN;
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <tunneSelect+0x78>)
 80018fe:	2205      	movs	r2, #5
 8001900:	701a      	strb	r2, [r3, #0]
	}
}
 8001902:	bf00      	nop
 8001904:	370c      	adds	r7, #12
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	2000073c 	.word	0x2000073c
 8001914:	200006a4 	.word	0x200006a4
 8001918:	20000277 	.word	0x20000277

0800191c <sendChord>:


void sendChord(unsigned long bnotes, int velocity, int channel){
 800191c:	b580      	push	{r7, lr}
 800191e:	b086      	sub	sp, #24
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]

  uint8_t note1;
  uint8_t note2;
  uint8_t note3;

  note1 = (bnotes & 0x7f);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001930:	75fb      	strb	r3, [r7, #23]
  note2 = (bnotes >> 8) & 0x7f;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	0a1b      	lsrs	r3, r3, #8
 8001936:	b2db      	uxtb	r3, r3
 8001938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800193c:	75bb      	strb	r3, [r7, #22]
  note3 = (bnotes >> 16) & 0x7f;
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	0c1b      	lsrs	r3, r3, #16
 8001942:	b2db      	uxtb	r3, r3
 8001944:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001948:	757b      	strb	r3, [r7, #21]

  midi_msg[0] = 0x09;	//0x09 == type event (noteOn).
 800194a:	4b1e      	ldr	r3, [pc, #120]	; (80019c4 <sendChord+0xa8>)
 800194c:	2209      	movs	r2, #9
 800194e:	701a      	strb	r2, [r3, #0]
  midi_msg[1] = 0x90 | 1;
 8001950:	4b1c      	ldr	r3, [pc, #112]	; (80019c4 <sendChord+0xa8>)
 8001952:	2291      	movs	r2, #145	; 0x91
 8001954:	705a      	strb	r2, [r3, #1]
  midi_msg[2] = note1;
 8001956:	4a1b      	ldr	r2, [pc, #108]	; (80019c4 <sendChord+0xa8>)
 8001958:	7dfb      	ldrb	r3, [r7, #23]
 800195a:	7093      	strb	r3, [r2, #2]
  midi_msg[3] = velocity;
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	b2da      	uxtb	r2, r3
 8001960:	4b18      	ldr	r3, [pc, #96]	; (80019c4 <sendChord+0xa8>)
 8001962:	70da      	strb	r2, [r3, #3]
  MIDI_SendBuffer(midi_msg, 4);
 8001964:	2104      	movs	r1, #4
 8001966:	4817      	ldr	r0, [pc, #92]	; (80019c4 <sendChord+0xa8>)
 8001968:	f006 fe4c 	bl	8008604 <MIDI_SendBuffer>

  if (note2 && note3){
 800196c:	7dbb      	ldrb	r3, [r7, #22]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d024      	beq.n	80019bc <sendChord+0xa0>
 8001972:	7d7b      	ldrb	r3, [r7, #21]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d021      	beq.n	80019bc <sendChord+0xa0>

	  midi_msg[0] = 0x09;	//0x09 == type event (noteOn).
 8001978:	4b12      	ldr	r3, [pc, #72]	; (80019c4 <sendChord+0xa8>)
 800197a:	2209      	movs	r2, #9
 800197c:	701a      	strb	r2, [r3, #0]
	  midi_msg[1] = 0x90 | 1;
 800197e:	4b11      	ldr	r3, [pc, #68]	; (80019c4 <sendChord+0xa8>)
 8001980:	2291      	movs	r2, #145	; 0x91
 8001982:	705a      	strb	r2, [r3, #1]
	  midi_msg[2] = note2;
 8001984:	4a0f      	ldr	r2, [pc, #60]	; (80019c4 <sendChord+0xa8>)
 8001986:	7dbb      	ldrb	r3, [r7, #22]
 8001988:	7093      	strb	r3, [r2, #2]
	  midi_msg[3] = velocity;
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	b2da      	uxtb	r2, r3
 800198e:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <sendChord+0xa8>)
 8001990:	70da      	strb	r2, [r3, #3]
	  MIDI_SendBuffer(midi_msg, 4);
 8001992:	2104      	movs	r1, #4
 8001994:	480b      	ldr	r0, [pc, #44]	; (80019c4 <sendChord+0xa8>)
 8001996:	f006 fe35 	bl	8008604 <MIDI_SendBuffer>

	  midi_msg[0] = 0x09;	//0x09 == type event (noteOn).
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <sendChord+0xa8>)
 800199c:	2209      	movs	r2, #9
 800199e:	701a      	strb	r2, [r3, #0]
	  midi_msg[1] = 0x90 | 1;
 80019a0:	4b08      	ldr	r3, [pc, #32]	; (80019c4 <sendChord+0xa8>)
 80019a2:	2291      	movs	r2, #145	; 0x91
 80019a4:	705a      	strb	r2, [r3, #1]
	  midi_msg[2] = note3;
 80019a6:	4a07      	ldr	r2, [pc, #28]	; (80019c4 <sendChord+0xa8>)
 80019a8:	7d7b      	ldrb	r3, [r7, #21]
 80019aa:	7093      	strb	r3, [r2, #2]
	  midi_msg[3] = velocity;
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <sendChord+0xa8>)
 80019b2:	70da      	strb	r2, [r3, #3]
	  MIDI_SendBuffer(midi_msg, 4);
 80019b4:	2104      	movs	r1, #4
 80019b6:	4803      	ldr	r0, [pc, #12]	; (80019c4 <sendChord+0xa8>)
 80019b8:	f006 fe24 	bl	8008604 <MIDI_SendBuffer>
  }
}
 80019bc:	bf00      	nop
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20000760 	.word	0x20000760

080019c8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	if (popup_time != 0){
 80019d0:	4b0c      	ldr	r3, [pc, #48]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d00b      	beq.n	80019f0 <HAL_TIM_PeriodElapsedCallback+0x28>
		popup_time--;
 80019d8:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	3b01      	subs	r3, #1
 80019de:	4a09      	ldr	r2, [pc, #36]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80019e0:	6013      	str	r3, [r2, #0]
		if (popup_time == 1) popup_timeUp = 1;
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d102      	bne.n	80019f0 <HAL_TIM_PeriodElapsedCallback+0x28>
 80019ea:	4b07      	ldr	r3, [pc, #28]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80019ec:	2201      	movs	r2, #1
 80019ee:	701a      	strb	r2, [r3, #0]
	}

	contador_loop = 0;
 80019f0:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x44>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
}
 80019f6:	bf00      	nop
 80019f8:	370c      	adds	r7, #12
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	20000278 	.word	0x20000278
 8001a08:	2000027c 	.word	0x2000027c
 8001a0c:	20000280 	.word	0x20000280

08001a10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a14:	bf00      	nop
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr
	...

08001a20 <SSD1306_Init>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

uint8_t SSD1306_Init(void) {
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001a26:	f000 fa1b 	bl	8001e60 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001a2a:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001a2e:	2201      	movs	r2, #1
 8001a30:	2178      	movs	r1, #120	; 0x78
 8001a32:	4858      	ldr	r0, [pc, #352]	; (8001b94 <SSD1306_Init+0x174>)
 8001a34:	f001 f9c8 	bl	8002dc8 <HAL_I2C_IsDeviceReady>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	e0a4      	b.n	8001b8c <SSD1306_Init+0x16c>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001a42:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001a46:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a48:	e002      	b.n	8001a50 <SSD1306_Init+0x30>
		p--;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3b01      	subs	r3, #1
 8001a4e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f9      	bne.n	8001a4a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001a56:	22ae      	movs	r2, #174	; 0xae
 8001a58:	2100      	movs	r1, #0
 8001a5a:	2078      	movs	r0, #120	; 0x78
 8001a5c:	f000 fa6e 	bl	8001f3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001a60:	2220      	movs	r2, #32
 8001a62:	2100      	movs	r1, #0
 8001a64:	2078      	movs	r0, #120	; 0x78
 8001a66:	f000 fa69 	bl	8001f3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001a6a:	2210      	movs	r2, #16
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	2078      	movs	r0, #120	; 0x78
 8001a70:	f000 fa64 	bl	8001f3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001a74:	22b0      	movs	r2, #176	; 0xb0
 8001a76:	2100      	movs	r1, #0
 8001a78:	2078      	movs	r0, #120	; 0x78
 8001a7a:	f000 fa5f 	bl	8001f3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001a7e:	22c8      	movs	r2, #200	; 0xc8
 8001a80:	2100      	movs	r1, #0
 8001a82:	2078      	movs	r0, #120	; 0x78
 8001a84:	f000 fa5a 	bl	8001f3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2100      	movs	r1, #0
 8001a8c:	2078      	movs	r0, #120	; 0x78
 8001a8e:	f000 fa55 	bl	8001f3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001a92:	2210      	movs	r2, #16
 8001a94:	2100      	movs	r1, #0
 8001a96:	2078      	movs	r0, #120	; 0x78
 8001a98:	f000 fa50 	bl	8001f3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001a9c:	2240      	movs	r2, #64	; 0x40
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	2078      	movs	r0, #120	; 0x78
 8001aa2:	f000 fa4b 	bl	8001f3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001aa6:	2281      	movs	r2, #129	; 0x81
 8001aa8:	2100      	movs	r1, #0
 8001aaa:	2078      	movs	r0, #120	; 0x78
 8001aac:	f000 fa46 	bl	8001f3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001ab0:	22ff      	movs	r2, #255	; 0xff
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	2078      	movs	r0, #120	; 0x78
 8001ab6:	f000 fa41 	bl	8001f3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001aba:	22a1      	movs	r2, #161	; 0xa1
 8001abc:	2100      	movs	r1, #0
 8001abe:	2078      	movs	r0, #120	; 0x78
 8001ac0:	f000 fa3c 	bl	8001f3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001ac4:	22a6      	movs	r2, #166	; 0xa6
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	2078      	movs	r0, #120	; 0x78
 8001aca:	f000 fa37 	bl	8001f3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8001ace:	22a8      	movs	r2, #168	; 0xa8
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	2078      	movs	r0, #120	; 0x78
 8001ad4:	f000 fa32 	bl	8001f3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001ad8:	223f      	movs	r2, #63	; 0x3f
 8001ada:	2100      	movs	r1, #0
 8001adc:	2078      	movs	r0, #120	; 0x78
 8001ade:	f000 fa2d 	bl	8001f3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001ae2:	22a4      	movs	r2, #164	; 0xa4
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	2078      	movs	r0, #120	; 0x78
 8001ae8:	f000 fa28 	bl	8001f3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001aec:	22d3      	movs	r2, #211	; 0xd3
 8001aee:	2100      	movs	r1, #0
 8001af0:	2078      	movs	r0, #120	; 0x78
 8001af2:	f000 fa23 	bl	8001f3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001af6:	2200      	movs	r2, #0
 8001af8:	2100      	movs	r1, #0
 8001afa:	2078      	movs	r0, #120	; 0x78
 8001afc:	f000 fa1e 	bl	8001f3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001b00:	22d5      	movs	r2, #213	; 0xd5
 8001b02:	2100      	movs	r1, #0
 8001b04:	2078      	movs	r0, #120	; 0x78
 8001b06:	f000 fa19 	bl	8001f3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001b0a:	22f0      	movs	r2, #240	; 0xf0
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2078      	movs	r0, #120	; 0x78
 8001b10:	f000 fa14 	bl	8001f3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001b14:	22d9      	movs	r2, #217	; 0xd9
 8001b16:	2100      	movs	r1, #0
 8001b18:	2078      	movs	r0, #120	; 0x78
 8001b1a:	f000 fa0f 	bl	8001f3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001b1e:	2222      	movs	r2, #34	; 0x22
 8001b20:	2100      	movs	r1, #0
 8001b22:	2078      	movs	r0, #120	; 0x78
 8001b24:	f000 fa0a 	bl	8001f3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001b28:	22da      	movs	r2, #218	; 0xda
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	2078      	movs	r0, #120	; 0x78
 8001b2e:	f000 fa05 	bl	8001f3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001b32:	2212      	movs	r2, #18
 8001b34:	2100      	movs	r1, #0
 8001b36:	2078      	movs	r0, #120	; 0x78
 8001b38:	f000 fa00 	bl	8001f3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001b3c:	22db      	movs	r2, #219	; 0xdb
 8001b3e:	2100      	movs	r1, #0
 8001b40:	2078      	movs	r0, #120	; 0x78
 8001b42:	f000 f9fb 	bl	8001f3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001b46:	2220      	movs	r2, #32
 8001b48:	2100      	movs	r1, #0
 8001b4a:	2078      	movs	r0, #120	; 0x78
 8001b4c:	f000 f9f6 	bl	8001f3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001b50:	228d      	movs	r2, #141	; 0x8d
 8001b52:	2100      	movs	r1, #0
 8001b54:	2078      	movs	r0, #120	; 0x78
 8001b56:	f000 f9f1 	bl	8001f3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001b5a:	2214      	movs	r2, #20
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2078      	movs	r0, #120	; 0x78
 8001b60:	f000 f9ec 	bl	8001f3c <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001b64:	22af      	movs	r2, #175	; 0xaf
 8001b66:	2100      	movs	r1, #0
 8001b68:	2078      	movs	r0, #120	; 0x78
 8001b6a:	f000 f9e7 	bl	8001f3c <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f000 f842 	bl	8001bf8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001b74:	f000 f812 	bl	8001b9c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001b78:	4b07      	ldr	r3, [pc, #28]	; (8001b98 <SSD1306_Init+0x178>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <SSD1306_Init+0x178>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001b84:	4b04      	ldr	r3, [pc, #16]	; (8001b98 <SSD1306_Init+0x178>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001b8a:	2301      	movs	r3, #1
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	200006c8 	.word	0x200006c8
 8001b98:	20000684 	.word	0x20000684

08001b9c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	71fb      	strb	r3, [r7, #7]
 8001ba6:	e01d      	b.n	8001be4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001ba8:	79fb      	ldrb	r3, [r7, #7]
 8001baa:	3b50      	subs	r3, #80	; 0x50
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	461a      	mov	r2, r3
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	2078      	movs	r0, #120	; 0x78
 8001bb4:	f000 f9c2 	bl	8001f3c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	2100      	movs	r1, #0
 8001bbc:	2078      	movs	r0, #120	; 0x78
 8001bbe:	f000 f9bd 	bl	8001f3c <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8001bc2:	2210      	movs	r2, #16
 8001bc4:	2100      	movs	r1, #0
 8001bc6:	2078      	movs	r0, #120	; 0x78
 8001bc8:	f000 f9b8 	bl	8001f3c <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	01db      	lsls	r3, r3, #7
 8001bd0:	4a08      	ldr	r2, [pc, #32]	; (8001bf4 <SSD1306_UpdateScreen+0x58>)
 8001bd2:	441a      	add	r2, r3
 8001bd4:	2380      	movs	r3, #128	; 0x80
 8001bd6:	2140      	movs	r1, #64	; 0x40
 8001bd8:	2078      	movs	r0, #120	; 0x78
 8001bda:	f000 f955 	bl	8001e88 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001bde:	79fb      	ldrb	r3, [r7, #7]
 8001be0:	3301      	adds	r3, #1
 8001be2:	71fb      	strb	r3, [r7, #7]
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	2b07      	cmp	r3, #7
 8001be8:	d9de      	bls.n	8001ba8 <SSD1306_UpdateScreen+0xc>
	}
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000284 	.word	0x20000284

08001bf8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b082      	sub	sp, #8
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001c02:	79fb      	ldrb	r3, [r7, #7]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d101      	bne.n	8001c0c <SSD1306_Fill+0x14>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	e000      	b.n	8001c0e <SSD1306_Fill+0x16>
 8001c0c:	23ff      	movs	r3, #255	; 0xff
 8001c0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c12:	4619      	mov	r1, r3
 8001c14:	4803      	ldr	r0, [pc, #12]	; (8001c24 <SSD1306_Fill+0x2c>)
 8001c16:	f007 f84f 	bl	8008cb8 <memset>
}
 8001c1a:	bf00      	nop
 8001c1c:	3708      	adds	r7, #8
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000284 	.word	0x20000284

08001c28 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	4603      	mov	r3, r0
 8001c30:	80fb      	strh	r3, [r7, #6]
 8001c32:	460b      	mov	r3, r1
 8001c34:	80bb      	strh	r3, [r7, #4]
 8001c36:	4613      	mov	r3, r2
 8001c38:	70fb      	strb	r3, [r7, #3]
	if (
 8001c3a:	88fb      	ldrh	r3, [r7, #6]
 8001c3c:	2b7f      	cmp	r3, #127	; 0x7f
 8001c3e:	d848      	bhi.n	8001cd2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001c40:	88bb      	ldrh	r3, [r7, #4]
 8001c42:	2b3f      	cmp	r3, #63	; 0x3f
 8001c44:	d845      	bhi.n	8001cd2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001c46:	4b26      	ldr	r3, [pc, #152]	; (8001ce0 <SSD1306_DrawPixel+0xb8>)
 8001c48:	791b      	ldrb	r3, [r3, #4]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d006      	beq.n	8001c5c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	bf0c      	ite	eq
 8001c54:	2301      	moveq	r3, #1
 8001c56:	2300      	movne	r3, #0
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001c5c:	78fb      	ldrb	r3, [r7, #3]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d11a      	bne.n	8001c98 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001c62:	88fa      	ldrh	r2, [r7, #6]
 8001c64:	88bb      	ldrh	r3, [r7, #4]
 8001c66:	08db      	lsrs	r3, r3, #3
 8001c68:	b298      	uxth	r0, r3
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	01db      	lsls	r3, r3, #7
 8001c6e:	4413      	add	r3, r2
 8001c70:	4a1c      	ldr	r2, [pc, #112]	; (8001ce4 <SSD1306_DrawPixel+0xbc>)
 8001c72:	5cd3      	ldrb	r3, [r2, r3]
 8001c74:	b25a      	sxtb	r2, r3
 8001c76:	88bb      	ldrh	r3, [r7, #4]
 8001c78:	f003 0307 	and.w	r3, r3, #7
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c82:	b25b      	sxtb	r3, r3
 8001c84:	4313      	orrs	r3, r2
 8001c86:	b259      	sxtb	r1, r3
 8001c88:	88fa      	ldrh	r2, [r7, #6]
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	01db      	lsls	r3, r3, #7
 8001c8e:	4413      	add	r3, r2
 8001c90:	b2c9      	uxtb	r1, r1
 8001c92:	4a14      	ldr	r2, [pc, #80]	; (8001ce4 <SSD1306_DrawPixel+0xbc>)
 8001c94:	54d1      	strb	r1, [r2, r3]
 8001c96:	e01d      	b.n	8001cd4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001c98:	88fa      	ldrh	r2, [r7, #6]
 8001c9a:	88bb      	ldrh	r3, [r7, #4]
 8001c9c:	08db      	lsrs	r3, r3, #3
 8001c9e:	b298      	uxth	r0, r3
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	01db      	lsls	r3, r3, #7
 8001ca4:	4413      	add	r3, r2
 8001ca6:	4a0f      	ldr	r2, [pc, #60]	; (8001ce4 <SSD1306_DrawPixel+0xbc>)
 8001ca8:	5cd3      	ldrb	r3, [r2, r3]
 8001caa:	b25a      	sxtb	r2, r3
 8001cac:	88bb      	ldrh	r3, [r7, #4]
 8001cae:	f003 0307 	and.w	r3, r3, #7
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb8:	b25b      	sxtb	r3, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	b25b      	sxtb	r3, r3
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	b259      	sxtb	r1, r3
 8001cc2:	88fa      	ldrh	r2, [r7, #6]
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	01db      	lsls	r3, r3, #7
 8001cc8:	4413      	add	r3, r2
 8001cca:	b2c9      	uxtb	r1, r1
 8001ccc:	4a05      	ldr	r2, [pc, #20]	; (8001ce4 <SSD1306_DrawPixel+0xbc>)
 8001cce:	54d1      	strb	r1, [r2, r3]
 8001cd0:	e000      	b.n	8001cd4 <SSD1306_DrawPixel+0xac>
		return;
 8001cd2:	bf00      	nop
	}
}
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	20000684 	.word	0x20000684
 8001ce4:	20000284 	.word	0x20000284

08001ce8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	460a      	mov	r2, r1
 8001cf2:	80fb      	strh	r3, [r7, #6]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001cf8:	4a05      	ldr	r2, [pc, #20]	; (8001d10 <SSD1306_GotoXY+0x28>)
 8001cfa:	88fb      	ldrh	r3, [r7, #6]
 8001cfc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001cfe:	4a04      	ldr	r2, [pc, #16]	; (8001d10 <SSD1306_GotoXY+0x28>)
 8001d00:	88bb      	ldrh	r3, [r7, #4]
 8001d02:	8053      	strh	r3, [r2, #2]
}
 8001d04:	bf00      	nop
 8001d06:	370c      	adds	r7, #12
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr
 8001d10:	20000684 	.word	0x20000684

08001d14 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b086      	sub	sp, #24
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	6039      	str	r1, [r7, #0]
 8001d1e:	71fb      	strb	r3, [r7, #7]
 8001d20:	4613      	mov	r3, r2
 8001d22:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001d24:	4b3a      	ldr	r3, [pc, #232]	; (8001e10 <SSD1306_Putc+0xfc>)
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	461a      	mov	r2, r3
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	781b      	ldrb	r3, [r3, #0]
 8001d2e:	4413      	add	r3, r2
	if (
 8001d30:	2b7f      	cmp	r3, #127	; 0x7f
 8001d32:	dc07      	bgt.n	8001d44 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001d34:	4b36      	ldr	r3, [pc, #216]	; (8001e10 <SSD1306_Putc+0xfc>)
 8001d36:	885b      	ldrh	r3, [r3, #2]
 8001d38:	461a      	mov	r2, r3
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	785b      	ldrb	r3, [r3, #1]
 8001d3e:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001d40:	2b3f      	cmp	r3, #63	; 0x3f
 8001d42:	dd01      	ble.n	8001d48 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001d44:	2300      	movs	r3, #0
 8001d46:	e05e      	b.n	8001e06 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001d48:	2300      	movs	r3, #0
 8001d4a:	617b      	str	r3, [r7, #20]
 8001d4c:	e04b      	b.n	8001de6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	79fb      	ldrb	r3, [r7, #7]
 8001d54:	3b20      	subs	r3, #32
 8001d56:	6839      	ldr	r1, [r7, #0]
 8001d58:	7849      	ldrb	r1, [r1, #1]
 8001d5a:	fb01 f303 	mul.w	r3, r1, r3
 8001d5e:	4619      	mov	r1, r3
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	440b      	add	r3, r1
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	4413      	add	r3, r2
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	613b      	str	r3, [r7, #16]
 8001d70:	e030      	b.n	8001dd4 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d010      	beq.n	8001da4 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001d82:	4b23      	ldr	r3, [pc, #140]	; (8001e10 <SSD1306_Putc+0xfc>)
 8001d84:	881a      	ldrh	r2, [r3, #0]
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	b29b      	uxth	r3, r3
 8001d8a:	4413      	add	r3, r2
 8001d8c:	b298      	uxth	r0, r3
 8001d8e:	4b20      	ldr	r3, [pc, #128]	; (8001e10 <SSD1306_Putc+0xfc>)
 8001d90:	885a      	ldrh	r2, [r3, #2]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	4413      	add	r3, r2
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	79ba      	ldrb	r2, [r7, #6]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	f7ff ff43 	bl	8001c28 <SSD1306_DrawPixel>
 8001da2:	e014      	b.n	8001dce <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001da4:	4b1a      	ldr	r3, [pc, #104]	; (8001e10 <SSD1306_Putc+0xfc>)
 8001da6:	881a      	ldrh	r2, [r3, #0]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	4413      	add	r3, r2
 8001dae:	b298      	uxth	r0, r3
 8001db0:	4b17      	ldr	r3, [pc, #92]	; (8001e10 <SSD1306_Putc+0xfc>)
 8001db2:	885a      	ldrh	r2, [r3, #2]
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	4413      	add	r3, r2
 8001dba:	b299      	uxth	r1, r3
 8001dbc:	79bb      	ldrb	r3, [r7, #6]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	bf0c      	ite	eq
 8001dc2:	2301      	moveq	r3, #1
 8001dc4:	2300      	movne	r3, #0
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	461a      	mov	r2, r3
 8001dca:	f7ff ff2d 	bl	8001c28 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001dce:	693b      	ldr	r3, [r7, #16]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	613b      	str	r3, [r7, #16]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	461a      	mov	r2, r3
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d3c8      	bcc.n	8001d72 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	3301      	adds	r3, #1
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	785b      	ldrb	r3, [r3, #1]
 8001dea:	461a      	mov	r2, r3
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d3ad      	bcc.n	8001d4e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001df2:	4b07      	ldr	r3, [pc, #28]	; (8001e10 <SSD1306_Putc+0xfc>)
 8001df4:	881a      	ldrh	r2, [r3, #0]
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	781b      	ldrb	r3, [r3, #0]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	4413      	add	r3, r2
 8001dfe:	b29a      	uxth	r2, r3
 8001e00:	4b03      	ldr	r3, [pc, #12]	; (8001e10 <SSD1306_Putc+0xfc>)
 8001e02:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001e04:	79fb      	ldrb	r3, [r7, #7]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000684 	.word	0x20000684

08001e14 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	60f8      	str	r0, [r7, #12]
 8001e1c:	60b9      	str	r1, [r7, #8]
 8001e1e:	4613      	mov	r3, r2
 8001e20:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001e22:	e012      	b.n	8001e4a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	79fa      	ldrb	r2, [r7, #7]
 8001e2a:	68b9      	ldr	r1, [r7, #8]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff ff71 	bl	8001d14 <SSD1306_Putc>
 8001e32:	4603      	mov	r3, r0
 8001e34:	461a      	mov	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d002      	beq.n	8001e44 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	e008      	b.n	8001e56 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	3301      	adds	r3, #1
 8001e48:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1e8      	bne.n	8001e24 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	781b      	ldrb	r3, [r3, #0]
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	3710      	adds	r7, #16
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
	...

08001e60 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001e66:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <ssd1306_I2C_Init+0x24>)
 8001e68:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e6a:	e002      	b.n	8001e72 <ssd1306_I2C_Init+0x12>
		p--;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1f9      	bne.n	8001e6c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001e78:	bf00      	nop
 8001e7a:	370c      	adds	r7, #12
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	0003d090 	.word	0x0003d090

08001e88 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001e88:	b5b0      	push	{r4, r5, r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af02      	add	r7, sp, #8
 8001e8e:	603a      	str	r2, [r7, #0]
 8001e90:	461a      	mov	r2, r3
 8001e92:	4603      	mov	r3, r0
 8001e94:	71fb      	strb	r3, [r7, #7]
 8001e96:	460b      	mov	r3, r1
 8001e98:	71bb      	strb	r3, [r7, #6]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	80bb      	strh	r3, [r7, #4]
 8001e9e:	466b      	mov	r3, sp
 8001ea0:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 8001ea2:	88bb      	ldrh	r3, [r7, #4]
 8001ea4:	1c58      	adds	r0, r3, #1
 8001ea6:	1e43      	subs	r3, r0, #1
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	4603      	mov	r3, r0
 8001eac:	4619      	mov	r1, r3
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	f04f 0400 	mov.w	r4, #0
 8001eba:	00d4      	lsls	r4, r2, #3
 8001ebc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001ec0:	00cb      	lsls	r3, r1, #3
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	4619      	mov	r1, r3
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	f04f 0400 	mov.w	r4, #0
 8001ed2:	00d4      	lsls	r4, r2, #3
 8001ed4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001ed8:	00cb      	lsls	r3, r1, #3
 8001eda:	4603      	mov	r3, r0
 8001edc:	3307      	adds	r3, #7
 8001ede:	08db      	lsrs	r3, r3, #3
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	ebad 0d03 	sub.w	sp, sp, r3
 8001ee6:	ab02      	add	r3, sp, #8
 8001ee8:	3300      	adds	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	79ba      	ldrb	r2, [r7, #6]
 8001ef0:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	75fb      	strb	r3, [r7, #23]
 8001ef6:	e00a      	b.n	8001f0e <ssd1306_I2C_WriteMulti+0x86>
		dt[i] = data[i-1];
 8001ef8:	7dfb      	ldrb	r3, [r7, #23]
 8001efa:	3b01      	subs	r3, #1
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	441a      	add	r2, r3
 8001f00:	7dfb      	ldrb	r3, [r7, #23]
 8001f02:	7811      	ldrb	r1, [r2, #0]
 8001f04:	68fa      	ldr	r2, [r7, #12]
 8001f06:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8001f08:	7dfb      	ldrb	r3, [r7, #23]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	75fb      	strb	r3, [r7, #23]
 8001f0e:	7dfb      	ldrb	r3, [r7, #23]
 8001f10:	b29b      	uxth	r3, r3
 8001f12:	88ba      	ldrh	r2, [r7, #4]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d2ef      	bcs.n	8001ef8 <ssd1306_I2C_WriteMulti+0x70>
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, count, 10);
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	b299      	uxth	r1, r3
 8001f1c:	68fa      	ldr	r2, [r7, #12]
 8001f1e:	88b8      	ldrh	r0, [r7, #4]
 8001f20:	230a      	movs	r3, #10
 8001f22:	9300      	str	r3, [sp, #0]
 8001f24:	4603      	mov	r3, r0
 8001f26:	4804      	ldr	r0, [pc, #16]	; (8001f38 <ssd1306_I2C_WriteMulti+0xb0>)
 8001f28:	f000 fe50 	bl	8002bcc <HAL_I2C_Master_Transmit>
 8001f2c:	46ad      	mov	sp, r5
}
 8001f2e:	bf00      	nop
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bdb0      	pop	{r4, r5, r7, pc}
 8001f36:	bf00      	nop
 8001f38:	200006c8 	.word	0x200006c8

08001f3c <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af02      	add	r7, sp, #8
 8001f42:	4603      	mov	r3, r0
 8001f44:	71fb      	strb	r3, [r7, #7]
 8001f46:	460b      	mov	r3, r1
 8001f48:	71bb      	strb	r3, [r7, #6]
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001f4e:	79bb      	ldrb	r3, [r7, #6]
 8001f50:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001f52:	797b      	ldrb	r3, [r7, #5]
 8001f54:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001f56:	79fb      	ldrb	r3, [r7, #7]
 8001f58:	b299      	uxth	r1, r3
 8001f5a:	f107 020c 	add.w	r2, r7, #12
 8001f5e:	230a      	movs	r3, #10
 8001f60:	9300      	str	r3, [sp, #0]
 8001f62:	2302      	movs	r3, #2
 8001f64:	4803      	ldr	r0, [pc, #12]	; (8001f74 <ssd1306_I2C_Write+0x38>)
 8001f66:	f000 fe31 	bl	8002bcc <HAL_I2C_Master_Transmit>
}
 8001f6a:	bf00      	nop
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	200006c8 	.word	0x200006c8

08001f78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	4b10      	ldr	r3, [pc, #64]	; (8001fc4 <HAL_MspInit+0x4c>)
 8001f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f86:	4a0f      	ldr	r2, [pc, #60]	; (8001fc4 <HAL_MspInit+0x4c>)
 8001f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001f8e:	4b0d      	ldr	r3, [pc, #52]	; (8001fc4 <HAL_MspInit+0x4c>)
 8001f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f96:	607b      	str	r3, [r7, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	603b      	str	r3, [r7, #0]
 8001f9e:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <HAL_MspInit+0x4c>)
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa2:	4a08      	ldr	r2, [pc, #32]	; (8001fc4 <HAL_MspInit+0x4c>)
 8001fa4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fa8:	6413      	str	r3, [r2, #64]	; 0x40
 8001faa:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <HAL_MspInit+0x4c>)
 8001fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb2:	603b      	str	r3, [r7, #0]
 8001fb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40023800 	.word	0x40023800

08001fc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001fcc:	bf00      	nop
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fda:	e7fe      	b.n	8001fda <HardFault_Handler+0x4>

08001fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fe0:	e7fe      	b.n	8001fe0 <MemManage_Handler+0x4>

08001fe2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fe6:	e7fe      	b.n	8001fe6 <BusFault_Handler+0x4>

08001fe8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fec:	e7fe      	b.n	8001fec <UsageFault_Handler+0x4>

08001fee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr

08001ffc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002000:	bf00      	nop
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr

0800200a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800200a:	b480      	push	{r7}
 800200c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800200e:	bf00      	nop
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800201c:	f000 f91a 	bl	8002254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002020:	bf00      	nop
 8002022:	bd80      	pop	{r7, pc}

08002024 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002028:	4802      	ldr	r0, [pc, #8]	; (8002034 <TIM2_IRQHandler+0x10>)
 800202a:	f003 f888 	bl	800513e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	20000764 	.word	0x20000764

08002038 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800203c:	4802      	ldr	r0, [pc, #8]	; (8002048 <OTG_FS_IRQHandler+0x10>)
 800203e:	f001 fbc5 	bl	80037cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	bd80      	pop	{r7, pc}
 8002046:	bf00      	nop
 8002048:	20000db8 	.word	0x20000db8

0800204c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002050:	4b08      	ldr	r3, [pc, #32]	; (8002074 <SystemInit+0x28>)
 8002052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002056:	4a07      	ldr	r2, [pc, #28]	; (8002074 <SystemInit+0x28>)
 8002058:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800205c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002060:	4b04      	ldr	r3, [pc, #16]	; (8002074 <SystemInit+0x28>)
 8002062:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002066:	609a      	str	r2, [r3, #8]
#endif
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	e000ed00 	.word	0xe000ed00

08002078 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800207e:	f107 0308 	add.w	r3, r7, #8
 8002082:	2200      	movs	r2, #0
 8002084:	601a      	str	r2, [r3, #0]
 8002086:	605a      	str	r2, [r3, #4]
 8002088:	609a      	str	r2, [r3, #8]
 800208a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800208c:	463b      	mov	r3, r7
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	605a      	str	r2, [r3, #4]

  htim2.Instance = TIM2;
 8002094:	4b1d      	ldr	r3, [pc, #116]	; (800210c <MX_TIM2_Init+0x94>)
 8002096:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800209a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 100-1;
 800209c:	4b1b      	ldr	r3, [pc, #108]	; (800210c <MX_TIM2_Init+0x94>)
 800209e:	2263      	movs	r2, #99	; 0x63
 80020a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a2:	4b1a      	ldr	r3, [pc, #104]	; (800210c <MX_TIM2_Init+0x94>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 840-1;
 80020a8:	4b18      	ldr	r3, [pc, #96]	; (800210c <MX_TIM2_Init+0x94>)
 80020aa:	f240 3247 	movw	r2, #839	; 0x347
 80020ae:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b0:	4b16      	ldr	r3, [pc, #88]	; (800210c <MX_TIM2_Init+0x94>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b6:	4b15      	ldr	r3, [pc, #84]	; (800210c <MX_TIM2_Init+0x94>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80020bc:	4813      	ldr	r0, [pc, #76]	; (800210c <MX_TIM2_Init+0x94>)
 80020be:	f002 ffef 	bl	80050a0 <HAL_TIM_Base_Init>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d001      	beq.n	80020cc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80020c8:	f7ff fca2 	bl	8001a10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80020d2:	f107 0308 	add.w	r3, r7, #8
 80020d6:	4619      	mov	r1, r3
 80020d8:	480c      	ldr	r0, [pc, #48]	; (800210c <MX_TIM2_Init+0x94>)
 80020da:	f003 f938 	bl	800534e <HAL_TIM_ConfigClockSource>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80020e4:	f7ff fc94 	bl	8001a10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020e8:	2300      	movs	r3, #0
 80020ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020ec:	2300      	movs	r3, #0
 80020ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80020f0:	463b      	mov	r3, r7
 80020f2:	4619      	mov	r1, r3
 80020f4:	4805      	ldr	r0, [pc, #20]	; (800210c <MX_TIM2_Init+0x94>)
 80020f6:	f003 fb43 	bl	8005780 <HAL_TIMEx_MasterConfigSynchronization>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8002100:	f7ff fc86 	bl	8001a10 <Error_Handler>
  }

}
 8002104:	bf00      	nop
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000764 	.word	0x20000764

08002110 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002120:	d115      	bne.n	800214e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	4b0c      	ldr	r3, [pc, #48]	; (8002158 <HAL_TIM_Base_MspInit+0x48>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212a:	4a0b      	ldr	r2, [pc, #44]	; (8002158 <HAL_TIM_Base_MspInit+0x48>)
 800212c:	f043 0301 	orr.w	r3, r3, #1
 8002130:	6413      	str	r3, [r2, #64]	; 0x40
 8002132:	4b09      	ldr	r3, [pc, #36]	; (8002158 <HAL_TIM_Base_MspInit+0x48>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800213e:	2200      	movs	r2, #0
 8002140:	2100      	movs	r1, #0
 8002142:	201c      	movs	r0, #28
 8002144:	f000 f9a3 	bl	800248e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002148:	201c      	movs	r0, #28
 800214a:	f000 f9bc 	bl	80024c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800214e:	bf00      	nop
 8002150:	3710      	adds	r7, #16
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
 8002156:	bf00      	nop
 8002158:	40023800 	.word	0x40023800

0800215c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800215c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002194 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002160:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002162:	e003      	b.n	800216c <LoopCopyDataInit>

08002164 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002164:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002166:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002168:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800216a:	3104      	adds	r1, #4

0800216c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800216c:	480b      	ldr	r0, [pc, #44]	; (800219c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800216e:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002170:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002172:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002174:	d3f6      	bcc.n	8002164 <CopyDataInit>
  ldr  r2, =_sbss
 8002176:	4a0b      	ldr	r2, [pc, #44]	; (80021a4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002178:	e002      	b.n	8002180 <LoopFillZerobss>

0800217a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800217a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800217c:	f842 3b04 	str.w	r3, [r2], #4

08002180 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002180:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002182:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002184:	d3f9      	bcc.n	800217a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002186:	f7ff ff61 	bl	800204c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800218a:	f006 fd71 	bl	8008c70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800218e:	f7fe fe13 	bl	8000db8 <main>
  bx  lr    
 8002192:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002194:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8002198:	08009ac4 	.word	0x08009ac4
  ldr  r0, =_sdata
 800219c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80021a0:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 80021a4:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 80021a8:	200011c0 	.word	0x200011c0

080021ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80021ac:	e7fe      	b.n	80021ac <ADC_IRQHandler>
	...

080021b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80021b4:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <HAL_Init+0x40>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a0d      	ldr	r2, [pc, #52]	; (80021f0 <HAL_Init+0x40>)
 80021ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80021c0:	4b0b      	ldr	r3, [pc, #44]	; (80021f0 <HAL_Init+0x40>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a0a      	ldr	r2, [pc, #40]	; (80021f0 <HAL_Init+0x40>)
 80021c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80021cc:	4b08      	ldr	r3, [pc, #32]	; (80021f0 <HAL_Init+0x40>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a07      	ldr	r2, [pc, #28]	; (80021f0 <HAL_Init+0x40>)
 80021d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80021d8:	2003      	movs	r0, #3
 80021da:	f000 f94d 	bl	8002478 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80021de:	2000      	movs	r0, #0
 80021e0:	f000 f808 	bl	80021f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80021e4:	f7ff fec8 	bl	8001f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40023c00 	.word	0x40023c00

080021f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021fc:	4b12      	ldr	r3, [pc, #72]	; (8002248 <HAL_InitTick+0x54>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	4b12      	ldr	r3, [pc, #72]	; (800224c <HAL_InitTick+0x58>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	4619      	mov	r1, r3
 8002206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800220a:	fbb3 f3f1 	udiv	r3, r3, r1
 800220e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002212:	4618      	mov	r0, r3
 8002214:	f000 f965 	bl	80024e2 <HAL_SYSTICK_Config>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e00e      	b.n	8002240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b0f      	cmp	r3, #15
 8002226:	d80a      	bhi.n	800223e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002228:	2200      	movs	r2, #0
 800222a:	6879      	ldr	r1, [r7, #4]
 800222c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002230:	f000 f92d 	bl	800248e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002234:	4a06      	ldr	r2, [pc, #24]	; (8002250 <HAL_InitTick+0x5c>)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	e000      	b.n	8002240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
}
 8002240:	4618      	mov	r0, r3
 8002242:	3708      	adds	r7, #8
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	200000d4 	.word	0x200000d4
 800224c:	200000dc 	.word	0x200000dc
 8002250:	200000d8 	.word	0x200000d8

08002254 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002258:	4b06      	ldr	r3, [pc, #24]	; (8002274 <HAL_IncTick+0x20>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	461a      	mov	r2, r3
 800225e:	4b06      	ldr	r3, [pc, #24]	; (8002278 <HAL_IncTick+0x24>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4413      	add	r3, r2
 8002264:	4a04      	ldr	r2, [pc, #16]	; (8002278 <HAL_IncTick+0x24>)
 8002266:	6013      	str	r3, [r2, #0]
}
 8002268:	bf00      	nop
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr
 8002272:	bf00      	nop
 8002274:	200000dc 	.word	0x200000dc
 8002278:	200007a4 	.word	0x200007a4

0800227c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  return uwTick;
 8002280:	4b03      	ldr	r3, [pc, #12]	; (8002290 <HAL_GetTick+0x14>)
 8002282:	681b      	ldr	r3, [r3, #0]
}
 8002284:	4618      	mov	r0, r3
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	200007a4 	.word	0x200007a4

08002294 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b084      	sub	sp, #16
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800229c:	f7ff ffee 	bl	800227c <HAL_GetTick>
 80022a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80022ac:	d005      	beq.n	80022ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022ae:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_Delay+0x40>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	461a      	mov	r2, r3
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4413      	add	r3, r2
 80022b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80022ba:	bf00      	nop
 80022bc:	f7ff ffde 	bl	800227c <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d8f7      	bhi.n	80022bc <HAL_Delay+0x28>
  {
  }
}
 80022cc:	bf00      	nop
 80022ce:	3710      	adds	r7, #16
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	200000dc 	.word	0x200000dc

080022d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f003 0307 	and.w	r3, r3, #7
 80022e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80022e8:	4b0c      	ldr	r3, [pc, #48]	; (800231c <__NVIC_SetPriorityGrouping+0x44>)
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80022ee:	68ba      	ldr	r2, [r7, #8]
 80022f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80022f4:	4013      	ands	r3, r2
 80022f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022fc:	68bb      	ldr	r3, [r7, #8]
 80022fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800230a:	4a04      	ldr	r2, [pc, #16]	; (800231c <__NVIC_SetPriorityGrouping+0x44>)
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	60d3      	str	r3, [r2, #12]
}
 8002310:	bf00      	nop
 8002312:	3714      	adds	r7, #20
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr
 800231c:	e000ed00 	.word	0xe000ed00

08002320 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002324:	4b04      	ldr	r3, [pc, #16]	; (8002338 <__NVIC_GetPriorityGrouping+0x18>)
 8002326:	68db      	ldr	r3, [r3, #12]
 8002328:	0a1b      	lsrs	r3, r3, #8
 800232a:	f003 0307 	and.w	r3, r3, #7
}
 800232e:	4618      	mov	r0, r3
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr
 8002338:	e000ed00 	.word	0xe000ed00

0800233c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	4603      	mov	r3, r0
 8002344:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800234a:	2b00      	cmp	r3, #0
 800234c:	db0b      	blt.n	8002366 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800234e:	79fb      	ldrb	r3, [r7, #7]
 8002350:	f003 021f 	and.w	r2, r3, #31
 8002354:	4907      	ldr	r1, [pc, #28]	; (8002374 <__NVIC_EnableIRQ+0x38>)
 8002356:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235a:	095b      	lsrs	r3, r3, #5
 800235c:	2001      	movs	r0, #1
 800235e:	fa00 f202 	lsl.w	r2, r0, r2
 8002362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	e000e100 	.word	0xe000e100

08002378 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002378:	b480      	push	{r7}
 800237a:	b083      	sub	sp, #12
 800237c:	af00      	add	r7, sp, #0
 800237e:	4603      	mov	r3, r0
 8002380:	6039      	str	r1, [r7, #0]
 8002382:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002384:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002388:	2b00      	cmp	r3, #0
 800238a:	db0a      	blt.n	80023a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	b2da      	uxtb	r2, r3
 8002390:	490c      	ldr	r1, [pc, #48]	; (80023c4 <__NVIC_SetPriority+0x4c>)
 8002392:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002396:	0112      	lsls	r2, r2, #4
 8002398:	b2d2      	uxtb	r2, r2
 800239a:	440b      	add	r3, r1
 800239c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023a0:	e00a      	b.n	80023b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4908      	ldr	r1, [pc, #32]	; (80023c8 <__NVIC_SetPriority+0x50>)
 80023a8:	79fb      	ldrb	r3, [r7, #7]
 80023aa:	f003 030f 	and.w	r3, r3, #15
 80023ae:	3b04      	subs	r3, #4
 80023b0:	0112      	lsls	r2, r2, #4
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	440b      	add	r3, r1
 80023b6:	761a      	strb	r2, [r3, #24]
}
 80023b8:	bf00      	nop
 80023ba:	370c      	adds	r7, #12
 80023bc:	46bd      	mov	sp, r7
 80023be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c2:	4770      	bx	lr
 80023c4:	e000e100 	.word	0xe000e100
 80023c8:	e000ed00 	.word	0xe000ed00

080023cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b089      	sub	sp, #36	; 0x24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f003 0307 	and.w	r3, r3, #7
 80023de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	f1c3 0307 	rsb	r3, r3, #7
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	bf28      	it	cs
 80023ea:	2304      	movcs	r3, #4
 80023ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80023ee:	69fb      	ldr	r3, [r7, #28]
 80023f0:	3304      	adds	r3, #4
 80023f2:	2b06      	cmp	r3, #6
 80023f4:	d902      	bls.n	80023fc <NVIC_EncodePriority+0x30>
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	3b03      	subs	r3, #3
 80023fa:	e000      	b.n	80023fe <NVIC_EncodePriority+0x32>
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002400:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43da      	mvns	r2, r3
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	401a      	ands	r2, r3
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002414:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	fa01 f303 	lsl.w	r3, r1, r3
 800241e:	43d9      	mvns	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002424:	4313      	orrs	r3, r2
         );
}
 8002426:	4618      	mov	r0, r3
 8002428:	3724      	adds	r7, #36	; 0x24
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
	...

08002434 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	3b01      	subs	r3, #1
 8002440:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002444:	d301      	bcc.n	800244a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002446:	2301      	movs	r3, #1
 8002448:	e00f      	b.n	800246a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800244a:	4a0a      	ldr	r2, [pc, #40]	; (8002474 <SysTick_Config+0x40>)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3b01      	subs	r3, #1
 8002450:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002452:	210f      	movs	r1, #15
 8002454:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002458:	f7ff ff8e 	bl	8002378 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800245c:	4b05      	ldr	r3, [pc, #20]	; (8002474 <SysTick_Config+0x40>)
 800245e:	2200      	movs	r2, #0
 8002460:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002462:	4b04      	ldr	r3, [pc, #16]	; (8002474 <SysTick_Config+0x40>)
 8002464:	2207      	movs	r2, #7
 8002466:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002468:	2300      	movs	r3, #0
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	e000e010 	.word	0xe000e010

08002478 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7ff ff29 	bl	80022d8 <__NVIC_SetPriorityGrouping>
}
 8002486:	bf00      	nop
 8002488:	3708      	adds	r7, #8
 800248a:	46bd      	mov	sp, r7
 800248c:	bd80      	pop	{r7, pc}

0800248e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800248e:	b580      	push	{r7, lr}
 8002490:	b086      	sub	sp, #24
 8002492:	af00      	add	r7, sp, #0
 8002494:	4603      	mov	r3, r0
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
 800249a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024a0:	f7ff ff3e 	bl	8002320 <__NVIC_GetPriorityGrouping>
 80024a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024a6:	687a      	ldr	r2, [r7, #4]
 80024a8:	68b9      	ldr	r1, [r7, #8]
 80024aa:	6978      	ldr	r0, [r7, #20]
 80024ac:	f7ff ff8e 	bl	80023cc <NVIC_EncodePriority>
 80024b0:	4602      	mov	r2, r0
 80024b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024b6:	4611      	mov	r1, r2
 80024b8:	4618      	mov	r0, r3
 80024ba:	f7ff ff5d 	bl	8002378 <__NVIC_SetPriority>
}
 80024be:	bf00      	nop
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}

080024c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024c6:	b580      	push	{r7, lr}
 80024c8:	b082      	sub	sp, #8
 80024ca:	af00      	add	r7, sp, #0
 80024cc:	4603      	mov	r3, r0
 80024ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80024d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff ff31 	bl	800233c <__NVIC_EnableIRQ>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b082      	sub	sp, #8
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80024ea:	6878      	ldr	r0, [r7, #4]
 80024ec:	f7ff ffa2 	bl	8002434 <SysTick_Config>
 80024f0:	4603      	mov	r3, r0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d101      	bne.n	800250c <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8002508:	2301      	movs	r3, #1
 800250a:	e014      	b.n	8002536 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	791b      	ldrb	r3, [r3, #4]
 8002510:	b2db      	uxtb	r3, r3
 8002512:	2b00      	cmp	r3, #0
 8002514:	d105      	bne.n	8002522 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f7fe fa53 	bl	80009c8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2202      	movs	r2, #2
 8002526:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2200      	movs	r2, #0
 800252c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8002534:	2300      	movs	r3, #0
}
 8002536:	4618      	mov	r0, r3
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800253e:	b480      	push	{r7}
 8002540:	b087      	sub	sp, #28
 8002542:	af00      	add	r7, sp, #0
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 800254a:	2300      	movs	r3, #0
 800254c:	617b      	str	r3, [r7, #20]
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	795b      	ldrb	r3, [r3, #5]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d101      	bne.n	800255e <HAL_DAC_ConfigChannel+0x20>
 800255a:	2302      	movs	r3, #2
 800255c:	e036      	b.n	80025cc <HAL_DAC_ConfigChannel+0x8e>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2201      	movs	r2, #1
 8002562:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2202      	movs	r2, #2
 8002568:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8002572:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	697a      	ldr	r2, [r7, #20]
 8002580:	4013      	ands	r3, r2
 8002582:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4313      	orrs	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8002590:	693a      	ldr	r2, [r7, #16]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	fa02 f303 	lsl.w	r3, r2, r3
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	4313      	orrs	r3, r2
 800259c:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	697a      	ldr	r2, [r7, #20]
 80025a4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6819      	ldr	r1, [r3, #0]
 80025ac:	22c0      	movs	r2, #192	; 0xc0
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43da      	mvns	r2, r3
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	400a      	ands	r2, r1
 80025bc:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2201      	movs	r2, #1
 80025c2:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	371c      	adds	r7, #28
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025d8:	b480      	push	{r7}
 80025da:	b089      	sub	sp, #36	; 0x24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80025e2:	2300      	movs	r3, #0
 80025e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80025e6:	2300      	movs	r3, #0
 80025e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
 80025f2:	e177      	b.n	80028e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80025f4:	2201      	movs	r2, #1
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	697a      	ldr	r2, [r7, #20]
 8002604:	4013      	ands	r3, r2
 8002606:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002608:	693a      	ldr	r2, [r7, #16]
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	429a      	cmp	r2, r3
 800260e:	f040 8166 	bne.w	80028de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d00b      	beq.n	8002632 <HAL_GPIO_Init+0x5a>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	2b02      	cmp	r3, #2
 8002620:	d007      	beq.n	8002632 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002626:	2b11      	cmp	r3, #17
 8002628:	d003      	beq.n	8002632 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	685b      	ldr	r3, [r3, #4]
 800262e:	2b12      	cmp	r3, #18
 8002630:	d130      	bne.n	8002694 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	2203      	movs	r2, #3
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43db      	mvns	r3, r3
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	4013      	ands	r3, r2
 8002648:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	005b      	lsls	r3, r3, #1
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4313      	orrs	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69ba      	ldr	r2, [r7, #24]
 8002660:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002668:	2201      	movs	r2, #1
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	fa02 f303 	lsl.w	r3, r2, r3
 8002670:	43db      	mvns	r3, r3
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4013      	ands	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	091b      	lsrs	r3, r3, #4
 800267e:	f003 0201 	and.w	r2, r3, #1
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	69ba      	ldr	r2, [r7, #24]
 800268a:	4313      	orrs	r3, r2
 800268c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	005b      	lsls	r3, r3, #1
 800269e:	2203      	movs	r2, #3
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43db      	mvns	r3, r3
 80026a6:	69ba      	ldr	r2, [r7, #24]
 80026a8:	4013      	ands	r3, r2
 80026aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	fa02 f303 	lsl.w	r3, r2, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0xfc>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b12      	cmp	r3, #18
 80026d2:	d123      	bne.n	800271c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	08da      	lsrs	r2, r3, #3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	3208      	adds	r2, #8
 80026dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80026e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	f003 0307 	and.w	r3, r3, #7
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	220f      	movs	r2, #15
 80026ec:	fa02 f303 	lsl.w	r3, r2, r3
 80026f0:	43db      	mvns	r3, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4013      	ands	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	691a      	ldr	r2, [r3, #16]
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	f003 0307 	and.w	r3, r3, #7
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	fa02 f303 	lsl.w	r3, r2, r3
 8002708:	69ba      	ldr	r2, [r7, #24]
 800270a:	4313      	orrs	r3, r2
 800270c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	08da      	lsrs	r2, r3, #3
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3208      	adds	r2, #8
 8002716:	69b9      	ldr	r1, [r7, #24]
 8002718:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	2203      	movs	r2, #3
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f003 0203 	and.w	r2, r3, #3
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4313      	orrs	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	f000 80c0 	beq.w	80028de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800275e:	2300      	movs	r3, #0
 8002760:	60fb      	str	r3, [r7, #12]
 8002762:	4b65      	ldr	r3, [pc, #404]	; (80028f8 <HAL_GPIO_Init+0x320>)
 8002764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002766:	4a64      	ldr	r2, [pc, #400]	; (80028f8 <HAL_GPIO_Init+0x320>)
 8002768:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800276c:	6453      	str	r3, [r2, #68]	; 0x44
 800276e:	4b62      	ldr	r3, [pc, #392]	; (80028f8 <HAL_GPIO_Init+0x320>)
 8002770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002772:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800277a:	4a60      	ldr	r2, [pc, #384]	; (80028fc <HAL_GPIO_Init+0x324>)
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	089b      	lsrs	r3, r3, #2
 8002780:	3302      	adds	r3, #2
 8002782:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002786:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f003 0303 	and.w	r3, r3, #3
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	220f      	movs	r2, #15
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a57      	ldr	r2, [pc, #348]	; (8002900 <HAL_GPIO_Init+0x328>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d037      	beq.n	8002816 <HAL_GPIO_Init+0x23e>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a56      	ldr	r2, [pc, #344]	; (8002904 <HAL_GPIO_Init+0x32c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d031      	beq.n	8002812 <HAL_GPIO_Init+0x23a>
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4a55      	ldr	r2, [pc, #340]	; (8002908 <HAL_GPIO_Init+0x330>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d02b      	beq.n	800280e <HAL_GPIO_Init+0x236>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a54      	ldr	r2, [pc, #336]	; (800290c <HAL_GPIO_Init+0x334>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d025      	beq.n	800280a <HAL_GPIO_Init+0x232>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a53      	ldr	r2, [pc, #332]	; (8002910 <HAL_GPIO_Init+0x338>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d01f      	beq.n	8002806 <HAL_GPIO_Init+0x22e>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a52      	ldr	r2, [pc, #328]	; (8002914 <HAL_GPIO_Init+0x33c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d019      	beq.n	8002802 <HAL_GPIO_Init+0x22a>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a51      	ldr	r2, [pc, #324]	; (8002918 <HAL_GPIO_Init+0x340>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d013      	beq.n	80027fe <HAL_GPIO_Init+0x226>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a50      	ldr	r2, [pc, #320]	; (800291c <HAL_GPIO_Init+0x344>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d00d      	beq.n	80027fa <HAL_GPIO_Init+0x222>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a4f      	ldr	r2, [pc, #316]	; (8002920 <HAL_GPIO_Init+0x348>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d007      	beq.n	80027f6 <HAL_GPIO_Init+0x21e>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a4e      	ldr	r2, [pc, #312]	; (8002924 <HAL_GPIO_Init+0x34c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d101      	bne.n	80027f2 <HAL_GPIO_Init+0x21a>
 80027ee:	2309      	movs	r3, #9
 80027f0:	e012      	b.n	8002818 <HAL_GPIO_Init+0x240>
 80027f2:	230a      	movs	r3, #10
 80027f4:	e010      	b.n	8002818 <HAL_GPIO_Init+0x240>
 80027f6:	2308      	movs	r3, #8
 80027f8:	e00e      	b.n	8002818 <HAL_GPIO_Init+0x240>
 80027fa:	2307      	movs	r3, #7
 80027fc:	e00c      	b.n	8002818 <HAL_GPIO_Init+0x240>
 80027fe:	2306      	movs	r3, #6
 8002800:	e00a      	b.n	8002818 <HAL_GPIO_Init+0x240>
 8002802:	2305      	movs	r3, #5
 8002804:	e008      	b.n	8002818 <HAL_GPIO_Init+0x240>
 8002806:	2304      	movs	r3, #4
 8002808:	e006      	b.n	8002818 <HAL_GPIO_Init+0x240>
 800280a:	2303      	movs	r3, #3
 800280c:	e004      	b.n	8002818 <HAL_GPIO_Init+0x240>
 800280e:	2302      	movs	r3, #2
 8002810:	e002      	b.n	8002818 <HAL_GPIO_Init+0x240>
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <HAL_GPIO_Init+0x240>
 8002816:	2300      	movs	r3, #0
 8002818:	69fa      	ldr	r2, [r7, #28]
 800281a:	f002 0203 	and.w	r2, r2, #3
 800281e:	0092      	lsls	r2, r2, #2
 8002820:	4093      	lsls	r3, r2
 8002822:	69ba      	ldr	r2, [r7, #24]
 8002824:	4313      	orrs	r3, r2
 8002826:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002828:	4934      	ldr	r1, [pc, #208]	; (80028fc <HAL_GPIO_Init+0x324>)
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	089b      	lsrs	r3, r3, #2
 800282e:	3302      	adds	r3, #2
 8002830:	69ba      	ldr	r2, [r7, #24]
 8002832:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002836:	4b3c      	ldr	r3, [pc, #240]	; (8002928 <HAL_GPIO_Init+0x350>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	43db      	mvns	r3, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4013      	ands	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	4313      	orrs	r3, r2
 8002858:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800285a:	4a33      	ldr	r2, [pc, #204]	; (8002928 <HAL_GPIO_Init+0x350>)
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002860:	4b31      	ldr	r3, [pc, #196]	; (8002928 <HAL_GPIO_Init+0x350>)
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d003      	beq.n	8002884 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4313      	orrs	r3, r2
 8002882:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002884:	4a28      	ldr	r2, [pc, #160]	; (8002928 <HAL_GPIO_Init+0x350>)
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800288a:	4b27      	ldr	r3, [pc, #156]	; (8002928 <HAL_GPIO_Init+0x350>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	43db      	mvns	r3, r3
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	4013      	ands	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d003      	beq.n	80028ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	693b      	ldr	r3, [r7, #16]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028ae:	4a1e      	ldr	r2, [pc, #120]	; (8002928 <HAL_GPIO_Init+0x350>)
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028b4:	4b1c      	ldr	r3, [pc, #112]	; (8002928 <HAL_GPIO_Init+0x350>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	43db      	mvns	r3, r3
 80028be:	69ba      	ldr	r2, [r7, #24]
 80028c0:	4013      	ands	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028d8:	4a13      	ldr	r2, [pc, #76]	; (8002928 <HAL_GPIO_Init+0x350>)
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	3301      	adds	r3, #1
 80028e2:	61fb      	str	r3, [r7, #28]
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	2b0f      	cmp	r3, #15
 80028e8:	f67f ae84 	bls.w	80025f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028ec:	bf00      	nop
 80028ee:	3724      	adds	r7, #36	; 0x24
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40013800 	.word	0x40013800
 8002900:	40020000 	.word	0x40020000
 8002904:	40020400 	.word	0x40020400
 8002908:	40020800 	.word	0x40020800
 800290c:	40020c00 	.word	0x40020c00
 8002910:	40021000 	.word	0x40021000
 8002914:	40021400 	.word	0x40021400
 8002918:	40021800 	.word	0x40021800
 800291c:	40021c00 	.word	0x40021c00
 8002920:	40022000 	.word	0x40022000
 8002924:	40022400 	.word	0x40022400
 8002928:	40013c00 	.word	0x40013c00

0800292c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800292c:	b480      	push	{r7}
 800292e:	b085      	sub	sp, #20
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	460b      	mov	r3, r1
 8002936:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	691a      	ldr	r2, [r3, #16]
 800293c:	887b      	ldrh	r3, [r7, #2]
 800293e:	4013      	ands	r3, r2
 8002940:	2b00      	cmp	r3, #0
 8002942:	d002      	beq.n	800294a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002944:	2301      	movs	r3, #1
 8002946:	73fb      	strb	r3, [r7, #15]
 8002948:	e001      	b.n	800294e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800294a:	2300      	movs	r3, #0
 800294c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800294e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3714      	adds	r7, #20
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e11f      	b.n	8002bae <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	d106      	bne.n	8002988 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7fe f9d0 	bl	8000d28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2224      	movs	r2, #36	; 0x24
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0201 	bic.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80029ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681a      	ldr	r2, [r3, #0]
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80029be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80029c0:	f002 fb5a 	bl	8005078 <HAL_RCC_GetPCLK1Freq>
 80029c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	4a7b      	ldr	r2, [pc, #492]	; (8002bb8 <HAL_I2C_Init+0x25c>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d807      	bhi.n	80029e0 <HAL_I2C_Init+0x84>
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	4a7a      	ldr	r2, [pc, #488]	; (8002bbc <HAL_I2C_Init+0x260>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	bf94      	ite	ls
 80029d8:	2301      	movls	r3, #1
 80029da:	2300      	movhi	r3, #0
 80029dc:	b2db      	uxtb	r3, r3
 80029de:	e006      	b.n	80029ee <HAL_I2C_Init+0x92>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	4a77      	ldr	r2, [pc, #476]	; (8002bc0 <HAL_I2C_Init+0x264>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	bf94      	ite	ls
 80029e8:	2301      	movls	r3, #1
 80029ea:	2300      	movhi	r3, #0
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	e0db      	b.n	8002bae <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	4a72      	ldr	r2, [pc, #456]	; (8002bc4 <HAL_I2C_Init+0x268>)
 80029fa:	fba2 2303 	umull	r2, r3, r2, r3
 80029fe:	0c9b      	lsrs	r3, r3, #18
 8002a00:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68ba      	ldr	r2, [r7, #8]
 8002a12:	430a      	orrs	r2, r1
 8002a14:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6a1b      	ldr	r3, [r3, #32]
 8002a1c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	4a64      	ldr	r2, [pc, #400]	; (8002bb8 <HAL_I2C_Init+0x25c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d802      	bhi.n	8002a30 <HAL_I2C_Init+0xd4>
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	3301      	adds	r3, #1
 8002a2e:	e009      	b.n	8002a44 <HAL_I2C_Init+0xe8>
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a36:	fb02 f303 	mul.w	r3, r2, r3
 8002a3a:	4a63      	ldr	r2, [pc, #396]	; (8002bc8 <HAL_I2C_Init+0x26c>)
 8002a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a40:	099b      	lsrs	r3, r3, #6
 8002a42:	3301      	adds	r3, #1
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	6812      	ldr	r2, [r2, #0]
 8002a48:	430b      	orrs	r3, r1
 8002a4a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	69db      	ldr	r3, [r3, #28]
 8002a52:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002a56:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	4956      	ldr	r1, [pc, #344]	; (8002bb8 <HAL_I2C_Init+0x25c>)
 8002a60:	428b      	cmp	r3, r1
 8002a62:	d80d      	bhi.n	8002a80 <HAL_I2C_Init+0x124>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	1e59      	subs	r1, r3, #1
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	005b      	lsls	r3, r3, #1
 8002a6e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a72:	3301      	adds	r3, #1
 8002a74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	bf38      	it	cc
 8002a7c:	2304      	movcc	r3, #4
 8002a7e:	e04f      	b.n	8002b20 <HAL_I2C_Init+0x1c4>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d111      	bne.n	8002aac <HAL_I2C_Init+0x150>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	1e58      	subs	r0, r3, #1
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6859      	ldr	r1, [r3, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	005b      	lsls	r3, r3, #1
 8002a94:	440b      	add	r3, r1
 8002a96:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	bf0c      	ite	eq
 8002aa4:	2301      	moveq	r3, #1
 8002aa6:	2300      	movne	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	e012      	b.n	8002ad2 <HAL_I2C_Init+0x176>
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	1e58      	subs	r0, r3, #1
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6859      	ldr	r1, [r3, #4]
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	0099      	lsls	r1, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ac2:	3301      	adds	r3, #1
 8002ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	bf0c      	ite	eq
 8002acc:	2301      	moveq	r3, #1
 8002ace:	2300      	movne	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d001      	beq.n	8002ada <HAL_I2C_Init+0x17e>
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e022      	b.n	8002b20 <HAL_I2C_Init+0x1c4>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d10e      	bne.n	8002b00 <HAL_I2C_Init+0x1a4>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1e58      	subs	r0, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6859      	ldr	r1, [r3, #4]
 8002aea:	460b      	mov	r3, r1
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	440b      	add	r3, r1
 8002af0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002af4:	3301      	adds	r3, #1
 8002af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002afe:	e00f      	b.n	8002b20 <HAL_I2C_Init+0x1c4>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	1e58      	subs	r0, r3, #1
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6859      	ldr	r1, [r3, #4]
 8002b08:	460b      	mov	r3, r1
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	0099      	lsls	r1, r3, #2
 8002b10:	440b      	add	r3, r1
 8002b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b16:	3301      	adds	r3, #1
 8002b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b20:	6879      	ldr	r1, [r7, #4]
 8002b22:	6809      	ldr	r1, [r1, #0]
 8002b24:	4313      	orrs	r3, r2
 8002b26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69da      	ldr	r2, [r3, #28]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	431a      	orrs	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	430a      	orrs	r2, r1
 8002b42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002b4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6911      	ldr	r1, [r2, #16]
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	68d2      	ldr	r2, [r2, #12]
 8002b5a:	4311      	orrs	r1, r2
 8002b5c:	687a      	ldr	r2, [r7, #4]
 8002b5e:	6812      	ldr	r2, [r2, #0]
 8002b60:	430b      	orrs	r3, r1
 8002b62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695a      	ldr	r2, [r3, #20]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	431a      	orrs	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0201 	orr.w	r2, r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2220      	movs	r2, #32
 8002b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	000186a0 	.word	0x000186a0
 8002bbc:	001e847f 	.word	0x001e847f
 8002bc0:	003d08ff 	.word	0x003d08ff
 8002bc4:	431bde83 	.word	0x431bde83
 8002bc8:	10624dd3 	.word	0x10624dd3

08002bcc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af02      	add	r7, sp, #8
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	607a      	str	r2, [r7, #4]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	460b      	mov	r3, r1
 8002bda:	817b      	strh	r3, [r7, #10]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002be0:	f7ff fb4c 	bl	800227c <HAL_GetTick>
 8002be4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b20      	cmp	r3, #32
 8002bf0:	f040 80e0 	bne.w	8002db4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	2319      	movs	r3, #25
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	4970      	ldr	r1, [pc, #448]	; (8002dc0 <HAL_I2C_Master_Transmit+0x1f4>)
 8002bfe:	68f8      	ldr	r0, [r7, #12]
 8002c00:	f000 fa92 	bl	8003128 <I2C_WaitOnFlagUntilTimeout>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d001      	beq.n	8002c0e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c0a:	2302      	movs	r3, #2
 8002c0c:	e0d3      	b.n	8002db6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_I2C_Master_Transmit+0x50>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e0cc      	b.n	8002db6 <HAL_I2C_Master_Transmit+0x1ea>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0301 	and.w	r3, r3, #1
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d007      	beq.n	8002c42 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0201 	orr.w	r2, r2, #1
 8002c40:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c50:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	2221      	movs	r2, #33	; 0x21
 8002c56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	2210      	movs	r2, #16
 8002c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	2200      	movs	r2, #0
 8002c66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	687a      	ldr	r2, [r7, #4]
 8002c6c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	893a      	ldrh	r2, [r7, #8]
 8002c72:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c78:	b29a      	uxth	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	4a50      	ldr	r2, [pc, #320]	; (8002dc4 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c82:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c84:	8979      	ldrh	r1, [r7, #10]
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	6a3a      	ldr	r2, [r7, #32]
 8002c8a:	68f8      	ldr	r0, [r7, #12]
 8002c8c:	f000 f9ca 	bl	8003024 <I2C_MasterRequestWrite>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e08d      	b.n	8002db6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	695b      	ldr	r3, [r3, #20]
 8002ca4:	613b      	str	r3, [r7, #16]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	699b      	ldr	r3, [r3, #24]
 8002cac:	613b      	str	r3, [r7, #16]
 8002cae:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002cb0:	e066      	b.n	8002d80 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002cb2:	697a      	ldr	r2, [r7, #20]
 8002cb4:	6a39      	ldr	r1, [r7, #32]
 8002cb6:	68f8      	ldr	r0, [r7, #12]
 8002cb8:	f000 fb0c 	bl	80032d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d00d      	beq.n	8002cde <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc6:	2b04      	cmp	r3, #4
 8002cc8:	d107      	bne.n	8002cda <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e06b      	b.n	8002db6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce2:	781a      	ldrb	r2, [r3, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cee:	1c5a      	adds	r2, r3, #1
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf8:	b29b      	uxth	r3, r3
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	b29a      	uxth	r2, r3
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d06:	3b01      	subs	r3, #1
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d11b      	bne.n	8002d54 <HAL_I2C_Master_Transmit+0x188>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d017      	beq.n	8002d54 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d28:	781a      	ldrb	r2, [r3, #0]
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	1c5a      	adds	r2, r3, #1
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	3b01      	subs	r3, #1
 8002d42:	b29a      	uxth	r2, r3
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	b29a      	uxth	r2, r3
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	6a39      	ldr	r1, [r7, #32]
 8002d58:	68f8      	ldr	r0, [r7, #12]
 8002d5a:	f000 fafc 	bl	8003356 <I2C_WaitOnBTFFlagUntilTimeout>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00d      	beq.n	8002d80 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d107      	bne.n	8002d7c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d7a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e01a      	b.n	8002db6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d194      	bne.n	8002cb2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	2200      	movs	r2, #0
 8002da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	e000      	b.n	8002db6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002db4:	2302      	movs	r3, #2
  }
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3718      	adds	r7, #24
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	00100002 	.word	0x00100002
 8002dc4:	ffff0000 	.word	0xffff0000

08002dc8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b08a      	sub	sp, #40	; 0x28
 8002dcc:	af02      	add	r7, sp, #8
 8002dce:	60f8      	str	r0, [r7, #12]
 8002dd0:	607a      	str	r2, [r7, #4]
 8002dd2:	603b      	str	r3, [r7, #0]
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002dd8:	f7ff fa50 	bl	800227c <HAL_GetTick>
 8002ddc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8002dde:	2301      	movs	r3, #1
 8002de0:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b20      	cmp	r3, #32
 8002dec:	f040 8110 	bne.w	8003010 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	2319      	movs	r3, #25
 8002df6:	2201      	movs	r2, #1
 8002df8:	4988      	ldr	r1, [pc, #544]	; (800301c <HAL_I2C_IsDeviceReady+0x254>)
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 f994 	bl	8003128 <I2C_WaitOnFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002e06:	2302      	movs	r3, #2
 8002e08:	e103      	b.n	8003012 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_I2C_IsDeviceReady+0x50>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e0fc      	b.n	8003012 <HAL_I2C_IsDeviceReady+0x24a>
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d007      	beq.n	8002e3e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	681a      	ldr	r2, [r3, #0]
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 0201 	orr.w	r2, r2, #1
 8002e3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2224      	movs	r2, #36	; 0x24
 8002e52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	4a70      	ldr	r2, [pc, #448]	; (8003020 <HAL_I2C_IsDeviceReady+0x258>)
 8002e60:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e70:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 f952 	bl	8003128 <I2C_WaitOnFlagUntilTimeout>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00c      	beq.n	8002ea4 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d003      	beq.n	8002ea0 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e9e:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e0b6      	b.n	8003012 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ea4:	897b      	ldrh	r3, [r7, #10]
 8002ea6:	b2db      	uxtb	r3, r3
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002eb2:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002eb4:	f7ff f9e2 	bl	800227c <HAL_GetTick>
 8002eb8:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	f003 0302 	and.w	r3, r3, #2
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	bf0c      	ite	eq
 8002ec8:	2301      	moveq	r3, #1
 8002eca:	2300      	movne	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	695b      	ldr	r3, [r3, #20]
 8002ed6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ede:	bf0c      	ite	eq
 8002ee0:	2301      	moveq	r3, #1
 8002ee2:	2300      	movne	r3, #0
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002ee8:	e025      	b.n	8002f36 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002eea:	f7ff f9c7 	bl	800227c <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d302      	bcc.n	8002f00 <HAL_I2C_IsDeviceReady+0x138>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d103      	bne.n	8002f08 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	22a0      	movs	r2, #160	; 0xa0
 8002f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	bf0c      	ite	eq
 8002f16:	2301      	moveq	r3, #1
 8002f18:	2300      	movne	r3, #0
 8002f1a:	b2db      	uxtb	r3, r3
 8002f1c:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	695b      	ldr	r3, [r3, #20]
 8002f24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f2c:	bf0c      	ite	eq
 8002f2e:	2301      	moveq	r3, #1
 8002f30:	2300      	movne	r3, #0
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f3c:	b2db      	uxtb	r3, r3
 8002f3e:	2ba0      	cmp	r3, #160	; 0xa0
 8002f40:	d005      	beq.n	8002f4e <HAL_I2C_IsDeviceReady+0x186>
 8002f42:	7dfb      	ldrb	r3, [r7, #23]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d102      	bne.n	8002f4e <HAL_I2C_IsDeviceReady+0x186>
 8002f48:	7dbb      	ldrb	r3, [r7, #22]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d0cd      	beq.n	8002eea <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2220      	movs	r2, #32
 8002f52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d129      	bne.n	8002fb8 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f72:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f74:	2300      	movs	r3, #0
 8002f76:	613b      	str	r3, [r7, #16]
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	613b      	str	r3, [r7, #16]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	613b      	str	r3, [r7, #16]
 8002f88:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	2319      	movs	r3, #25
 8002f90:	2201      	movs	r2, #1
 8002f92:	4922      	ldr	r1, [pc, #136]	; (800301c <HAL_I2C_IsDeviceReady+0x254>)
 8002f94:	68f8      	ldr	r0, [r7, #12]
 8002f96:	f000 f8c7 	bl	8003128 <I2C_WaitOnFlagUntilTimeout>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e036      	b.n	8003012 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	2220      	movs	r2, #32
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	e02c      	b.n	8003012 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002fc6:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002fd0:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	9300      	str	r3, [sp, #0]
 8002fd6:	2319      	movs	r3, #25
 8002fd8:	2201      	movs	r2, #1
 8002fda:	4910      	ldr	r1, [pc, #64]	; (800301c <HAL_I2C_IsDeviceReady+0x254>)
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f000 f8a3 	bl	8003128 <I2C_WaitOnFlagUntilTimeout>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e012      	b.n	8003012 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002fec:	69bb      	ldr	r3, [r7, #24]
 8002fee:	3301      	adds	r3, #1
 8002ff0:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002ff2:	69ba      	ldr	r2, [r7, #24]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	f4ff af33 	bcc.w	8002e62 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2220      	movs	r2, #32
 8003000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2200      	movs	r2, #0
 8003008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e000      	b.n	8003012 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8003010:	2302      	movs	r3, #2
  }
}
 8003012:	4618      	mov	r0, r3
 8003014:	3720      	adds	r7, #32
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	00100002 	.word	0x00100002
 8003020:	ffff0000 	.word	0xffff0000

08003024 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b088      	sub	sp, #32
 8003028:	af02      	add	r7, sp, #8
 800302a:	60f8      	str	r0, [r7, #12]
 800302c:	607a      	str	r2, [r7, #4]
 800302e:	603b      	str	r3, [r7, #0]
 8003030:	460b      	mov	r3, r1
 8003032:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003038:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	2b08      	cmp	r3, #8
 800303e:	d006      	beq.n	800304e <I2C_MasterRequestWrite+0x2a>
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2b01      	cmp	r3, #1
 8003044:	d003      	beq.n	800304e <I2C_MasterRequestWrite+0x2a>
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800304c:	d108      	bne.n	8003060 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	e00b      	b.n	8003078 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003064:	2b12      	cmp	r3, #18
 8003066:	d107      	bne.n	8003078 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003076:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2200      	movs	r2, #0
 8003080:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f84f 	bl	8003128 <I2C_WaitOnFlagUntilTimeout>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00c      	beq.n	80030aa <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800309a:	2b00      	cmp	r3, #0
 800309c:	d003      	beq.n	80030a6 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e035      	b.n	8003116 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80030b2:	d108      	bne.n	80030c6 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80030b4:	897b      	ldrh	r3, [r7, #10]
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	461a      	mov	r2, r3
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80030c2:	611a      	str	r2, [r3, #16]
 80030c4:	e01b      	b.n	80030fe <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80030c6:	897b      	ldrh	r3, [r7, #10]
 80030c8:	11db      	asrs	r3, r3, #7
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	f003 0306 	and.w	r3, r3, #6
 80030d0:	b2db      	uxtb	r3, r3
 80030d2:	f063 030f 	orn	r3, r3, #15
 80030d6:	b2da      	uxtb	r2, r3
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	490f      	ldr	r1, [pc, #60]	; (8003120 <I2C_MasterRequestWrite+0xfc>)
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 f876 	bl	80031d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e010      	b.n	8003116 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80030f4:	897b      	ldrh	r3, [r7, #10]
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	4908      	ldr	r1, [pc, #32]	; (8003124 <I2C_MasterRequestWrite+0x100>)
 8003104:	68f8      	ldr	r0, [r7, #12]
 8003106:	f000 f866 	bl	80031d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800310a:	4603      	mov	r3, r0
 800310c:	2b00      	cmp	r3, #0
 800310e:	d001      	beq.n	8003114 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e000      	b.n	8003116 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	4618      	mov	r0, r3
 8003118:	3718      	adds	r7, #24
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop
 8003120:	00010008 	.word	0x00010008
 8003124:	00010002 	.word	0x00010002

08003128 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	603b      	str	r3, [r7, #0]
 8003134:	4613      	mov	r3, r2
 8003136:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003138:	e025      	b.n	8003186 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003140:	d021      	beq.n	8003186 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003142:	f7ff f89b 	bl	800227c <HAL_GetTick>
 8003146:	4602      	mov	r2, r0
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d302      	bcc.n	8003158 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d116      	bne.n	8003186 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2200      	movs	r2, #0
 800315c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2220      	movs	r2, #32
 8003162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2200      	movs	r2, #0
 800316a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	f043 0220 	orr.w	r2, r3, #32
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2200      	movs	r2, #0
 800317e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e023      	b.n	80031ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	0c1b      	lsrs	r3, r3, #16
 800318a:	b2db      	uxtb	r3, r3
 800318c:	2b01      	cmp	r3, #1
 800318e:	d10d      	bne.n	80031ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	695b      	ldr	r3, [r3, #20]
 8003196:	43da      	mvns	r2, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	4013      	ands	r3, r2
 800319c:	b29b      	uxth	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	bf0c      	ite	eq
 80031a2:	2301      	moveq	r3, #1
 80031a4:	2300      	movne	r3, #0
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	461a      	mov	r2, r3
 80031aa:	e00c      	b.n	80031c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	43da      	mvns	r2, r3
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	4013      	ands	r3, r2
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	bf0c      	ite	eq
 80031be:	2301      	moveq	r3, #1
 80031c0:	2300      	movne	r3, #0
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	461a      	mov	r2, r3
 80031c6:	79fb      	ldrb	r3, [r7, #7]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d0b6      	beq.n	800313a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031cc:	2300      	movs	r3, #0
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b084      	sub	sp, #16
 80031da:	af00      	add	r7, sp, #0
 80031dc:	60f8      	str	r0, [r7, #12]
 80031de:	60b9      	str	r1, [r7, #8]
 80031e0:	607a      	str	r2, [r7, #4]
 80031e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80031e4:	e051      	b.n	800328a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f4:	d123      	bne.n	800323e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003204:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800320e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2220      	movs	r2, #32
 800321a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322a:	f043 0204 	orr.w	r2, r3, #4
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e046      	b.n	80032cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003244:	d021      	beq.n	800328a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003246:	f7ff f819 	bl	800227c <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	687a      	ldr	r2, [r7, #4]
 8003252:	429a      	cmp	r2, r3
 8003254:	d302      	bcc.n	800325c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d116      	bne.n	800328a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2200      	movs	r2, #0
 8003260:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	2220      	movs	r2, #32
 8003266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	f043 0220 	orr.w	r2, r3, #32
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003286:	2301      	movs	r3, #1
 8003288:	e020      	b.n	80032cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	0c1b      	lsrs	r3, r3, #16
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b01      	cmp	r3, #1
 8003292:	d10c      	bne.n	80032ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	43da      	mvns	r2, r3
 800329c:	68bb      	ldr	r3, [r7, #8]
 800329e:	4013      	ands	r3, r2
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	bf14      	ite	ne
 80032a6:	2301      	movne	r3, #1
 80032a8:	2300      	moveq	r3, #0
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	e00b      	b.n	80032c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	699b      	ldr	r3, [r3, #24]
 80032b4:	43da      	mvns	r2, r3
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	4013      	ands	r3, r2
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	bf14      	ite	ne
 80032c0:	2301      	movne	r3, #1
 80032c2:	2300      	moveq	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d18d      	bne.n	80031e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	4618      	mov	r0, r3
 80032ce:	3710      	adds	r7, #16
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80032e0:	e02d      	b.n	800333e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 f878 	bl	80033d8 <I2C_IsAcknowledgeFailed>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e02d      	b.n	800334e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80032f8:	d021      	beq.n	800333e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032fa:	f7fe ffbf 	bl	800227c <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	429a      	cmp	r2, r3
 8003308:	d302      	bcc.n	8003310 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d116      	bne.n	800333e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2200      	movs	r2, #0
 8003314:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2220      	movs	r2, #32
 800331a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332a:	f043 0220 	orr.w	r2, r3, #32
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2200      	movs	r2, #0
 8003336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800333a:	2301      	movs	r3, #1
 800333c:	e007      	b.n	800334e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	695b      	ldr	r3, [r3, #20]
 8003344:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003348:	2b80      	cmp	r3, #128	; 0x80
 800334a:	d1ca      	bne.n	80032e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b084      	sub	sp, #16
 800335a:	af00      	add	r7, sp, #0
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003362:	e02d      	b.n	80033c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003364:	68f8      	ldr	r0, [r7, #12]
 8003366:	f000 f837 	bl	80033d8 <I2C_IsAcknowledgeFailed>
 800336a:	4603      	mov	r3, r0
 800336c:	2b00      	cmp	r3, #0
 800336e:	d001      	beq.n	8003374 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	e02d      	b.n	80033d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800337a:	d021      	beq.n	80033c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800337c:	f7fe ff7e 	bl	800227c <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	429a      	cmp	r2, r3
 800338a:	d302      	bcc.n	8003392 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d116      	bne.n	80033c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2220      	movs	r2, #32
 800339c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	2200      	movs	r2, #0
 80033a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ac:	f043 0220 	orr.w	r2, r3, #32
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e007      	b.n	80033d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	695b      	ldr	r3, [r3, #20]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d1ca      	bne.n	8003364 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033ce:	2300      	movs	r3, #0
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033ee:	d11b      	bne.n	8003428 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2220      	movs	r2, #32
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	f043 0204 	orr.w	r2, r3, #4
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e000      	b.n	800342a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003428:	2300      	movs	r3, #0
}
 800342a:	4618      	mov	r0, r3
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
 800343e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003446:	b2db      	uxtb	r3, r3
 8003448:	2b20      	cmp	r3, #32
 800344a:	d129      	bne.n	80034a0 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2224      	movs	r2, #36	; 0x24
 8003450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0201 	bic.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0210 	bic.w	r2, r2, #16
 8003472:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	683a      	ldr	r2, [r7, #0]
 8003480:	430a      	orrs	r2, r1
 8003482:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f042 0201 	orr.w	r2, r2, #1
 8003492:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2220      	movs	r2, #32
 8003498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800349c:	2300      	movs	r3, #0
 800349e:	e000      	b.n	80034a2 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80034a0:	2302      	movs	r3, #2
  }
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b085      	sub	sp, #20
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
 80034b6:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80034b8:	2300      	movs	r3, #0
 80034ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b20      	cmp	r3, #32
 80034c6:	d12a      	bne.n	800351e <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2224      	movs	r2, #36	; 0x24
 80034cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f022 0201 	bic.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e6:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80034e8:	89fb      	ldrh	r3, [r7, #14]
 80034ea:	f023 030f 	bic.w	r3, r3, #15
 80034ee:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	89fb      	ldrh	r3, [r7, #14]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	89fa      	ldrh	r2, [r7, #14]
 8003500:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f042 0201 	orr.w	r2, r2, #1
 8003510:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2220      	movs	r2, #32
 8003516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	e000      	b.n	8003520 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800351e:	2302      	movs	r3, #2
  }
}
 8003520:	4618      	mov	r0, r3
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800352c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800352e:	b08f      	sub	sp, #60	; 0x3c
 8003530:	af0a      	add	r7, sp, #40	; 0x28
 8003532:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e10f      	b.n	800375e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800354a:	b2db      	uxtb	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	d106      	bne.n	800355e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003558:	6878      	ldr	r0, [r7, #4]
 800355a:	f005 f89f 	bl	800869c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2203      	movs	r2, #3
 8003562:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800356e:	2b00      	cmp	r3, #0
 8003570:	d102      	bne.n	8003578 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4618      	mov	r0, r3
 800357e:	f002 faa4 	bl	8005aca <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	603b      	str	r3, [r7, #0]
 8003588:	687e      	ldr	r6, [r7, #4]
 800358a:	466d      	mov	r5, sp
 800358c:	f106 0410 	add.w	r4, r6, #16
 8003590:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003592:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003594:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003596:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003598:	e894 0003 	ldmia.w	r4, {r0, r1}
 800359c:	e885 0003 	stmia.w	r5, {r0, r1}
 80035a0:	1d33      	adds	r3, r6, #4
 80035a2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035a4:	6838      	ldr	r0, [r7, #0]
 80035a6:	f002 f97b 	bl	80058a0 <USB_CoreInit>
 80035aa:	4603      	mov	r3, r0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d005      	beq.n	80035bc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2202      	movs	r2, #2
 80035b4:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0d0      	b.n	800375e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2100      	movs	r1, #0
 80035c2:	4618      	mov	r0, r3
 80035c4:	f002 fa92 	bl	8005aec <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035c8:	2300      	movs	r3, #0
 80035ca:	73fb      	strb	r3, [r7, #15]
 80035cc:	e04a      	b.n	8003664 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80035ce:	7bfa      	ldrb	r2, [r7, #15]
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	00db      	lsls	r3, r3, #3
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	333d      	adds	r3, #61	; 0x3d
 80035de:	2201      	movs	r2, #1
 80035e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80035e2:	7bfa      	ldrb	r2, [r7, #15]
 80035e4:	6879      	ldr	r1, [r7, #4]
 80035e6:	4613      	mov	r3, r2
 80035e8:	00db      	lsls	r3, r3, #3
 80035ea:	1a9b      	subs	r3, r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	440b      	add	r3, r1
 80035f0:	333c      	adds	r3, #60	; 0x3c
 80035f2:	7bfa      	ldrb	r2, [r7, #15]
 80035f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80035f6:	7bfa      	ldrb	r2, [r7, #15]
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	b298      	uxth	r0, r3
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	00db      	lsls	r3, r3, #3
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	3342      	adds	r3, #66	; 0x42
 800360a:	4602      	mov	r2, r0
 800360c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800360e:	7bfa      	ldrb	r2, [r7, #15]
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	00db      	lsls	r3, r3, #3
 8003616:	1a9b      	subs	r3, r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	333f      	adds	r3, #63	; 0x3f
 800361e:	2200      	movs	r2, #0
 8003620:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003622:	7bfa      	ldrb	r2, [r7, #15]
 8003624:	6879      	ldr	r1, [r7, #4]
 8003626:	4613      	mov	r3, r2
 8003628:	00db      	lsls	r3, r3, #3
 800362a:	1a9b      	subs	r3, r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	3344      	adds	r3, #68	; 0x44
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003636:	7bfa      	ldrb	r2, [r7, #15]
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	4613      	mov	r3, r2
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	1a9b      	subs	r3, r3, r2
 8003640:	009b      	lsls	r3, r3, #2
 8003642:	440b      	add	r3, r1
 8003644:	3348      	adds	r3, #72	; 0x48
 8003646:	2200      	movs	r2, #0
 8003648:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800364a:	7bfa      	ldrb	r2, [r7, #15]
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	00db      	lsls	r3, r3, #3
 8003652:	1a9b      	subs	r3, r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	440b      	add	r3, r1
 8003658:	3350      	adds	r3, #80	; 0x50
 800365a:	2200      	movs	r2, #0
 800365c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800365e:	7bfb      	ldrb	r3, [r7, #15]
 8003660:	3301      	adds	r3, #1
 8003662:	73fb      	strb	r3, [r7, #15]
 8003664:	7bfa      	ldrb	r2, [r7, #15]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	429a      	cmp	r2, r3
 800366c:	d3af      	bcc.n	80035ce <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800366e:	2300      	movs	r3, #0
 8003670:	73fb      	strb	r3, [r7, #15]
 8003672:	e044      	b.n	80036fe <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003674:	7bfa      	ldrb	r2, [r7, #15]
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	00db      	lsls	r3, r3, #3
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003686:	2200      	movs	r2, #0
 8003688:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800368a:	7bfa      	ldrb	r2, [r7, #15]
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	4613      	mov	r3, r2
 8003690:	00db      	lsls	r3, r3, #3
 8003692:	1a9b      	subs	r3, r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	440b      	add	r3, r1
 8003698:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800369c:	7bfa      	ldrb	r2, [r7, #15]
 800369e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80036a0:	7bfa      	ldrb	r2, [r7, #15]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	1a9b      	subs	r3, r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80036b2:	2200      	movs	r2, #0
 80036b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80036b6:	7bfa      	ldrb	r2, [r7, #15]
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	4613      	mov	r3, r2
 80036bc:	00db      	lsls	r3, r3, #3
 80036be:	1a9b      	subs	r3, r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	440b      	add	r3, r1
 80036c4:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80036c8:	2200      	movs	r2, #0
 80036ca:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80036cc:	7bfa      	ldrb	r2, [r7, #15]
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	00db      	lsls	r3, r3, #3
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80036de:	2200      	movs	r2, #0
 80036e0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80036e2:	7bfa      	ldrb	r2, [r7, #15]
 80036e4:	6879      	ldr	r1, [r7, #4]
 80036e6:	4613      	mov	r3, r2
 80036e8:	00db      	lsls	r3, r3, #3
 80036ea:	1a9b      	subs	r3, r3, r2
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	440b      	add	r3, r1
 80036f0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80036f4:	2200      	movs	r2, #0
 80036f6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	3301      	adds	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
 80036fe:	7bfa      	ldrb	r2, [r7, #15]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	429a      	cmp	r2, r3
 8003706:	d3b5      	bcc.n	8003674 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	603b      	str	r3, [r7, #0]
 800370e:	687e      	ldr	r6, [r7, #4]
 8003710:	466d      	mov	r5, sp
 8003712:	f106 0410 	add.w	r4, r6, #16
 8003716:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003718:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800371a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800371c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800371e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003722:	e885 0003 	stmia.w	r5, {r0, r1}
 8003726:	1d33      	adds	r3, r6, #4
 8003728:	cb0e      	ldmia	r3, {r1, r2, r3}
 800372a:	6838      	ldr	r0, [r7, #0]
 800372c:	f002 fa08 	bl	8005b40 <USB_DevInit>
 8003730:	4603      	mov	r3, r0
 8003732:	2b00      	cmp	r3, #0
 8003734:	d005      	beq.n	8003742 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2202      	movs	r2, #2
 800373a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800373e:	2301      	movs	r3, #1
 8003740:	e00d      	b.n	800375e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
  #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4618      	mov	r0, r3
 8003758:	f003 fa47 	bl	8006bea <USB_DevDisconnect>

  return HAL_OK;
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3714      	adds	r7, #20
 8003762:	46bd      	mov	sp, r7
 8003764:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003766 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003766:	b580      	push	{r7, lr}
 8003768:	b084      	sub	sp, #16
 800376a:	af00      	add	r7, sp, #0
 800376c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_PCD_Start+0x1c>
 800377e:	2302      	movs	r3, #2
 8003780:	e020      	b.n	80037c4 <HAL_PCD_Start+0x5e>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378e:	2b01      	cmp	r3, #1
 8003790:	d109      	bne.n	80037a6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003796:	2b01      	cmp	r3, #1
 8003798:	d005      	beq.n	80037a6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4618      	mov	r0, r3
 80037ac:	f003 fa05 	bl	8006bba <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4618      	mov	r0, r3
 80037b6:	f002 f977 	bl	8005aa8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2200      	movs	r2, #0
 80037be:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80037cc:	b590      	push	{r4, r7, lr}
 80037ce:	b08d      	sub	sp, #52	; 0x34
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f003 faac 	bl	8006d40 <USB_GetMode>
 80037e8:	4603      	mov	r3, r0
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f040 839d 	bne.w	8003f2a <HAL_PCD_IRQHandler+0x75e>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f003 fa10 	bl	8006c1a <USB_ReadInterrupts>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	f000 8393 	beq.w	8003f28 <HAL_PCD_IRQHandler+0x75c>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f003 fa07 	bl	8006c1a <USB_ReadInterrupts>
 800380c:	4603      	mov	r3, r0
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b02      	cmp	r3, #2
 8003814:	d107      	bne.n	8003826 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	695a      	ldr	r2, [r3, #20]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f002 0202 	and.w	r2, r2, #2
 8003824:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f003 f9f5 	bl	8006c1a <USB_ReadInterrupts>
 8003830:	4603      	mov	r3, r0
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b10      	cmp	r3, #16
 8003838:	d161      	bne.n	80038fe <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	699a      	ldr	r2, [r3, #24]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0210 	bic.w	r2, r2, #16
 8003848:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 800384a:	6a3b      	ldr	r3, [r7, #32]
 800384c:	6a1b      	ldr	r3, [r3, #32]
 800384e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003850:	69bb      	ldr	r3, [r7, #24]
 8003852:	f003 020f 	and.w	r2, r3, #15
 8003856:	4613      	mov	r3, r2
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	1a9b      	subs	r3, r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	4413      	add	r3, r2
 8003866:	3304      	adds	r3, #4
 8003868:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	0c5b      	lsrs	r3, r3, #17
 800386e:	f003 030f 	and.w	r3, r3, #15
 8003872:	2b02      	cmp	r3, #2
 8003874:	d124      	bne.n	80038c0 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800387c:	4013      	ands	r3, r2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d035      	beq.n	80038ee <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	091b      	lsrs	r3, r3, #4
 800388a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800388c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003890:	b29b      	uxth	r3, r3
 8003892:	461a      	mov	r2, r3
 8003894:	6a38      	ldr	r0, [r7, #32]
 8003896:	f003 f86d 	bl	8006974 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	68da      	ldr	r2, [r3, #12]
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	091b      	lsrs	r3, r3, #4
 80038a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038a6:	441a      	add	r2, r3
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	699a      	ldr	r2, [r3, #24]
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	091b      	lsrs	r3, r3, #4
 80038b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038b8:	441a      	add	r2, r3
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	619a      	str	r2, [r3, #24]
 80038be:	e016      	b.n	80038ee <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	0c5b      	lsrs	r3, r3, #17
 80038c4:	f003 030f 	and.w	r3, r3, #15
 80038c8:	2b06      	cmp	r3, #6
 80038ca:	d110      	bne.n	80038ee <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80038d2:	2208      	movs	r2, #8
 80038d4:	4619      	mov	r1, r3
 80038d6:	6a38      	ldr	r0, [r7, #32]
 80038d8:	f003 f84c 	bl	8006974 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	699a      	ldr	r2, [r3, #24]
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	091b      	lsrs	r3, r3, #4
 80038e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80038e8:	441a      	add	r2, r3
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699a      	ldr	r2, [r3, #24]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f042 0210 	orr.w	r2, r2, #16
 80038fc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f003 f989 	bl	8006c1a <USB_ReadInterrupts>
 8003908:	4603      	mov	r3, r0
 800390a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800390e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003912:	d16e      	bne.n	80039f2 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003914:	2300      	movs	r3, #0
 8003916:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4618      	mov	r0, r3
 800391e:	f003 f98f 	bl	8006c40 <USB_ReadDevAllOutEpInterrupt>
 8003922:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003924:	e062      	b.n	80039ec <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003928:	f003 0301 	and.w	r3, r3, #1
 800392c:	2b00      	cmp	r3, #0
 800392e:	d057      	beq.n	80039e0 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	4611      	mov	r1, r2
 800393a:	4618      	mov	r0, r3
 800393c:	f003 f9b4 	bl	8006ca8 <USB_ReadDevOutEPInterrupt>
 8003940:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00c      	beq.n	8003966 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800394c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	4413      	add	r3, r2
 8003954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003958:	461a      	mov	r2, r3
 800395a:	2301      	movs	r3, #1
 800395c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800395e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 fd99 	bl	8004498 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f003 0308 	and.w	r3, r3, #8
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00c      	beq.n	800398a <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003972:	015a      	lsls	r2, r3, #5
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	4413      	add	r3, r2
 8003978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800397c:	461a      	mov	r2, r3
 800397e:	2308      	movs	r3, #8
 8003980:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003982:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003984:	6878      	ldr	r0, [r7, #4]
 8003986:	f000 fe93 	bl	80046b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f003 0310 	and.w	r3, r3, #16
 8003990:	2b00      	cmp	r3, #0
 8003992:	d008      	beq.n	80039a6 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	4413      	add	r3, r2
 800399c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039a0:	461a      	mov	r2, r3
 80039a2:	2310      	movs	r3, #16
 80039a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	f003 0320 	and.w	r3, r3, #32
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d008      	beq.n	80039c2 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	015a      	lsls	r2, r3, #5
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039bc:	461a      	mov	r2, r3
 80039be:	2320      	movs	r3, #32
 80039c0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d009      	beq.n	80039e0 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80039cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039d8:	461a      	mov	r2, r3
 80039da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80039de:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80039e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039e2:	3301      	adds	r3, #1
 80039e4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80039e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039e8:	085b      	lsrs	r3, r3, #1
 80039ea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80039ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d199      	bne.n	8003926 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f003 f90f 	bl	8006c1a <USB_ReadInterrupts>
 80039fc:	4603      	mov	r3, r0
 80039fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a02:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003a06:	f040 80c0 	bne.w	8003b8a <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f003 f930 	bl	8006c74 <USB_ReadDevAllInEpInterrupt>
 8003a14:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003a16:	2300      	movs	r3, #0
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003a1a:	e0b2      	b.n	8003b82 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 80a7 	beq.w	8003b76 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a2e:	b2d2      	uxtb	r2, r2
 8003a30:	4611      	mov	r1, r2
 8003a32:	4618      	mov	r0, r3
 8003a34:	f003 f956 	bl	8006ce4 <USB_ReadDevInEPInterrupt>
 8003a38:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d057      	beq.n	8003af4 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a46:	f003 030f 	and.w	r3, r3, #15
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a50:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	43db      	mvns	r3, r3
 8003a5e:	69f9      	ldr	r1, [r7, #28]
 8003a60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a64:	4013      	ands	r3, r2
 8003a66:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	015a      	lsls	r2, r3, #5
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	4413      	add	r3, r2
 8003a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a74:	461a      	mov	r2, r3
 8003a76:	2301      	movs	r3, #1
 8003a78:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	691b      	ldr	r3, [r3, #16]
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d132      	bne.n	8003ae8 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a86:	4613      	mov	r3, r2
 8003a88:	00db      	lsls	r3, r3, #3
 8003a8a:	1a9b      	subs	r3, r3, r2
 8003a8c:	009b      	lsls	r3, r3, #2
 8003a8e:	440b      	add	r3, r1
 8003a90:	3348      	adds	r3, #72	; 0x48
 8003a92:	6819      	ldr	r1, [r3, #0]
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a98:	4613      	mov	r3, r2
 8003a9a:	00db      	lsls	r3, r3, #3
 8003a9c:	1a9b      	subs	r3, r3, r2
 8003a9e:	009b      	lsls	r3, r3, #2
 8003aa0:	4403      	add	r3, r0
 8003aa2:	3344      	adds	r3, #68	; 0x44
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4419      	add	r1, r3
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aac:	4613      	mov	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	1a9b      	subs	r3, r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4403      	add	r3, r0
 8003ab6:	3348      	adds	r3, #72	; 0x48
 8003ab8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d113      	bne.n	8003ae8 <HAL_PCD_IRQHandler+0x31c>
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	00db      	lsls	r3, r3, #3
 8003ac8:	1a9b      	subs	r3, r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	440b      	add	r3, r1
 8003ace:	3350      	adds	r3, #80	; 0x50
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d108      	bne.n	8003ae8 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6818      	ldr	r0, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	f003 f95e 	bl	8006da4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	4619      	mov	r1, r3
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f004 fe55 	bl	800879e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	f003 0308 	and.w	r3, r3, #8
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d008      	beq.n	8003b10 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b00:	015a      	lsls	r2, r3, #5
 8003b02:	69fb      	ldr	r3, [r7, #28]
 8003b04:	4413      	add	r3, r2
 8003b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b0a:	461a      	mov	r2, r3
 8003b0c:	2308      	movs	r3, #8
 8003b0e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	f003 0310 	and.w	r3, r3, #16
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d008      	beq.n	8003b2c <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b26:	461a      	mov	r2, r3
 8003b28:	2310      	movs	r3, #16
 8003b2a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d008      	beq.n	8003b48 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b38:	015a      	lsls	r2, r3, #5
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	4413      	add	r3, r2
 8003b3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b42:	461a      	mov	r2, r3
 8003b44:	2340      	movs	r3, #64	; 0x40
 8003b46:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f003 0302 	and.w	r3, r3, #2
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d008      	beq.n	8003b64 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b54:	015a      	lsls	r2, r3, #5
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	4413      	add	r3, r2
 8003b5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b5e:	461a      	mov	r2, r3
 8003b60:	2302      	movs	r3, #2
 8003b62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d003      	beq.n	8003b76 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 fc03 	bl	800437c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b78:	3301      	adds	r3, #1
 8003b7a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b7e:	085b      	lsrs	r3, r3, #1
 8003b80:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	f47f af49 	bne.w	8003a1c <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f003 f843 	bl	8006c1a <USB_ReadInterrupts>
 8003b94:	4603      	mov	r3, r0
 8003b96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b9e:	d122      	bne.n	8003be6 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	69fa      	ldr	r2, [r7, #28]
 8003baa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003bae:	f023 0301 	bic.w	r3, r3, #1
 8003bb2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8003bba:	2b01      	cmp	r3, #1
 8003bbc:	d108      	bne.n	8003bd0 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 fe0f 	bl	80047ec <HAL_PCDEx_LPM_Callback>
 8003bce:	e002      	b.n	8003bd6 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f004 fe5b 	bl	800888c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	695a      	ldr	r2, [r3, #20]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003be4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4618      	mov	r0, r3
 8003bec:	f003 f815 	bl	8006c1a <USB_ReadInterrupts>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bfa:	d112      	bne.n	8003c22 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d102      	bne.n	8003c12 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f004 fe17 	bl	8008840 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695a      	ldr	r2, [r3, #20]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003c20:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    #endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f002 fff7 	bl	8006c1a <USB_ReadInterrupts>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c36:	f040 80c7 	bne.w	8003dc8 <HAL_PCD_IRQHandler+0x5fc>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	69fa      	ldr	r2, [r7, #28]
 8003c44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c48:	f023 0301 	bic.w	r3, r3, #1
 8003c4c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2110      	movs	r1, #16
 8003c54:	4618      	mov	r0, r3
 8003c56:	f002 f8d7 	bl	8005e08 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c5e:	e056      	b.n	8003d0e <HAL_PCD_IRQHandler+0x542>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c62:	015a      	lsls	r2, r3, #5
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	4413      	add	r3, r2
 8003c68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c72:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c76:	015a      	lsls	r2, r3, #5
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	4413      	add	r3, r2
 8003c7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c84:	0151      	lsls	r1, r2, #5
 8003c86:	69fa      	ldr	r2, [r7, #28]
 8003c88:	440a      	add	r2, r1
 8003c8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003c92:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	69fb      	ldr	r3, [r7, #28]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ca4:	0151      	lsls	r1, r2, #5
 8003ca6:	69fa      	ldr	r2, [r7, #28]
 8003ca8:	440a      	add	r2, r1
 8003caa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003cae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003cb2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003cc6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cd8:	0151      	lsls	r1, r2, #5
 8003cda:	69fa      	ldr	r2, [r7, #28]
 8003cdc:	440a      	add	r2, r1
 8003cde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ce2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003ce6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003cf8:	0151      	lsls	r1, r2, #5
 8003cfa:	69fa      	ldr	r2, [r7, #28]
 8003cfc:	440a      	add	r2, r1
 8003cfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d02:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d06:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d3a3      	bcc.n	8003c60 <HAL_PCD_IRQHandler+0x494>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d1e:	69db      	ldr	r3, [r3, #28]
 8003d20:	69fa      	ldr	r2, [r7, #28]
 8003d22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d26:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003d2a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d016      	beq.n	8003d62 <HAL_PCD_IRQHandler+0x596>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003d34:	69fb      	ldr	r3, [r7, #28]
 8003d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d3e:	69fa      	ldr	r2, [r7, #28]
 8003d40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d44:	f043 030b 	orr.w	r3, r3, #11
 8003d48:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003d4c:	69fb      	ldr	r3, [r7, #28]
 8003d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d54:	69fa      	ldr	r2, [r7, #28]
 8003d56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d5a:	f043 030b 	orr.w	r3, r3, #11
 8003d5e:	6453      	str	r3, [r2, #68]	; 0x44
 8003d60:	e015      	b.n	8003d8e <HAL_PCD_IRQHandler+0x5c2>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003d62:	69fb      	ldr	r3, [r7, #28]
 8003d64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	69fa      	ldr	r2, [r7, #28]
 8003d6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003d74:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003d78:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	69fa      	ldr	r2, [r7, #28]
 8003d84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d88:	f043 030b 	orr.w	r3, r3, #11
 8003d8c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69fa      	ldr	r2, [r7, #28]
 8003d98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d9c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003da0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003db2:	461a      	mov	r2, r3
 8003db4:	f002 fff6 	bl	8006da4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	695a      	ldr	r2, [r3, #20]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003dc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f002 ff24 	bl	8006c1a <USB_ReadInterrupts>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ddc:	d124      	bne.n	8003e28 <HAL_PCD_IRQHandler+0x65c>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f002 ffba 	bl	8006d5c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f002 f86c 	bl	8005eca <USB_GetDevSpeed>
 8003df2:	4603      	mov	r3, r0
 8003df4:	461a      	mov	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681c      	ldr	r4, [r3, #0]
 8003dfe:	f001 f92f 	bl	8005060 <HAL_RCC_GetHCLKFreq>
 8003e02:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	4620      	mov	r0, r4
 8003e0e:	f001 fda9 	bl	8005964 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f004 fceb 	bl	80087ee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695a      	ldr	r2, [r3, #20]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003e26:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f002 fef4 	bl	8006c1a <USB_ReadInterrupts>
 8003e32:	4603      	mov	r3, r0
 8003e34:	f003 0308 	and.w	r3, r3, #8
 8003e38:	2b08      	cmp	r3, #8
 8003e3a:	d10a      	bne.n	8003e52 <HAL_PCD_IRQHandler+0x686>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f004 fcc8 	bl	80087d2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	695a      	ldr	r2, [r3, #20]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f002 0208 	and.w	r2, r2, #8
 8003e50:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4618      	mov	r0, r3
 8003e58:	f002 fedf 	bl	8006c1a <USB_ReadInterrupts>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e66:	d10f      	bne.n	8003e88 <HAL_PCD_IRQHandler+0x6bc>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e6e:	b2db      	uxtb	r3, r3
 8003e70:	4619      	mov	r1, r3
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f004 fd2a 	bl	80088cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	695a      	ldr	r2, [r3, #20]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003e86:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f002 fec4 	bl	8006c1a <USB_ReadInterrupts>
 8003e92:	4603      	mov	r3, r0
 8003e94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e98:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e9c:	d10f      	bne.n	8003ebe <HAL_PCD_IRQHandler+0x6f2>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	4619      	mov	r1, r3
 8003ea8:	6878      	ldr	r0, [r7, #4]
 8003eaa:	f004 fcfd 	bl	80088a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	695a      	ldr	r2, [r3, #20]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003ebc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f002 fea9 	bl	8006c1a <USB_ReadInterrupts>
 8003ec8:	4603      	mov	r3, r0
 8003eca:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed2:	d10a      	bne.n	8003eea <HAL_PCD_IRQHandler+0x71e>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f004 fd0b 	bl	80088f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	695a      	ldr	r2, [r3, #20]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003ee8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f002 fe93 	bl	8006c1a <USB_ReadInterrupts>
 8003ef4:	4603      	mov	r3, r0
 8003ef6:	f003 0304 	and.w	r3, r3, #4
 8003efa:	2b04      	cmp	r3, #4
 8003efc:	d115      	bne.n	8003f2a <HAL_PCD_IRQHandler+0x75e>
    {
      temp = hpcd->Instance->GOTGINT;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003f06:	69bb      	ldr	r3, [r7, #24]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <HAL_PCD_IRQHandler+0x74a>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003f10:	6878      	ldr	r0, [r7, #4]
 8003f12:	f004 fcfb 	bl	800890c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	6859      	ldr	r1, [r3, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	605a      	str	r2, [r3, #4]
 8003f26:	e000      	b.n	8003f2a <HAL_PCD_IRQHandler+0x75e>
      return;
 8003f28:	bf00      	nop
    }
  }
}
 8003f2a:	3734      	adds	r7, #52	; 0x34
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	bd90      	pop	{r4, r7, pc}

08003f30 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b082      	sub	sp, #8
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	6078      	str	r0, [r7, #4]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_PCD_SetAddress+0x1a>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e013      	b.n	8003f72 <HAL_PCD_SetAddress+0x42>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	78fa      	ldrb	r2, [r7, #3]
 8003f56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	78fa      	ldrb	r2, [r7, #3]
 8003f60:	4611      	mov	r1, r2
 8003f62:	4618      	mov	r0, r3
 8003f64:	f002 fe03 	bl	8006b6e <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b084      	sub	sp, #16
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	4608      	mov	r0, r1
 8003f84:	4611      	mov	r1, r2
 8003f86:	461a      	mov	r2, r3
 8003f88:	4603      	mov	r3, r0
 8003f8a:	70fb      	strb	r3, [r7, #3]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	803b      	strh	r3, [r7, #0]
 8003f90:	4613      	mov	r3, r2
 8003f92:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003f98:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	da0f      	bge.n	8003fc0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	f003 020f 	and.w	r2, r3, #15
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	1a9b      	subs	r3, r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	3338      	adds	r3, #56	; 0x38
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	3304      	adds	r3, #4
 8003fb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	705a      	strb	r2, [r3, #1]
 8003fbe:	e00f      	b.n	8003fe0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	f003 020f 	and.w	r2, r3, #15
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	1a9b      	subs	r3, r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	3304      	adds	r3, #4
 8003fd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003fe0:	78fb      	ldrb	r3, [r7, #3]
 8003fe2:	f003 030f 	and.w	r3, r3, #15
 8003fe6:	b2da      	uxtb	r2, r3
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003fec:	883a      	ldrh	r2, [r7, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	78ba      	ldrb	r2, [r7, #2]
 8003ff6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	785b      	ldrb	r3, [r3, #1]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d004      	beq.n	800400a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	b29a      	uxth	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800400a:	78bb      	ldrb	r3, [r7, #2]
 800400c:	2b02      	cmp	r3, #2
 800400e:	d102      	bne.n	8004016 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800401c:	2b01      	cmp	r3, #1
 800401e:	d101      	bne.n	8004024 <HAL_PCD_EP_Open+0xaa>
 8004020:	2302      	movs	r3, #2
 8004022:	e00e      	b.n	8004042 <HAL_PCD_EP_Open+0xc8>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2201      	movs	r2, #1
 8004028:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68f9      	ldr	r1, [r7, #12]
 8004032:	4618      	mov	r0, r3
 8004034:	f001 ff6e 	bl	8005f14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004040:	7afb      	ldrb	r3, [r7, #11]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}

0800404a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800404a:	b580      	push	{r7, lr}
 800404c:	b084      	sub	sp, #16
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	460b      	mov	r3, r1
 8004054:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004056:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800405a:	2b00      	cmp	r3, #0
 800405c:	da0f      	bge.n	800407e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800405e:	78fb      	ldrb	r3, [r7, #3]
 8004060:	f003 020f 	and.w	r2, r3, #15
 8004064:	4613      	mov	r3, r2
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	1a9b      	subs	r3, r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	3338      	adds	r3, #56	; 0x38
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	4413      	add	r3, r2
 8004072:	3304      	adds	r3, #4
 8004074:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2201      	movs	r2, #1
 800407a:	705a      	strb	r2, [r3, #1]
 800407c:	e00f      	b.n	800409e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800407e:	78fb      	ldrb	r3, [r7, #3]
 8004080:	f003 020f 	and.w	r2, r3, #15
 8004084:	4613      	mov	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	1a9b      	subs	r3, r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	4413      	add	r3, r2
 8004094:	3304      	adds	r3, #4
 8004096:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800409e:	78fb      	ldrb	r3, [r7, #3]
 80040a0:	f003 030f 	and.w	r3, r3, #15
 80040a4:	b2da      	uxtb	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	d101      	bne.n	80040b8 <HAL_PCD_EP_Close+0x6e>
 80040b4:	2302      	movs	r3, #2
 80040b6:	e00e      	b.n	80040d6 <HAL_PCD_EP_Close+0x8c>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68f9      	ldr	r1, [r7, #12]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f001 ffac 	bl	8006024 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3710      	adds	r7, #16
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}

080040de <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80040de:	b580      	push	{r7, lr}
 80040e0:	b086      	sub	sp, #24
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	60f8      	str	r0, [r7, #12]
 80040e6:	607a      	str	r2, [r7, #4]
 80040e8:	603b      	str	r3, [r7, #0]
 80040ea:	460b      	mov	r3, r1
 80040ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80040ee:	7afb      	ldrb	r3, [r7, #11]
 80040f0:	f003 020f 	and.w	r2, r3, #15
 80040f4:	4613      	mov	r3, r2
 80040f6:	00db      	lsls	r3, r3, #3
 80040f8:	1a9b      	subs	r3, r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004100:	68fa      	ldr	r2, [r7, #12]
 8004102:	4413      	add	r3, r2
 8004104:	3304      	adds	r3, #4
 8004106:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	687a      	ldr	r2, [r7, #4]
 800410c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	683a      	ldr	r2, [r7, #0]
 8004112:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	2200      	movs	r2, #0
 8004118:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2200      	movs	r2, #0
 800411e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004120:	7afb      	ldrb	r3, [r7, #11]
 8004122:	f003 030f 	and.w	r3, r3, #15
 8004126:	b2da      	uxtb	r2, r3
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d102      	bne.n	800413a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800413a:	7afb      	ldrb	r3, [r7, #11]
 800413c:	f003 030f 	and.w	r3, r3, #15
 8004140:	2b00      	cmp	r3, #0
 8004142:	d109      	bne.n	8004158 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6818      	ldr	r0, [r3, #0]
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	b2db      	uxtb	r3, r3
 800414e:	461a      	mov	r2, r3
 8004150:	6979      	ldr	r1, [r7, #20]
 8004152:	f002 fa87 	bl	8006664 <USB_EP0StartXfer>
 8004156:	e008      	b.n	800416a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6818      	ldr	r0, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	461a      	mov	r2, r3
 8004164:	6979      	ldr	r1, [r7, #20]
 8004166:	f002 f839 	bl	80061dc <USB_EPStartXfer>
  }

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3718      	adds	r7, #24
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b086      	sub	sp, #24
 8004178:	af00      	add	r7, sp, #0
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	607a      	str	r2, [r7, #4]
 800417e:	603b      	str	r3, [r7, #0]
 8004180:	460b      	mov	r3, r1
 8004182:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004184:	7afb      	ldrb	r3, [r7, #11]
 8004186:	f003 020f 	and.w	r2, r3, #15
 800418a:	4613      	mov	r3, r2
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	1a9b      	subs	r3, r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	3338      	adds	r3, #56	; 0x38
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4413      	add	r3, r2
 8004198:	3304      	adds	r3, #4
 800419a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	2200      	movs	r2, #0
 80041ac:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 80041ae:	697b      	ldr	r3, [r7, #20]
 80041b0:	2201      	movs	r2, #1
 80041b2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041b4:	7afb      	ldrb	r3, [r7, #11]
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	2b01      	cmp	r3, #1
 80041c6:	d102      	bne.n	80041ce <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80041ce:	7afb      	ldrb	r3, [r7, #11]
 80041d0:	f003 030f 	and.w	r3, r3, #15
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d109      	bne.n	80041ec <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6818      	ldr	r0, [r3, #0]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	691b      	ldr	r3, [r3, #16]
 80041e0:	b2db      	uxtb	r3, r3
 80041e2:	461a      	mov	r2, r3
 80041e4:	6979      	ldr	r1, [r7, #20]
 80041e6:	f002 fa3d 	bl	8006664 <USB_EP0StartXfer>
 80041ea:	e008      	b.n	80041fe <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6818      	ldr	r0, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	691b      	ldr	r3, [r3, #16]
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	461a      	mov	r2, r3
 80041f8:	6979      	ldr	r1, [r7, #20]
 80041fa:	f001 ffef 	bl	80061dc <USB_EPStartXfer>
  }

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3718      	adds	r7, #24
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	460b      	mov	r3, r1
 8004212:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004214:	78fb      	ldrb	r3, [r7, #3]
 8004216:	f003 020f 	and.w	r2, r3, #15
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	429a      	cmp	r2, r3
 8004220:	d901      	bls.n	8004226 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e050      	b.n	80042c8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004226:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800422a:	2b00      	cmp	r3, #0
 800422c:	da0f      	bge.n	800424e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800422e:	78fb      	ldrb	r3, [r7, #3]
 8004230:	f003 020f 	and.w	r2, r3, #15
 8004234:	4613      	mov	r3, r2
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	1a9b      	subs	r3, r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	3338      	adds	r3, #56	; 0x38
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	4413      	add	r3, r2
 8004242:	3304      	adds	r3, #4
 8004244:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2201      	movs	r2, #1
 800424a:	705a      	strb	r2, [r3, #1]
 800424c:	e00d      	b.n	800426a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800424e:	78fa      	ldrb	r2, [r7, #3]
 8004250:	4613      	mov	r3, r2
 8004252:	00db      	lsls	r3, r3, #3
 8004254:	1a9b      	subs	r3, r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800425c:	687a      	ldr	r2, [r7, #4]
 800425e:	4413      	add	r3, r2
 8004260:	3304      	adds	r3, #4
 8004262:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	2200      	movs	r2, #0
 8004268:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2201      	movs	r2, #1
 800426e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004270:	78fb      	ldrb	r3, [r7, #3]
 8004272:	f003 030f 	and.w	r3, r3, #15
 8004276:	b2da      	uxtb	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004282:	2b01      	cmp	r3, #1
 8004284:	d101      	bne.n	800428a <HAL_PCD_EP_SetStall+0x82>
 8004286:	2302      	movs	r3, #2
 8004288:	e01e      	b.n	80042c8 <HAL_PCD_EP_SetStall+0xc0>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	68f9      	ldr	r1, [r7, #12]
 8004298:	4618      	mov	r0, r3
 800429a:	f002 fb94 	bl	80069c6 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800429e:	78fb      	ldrb	r3, [r7, #3]
 80042a0:	f003 030f 	and.w	r3, r3, #15
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10a      	bne.n	80042be <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6818      	ldr	r0, [r3, #0]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	b2d9      	uxtb	r1, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80042b8:	461a      	mov	r2, r3
 80042ba:	f002 fd73 	bl	8006da4 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80042c6:	2300      	movs	r3, #0
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	460b      	mov	r3, r1
 80042da:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80042dc:	78fb      	ldrb	r3, [r7, #3]
 80042de:	f003 020f 	and.w	r2, r3, #15
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d901      	bls.n	80042ee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e042      	b.n	8004374 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	da0f      	bge.n	8004316 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042f6:	78fb      	ldrb	r3, [r7, #3]
 80042f8:	f003 020f 	and.w	r2, r3, #15
 80042fc:	4613      	mov	r3, r2
 80042fe:	00db      	lsls	r3, r3, #3
 8004300:	1a9b      	subs	r3, r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	3338      	adds	r3, #56	; 0x38
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	4413      	add	r3, r2
 800430a:	3304      	adds	r3, #4
 800430c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2201      	movs	r2, #1
 8004312:	705a      	strb	r2, [r3, #1]
 8004314:	e00f      	b.n	8004336 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004316:	78fb      	ldrb	r3, [r7, #3]
 8004318:	f003 020f 	and.w	r2, r3, #15
 800431c:	4613      	mov	r3, r2
 800431e:	00db      	lsls	r3, r3, #3
 8004320:	1a9b      	subs	r3, r3, r2
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	4413      	add	r3, r2
 800432c:	3304      	adds	r3, #4
 800432e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	2200      	movs	r2, #0
 800433a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800433c:	78fb      	ldrb	r3, [r7, #3]
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	b2da      	uxtb	r2, r3
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800434e:	2b01      	cmp	r3, #1
 8004350:	d101      	bne.n	8004356 <HAL_PCD_EP_ClrStall+0x86>
 8004352:	2302      	movs	r3, #2
 8004354:	e00e      	b.n	8004374 <HAL_PCD_EP_ClrStall+0xa4>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2201      	movs	r2, #1
 800435a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68f9      	ldr	r1, [r7, #12]
 8004364:	4618      	mov	r0, r3
 8004366:	f002 fb9c 	bl	8006aa2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b08a      	sub	sp, #40	; 0x28
 8004380:	af02      	add	r7, sp, #8
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	4613      	mov	r3, r2
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	1a9b      	subs	r3, r3, r2
 8004398:	009b      	lsls	r3, r3, #2
 800439a:	3338      	adds	r3, #56	; 0x38
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	4413      	add	r3, r2
 80043a0:	3304      	adds	r3, #4
 80043a2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	699a      	ldr	r2, [r3, #24]
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	695b      	ldr	r3, [r3, #20]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d901      	bls.n	80043b4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e06c      	b.n	800448e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	695a      	ldr	r2, [r3, #20]
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	689b      	ldr	r3, [r3, #8]
 80043c4:	69fa      	ldr	r2, [r7, #28]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d902      	bls.n	80043d0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	3303      	adds	r3, #3
 80043d4:	089b      	lsrs	r3, r3, #2
 80043d6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80043d8:	e02b      	b.n	8004432 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	695a      	ldr	r2, [r3, #20]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	699b      	ldr	r3, [r3, #24]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	69fa      	ldr	r2, [r7, #28]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d902      	bls.n	80043f6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	3303      	adds	r3, #3
 80043fa:	089b      	lsrs	r3, r3, #2
 80043fc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	68d9      	ldr	r1, [r3, #12]
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	b2da      	uxtb	r2, r3
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800440e:	b2db      	uxtb	r3, r3
 8004410:	9300      	str	r3, [sp, #0]
 8004412:	4603      	mov	r3, r0
 8004414:	6978      	ldr	r0, [r7, #20]
 8004416:	f002 fa78 	bl	800690a <USB_WritePacket>

    ep->xfer_buff  += len;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	68da      	ldr	r2, [r3, #12]
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	441a      	add	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	699a      	ldr	r2, [r3, #24]
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	441a      	add	r2, r3
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	015a      	lsls	r2, r3, #5
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	4413      	add	r3, r2
 800443a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	b29b      	uxth	r3, r3
 8004442:	69ba      	ldr	r2, [r7, #24]
 8004444:	429a      	cmp	r2, r3
 8004446:	d809      	bhi.n	800445c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	699a      	ldr	r2, [r3, #24]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004450:	429a      	cmp	r2, r3
 8004452:	d203      	bcs.n	800445c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1be      	bne.n	80043da <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	695a      	ldr	r2, [r3, #20]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	699b      	ldr	r3, [r3, #24]
 8004464:	429a      	cmp	r2, r3
 8004466:	d811      	bhi.n	800448c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	f003 030f 	and.w	r3, r3, #15
 800446e:	2201      	movs	r2, #1
 8004470:	fa02 f303 	lsl.w	r3, r2, r3
 8004474:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800447c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	43db      	mvns	r3, r3
 8004482:	6939      	ldr	r1, [r7, #16]
 8004484:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004488:	4013      	ands	r3, r2
 800448a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800448c:	2300      	movs	r3, #0
}
 800448e:	4618      	mov	r0, r3
 8004490:	3720      	adds	r7, #32
 8004492:	46bd      	mov	sp, r7
 8004494:	bd80      	pop	{r7, pc}
	...

08004498 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b086      	sub	sp, #24
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
 80044a0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	333c      	adds	r3, #60	; 0x3c
 80044b0:	3304      	adds	r3, #4
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	015a      	lsls	r2, r3, #5
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	4413      	add	r3, r2
 80044be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	691b      	ldr	r3, [r3, #16]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	f040 80a0 	bne.w	8004610 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	f003 0308 	and.w	r3, r3, #8
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d015      	beq.n	8004506 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	4a72      	ldr	r2, [pc, #456]	; (80046a8 <PCD_EP_OutXfrComplete_int+0x210>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	f240 80dd 	bls.w	800469e <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	f000 80d7 	beq.w	800469e <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fc:	461a      	mov	r2, r3
 80044fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004502:	6093      	str	r3, [r2, #8]
 8004504:	e0cb      	b.n	800469e <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f003 0320 	and.w	r3, r3, #32
 800450c:	2b00      	cmp	r3, #0
 800450e:	d009      	beq.n	8004524 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	015a      	lsls	r2, r3, #5
 8004514:	693b      	ldr	r3, [r7, #16]
 8004516:	4413      	add	r3, r2
 8004518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451c:	461a      	mov	r2, r3
 800451e:	2320      	movs	r3, #32
 8004520:	6093      	str	r3, [r2, #8]
 8004522:	e0bc      	b.n	800469e <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800452a:	2b00      	cmp	r3, #0
 800452c:	f040 80b7 	bne.w	800469e <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4a5d      	ldr	r2, [pc, #372]	; (80046a8 <PCD_EP_OutXfrComplete_int+0x210>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d90f      	bls.n	8004558 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800453e:	2b00      	cmp	r3, #0
 8004540:	d00a      	beq.n	8004558 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	015a      	lsls	r2, r3, #5
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	4413      	add	r3, r2
 800454a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454e:	461a      	mov	r2, r3
 8004550:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004554:	6093      	str	r3, [r2, #8]
 8004556:	e0a2      	b.n	800469e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004558:	6879      	ldr	r1, [r7, #4]
 800455a:	683a      	ldr	r2, [r7, #0]
 800455c:	4613      	mov	r3, r2
 800455e:	00db      	lsls	r3, r3, #3
 8004560:	1a9b      	subs	r3, r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	440b      	add	r3, r1
 8004566:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800456a:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	0159      	lsls	r1, r3, #5
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	440b      	add	r3, r1
 8004574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 800457e:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	4613      	mov	r3, r2
 8004586:	00db      	lsls	r3, r3, #3
 8004588:	1a9b      	subs	r3, r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4403      	add	r3, r0
 800458e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004592:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004594:	6879      	ldr	r1, [r7, #4]
 8004596:	683a      	ldr	r2, [r7, #0]
 8004598:	4613      	mov	r3, r2
 800459a:	00db      	lsls	r3, r3, #3
 800459c:	1a9b      	subs	r3, r3, r2
 800459e:	009b      	lsls	r3, r3, #2
 80045a0:	440b      	add	r3, r1
 80045a2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80045a6:	6819      	ldr	r1, [r3, #0]
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	4613      	mov	r3, r2
 80045ae:	00db      	lsls	r3, r3, #3
 80045b0:	1a9b      	subs	r3, r3, r2
 80045b2:	009b      	lsls	r3, r3, #2
 80045b4:	4403      	add	r3, r0
 80045b6:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4419      	add	r1, r3
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	4613      	mov	r3, r2
 80045c4:	00db      	lsls	r3, r3, #3
 80045c6:	1a9b      	subs	r3, r3, r2
 80045c8:	009b      	lsls	r3, r3, #2
 80045ca:	4403      	add	r3, r0
 80045cc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80045d0:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d114      	bne.n	8004602 <PCD_EP_OutXfrComplete_int+0x16a>
 80045d8:	6879      	ldr	r1, [r7, #4]
 80045da:	683a      	ldr	r2, [r7, #0]
 80045dc:	4613      	mov	r3, r2
 80045de:	00db      	lsls	r3, r3, #3
 80045e0:	1a9b      	subs	r3, r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	440b      	add	r3, r1
 80045e6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d108      	bne.n	8004602 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6818      	ldr	r0, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80045fa:	461a      	mov	r2, r3
 80045fc:	2101      	movs	r1, #1
 80045fe:	f002 fbd1 	bl	8006da4 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	4619      	mov	r1, r3
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f004 f8ad 	bl	8008768 <HAL_PCD_DataOutStageCallback>
 800460e:	e046      	b.n	800469e <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4a26      	ldr	r2, [pc, #152]	; (80046ac <PCD_EP_OutXfrComplete_int+0x214>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d124      	bne.n	8004662 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00a      	beq.n	8004638 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	015a      	lsls	r2, r3, #5
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	4413      	add	r3, r2
 800462a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800462e:	461a      	mov	r2, r3
 8004630:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004634:	6093      	str	r3, [r2, #8]
 8004636:	e032      	b.n	800469e <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	f003 0320 	and.w	r3, r3, #32
 800463e:	2b00      	cmp	r3, #0
 8004640:	d008      	beq.n	8004654 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	015a      	lsls	r2, r3, #5
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	4413      	add	r3, r2
 800464a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800464e:	461a      	mov	r2, r3
 8004650:	2320      	movs	r3, #32
 8004652:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	4619      	mov	r1, r3
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f004 f884 	bl	8008768 <HAL_PCD_DataOutStageCallback>
 8004660:	e01d      	b.n	800469e <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d114      	bne.n	8004692 <PCD_EP_OutXfrComplete_int+0x1fa>
 8004668:	6879      	ldr	r1, [r7, #4]
 800466a:	683a      	ldr	r2, [r7, #0]
 800466c:	4613      	mov	r3, r2
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	1a9b      	subs	r3, r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d108      	bne.n	8004692 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6818      	ldr	r0, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800468a:	461a      	mov	r2, r3
 800468c:	2100      	movs	r1, #0
 800468e:	f002 fb89 	bl	8006da4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	b2db      	uxtb	r3, r3
 8004696:	4619      	mov	r1, r3
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f004 f865 	bl	8008768 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	3718      	adds	r7, #24
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}
 80046a8:	4f54300a 	.word	0x4f54300a
 80046ac:	4f54310a 	.word	0x4f54310a

080046b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	333c      	adds	r3, #60	; 0x3c
 80046c8:	3304      	adds	r3, #4
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	015a      	lsls	r2, r3, #5
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	4413      	add	r3, r2
 80046d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	4a15      	ldr	r2, [pc, #84]	; (8004738 <PCD_EP_OutSetupPacket_int+0x88>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d90e      	bls.n	8004704 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d009      	beq.n	8004704 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	015a      	lsls	r2, r3, #5
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	4413      	add	r3, r2
 80046f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fc:	461a      	mov	r2, r3
 80046fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004702:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f004 f81d 	bl	8008744 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4a0a      	ldr	r2, [pc, #40]	; (8004738 <PCD_EP_OutSetupPacket_int+0x88>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d90c      	bls.n	800472c <PCD_EP_OutSetupPacket_int+0x7c>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	691b      	ldr	r3, [r3, #16]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d108      	bne.n	800472c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6818      	ldr	r0, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004724:	461a      	mov	r2, r3
 8004726:	2101      	movs	r1, #1
 8004728:	f002 fb3c 	bl	8006da4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800472c:	2300      	movs	r3, #0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	4f54300a 	.word	0x4f54300a

0800473c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
 8004744:	460b      	mov	r3, r1
 8004746:	70fb      	strb	r3, [r7, #3]
 8004748:	4613      	mov	r3, r2
 800474a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004754:	78fb      	ldrb	r3, [r7, #3]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d107      	bne.n	800476a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800475a:	883b      	ldrh	r3, [r7, #0]
 800475c:	0419      	lsls	r1, r3, #16
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68ba      	ldr	r2, [r7, #8]
 8004764:	430a      	orrs	r2, r1
 8004766:	629a      	str	r2, [r3, #40]	; 0x28
 8004768:	e028      	b.n	80047bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004770:	0c1b      	lsrs	r3, r3, #16
 8004772:	68ba      	ldr	r2, [r7, #8]
 8004774:	4413      	add	r3, r2
 8004776:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004778:	2300      	movs	r3, #0
 800477a:	73fb      	strb	r3, [r7, #15]
 800477c:	e00d      	b.n	800479a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	7bfb      	ldrb	r3, [r7, #15]
 8004784:	3340      	adds	r3, #64	; 0x40
 8004786:	009b      	lsls	r3, r3, #2
 8004788:	4413      	add	r3, r2
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	0c1b      	lsrs	r3, r3, #16
 800478e:	68ba      	ldr	r2, [r7, #8]
 8004790:	4413      	add	r3, r2
 8004792:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004794:	7bfb      	ldrb	r3, [r7, #15]
 8004796:	3301      	adds	r3, #1
 8004798:	73fb      	strb	r3, [r7, #15]
 800479a:	7bfa      	ldrb	r2, [r7, #15]
 800479c:	78fb      	ldrb	r3, [r7, #3]
 800479e:	3b01      	subs	r3, #1
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d3ec      	bcc.n	800477e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80047a4:	883b      	ldrh	r3, [r7, #0]
 80047a6:	0418      	lsls	r0, r3, #16
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6819      	ldr	r1, [r3, #0]
 80047ac:	78fb      	ldrb	r3, [r7, #3]
 80047ae:	3b01      	subs	r3, #1
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	4302      	orrs	r2, r0
 80047b4:	3340      	adds	r3, #64	; 0x40
 80047b6:	009b      	lsls	r3, r3, #2
 80047b8:	440b      	add	r3, r1
 80047ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3714      	adds	r7, #20
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	460b      	mov	r3, r1
 80047d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	887a      	ldrh	r2, [r7, #2]
 80047dc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	460b      	mov	r3, r1
 80047f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80047f8:	bf00      	nop
 80047fa:	370c      	adds	r7, #12
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d101      	bne.n	8004816 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004812:	2301      	movs	r3, #1
 8004814:	e25b      	b.n	8004cce <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0301 	and.w	r3, r3, #1
 800481e:	2b00      	cmp	r3, #0
 8004820:	d075      	beq.n	800490e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004822:	4ba3      	ldr	r3, [pc, #652]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	f003 030c 	and.w	r3, r3, #12
 800482a:	2b04      	cmp	r3, #4
 800482c:	d00c      	beq.n	8004848 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800482e:	4ba0      	ldr	r3, [pc, #640]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004836:	2b08      	cmp	r3, #8
 8004838:	d112      	bne.n	8004860 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800483a:	4b9d      	ldr	r3, [pc, #628]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004842:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004846:	d10b      	bne.n	8004860 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004848:	4b99      	ldr	r3, [pc, #612]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004850:	2b00      	cmp	r3, #0
 8004852:	d05b      	beq.n	800490c <HAL_RCC_OscConfig+0x108>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d157      	bne.n	800490c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e236      	b.n	8004cce <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004868:	d106      	bne.n	8004878 <HAL_RCC_OscConfig+0x74>
 800486a:	4b91      	ldr	r3, [pc, #580]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a90      	ldr	r2, [pc, #576]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004874:	6013      	str	r3, [r2, #0]
 8004876:	e01d      	b.n	80048b4 <HAL_RCC_OscConfig+0xb0>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004880:	d10c      	bne.n	800489c <HAL_RCC_OscConfig+0x98>
 8004882:	4b8b      	ldr	r3, [pc, #556]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a8a      	ldr	r2, [pc, #552]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	4b88      	ldr	r3, [pc, #544]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a87      	ldr	r2, [pc, #540]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	e00b      	b.n	80048b4 <HAL_RCC_OscConfig+0xb0>
 800489c:	4b84      	ldr	r3, [pc, #528]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a83      	ldr	r2, [pc, #524]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 80048a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	4b81      	ldr	r3, [pc, #516]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a80      	ldr	r2, [pc, #512]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 80048ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d013      	beq.n	80048e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048bc:	f7fd fcde 	bl	800227c <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048c4:	f7fd fcda 	bl	800227c <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b64      	cmp	r3, #100	; 0x64
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e1fb      	b.n	8004cce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048d6:	4b76      	ldr	r3, [pc, #472]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0f0      	beq.n	80048c4 <HAL_RCC_OscConfig+0xc0>
 80048e2:	e014      	b.n	800490e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e4:	f7fd fcca 	bl	800227c <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048ec:	f7fd fcc6 	bl	800227c <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b64      	cmp	r3, #100	; 0x64
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e1e7      	b.n	8004cce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048fe:	4b6c      	ldr	r3, [pc, #432]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f0      	bne.n	80048ec <HAL_RCC_OscConfig+0xe8>
 800490a:	e000      	b.n	800490e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800490c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d063      	beq.n	80049e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800491a:	4b65      	ldr	r3, [pc, #404]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 030c 	and.w	r3, r3, #12
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00b      	beq.n	800493e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004926:	4b62      	ldr	r3, [pc, #392]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800492e:	2b08      	cmp	r3, #8
 8004930:	d11c      	bne.n	800496c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004932:	4b5f      	ldr	r3, [pc, #380]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d116      	bne.n	800496c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800493e:	4b5c      	ldr	r3, [pc, #368]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d005      	beq.n	8004956 <HAL_RCC_OscConfig+0x152>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d001      	beq.n	8004956 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e1bb      	b.n	8004cce <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004956:	4b56      	ldr	r3, [pc, #344]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	00db      	lsls	r3, r3, #3
 8004964:	4952      	ldr	r1, [pc, #328]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004966:	4313      	orrs	r3, r2
 8004968:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800496a:	e03a      	b.n	80049e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d020      	beq.n	80049b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004974:	4b4f      	ldr	r3, [pc, #316]	; (8004ab4 <HAL_RCC_OscConfig+0x2b0>)
 8004976:	2201      	movs	r2, #1
 8004978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800497a:	f7fd fc7f 	bl	800227c <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004982:	f7fd fc7b 	bl	800227c <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e19c      	b.n	8004cce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004994:	4b46      	ldr	r3, [pc, #280]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0f0      	beq.n	8004982 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a0:	4b43      	ldr	r3, [pc, #268]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	4940      	ldr	r1, [pc, #256]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	600b      	str	r3, [r1, #0]
 80049b4:	e015      	b.n	80049e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049b6:	4b3f      	ldr	r3, [pc, #252]	; (8004ab4 <HAL_RCC_OscConfig+0x2b0>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049bc:	f7fd fc5e 	bl	800227c <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049c4:	f7fd fc5a 	bl	800227c <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e17b      	b.n	8004cce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049d6:	4b36      	ldr	r3, [pc, #216]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1f0      	bne.n	80049c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0308 	and.w	r3, r3, #8
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d030      	beq.n	8004a50 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	695b      	ldr	r3, [r3, #20]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d016      	beq.n	8004a24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049f6:	4b30      	ldr	r3, [pc, #192]	; (8004ab8 <HAL_RCC_OscConfig+0x2b4>)
 80049f8:	2201      	movs	r2, #1
 80049fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049fc:	f7fd fc3e 	bl	800227c <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a04:	f7fd fc3a 	bl	800227c <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e15b      	b.n	8004cce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a16:	4b26      	ldr	r3, [pc, #152]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004a18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0f0      	beq.n	8004a04 <HAL_RCC_OscConfig+0x200>
 8004a22:	e015      	b.n	8004a50 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a24:	4b24      	ldr	r3, [pc, #144]	; (8004ab8 <HAL_RCC_OscConfig+0x2b4>)
 8004a26:	2200      	movs	r2, #0
 8004a28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a2a:	f7fd fc27 	bl	800227c <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a30:	e008      	b.n	8004a44 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a32:	f7fd fc23 	bl	800227c <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e144      	b.n	8004cce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a44:	4b1a      	ldr	r3, [pc, #104]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004a46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a48:	f003 0302 	and.w	r3, r3, #2
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1f0      	bne.n	8004a32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0304 	and.w	r3, r3, #4
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 80a0 	beq.w	8004b9e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a62:	4b13      	ldr	r3, [pc, #76]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d10f      	bne.n	8004a8e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60bb      	str	r3, [r7, #8]
 8004a72:	4b0f      	ldr	r3, [pc, #60]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	4a0e      	ldr	r2, [pc, #56]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a7e:	4b0c      	ldr	r3, [pc, #48]	; (8004ab0 <HAL_RCC_OscConfig+0x2ac>)
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a86:	60bb      	str	r3, [r7, #8]
 8004a88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a8e:	4b0b      	ldr	r3, [pc, #44]	; (8004abc <HAL_RCC_OscConfig+0x2b8>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d121      	bne.n	8004ade <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a9a:	4b08      	ldr	r3, [pc, #32]	; (8004abc <HAL_RCC_OscConfig+0x2b8>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a07      	ldr	r2, [pc, #28]	; (8004abc <HAL_RCC_OscConfig+0x2b8>)
 8004aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aa4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aa6:	f7fd fbe9 	bl	800227c <HAL_GetTick>
 8004aaa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aac:	e011      	b.n	8004ad2 <HAL_RCC_OscConfig+0x2ce>
 8004aae:	bf00      	nop
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	42470000 	.word	0x42470000
 8004ab8:	42470e80 	.word	0x42470e80
 8004abc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ac0:	f7fd fbdc 	bl	800227c <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e0fd      	b.n	8004cce <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad2:	4b81      	ldr	r3, [pc, #516]	; (8004cd8 <HAL_RCC_OscConfig+0x4d4>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0f0      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d106      	bne.n	8004af4 <HAL_RCC_OscConfig+0x2f0>
 8004ae6:	4b7d      	ldr	r3, [pc, #500]	; (8004cdc <HAL_RCC_OscConfig+0x4d8>)
 8004ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aea:	4a7c      	ldr	r2, [pc, #496]	; (8004cdc <HAL_RCC_OscConfig+0x4d8>)
 8004aec:	f043 0301 	orr.w	r3, r3, #1
 8004af0:	6713      	str	r3, [r2, #112]	; 0x70
 8004af2:	e01c      	b.n	8004b2e <HAL_RCC_OscConfig+0x32a>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	2b05      	cmp	r3, #5
 8004afa:	d10c      	bne.n	8004b16 <HAL_RCC_OscConfig+0x312>
 8004afc:	4b77      	ldr	r3, [pc, #476]	; (8004cdc <HAL_RCC_OscConfig+0x4d8>)
 8004afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b00:	4a76      	ldr	r2, [pc, #472]	; (8004cdc <HAL_RCC_OscConfig+0x4d8>)
 8004b02:	f043 0304 	orr.w	r3, r3, #4
 8004b06:	6713      	str	r3, [r2, #112]	; 0x70
 8004b08:	4b74      	ldr	r3, [pc, #464]	; (8004cdc <HAL_RCC_OscConfig+0x4d8>)
 8004b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0c:	4a73      	ldr	r2, [pc, #460]	; (8004cdc <HAL_RCC_OscConfig+0x4d8>)
 8004b0e:	f043 0301 	orr.w	r3, r3, #1
 8004b12:	6713      	str	r3, [r2, #112]	; 0x70
 8004b14:	e00b      	b.n	8004b2e <HAL_RCC_OscConfig+0x32a>
 8004b16:	4b71      	ldr	r3, [pc, #452]	; (8004cdc <HAL_RCC_OscConfig+0x4d8>)
 8004b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1a:	4a70      	ldr	r2, [pc, #448]	; (8004cdc <HAL_RCC_OscConfig+0x4d8>)
 8004b1c:	f023 0301 	bic.w	r3, r3, #1
 8004b20:	6713      	str	r3, [r2, #112]	; 0x70
 8004b22:	4b6e      	ldr	r3, [pc, #440]	; (8004cdc <HAL_RCC_OscConfig+0x4d8>)
 8004b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b26:	4a6d      	ldr	r2, [pc, #436]	; (8004cdc <HAL_RCC_OscConfig+0x4d8>)
 8004b28:	f023 0304 	bic.w	r3, r3, #4
 8004b2c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d015      	beq.n	8004b62 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b36:	f7fd fba1 	bl	800227c <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b3c:	e00a      	b.n	8004b54 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b3e:	f7fd fb9d 	bl	800227c <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d901      	bls.n	8004b54 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004b50:	2303      	movs	r3, #3
 8004b52:	e0bc      	b.n	8004cce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b54:	4b61      	ldr	r3, [pc, #388]	; (8004cdc <HAL_RCC_OscConfig+0x4d8>)
 8004b56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d0ee      	beq.n	8004b3e <HAL_RCC_OscConfig+0x33a>
 8004b60:	e014      	b.n	8004b8c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b62:	f7fd fb8b 	bl	800227c <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b68:	e00a      	b.n	8004b80 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b6a:	f7fd fb87 	bl	800227c <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d901      	bls.n	8004b80 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004b7c:	2303      	movs	r3, #3
 8004b7e:	e0a6      	b.n	8004cce <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b80:	4b56      	ldr	r3, [pc, #344]	; (8004cdc <HAL_RCC_OscConfig+0x4d8>)
 8004b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b84:	f003 0302 	and.w	r3, r3, #2
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1ee      	bne.n	8004b6a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b8c:	7dfb      	ldrb	r3, [r7, #23]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d105      	bne.n	8004b9e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b92:	4b52      	ldr	r3, [pc, #328]	; (8004cdc <HAL_RCC_OscConfig+0x4d8>)
 8004b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b96:	4a51      	ldr	r2, [pc, #324]	; (8004cdc <HAL_RCC_OscConfig+0x4d8>)
 8004b98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b9c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f000 8092 	beq.w	8004ccc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ba8:	4b4c      	ldr	r3, [pc, #304]	; (8004cdc <HAL_RCC_OscConfig+0x4d8>)
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	f003 030c 	and.w	r3, r3, #12
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d05c      	beq.n	8004c6e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	2b02      	cmp	r3, #2
 8004bba:	d141      	bne.n	8004c40 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bbc:	4b48      	ldr	r3, [pc, #288]	; (8004ce0 <HAL_RCC_OscConfig+0x4dc>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc2:	f7fd fb5b 	bl	800227c <HAL_GetTick>
 8004bc6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bc8:	e008      	b.n	8004bdc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bca:	f7fd fb57 	bl	800227c <HAL_GetTick>
 8004bce:	4602      	mov	r2, r0
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	1ad3      	subs	r3, r2, r3
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d901      	bls.n	8004bdc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e078      	b.n	8004cce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bdc:	4b3f      	ldr	r3, [pc, #252]	; (8004cdc <HAL_RCC_OscConfig+0x4d8>)
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1f0      	bne.n	8004bca <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf6:	019b      	lsls	r3, r3, #6
 8004bf8:	431a      	orrs	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bfe:	085b      	lsrs	r3, r3, #1
 8004c00:	3b01      	subs	r3, #1
 8004c02:	041b      	lsls	r3, r3, #16
 8004c04:	431a      	orrs	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0a:	061b      	lsls	r3, r3, #24
 8004c0c:	4933      	ldr	r1, [pc, #204]	; (8004cdc <HAL_RCC_OscConfig+0x4d8>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c12:	4b33      	ldr	r3, [pc, #204]	; (8004ce0 <HAL_RCC_OscConfig+0x4dc>)
 8004c14:	2201      	movs	r2, #1
 8004c16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c18:	f7fd fb30 	bl	800227c <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c20:	f7fd fb2c 	bl	800227c <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e04d      	b.n	8004cce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c32:	4b2a      	ldr	r3, [pc, #168]	; (8004cdc <HAL_RCC_OscConfig+0x4d8>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCC_OscConfig+0x41c>
 8004c3e:	e045      	b.n	8004ccc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c40:	4b27      	ldr	r3, [pc, #156]	; (8004ce0 <HAL_RCC_OscConfig+0x4dc>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c46:	f7fd fb19 	bl	800227c <HAL_GetTick>
 8004c4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c4c:	e008      	b.n	8004c60 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c4e:	f7fd fb15 	bl	800227c <HAL_GetTick>
 8004c52:	4602      	mov	r2, r0
 8004c54:	693b      	ldr	r3, [r7, #16]
 8004c56:	1ad3      	subs	r3, r2, r3
 8004c58:	2b02      	cmp	r3, #2
 8004c5a:	d901      	bls.n	8004c60 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e036      	b.n	8004cce <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c60:	4b1e      	ldr	r3, [pc, #120]	; (8004cdc <HAL_RCC_OscConfig+0x4d8>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1f0      	bne.n	8004c4e <HAL_RCC_OscConfig+0x44a>
 8004c6c:	e02e      	b.n	8004ccc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	2b01      	cmp	r3, #1
 8004c74:	d101      	bne.n	8004c7a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004c76:	2301      	movs	r3, #1
 8004c78:	e029      	b.n	8004cce <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c7a:	4b18      	ldr	r3, [pc, #96]	; (8004cdc <HAL_RCC_OscConfig+0x4d8>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	69db      	ldr	r3, [r3, #28]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d11c      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d115      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d10d      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d106      	bne.n	8004cc8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d001      	beq.n	8004ccc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	e000      	b.n	8004cce <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	3718      	adds	r7, #24
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}
 8004cd6:	bf00      	nop
 8004cd8:	40007000 	.word	0x40007000
 8004cdc:	40023800 	.word	0x40023800
 8004ce0:	42470060 	.word	0x42470060

08004ce4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e0cc      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004cf8:	4b68      	ldr	r3, [pc, #416]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 030f 	and.w	r3, r3, #15
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d90c      	bls.n	8004d20 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d06:	4b65      	ldr	r3, [pc, #404]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d0e:	4b63      	ldr	r3, [pc, #396]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 030f 	and.w	r3, r3, #15
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d001      	beq.n	8004d20 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e0b8      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 0302 	and.w	r3, r3, #2
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d020      	beq.n	8004d6e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0304 	and.w	r3, r3, #4
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d005      	beq.n	8004d44 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d38:	4b59      	ldr	r3, [pc, #356]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	4a58      	ldr	r2, [pc, #352]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d3e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d42:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0308 	and.w	r3, r3, #8
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d005      	beq.n	8004d5c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d50:	4b53      	ldr	r3, [pc, #332]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	4a52      	ldr	r2, [pc, #328]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d56:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d5a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d5c:	4b50      	ldr	r3, [pc, #320]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5e:	689b      	ldr	r3, [r3, #8]
 8004d60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	494d      	ldr	r1, [pc, #308]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f003 0301 	and.w	r3, r3, #1
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d044      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d107      	bne.n	8004d92 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d82:	4b47      	ldr	r3, [pc, #284]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d119      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e07f      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d003      	beq.n	8004da2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d9e:	2b03      	cmp	r3, #3
 8004da0:	d107      	bne.n	8004db2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004da2:	4b3f      	ldr	r3, [pc, #252]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d109      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e06f      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004db2:	4b3b      	ldr	r3, [pc, #236]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e067      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dc2:	4b37      	ldr	r3, [pc, #220]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f023 0203 	bic.w	r2, r3, #3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	4934      	ldr	r1, [pc, #208]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dd4:	f7fd fa52 	bl	800227c <HAL_GetTick>
 8004dd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dda:	e00a      	b.n	8004df2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ddc:	f7fd fa4e 	bl	800227c <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e04f      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df2:	4b2b      	ldr	r3, [pc, #172]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 020c 	and.w	r2, r3, #12
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d1eb      	bne.n	8004ddc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e04:	4b25      	ldr	r3, [pc, #148]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 030f 	and.w	r3, r3, #15
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d20c      	bcs.n	8004e2c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e12:	4b22      	ldr	r3, [pc, #136]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004e14:	683a      	ldr	r2, [r7, #0]
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e1a:	4b20      	ldr	r3, [pc, #128]	; (8004e9c <HAL_RCC_ClockConfig+0x1b8>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 030f 	and.w	r3, r3, #15
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d001      	beq.n	8004e2c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e032      	b.n	8004e92 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d008      	beq.n	8004e4a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e38:	4b19      	ldr	r3, [pc, #100]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	4916      	ldr	r1, [pc, #88]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0308 	and.w	r3, r3, #8
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d009      	beq.n	8004e6a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e56:	4b12      	ldr	r3, [pc, #72]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
 8004e62:	00db      	lsls	r3, r3, #3
 8004e64:	490e      	ldr	r1, [pc, #56]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e66:	4313      	orrs	r3, r2
 8004e68:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e6a:	f000 f821 	bl	8004eb0 <HAL_RCC_GetSysClockFreq>
 8004e6e:	4601      	mov	r1, r0
 8004e70:	4b0b      	ldr	r3, [pc, #44]	; (8004ea0 <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	091b      	lsrs	r3, r3, #4
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	4a0a      	ldr	r2, [pc, #40]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8004e7c:	5cd3      	ldrb	r3, [r2, r3]
 8004e7e:	fa21 f303 	lsr.w	r3, r1, r3
 8004e82:	4a09      	ldr	r2, [pc, #36]	; (8004ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e86:	4b09      	ldr	r3, [pc, #36]	; (8004eac <HAL_RCC_ClockConfig+0x1c8>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fd f9b2 	bl	80021f4 <HAL_InitTick>

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3710      	adds	r7, #16
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	40023c00 	.word	0x40023c00
 8004ea0:	40023800 	.word	0x40023800
 8004ea4:	08009a9c 	.word	0x08009a9c
 8004ea8:	200000d4 	.word	0x200000d4
 8004eac:	200000d8 	.word	0x200000d8

08004eb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	607b      	str	r3, [r7, #4]
 8004eba:	2300      	movs	r3, #0
 8004ebc:	60fb      	str	r3, [r7, #12]
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ec6:	4b63      	ldr	r3, [pc, #396]	; (8005054 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 030c 	and.w	r3, r3, #12
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d007      	beq.n	8004ee2 <HAL_RCC_GetSysClockFreq+0x32>
 8004ed2:	2b08      	cmp	r3, #8
 8004ed4:	d008      	beq.n	8004ee8 <HAL_RCC_GetSysClockFreq+0x38>
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f040 80b4 	bne.w	8005044 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004edc:	4b5e      	ldr	r3, [pc, #376]	; (8005058 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004ede:	60bb      	str	r3, [r7, #8]
       break;
 8004ee0:	e0b3      	b.n	800504a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ee2:	4b5e      	ldr	r3, [pc, #376]	; (800505c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004ee4:	60bb      	str	r3, [r7, #8]
      break;
 8004ee6:	e0b0      	b.n	800504a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ee8:	4b5a      	ldr	r3, [pc, #360]	; (8005054 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ef0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ef2:	4b58      	ldr	r3, [pc, #352]	; (8005054 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d04a      	beq.n	8004f94 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004efe:	4b55      	ldr	r3, [pc, #340]	; (8005054 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f00:	685b      	ldr	r3, [r3, #4]
 8004f02:	099b      	lsrs	r3, r3, #6
 8004f04:	f04f 0400 	mov.w	r4, #0
 8004f08:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	ea03 0501 	and.w	r5, r3, r1
 8004f14:	ea04 0602 	and.w	r6, r4, r2
 8004f18:	4629      	mov	r1, r5
 8004f1a:	4632      	mov	r2, r6
 8004f1c:	f04f 0300 	mov.w	r3, #0
 8004f20:	f04f 0400 	mov.w	r4, #0
 8004f24:	0154      	lsls	r4, r2, #5
 8004f26:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f2a:	014b      	lsls	r3, r1, #5
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4622      	mov	r2, r4
 8004f30:	1b49      	subs	r1, r1, r5
 8004f32:	eb62 0206 	sbc.w	r2, r2, r6
 8004f36:	f04f 0300 	mov.w	r3, #0
 8004f3a:	f04f 0400 	mov.w	r4, #0
 8004f3e:	0194      	lsls	r4, r2, #6
 8004f40:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004f44:	018b      	lsls	r3, r1, #6
 8004f46:	1a5b      	subs	r3, r3, r1
 8004f48:	eb64 0402 	sbc.w	r4, r4, r2
 8004f4c:	f04f 0100 	mov.w	r1, #0
 8004f50:	f04f 0200 	mov.w	r2, #0
 8004f54:	00e2      	lsls	r2, r4, #3
 8004f56:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004f5a:	00d9      	lsls	r1, r3, #3
 8004f5c:	460b      	mov	r3, r1
 8004f5e:	4614      	mov	r4, r2
 8004f60:	195b      	adds	r3, r3, r5
 8004f62:	eb44 0406 	adc.w	r4, r4, r6
 8004f66:	f04f 0100 	mov.w	r1, #0
 8004f6a:	f04f 0200 	mov.w	r2, #0
 8004f6e:	0262      	lsls	r2, r4, #9
 8004f70:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004f74:	0259      	lsls	r1, r3, #9
 8004f76:	460b      	mov	r3, r1
 8004f78:	4614      	mov	r4, r2
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	4621      	mov	r1, r4
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f04f 0400 	mov.w	r4, #0
 8004f84:	461a      	mov	r2, r3
 8004f86:	4623      	mov	r3, r4
 8004f88:	f7fb f930 	bl	80001ec <__aeabi_uldivmod>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	460c      	mov	r4, r1
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	e049      	b.n	8005028 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f94:	4b2f      	ldr	r3, [pc, #188]	; (8005054 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	099b      	lsrs	r3, r3, #6
 8004f9a:	f04f 0400 	mov.w	r4, #0
 8004f9e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004fa2:	f04f 0200 	mov.w	r2, #0
 8004fa6:	ea03 0501 	and.w	r5, r3, r1
 8004faa:	ea04 0602 	and.w	r6, r4, r2
 8004fae:	4629      	mov	r1, r5
 8004fb0:	4632      	mov	r2, r6
 8004fb2:	f04f 0300 	mov.w	r3, #0
 8004fb6:	f04f 0400 	mov.w	r4, #0
 8004fba:	0154      	lsls	r4, r2, #5
 8004fbc:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004fc0:	014b      	lsls	r3, r1, #5
 8004fc2:	4619      	mov	r1, r3
 8004fc4:	4622      	mov	r2, r4
 8004fc6:	1b49      	subs	r1, r1, r5
 8004fc8:	eb62 0206 	sbc.w	r2, r2, r6
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	f04f 0400 	mov.w	r4, #0
 8004fd4:	0194      	lsls	r4, r2, #6
 8004fd6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004fda:	018b      	lsls	r3, r1, #6
 8004fdc:	1a5b      	subs	r3, r3, r1
 8004fde:	eb64 0402 	sbc.w	r4, r4, r2
 8004fe2:	f04f 0100 	mov.w	r1, #0
 8004fe6:	f04f 0200 	mov.w	r2, #0
 8004fea:	00e2      	lsls	r2, r4, #3
 8004fec:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004ff0:	00d9      	lsls	r1, r3, #3
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4614      	mov	r4, r2
 8004ff6:	195b      	adds	r3, r3, r5
 8004ff8:	eb44 0406 	adc.w	r4, r4, r6
 8004ffc:	f04f 0100 	mov.w	r1, #0
 8005000:	f04f 0200 	mov.w	r2, #0
 8005004:	02a2      	lsls	r2, r4, #10
 8005006:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800500a:	0299      	lsls	r1, r3, #10
 800500c:	460b      	mov	r3, r1
 800500e:	4614      	mov	r4, r2
 8005010:	4618      	mov	r0, r3
 8005012:	4621      	mov	r1, r4
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f04f 0400 	mov.w	r4, #0
 800501a:	461a      	mov	r2, r3
 800501c:	4623      	mov	r3, r4
 800501e:	f7fb f8e5 	bl	80001ec <__aeabi_uldivmod>
 8005022:	4603      	mov	r3, r0
 8005024:	460c      	mov	r4, r1
 8005026:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005028:	4b0a      	ldr	r3, [pc, #40]	; (8005054 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	0c1b      	lsrs	r3, r3, #16
 800502e:	f003 0303 	and.w	r3, r3, #3
 8005032:	3301      	adds	r3, #1
 8005034:	005b      	lsls	r3, r3, #1
 8005036:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005040:	60bb      	str	r3, [r7, #8]
      break;
 8005042:	e002      	b.n	800504a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005044:	4b04      	ldr	r3, [pc, #16]	; (8005058 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005046:	60bb      	str	r3, [r7, #8]
      break;
 8005048:	bf00      	nop
    }
  }
  return sysclockfreq;
 800504a:	68bb      	ldr	r3, [r7, #8]
}
 800504c:	4618      	mov	r0, r3
 800504e:	3714      	adds	r7, #20
 8005050:	46bd      	mov	sp, r7
 8005052:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005054:	40023800 	.word	0x40023800
 8005058:	00f42400 	.word	0x00f42400
 800505c:	007a1200 	.word	0x007a1200

08005060 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005060:	b480      	push	{r7}
 8005062:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005064:	4b03      	ldr	r3, [pc, #12]	; (8005074 <HAL_RCC_GetHCLKFreq+0x14>)
 8005066:	681b      	ldr	r3, [r3, #0]
}
 8005068:	4618      	mov	r0, r3
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	200000d4 	.word	0x200000d4

08005078 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800507c:	f7ff fff0 	bl	8005060 <HAL_RCC_GetHCLKFreq>
 8005080:	4601      	mov	r1, r0
 8005082:	4b05      	ldr	r3, [pc, #20]	; (8005098 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	0a9b      	lsrs	r3, r3, #10
 8005088:	f003 0307 	and.w	r3, r3, #7
 800508c:	4a03      	ldr	r2, [pc, #12]	; (800509c <HAL_RCC_GetPCLK1Freq+0x24>)
 800508e:	5cd3      	ldrb	r3, [r2, r3]
 8005090:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005094:	4618      	mov	r0, r3
 8005096:	bd80      	pop	{r7, pc}
 8005098:	40023800 	.word	0x40023800
 800509c:	08009aac 	.word	0x08009aac

080050a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d101      	bne.n	80050b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	e01d      	b.n	80050ee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d106      	bne.n	80050cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f7fd f822 	bl	8002110 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2202      	movs	r2, #2
 80050d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3304      	adds	r3, #4
 80050dc:	4619      	mov	r1, r3
 80050de:	4610      	mov	r0, r2
 80050e0:	f000 fa14 	bl	800550c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b085      	sub	sp, #20
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68da      	ldr	r2, [r3, #12]
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f042 0201 	orr.w	r2, r2, #1
 800510c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	f003 0307 	and.w	r3, r3, #7
 8005118:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2b06      	cmp	r3, #6
 800511e:	d007      	beq.n	8005130 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f042 0201 	orr.w	r2, r2, #1
 800512e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800513e:	b580      	push	{r7, lr}
 8005140:	b082      	sub	sp, #8
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	691b      	ldr	r3, [r3, #16]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b02      	cmp	r3, #2
 8005152:	d122      	bne.n	800519a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68db      	ldr	r3, [r3, #12]
 800515a:	f003 0302 	and.w	r3, r3, #2
 800515e:	2b02      	cmp	r3, #2
 8005160:	d11b      	bne.n	800519a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f06f 0202 	mvn.w	r2, #2
 800516a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	f003 0303 	and.w	r3, r3, #3
 800517c:	2b00      	cmp	r3, #0
 800517e:	d003      	beq.n	8005188 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 f9a5 	bl	80054d0 <HAL_TIM_IC_CaptureCallback>
 8005186:	e005      	b.n	8005194 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f997 	bl	80054bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f000 f9a8 	bl	80054e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	f003 0304 	and.w	r3, r3, #4
 80051a4:	2b04      	cmp	r3, #4
 80051a6:	d122      	bne.n	80051ee <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f003 0304 	and.w	r3, r3, #4
 80051b2:	2b04      	cmp	r3, #4
 80051b4:	d11b      	bne.n	80051ee <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f06f 0204 	mvn.w	r2, #4
 80051be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d003      	beq.n	80051dc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f97b 	bl	80054d0 <HAL_TIM_IC_CaptureCallback>
 80051da:	e005      	b.n	80051e8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f000 f96d 	bl	80054bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f97e 	bl	80054e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	691b      	ldr	r3, [r3, #16]
 80051f4:	f003 0308 	and.w	r3, r3, #8
 80051f8:	2b08      	cmp	r3, #8
 80051fa:	d122      	bne.n	8005242 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	f003 0308 	and.w	r3, r3, #8
 8005206:	2b08      	cmp	r3, #8
 8005208:	d11b      	bne.n	8005242 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f06f 0208 	mvn.w	r2, #8
 8005212:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2204      	movs	r2, #4
 8005218:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69db      	ldr	r3, [r3, #28]
 8005220:	f003 0303 	and.w	r3, r3, #3
 8005224:	2b00      	cmp	r3, #0
 8005226:	d003      	beq.n	8005230 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f951 	bl	80054d0 <HAL_TIM_IC_CaptureCallback>
 800522e:	e005      	b.n	800523c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 f943 	bl	80054bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 f954 	bl	80054e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	f003 0310 	and.w	r3, r3, #16
 800524c:	2b10      	cmp	r3, #16
 800524e:	d122      	bne.n	8005296 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f003 0310 	and.w	r3, r3, #16
 800525a:	2b10      	cmp	r3, #16
 800525c:	d11b      	bne.n	8005296 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f06f 0210 	mvn.w	r2, #16
 8005266:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2208      	movs	r2, #8
 800526c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	69db      	ldr	r3, [r3, #28]
 8005274:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005278:	2b00      	cmp	r3, #0
 800527a:	d003      	beq.n	8005284 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f927 	bl	80054d0 <HAL_TIM_IC_CaptureCallback>
 8005282:	e005      	b.n	8005290 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 f919 	bl	80054bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f92a 	bl	80054e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	f003 0301 	and.w	r3, r3, #1
 80052a0:	2b01      	cmp	r3, #1
 80052a2:	d10e      	bne.n	80052c2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d107      	bne.n	80052c2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f06f 0201 	mvn.w	r2, #1
 80052ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052bc:	6878      	ldr	r0, [r7, #4]
 80052be:	f7fc fb83 	bl	80019c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052cc:	2b80      	cmp	r3, #128	; 0x80
 80052ce:	d10e      	bne.n	80052ee <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052da:	2b80      	cmp	r3, #128	; 0x80
 80052dc:	d107      	bne.n	80052ee <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f000 facf 	bl	800588c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052f8:	2b40      	cmp	r3, #64	; 0x40
 80052fa:	d10e      	bne.n	800531a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68db      	ldr	r3, [r3, #12]
 8005302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005306:	2b40      	cmp	r3, #64	; 0x40
 8005308:	d107      	bne.n	800531a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005312:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f8ef 	bl	80054f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	f003 0320 	and.w	r3, r3, #32
 8005324:	2b20      	cmp	r3, #32
 8005326:	d10e      	bne.n	8005346 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	f003 0320 	and.w	r3, r3, #32
 8005332:	2b20      	cmp	r3, #32
 8005334:	d107      	bne.n	8005346 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f06f 0220 	mvn.w	r2, #32
 800533e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 fa99 	bl	8005878 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005346:	bf00      	nop
 8005348:	3708      	adds	r7, #8
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}

0800534e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800534e:	b580      	push	{r7, lr}
 8005350:	b084      	sub	sp, #16
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
 8005356:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800535e:	2b01      	cmp	r3, #1
 8005360:	d101      	bne.n	8005366 <HAL_TIM_ConfigClockSource+0x18>
 8005362:	2302      	movs	r3, #2
 8005364:	e0a6      	b.n	80054b4 <HAL_TIM_ConfigClockSource+0x166>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2202      	movs	r2, #2
 8005372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005384:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800538c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2b40      	cmp	r3, #64	; 0x40
 800539c:	d067      	beq.n	800546e <HAL_TIM_ConfigClockSource+0x120>
 800539e:	2b40      	cmp	r3, #64	; 0x40
 80053a0:	d80b      	bhi.n	80053ba <HAL_TIM_ConfigClockSource+0x6c>
 80053a2:	2b10      	cmp	r3, #16
 80053a4:	d073      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x140>
 80053a6:	2b10      	cmp	r3, #16
 80053a8:	d802      	bhi.n	80053b0 <HAL_TIM_ConfigClockSource+0x62>
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d06f      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80053ae:	e078      	b.n	80054a2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053b0:	2b20      	cmp	r3, #32
 80053b2:	d06c      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x140>
 80053b4:	2b30      	cmp	r3, #48	; 0x30
 80053b6:	d06a      	beq.n	800548e <HAL_TIM_ConfigClockSource+0x140>
      break;
 80053b8:	e073      	b.n	80054a2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053ba:	2b70      	cmp	r3, #112	; 0x70
 80053bc:	d00d      	beq.n	80053da <HAL_TIM_ConfigClockSource+0x8c>
 80053be:	2b70      	cmp	r3, #112	; 0x70
 80053c0:	d804      	bhi.n	80053cc <HAL_TIM_ConfigClockSource+0x7e>
 80053c2:	2b50      	cmp	r3, #80	; 0x50
 80053c4:	d033      	beq.n	800542e <HAL_TIM_ConfigClockSource+0xe0>
 80053c6:	2b60      	cmp	r3, #96	; 0x60
 80053c8:	d041      	beq.n	800544e <HAL_TIM_ConfigClockSource+0x100>
      break;
 80053ca:	e06a      	b.n	80054a2 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80053cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053d0:	d066      	beq.n	80054a0 <HAL_TIM_ConfigClockSource+0x152>
 80053d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053d6:	d017      	beq.n	8005408 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80053d8:	e063      	b.n	80054a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6818      	ldr	r0, [r3, #0]
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	6899      	ldr	r1, [r3, #8]
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	685a      	ldr	r2, [r3, #4]
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	f000 f9a9 	bl	8005740 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80053fc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	609a      	str	r2, [r3, #8]
      break;
 8005406:	e04c      	b.n	80054a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6818      	ldr	r0, [r3, #0]
 800540c:	683b      	ldr	r3, [r7, #0]
 800540e:	6899      	ldr	r1, [r3, #8]
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	685a      	ldr	r2, [r3, #4]
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	68db      	ldr	r3, [r3, #12]
 8005418:	f000 f992 	bl	8005740 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800542a:	609a      	str	r2, [r3, #8]
      break;
 800542c:	e039      	b.n	80054a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6818      	ldr	r0, [r3, #0]
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	6859      	ldr	r1, [r3, #4]
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	461a      	mov	r2, r3
 800543c:	f000 f906 	bl	800564c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2150      	movs	r1, #80	; 0x50
 8005446:	4618      	mov	r0, r3
 8005448:	f000 f95f 	bl	800570a <TIM_ITRx_SetConfig>
      break;
 800544c:	e029      	b.n	80054a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6818      	ldr	r0, [r3, #0]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	6859      	ldr	r1, [r3, #4]
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	461a      	mov	r2, r3
 800545c:	f000 f925 	bl	80056aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2160      	movs	r1, #96	; 0x60
 8005466:	4618      	mov	r0, r3
 8005468:	f000 f94f 	bl	800570a <TIM_ITRx_SetConfig>
      break;
 800546c:	e019      	b.n	80054a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6818      	ldr	r0, [r3, #0]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	6859      	ldr	r1, [r3, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	461a      	mov	r2, r3
 800547c:	f000 f8e6 	bl	800564c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2140      	movs	r1, #64	; 0x40
 8005486:	4618      	mov	r0, r3
 8005488:	f000 f93f 	bl	800570a <TIM_ITRx_SetConfig>
      break;
 800548c:	e009      	b.n	80054a2 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4619      	mov	r1, r3
 8005498:	4610      	mov	r0, r2
 800549a:	f000 f936 	bl	800570a <TIM_ITRx_SetConfig>
      break;
 800549e:	e000      	b.n	80054a2 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80054a0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2201      	movs	r2, #1
 80054a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	3710      	adds	r7, #16
 80054b8:	46bd      	mov	sp, r7
 80054ba:	bd80      	pop	{r7, pc}

080054bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054bc:	b480      	push	{r7}
 80054be:	b083      	sub	sp, #12
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054c4:	bf00      	nop
 80054c6:	370c      	adds	r7, #12
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr

080054d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800550c:	b480      	push	{r7}
 800550e:	b085      	sub	sp, #20
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
 8005514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a40      	ldr	r2, [pc, #256]	; (8005620 <TIM_Base_SetConfig+0x114>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d013      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800552a:	d00f      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a3d      	ldr	r2, [pc, #244]	; (8005624 <TIM_Base_SetConfig+0x118>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d00b      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a3c      	ldr	r2, [pc, #240]	; (8005628 <TIM_Base_SetConfig+0x11c>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d007      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a3b      	ldr	r2, [pc, #236]	; (800562c <TIM_Base_SetConfig+0x120>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d003      	beq.n	800554c <TIM_Base_SetConfig+0x40>
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	4a3a      	ldr	r2, [pc, #232]	; (8005630 <TIM_Base_SetConfig+0x124>)
 8005548:	4293      	cmp	r3, r2
 800554a:	d108      	bne.n	800555e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	4313      	orrs	r3, r2
 800555c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a2f      	ldr	r2, [pc, #188]	; (8005620 <TIM_Base_SetConfig+0x114>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d02b      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800556c:	d027      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a2c      	ldr	r2, [pc, #176]	; (8005624 <TIM_Base_SetConfig+0x118>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d023      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a2b      	ldr	r2, [pc, #172]	; (8005628 <TIM_Base_SetConfig+0x11c>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d01f      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	4a2a      	ldr	r2, [pc, #168]	; (800562c <TIM_Base_SetConfig+0x120>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d01b      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a29      	ldr	r2, [pc, #164]	; (8005630 <TIM_Base_SetConfig+0x124>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d017      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a28      	ldr	r2, [pc, #160]	; (8005634 <TIM_Base_SetConfig+0x128>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d013      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a27      	ldr	r2, [pc, #156]	; (8005638 <TIM_Base_SetConfig+0x12c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d00f      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	4a26      	ldr	r2, [pc, #152]	; (800563c <TIM_Base_SetConfig+0x130>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	d00b      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4a25      	ldr	r2, [pc, #148]	; (8005640 <TIM_Base_SetConfig+0x134>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d007      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a24      	ldr	r2, [pc, #144]	; (8005644 <TIM_Base_SetConfig+0x138>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d003      	beq.n	80055be <TIM_Base_SetConfig+0xb2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a23      	ldr	r2, [pc, #140]	; (8005648 <TIM_Base_SetConfig+0x13c>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d108      	bne.n	80055d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	68fa      	ldr	r2, [r7, #12]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	695b      	ldr	r3, [r3, #20]
 80055da:	4313      	orrs	r3, r2
 80055dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	689a      	ldr	r2, [r3, #8]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	4a0a      	ldr	r2, [pc, #40]	; (8005620 <TIM_Base_SetConfig+0x114>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d003      	beq.n	8005604 <TIM_Base_SetConfig+0xf8>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	4a0c      	ldr	r2, [pc, #48]	; (8005630 <TIM_Base_SetConfig+0x124>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d103      	bne.n	800560c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	691a      	ldr	r2, [r3, #16]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	615a      	str	r2, [r3, #20]
}
 8005612:	bf00      	nop
 8005614:	3714      	adds	r7, #20
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr
 800561e:	bf00      	nop
 8005620:	40010000 	.word	0x40010000
 8005624:	40000400 	.word	0x40000400
 8005628:	40000800 	.word	0x40000800
 800562c:	40000c00 	.word	0x40000c00
 8005630:	40010400 	.word	0x40010400
 8005634:	40014000 	.word	0x40014000
 8005638:	40014400 	.word	0x40014400
 800563c:	40014800 	.word	0x40014800
 8005640:	40001800 	.word	0x40001800
 8005644:	40001c00 	.word	0x40001c00
 8005648:	40002000 	.word	0x40002000

0800564c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800564c:	b480      	push	{r7}
 800564e:	b087      	sub	sp, #28
 8005650:	af00      	add	r7, sp, #0
 8005652:	60f8      	str	r0, [r7, #12]
 8005654:	60b9      	str	r1, [r7, #8]
 8005656:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a1b      	ldr	r3, [r3, #32]
 800565c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6a1b      	ldr	r3, [r3, #32]
 8005662:	f023 0201 	bic.w	r2, r3, #1
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4313      	orrs	r3, r2
 8005680:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f023 030a 	bic.w	r3, r3, #10
 8005688:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	68bb      	ldr	r3, [r7, #8]
 800568e:	4313      	orrs	r3, r2
 8005690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	697a      	ldr	r2, [r7, #20]
 800569c:	621a      	str	r2, [r3, #32]
}
 800569e:	bf00      	nop
 80056a0:	371c      	adds	r7, #28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a8:	4770      	bx	lr

080056aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056aa:	b480      	push	{r7}
 80056ac:	b087      	sub	sp, #28
 80056ae:	af00      	add	r7, sp, #0
 80056b0:	60f8      	str	r0, [r7, #12]
 80056b2:	60b9      	str	r1, [r7, #8]
 80056b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	6a1b      	ldr	r3, [r3, #32]
 80056ba:	f023 0210 	bic.w	r2, r3, #16
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a1b      	ldr	r3, [r3, #32]
 80056cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	031b      	lsls	r3, r3, #12
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056e6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	693a      	ldr	r2, [r7, #16]
 80056ee:	4313      	orrs	r3, r2
 80056f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	697a      	ldr	r2, [r7, #20]
 80056f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	621a      	str	r2, [r3, #32]
}
 80056fe:	bf00      	nop
 8005700:	371c      	adds	r7, #28
 8005702:	46bd      	mov	sp, r7
 8005704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005708:	4770      	bx	lr

0800570a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800570a:	b480      	push	{r7}
 800570c:	b085      	sub	sp, #20
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
 8005712:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005720:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	4313      	orrs	r3, r2
 8005728:	f043 0307 	orr.w	r3, r3, #7
 800572c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	609a      	str	r2, [r3, #8]
}
 8005734:	bf00      	nop
 8005736:	3714      	adds	r7, #20
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
 800574c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800575a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	021a      	lsls	r2, r3, #8
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	431a      	orrs	r2, r3
 8005764:	68bb      	ldr	r3, [r7, #8]
 8005766:	4313      	orrs	r3, r2
 8005768:	697a      	ldr	r2, [r7, #20]
 800576a:	4313      	orrs	r3, r2
 800576c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	609a      	str	r2, [r3, #8]
}
 8005774:	bf00      	nop
 8005776:	371c      	adds	r7, #28
 8005778:	46bd      	mov	sp, r7
 800577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577e:	4770      	bx	lr

08005780 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005780:	b480      	push	{r7}
 8005782:	b085      	sub	sp, #20
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005790:	2b01      	cmp	r3, #1
 8005792:	d101      	bne.n	8005798 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005794:	2302      	movs	r3, #2
 8005796:	e05a      	b.n	800584e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2202      	movs	r2, #2
 80057a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	68fa      	ldr	r2, [r7, #12]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68fa      	ldr	r2, [r7, #12]
 80057d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a21      	ldr	r2, [pc, #132]	; (800585c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d022      	beq.n	8005822 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057e4:	d01d      	beq.n	8005822 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a1d      	ldr	r2, [pc, #116]	; (8005860 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d018      	beq.n	8005822 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a1b      	ldr	r2, [pc, #108]	; (8005864 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d013      	beq.n	8005822 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a1a      	ldr	r2, [pc, #104]	; (8005868 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d00e      	beq.n	8005822 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a18      	ldr	r2, [pc, #96]	; (800586c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d009      	beq.n	8005822 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a17      	ldr	r2, [pc, #92]	; (8005870 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d004      	beq.n	8005822 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a15      	ldr	r2, [pc, #84]	; (8005874 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d10c      	bne.n	800583c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005828:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	68ba      	ldr	r2, [r7, #8]
 8005830:	4313      	orrs	r3, r2
 8005832:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	68ba      	ldr	r2, [r7, #8]
 800583a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800584c:	2300      	movs	r3, #0
}
 800584e:	4618      	mov	r0, r3
 8005850:	3714      	adds	r7, #20
 8005852:	46bd      	mov	sp, r7
 8005854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005858:	4770      	bx	lr
 800585a:	bf00      	nop
 800585c:	40010000 	.word	0x40010000
 8005860:	40000400 	.word	0x40000400
 8005864:	40000800 	.word	0x40000800
 8005868:	40000c00 	.word	0x40000c00
 800586c:	40010400 	.word	0x40010400
 8005870:	40014000 	.word	0x40014000
 8005874:	40001800 	.word	0x40001800

08005878 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058a0:	b084      	sub	sp, #16
 80058a2:	b580      	push	{r7, lr}
 80058a4:	b084      	sub	sp, #16
 80058a6:	af00      	add	r7, sp, #0
 80058a8:	6078      	str	r0, [r7, #4]
 80058aa:	f107 001c 	add.w	r0, r7, #28
 80058ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80058b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d122      	bne.n	80058fe <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058bc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	68db      	ldr	r3, [r3, #12]
 80058c8:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80058cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80058e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058e2:	2b01      	cmp	r3, #1
 80058e4:	d105      	bne.n	80058f2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	68db      	ldr	r3, [r3, #12]
 80058ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f001 fab4 	bl	8006e60 <USB_CoreReset>
 80058f8:	4603      	mov	r3, r0
 80058fa:	73fb      	strb	r3, [r7, #15]
 80058fc:	e01a      	b.n	8005934 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f001 faa8 	bl	8006e60 <USB_CoreReset>
 8005910:	4603      	mov	r3, r0
 8005912:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005914:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	639a      	str	r2, [r3, #56]	; 0x38
 8005926:	e005      	b.n	8005934 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800592c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005936:	2b01      	cmp	r3, #1
 8005938:	d10b      	bne.n	8005952 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	689b      	ldr	r3, [r3, #8]
 800593e:	f043 0206 	orr.w	r2, r3, #6
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f043 0220 	orr.w	r2, r3, #32
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005952:	7bfb      	ldrb	r3, [r7, #15]
}
 8005954:	4618      	mov	r0, r3
 8005956:	3710      	adds	r7, #16
 8005958:	46bd      	mov	sp, r7
 800595a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800595e:	b004      	add	sp, #16
 8005960:	4770      	bx	lr
	...

08005964 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005964:	b480      	push	{r7}
 8005966:	b087      	sub	sp, #28
 8005968:	af00      	add	r7, sp, #0
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	4613      	mov	r3, r2
 8005970:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8005972:	79fb      	ldrb	r3, [r7, #7]
 8005974:	2b02      	cmp	r3, #2
 8005976:	d165      	bne.n	8005a44 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	4a41      	ldr	r2, [pc, #260]	; (8005a80 <USB_SetTurnaroundTime+0x11c>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d906      	bls.n	800598e <USB_SetTurnaroundTime+0x2a>
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	4a40      	ldr	r2, [pc, #256]	; (8005a84 <USB_SetTurnaroundTime+0x120>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d802      	bhi.n	800598e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005988:	230f      	movs	r3, #15
 800598a:	617b      	str	r3, [r7, #20]
 800598c:	e062      	b.n	8005a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	4a3c      	ldr	r2, [pc, #240]	; (8005a84 <USB_SetTurnaroundTime+0x120>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d906      	bls.n	80059a4 <USB_SetTurnaroundTime+0x40>
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	4a3b      	ldr	r2, [pc, #236]	; (8005a88 <USB_SetTurnaroundTime+0x124>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d802      	bhi.n	80059a4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800599e:	230e      	movs	r3, #14
 80059a0:	617b      	str	r3, [r7, #20]
 80059a2:	e057      	b.n	8005a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	4a38      	ldr	r2, [pc, #224]	; (8005a88 <USB_SetTurnaroundTime+0x124>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d906      	bls.n	80059ba <USB_SetTurnaroundTime+0x56>
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	4a37      	ldr	r2, [pc, #220]	; (8005a8c <USB_SetTurnaroundTime+0x128>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d802      	bhi.n	80059ba <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80059b4:	230d      	movs	r3, #13
 80059b6:	617b      	str	r3, [r7, #20]
 80059b8:	e04c      	b.n	8005a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80059ba:	68bb      	ldr	r3, [r7, #8]
 80059bc:	4a33      	ldr	r2, [pc, #204]	; (8005a8c <USB_SetTurnaroundTime+0x128>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d906      	bls.n	80059d0 <USB_SetTurnaroundTime+0x6c>
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	4a32      	ldr	r2, [pc, #200]	; (8005a90 <USB_SetTurnaroundTime+0x12c>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d802      	bhi.n	80059d0 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80059ca:	230c      	movs	r3, #12
 80059cc:	617b      	str	r3, [r7, #20]
 80059ce:	e041      	b.n	8005a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	4a2f      	ldr	r2, [pc, #188]	; (8005a90 <USB_SetTurnaroundTime+0x12c>)
 80059d4:	4293      	cmp	r3, r2
 80059d6:	d906      	bls.n	80059e6 <USB_SetTurnaroundTime+0x82>
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	4a2e      	ldr	r2, [pc, #184]	; (8005a94 <USB_SetTurnaroundTime+0x130>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d802      	bhi.n	80059e6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80059e0:	230b      	movs	r3, #11
 80059e2:	617b      	str	r3, [r7, #20]
 80059e4:	e036      	b.n	8005a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	4a2a      	ldr	r2, [pc, #168]	; (8005a94 <USB_SetTurnaroundTime+0x130>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d906      	bls.n	80059fc <USB_SetTurnaroundTime+0x98>
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	4a29      	ldr	r2, [pc, #164]	; (8005a98 <USB_SetTurnaroundTime+0x134>)
 80059f2:	4293      	cmp	r3, r2
 80059f4:	d802      	bhi.n	80059fc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80059f6:	230a      	movs	r3, #10
 80059f8:	617b      	str	r3, [r7, #20]
 80059fa:	e02b      	b.n	8005a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4a26      	ldr	r2, [pc, #152]	; (8005a98 <USB_SetTurnaroundTime+0x134>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d906      	bls.n	8005a12 <USB_SetTurnaroundTime+0xae>
 8005a04:	68bb      	ldr	r3, [r7, #8]
 8005a06:	4a25      	ldr	r2, [pc, #148]	; (8005a9c <USB_SetTurnaroundTime+0x138>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d802      	bhi.n	8005a12 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005a0c:	2309      	movs	r3, #9
 8005a0e:	617b      	str	r3, [r7, #20]
 8005a10:	e020      	b.n	8005a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	4a21      	ldr	r2, [pc, #132]	; (8005a9c <USB_SetTurnaroundTime+0x138>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d906      	bls.n	8005a28 <USB_SetTurnaroundTime+0xc4>
 8005a1a:	68bb      	ldr	r3, [r7, #8]
 8005a1c:	4a20      	ldr	r2, [pc, #128]	; (8005aa0 <USB_SetTurnaroundTime+0x13c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d802      	bhi.n	8005a28 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8005a22:	2308      	movs	r3, #8
 8005a24:	617b      	str	r3, [r7, #20]
 8005a26:	e015      	b.n	8005a54 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	4a1d      	ldr	r2, [pc, #116]	; (8005aa0 <USB_SetTurnaroundTime+0x13c>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d906      	bls.n	8005a3e <USB_SetTurnaroundTime+0xda>
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	4a1c      	ldr	r2, [pc, #112]	; (8005aa4 <USB_SetTurnaroundTime+0x140>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d802      	bhi.n	8005a3e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005a38:	2307      	movs	r3, #7
 8005a3a:	617b      	str	r3, [r7, #20]
 8005a3c:	e00a      	b.n	8005a54 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005a3e:	2306      	movs	r3, #6
 8005a40:	617b      	str	r3, [r7, #20]
 8005a42:	e007      	b.n	8005a54 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005a44:	79fb      	ldrb	r3, [r7, #7]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d102      	bne.n	8005a50 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005a4a:	2309      	movs	r3, #9
 8005a4c:	617b      	str	r3, [r7, #20]
 8005a4e:	e001      	b.n	8005a54 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005a50:	2309      	movs	r3, #9
 8005a52:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	68da      	ldr	r2, [r3, #12]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	029b      	lsls	r3, r3, #10
 8005a68:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	371c      	adds	r7, #28
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	00d8acbf 	.word	0x00d8acbf
 8005a84:	00e4e1bf 	.word	0x00e4e1bf
 8005a88:	00f423ff 	.word	0x00f423ff
 8005a8c:	0106737f 	.word	0x0106737f
 8005a90:	011a499f 	.word	0x011a499f
 8005a94:	01312cff 	.word	0x01312cff
 8005a98:	014ca43f 	.word	0x014ca43f
 8005a9c:	016e35ff 	.word	0x016e35ff
 8005aa0:	01a6ab1f 	.word	0x01a6ab1f
 8005aa4:	01e847ff 	.word	0x01e847ff

08005aa8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	f043 0201 	orr.w	r2, r3, #1
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	370c      	adds	r7, #12
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr

08005aca <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005aca:	b480      	push	{r7}
 8005acc:	b083      	sub	sp, #12
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f023 0201 	bic.w	r2, r3, #1
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	370c      	adds	r7, #12
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aea:	4770      	bx	lr

08005aec <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b082      	sub	sp, #8
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	460b      	mov	r3, r1
 8005af6:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005b04:	78fb      	ldrb	r3, [r7, #3]
 8005b06:	2b01      	cmp	r3, #1
 8005b08:	d106      	bne.n	8005b18 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	60da      	str	r2, [r3, #12]
 8005b16:	e00b      	b.n	8005b30 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8005b18:	78fb      	ldrb	r3, [r7, #3]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d106      	bne.n	8005b2c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	60da      	str	r2, [r3, #12]
 8005b2a:	e001      	b.n	8005b30 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e003      	b.n	8005b38 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005b30:	2032      	movs	r0, #50	; 0x32
 8005b32:	f7fc fbaf 	bl	8002294 <HAL_Delay>

  return HAL_OK;
 8005b36:	2300      	movs	r3, #0
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3708      	adds	r7, #8
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b40:	b084      	sub	sp, #16
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b086      	sub	sp, #24
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005b4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005b52:	2300      	movs	r3, #0
 8005b54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	613b      	str	r3, [r7, #16]
 8005b5e:	e009      	b.n	8005b74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	3340      	adds	r3, #64	; 0x40
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4413      	add	r3, r2
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	3301      	adds	r3, #1
 8005b72:	613b      	str	r3, [r7, #16]
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	2b0e      	cmp	r3, #14
 8005b78:	d9f2      	bls.n	8005b60 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d11c      	bne.n	8005bba <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b86:	685b      	ldr	r3, [r3, #4]
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b8e:	f043 0302 	orr.w	r3, r3, #2
 8005b92:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b98:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	639a      	str	r2, [r3, #56]	; 0x38
 8005bb8:	e00b      	b.n	8005bd2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bbe:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005bd8:	461a      	mov	r2, r3
 8005bda:	2300      	movs	r3, #0
 8005bdc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be4:	4619      	mov	r1, r3
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bec:	461a      	mov	r2, r3
 8005bee:	680b      	ldr	r3, [r1, #0]
 8005bf0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d10c      	bne.n	8005c12 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d104      	bne.n	8005c08 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005bfe:	2100      	movs	r1, #0
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 f949 	bl	8005e98 <USB_SetDevSpeed>
 8005c06:	e008      	b.n	8005c1a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005c08:	2101      	movs	r1, #1
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f000 f944 	bl	8005e98 <USB_SetDevSpeed>
 8005c10:	e003      	b.n	8005c1a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005c12:	2103      	movs	r1, #3
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 f93f 	bl	8005e98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005c1a:	2110      	movs	r1, #16
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f8f3 	bl	8005e08 <USB_FlushTxFifo>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d001      	beq.n	8005c2c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f000 f911 	bl	8005e54 <USB_FlushRxFifo>
 8005c32:	4603      	mov	r3, r0
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d001      	beq.n	8005c3c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c42:	461a      	mov	r2, r3
 8005c44:	2300      	movs	r3, #0
 8005c46:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4e:	461a      	mov	r2, r3
 8005c50:	2300      	movs	r3, #0
 8005c52:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c60:	2300      	movs	r3, #0
 8005c62:	613b      	str	r3, [r7, #16]
 8005c64:	e043      	b.n	8005cee <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	015a      	lsls	r2, r3, #5
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4413      	add	r3, r2
 8005c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c7c:	d118      	bne.n	8005cb0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10a      	bne.n	8005c9a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	015a      	lsls	r2, r3, #5
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	4413      	add	r3, r2
 8005c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c90:	461a      	mov	r2, r3
 8005c92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c96:	6013      	str	r3, [r2, #0]
 8005c98:	e013      	b.n	8005cc2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	015a      	lsls	r2, r3, #5
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	4413      	add	r3, r2
 8005ca2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005cac:	6013      	str	r3, [r2, #0]
 8005cae:	e008      	b.n	8005cc2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	015a      	lsls	r2, r3, #5
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	015a      	lsls	r2, r3, #5
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	4413      	add	r3, r2
 8005cca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cce:	461a      	mov	r2, r3
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	015a      	lsls	r2, r3, #5
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	4413      	add	r3, r2
 8005cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ce0:	461a      	mov	r2, r3
 8005ce2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ce6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	3301      	adds	r3, #1
 8005cec:	613b      	str	r3, [r7, #16]
 8005cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf0:	693a      	ldr	r2, [r7, #16]
 8005cf2:	429a      	cmp	r2, r3
 8005cf4:	d3b7      	bcc.n	8005c66 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	613b      	str	r3, [r7, #16]
 8005cfa:	e043      	b.n	8005d84 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	4413      	add	r3, r2
 8005d04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d12:	d118      	bne.n	8005d46 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005d14:	693b      	ldr	r3, [r7, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d10a      	bne.n	8005d30 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	015a      	lsls	r2, r3, #5
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	4413      	add	r3, r2
 8005d22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d26:	461a      	mov	r2, r3
 8005d28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d2c:	6013      	str	r3, [r2, #0]
 8005d2e:	e013      	b.n	8005d58 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	015a      	lsls	r2, r3, #5
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	4413      	add	r3, r2
 8005d38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d42:	6013      	str	r3, [r2, #0]
 8005d44:	e008      	b.n	8005d58 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	015a      	lsls	r2, r3, #5
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d52:	461a      	mov	r2, r3
 8005d54:	2300      	movs	r3, #0
 8005d56:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d64:	461a      	mov	r2, r3
 8005d66:	2300      	movs	r3, #0
 8005d68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	015a      	lsls	r2, r3, #5
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	4413      	add	r3, r2
 8005d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d76:	461a      	mov	r2, r3
 8005d78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005d7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d7e:	693b      	ldr	r3, [r7, #16]
 8005d80:	3301      	adds	r3, #1
 8005d82:	613b      	str	r3, [r7, #16]
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d3b7      	bcc.n	8005cfc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	68fa      	ldr	r2, [r7, #12]
 8005d96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d9e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2200      	movs	r2, #0
 8005da4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005dac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d105      	bne.n	8005dc0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	f043 0210 	orr.w	r2, r3, #16
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	699a      	ldr	r2, [r3, #24]
 8005dc4:	4b0f      	ldr	r3, [pc, #60]	; (8005e04 <USB_DevInit+0x2c4>)
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005dcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d005      	beq.n	8005dde <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	699b      	ldr	r3, [r3, #24]
 8005dd6:	f043 0208 	orr.w	r2, r3, #8
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005dde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d107      	bne.n	8005df4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005dec:	f043 0304 	orr.w	r3, r3, #4
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005e00:	b004      	add	sp, #16
 8005e02:	4770      	bx	lr
 8005e04:	803c3800 	.word	0x803c3800

08005e08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
 8005e10:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005e12:	2300      	movs	r3, #0
 8005e14:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	019b      	lsls	r3, r3, #6
 8005e1a:	f043 0220 	orr.w	r2, r3, #32
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	3301      	adds	r3, #1
 8005e26:	60fb      	str	r3, [r7, #12]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	4a09      	ldr	r2, [pc, #36]	; (8005e50 <USB_FlushTxFifo+0x48>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d901      	bls.n	8005e34 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005e30:	2303      	movs	r3, #3
 8005e32:	e006      	b.n	8005e42 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	f003 0320 	and.w	r3, r3, #32
 8005e3c:	2b20      	cmp	r3, #32
 8005e3e:	d0f0      	beq.n	8005e22 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005e40:	2300      	movs	r3, #0
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3714      	adds	r7, #20
 8005e46:	46bd      	mov	sp, r7
 8005e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4c:	4770      	bx	lr
 8005e4e:	bf00      	nop
 8005e50:	00030d40 	.word	0x00030d40

08005e54 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2210      	movs	r2, #16
 8005e64:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	60fb      	str	r3, [r7, #12]
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4a09      	ldr	r2, [pc, #36]	; (8005e94 <USB_FlushRxFifo+0x40>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d901      	bls.n	8005e78 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005e74:	2303      	movs	r3, #3
 8005e76:	e006      	b.n	8005e86 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	f003 0310 	and.w	r3, r3, #16
 8005e80:	2b10      	cmp	r3, #16
 8005e82:	d0f0      	beq.n	8005e66 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	00030d40 	.word	0x00030d40

08005e98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b085      	sub	sp, #20
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eae:	681a      	ldr	r2, [r3, #0]
 8005eb0:	78fb      	ldrb	r3, [r7, #3]
 8005eb2:	68f9      	ldr	r1, [r7, #12]
 8005eb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005eb8:	4313      	orrs	r3, r2
 8005eba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005eca:	b480      	push	{r7}
 8005ecc:	b087      	sub	sp, #28
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f003 0306 	and.w	r3, r3, #6
 8005ee2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d102      	bne.n	8005ef0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005eea:	2300      	movs	r3, #0
 8005eec:	75fb      	strb	r3, [r7, #23]
 8005eee:	e00a      	b.n	8005f06 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d002      	beq.n	8005efc <USB_GetDevSpeed+0x32>
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2b06      	cmp	r3, #6
 8005efa:	d102      	bne.n	8005f02 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005efc:	2302      	movs	r3, #2
 8005efe:	75fb      	strb	r3, [r7, #23]
 8005f00:	e001      	b.n	8005f06 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005f02:	230f      	movs	r3, #15
 8005f04:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005f06:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	371c      	adds	r7, #28
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr

08005f14 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f14:	b480      	push	{r7}
 8005f16:	b085      	sub	sp, #20
 8005f18:	af00      	add	r7, sp, #0
 8005f1a:	6078      	str	r0, [r7, #4]
 8005f1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	781b      	ldrb	r3, [r3, #0]
 8005f26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	785b      	ldrb	r3, [r3, #1]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d13a      	bne.n	8005fa6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f36:	69da      	ldr	r2, [r3, #28]
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	f003 030f 	and.w	r3, r3, #15
 8005f40:	2101      	movs	r1, #1
 8005f42:	fa01 f303 	lsl.w	r3, r1, r3
 8005f46:	b29b      	uxth	r3, r3
 8005f48:	68f9      	ldr	r1, [r7, #12]
 8005f4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f4e:	4313      	orrs	r3, r2
 8005f50:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	015a      	lsls	r2, r3, #5
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	4413      	add	r3, r2
 8005f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d155      	bne.n	8006014 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	015a      	lsls	r2, r3, #5
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4413      	add	r3, r2
 8005f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	78db      	ldrb	r3, [r3, #3]
 8005f82:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f84:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	059b      	lsls	r3, r3, #22
 8005f8a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	0151      	lsls	r1, r2, #5
 8005f92:	68fa      	ldr	r2, [r7, #12]
 8005f94:	440a      	add	r2, r1
 8005f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fa2:	6013      	str	r3, [r2, #0]
 8005fa4:	e036      	b.n	8006014 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fac:	69da      	ldr	r2, [r3, #28]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	781b      	ldrb	r3, [r3, #0]
 8005fb2:	f003 030f 	and.w	r3, r3, #15
 8005fb6:	2101      	movs	r1, #1
 8005fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8005fbc:	041b      	lsls	r3, r3, #16
 8005fbe:	68f9      	ldr	r1, [r7, #12]
 8005fc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	015a      	lsls	r2, r3, #5
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	4413      	add	r3, r2
 8005fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d11a      	bne.n	8006014 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	015a      	lsls	r2, r3, #5
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fea:	681a      	ldr	r2, [r3, #0]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	78db      	ldrb	r3, [r3, #3]
 8005ff8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005ffa:	430b      	orrs	r3, r1
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	0151      	lsls	r1, r2, #5
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	440a      	add	r2, r1
 8006006:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800600a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800600e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006012:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006014:	2300      	movs	r3, #0
}
 8006016:	4618      	mov	r0, r3
 8006018:	3714      	adds	r7, #20
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
	...

08006024 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006024:	b480      	push	{r7}
 8006026:	b085      	sub	sp, #20
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	781b      	ldrb	r3, [r3, #0]
 8006036:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	785b      	ldrb	r3, [r3, #1]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d161      	bne.n	8006104 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006052:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006056:	d11f      	bne.n	8006098 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68ba      	ldr	r2, [r7, #8]
 8006068:	0151      	lsls	r1, r2, #5
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	440a      	add	r2, r1
 800606e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006072:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006076:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	015a      	lsls	r2, r3, #5
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	4413      	add	r3, r2
 8006080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	0151      	lsls	r1, r2, #5
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	440a      	add	r2, r1
 800608e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006092:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006096:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800609e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	f003 030f 	and.w	r3, r3, #15
 80060a8:	2101      	movs	r1, #1
 80060aa:	fa01 f303 	lsl.w	r3, r1, r3
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	43db      	mvns	r3, r3
 80060b2:	68f9      	ldr	r1, [r7, #12]
 80060b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060b8:	4013      	ands	r3, r2
 80060ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060c2:	69da      	ldr	r2, [r3, #28]
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	781b      	ldrb	r3, [r3, #0]
 80060c8:	f003 030f 	and.w	r3, r3, #15
 80060cc:	2101      	movs	r1, #1
 80060ce:	fa01 f303 	lsl.w	r3, r1, r3
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	43db      	mvns	r3, r3
 80060d6:	68f9      	ldr	r1, [r7, #12]
 80060d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060dc:	4013      	ands	r3, r2
 80060de:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	015a      	lsls	r2, r3, #5
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	4413      	add	r3, r2
 80060e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060ec:	681a      	ldr	r2, [r3, #0]
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	0159      	lsls	r1, r3, #5
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	440b      	add	r3, r1
 80060f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060fa:	4619      	mov	r1, r3
 80060fc:	4b35      	ldr	r3, [pc, #212]	; (80061d4 <USB_DeactivateEndpoint+0x1b0>)
 80060fe:	4013      	ands	r3, r2
 8006100:	600b      	str	r3, [r1, #0]
 8006102:	e060      	b.n	80061c6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800611a:	d11f      	bne.n	800615c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	4413      	add	r3, r2
 8006124:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	68ba      	ldr	r2, [r7, #8]
 800612c:	0151      	lsls	r1, r2, #5
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	440a      	add	r2, r1
 8006132:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006136:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800613a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	0151      	lsls	r1, r2, #5
 800614e:	68fa      	ldr	r2, [r7, #12]
 8006150:	440a      	add	r2, r1
 8006152:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006156:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800615a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006162:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	781b      	ldrb	r3, [r3, #0]
 8006168:	f003 030f 	and.w	r3, r3, #15
 800616c:	2101      	movs	r1, #1
 800616e:	fa01 f303 	lsl.w	r3, r1, r3
 8006172:	041b      	lsls	r3, r3, #16
 8006174:	43db      	mvns	r3, r3
 8006176:	68f9      	ldr	r1, [r7, #12]
 8006178:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800617c:	4013      	ands	r3, r2
 800617e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006186:	69da      	ldr	r2, [r3, #28]
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	781b      	ldrb	r3, [r3, #0]
 800618c:	f003 030f 	and.w	r3, r3, #15
 8006190:	2101      	movs	r1, #1
 8006192:	fa01 f303 	lsl.w	r3, r1, r3
 8006196:	041b      	lsls	r3, r3, #16
 8006198:	43db      	mvns	r3, r3
 800619a:	68f9      	ldr	r1, [r7, #12]
 800619c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80061a0:	4013      	ands	r3, r2
 80061a2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	015a      	lsls	r2, r3, #5
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	4413      	add	r3, r2
 80061ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	0159      	lsls	r1, r3, #5
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	440b      	add	r3, r1
 80061ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80061be:	4619      	mov	r1, r3
 80061c0:	4b05      	ldr	r3, [pc, #20]	; (80061d8 <USB_DeactivateEndpoint+0x1b4>)
 80061c2:	4013      	ands	r3, r2
 80061c4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80061c6:	2300      	movs	r3, #0
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	ec337800 	.word	0xec337800
 80061d8:	eff37800 	.word	0xeff37800

080061dc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b08a      	sub	sp, #40	; 0x28
 80061e0:	af02      	add	r7, sp, #8
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	4613      	mov	r3, r2
 80061e8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	785b      	ldrb	r3, [r3, #1]
 80061f8:	2b01      	cmp	r3, #1
 80061fa:	f040 815c 	bne.w	80064b6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80061fe:	68bb      	ldr	r3, [r7, #8]
 8006200:	695b      	ldr	r3, [r3, #20]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d132      	bne.n	800626c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	015a      	lsls	r2, r3, #5
 800620a:	69fb      	ldr	r3, [r7, #28]
 800620c:	4413      	add	r3, r2
 800620e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	69ba      	ldr	r2, [r7, #24]
 8006216:	0151      	lsls	r1, r2, #5
 8006218:	69fa      	ldr	r2, [r7, #28]
 800621a:	440a      	add	r2, r1
 800621c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006220:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006224:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006228:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	015a      	lsls	r2, r3, #5
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	4413      	add	r3, r2
 8006232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006236:	691b      	ldr	r3, [r3, #16]
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	0151      	lsls	r1, r2, #5
 800623c:	69fa      	ldr	r2, [r7, #28]
 800623e:	440a      	add	r2, r1
 8006240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006244:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006248:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800624a:	69bb      	ldr	r3, [r7, #24]
 800624c:	015a      	lsls	r2, r3, #5
 800624e:	69fb      	ldr	r3, [r7, #28]
 8006250:	4413      	add	r3, r2
 8006252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006256:	691b      	ldr	r3, [r3, #16]
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	0151      	lsls	r1, r2, #5
 800625c:	69fa      	ldr	r2, [r7, #28]
 800625e:	440a      	add	r2, r1
 8006260:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006264:	0cdb      	lsrs	r3, r3, #19
 8006266:	04db      	lsls	r3, r3, #19
 8006268:	6113      	str	r3, [r2, #16]
 800626a:	e074      	b.n	8006356 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800626c:	69bb      	ldr	r3, [r7, #24]
 800626e:	015a      	lsls	r2, r3, #5
 8006270:	69fb      	ldr	r3, [r7, #28]
 8006272:	4413      	add	r3, r2
 8006274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006278:	691b      	ldr	r3, [r3, #16]
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	0151      	lsls	r1, r2, #5
 800627e:	69fa      	ldr	r2, [r7, #28]
 8006280:	440a      	add	r2, r1
 8006282:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006286:	0cdb      	lsrs	r3, r3, #19
 8006288:	04db      	lsls	r3, r3, #19
 800628a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	015a      	lsls	r2, r3, #5
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	4413      	add	r3, r2
 8006294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	0151      	lsls	r1, r2, #5
 800629e:	69fa      	ldr	r2, [r7, #28]
 80062a0:	440a      	add	r2, r1
 80062a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80062aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80062ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80062b0:	69bb      	ldr	r3, [r7, #24]
 80062b2:	015a      	lsls	r2, r3, #5
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	4413      	add	r3, r2
 80062b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062bc:	691a      	ldr	r2, [r3, #16]
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	6959      	ldr	r1, [r3, #20]
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	440b      	add	r3, r1
 80062c8:	1e59      	subs	r1, r3, #1
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80062d2:	04d9      	lsls	r1, r3, #19
 80062d4:	4b9d      	ldr	r3, [pc, #628]	; (800654c <USB_EPStartXfer+0x370>)
 80062d6:	400b      	ands	r3, r1
 80062d8:	69b9      	ldr	r1, [r7, #24]
 80062da:	0148      	lsls	r0, r1, #5
 80062dc:	69f9      	ldr	r1, [r7, #28]
 80062de:	4401      	add	r1, r0
 80062e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80062e4:	4313      	orrs	r3, r2
 80062e6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	015a      	lsls	r2, r3, #5
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f4:	691a      	ldr	r2, [r3, #16]
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	695b      	ldr	r3, [r3, #20]
 80062fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062fe:	69b9      	ldr	r1, [r7, #24]
 8006300:	0148      	lsls	r0, r1, #5
 8006302:	69f9      	ldr	r1, [r7, #28]
 8006304:	4401      	add	r1, r0
 8006306:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800630a:	4313      	orrs	r3, r2
 800630c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800630e:	68bb      	ldr	r3, [r7, #8]
 8006310:	78db      	ldrb	r3, [r3, #3]
 8006312:	2b01      	cmp	r3, #1
 8006314:	d11f      	bne.n	8006356 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	4413      	add	r3, r2
 800631e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	69ba      	ldr	r2, [r7, #24]
 8006326:	0151      	lsls	r1, r2, #5
 8006328:	69fa      	ldr	r2, [r7, #28]
 800632a:	440a      	add	r2, r1
 800632c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006330:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006334:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8006336:	69bb      	ldr	r3, [r7, #24]
 8006338:	015a      	lsls	r2, r3, #5
 800633a:	69fb      	ldr	r3, [r7, #28]
 800633c:	4413      	add	r3, r2
 800633e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	0151      	lsls	r1, r2, #5
 8006348:	69fa      	ldr	r2, [r7, #28]
 800634a:	440a      	add	r2, r1
 800634c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006350:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006354:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8006356:	79fb      	ldrb	r3, [r7, #7]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d14b      	bne.n	80063f4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d009      	beq.n	8006378 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006364:	69bb      	ldr	r3, [r7, #24]
 8006366:	015a      	lsls	r2, r3, #5
 8006368:	69fb      	ldr	r3, [r7, #28]
 800636a:	4413      	add	r3, r2
 800636c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006370:	461a      	mov	r2, r3
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	78db      	ldrb	r3, [r3, #3]
 800637c:	2b01      	cmp	r3, #1
 800637e:	d128      	bne.n	80063d2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800638c:	2b00      	cmp	r3, #0
 800638e:	d110      	bne.n	80063b2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	015a      	lsls	r2, r3, #5
 8006394:	69fb      	ldr	r3, [r7, #28]
 8006396:	4413      	add	r3, r2
 8006398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	0151      	lsls	r1, r2, #5
 80063a2:	69fa      	ldr	r2, [r7, #28]
 80063a4:	440a      	add	r2, r1
 80063a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063ae:	6013      	str	r3, [r2, #0]
 80063b0:	e00f      	b.n	80063d2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80063b2:	69bb      	ldr	r3, [r7, #24]
 80063b4:	015a      	lsls	r2, r3, #5
 80063b6:	69fb      	ldr	r3, [r7, #28]
 80063b8:	4413      	add	r3, r2
 80063ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	69ba      	ldr	r2, [r7, #24]
 80063c2:	0151      	lsls	r1, r2, #5
 80063c4:	69fa      	ldr	r2, [r7, #28]
 80063c6:	440a      	add	r2, r1
 80063c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	69ba      	ldr	r2, [r7, #24]
 80063e2:	0151      	lsls	r1, r2, #5
 80063e4:	69fa      	ldr	r2, [r7, #28]
 80063e6:	440a      	add	r2, r1
 80063e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063f0:	6013      	str	r3, [r2, #0]
 80063f2:	e12f      	b.n	8006654 <USB_EPStartXfer+0x478>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	015a      	lsls	r2, r3, #5
 80063f8:	69fb      	ldr	r3, [r7, #28]
 80063fa:	4413      	add	r3, r2
 80063fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	0151      	lsls	r1, r2, #5
 8006406:	69fa      	ldr	r2, [r7, #28]
 8006408:	440a      	add	r2, r1
 800640a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800640e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006412:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	78db      	ldrb	r3, [r3, #3]
 8006418:	2b01      	cmp	r3, #1
 800641a:	d015      	beq.n	8006448 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	2b00      	cmp	r3, #0
 8006422:	f000 8117 	beq.w	8006654 <USB_EPStartXfer+0x478>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800642c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	f003 030f 	and.w	r3, r3, #15
 8006436:	2101      	movs	r1, #1
 8006438:	fa01 f303 	lsl.w	r3, r1, r3
 800643c:	69f9      	ldr	r1, [r7, #28]
 800643e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006442:	4313      	orrs	r3, r2
 8006444:	634b      	str	r3, [r1, #52]	; 0x34
 8006446:	e105      	b.n	8006654 <USB_EPStartXfer+0x478>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006454:	2b00      	cmp	r3, #0
 8006456:	d110      	bne.n	800647a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	015a      	lsls	r2, r3, #5
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	4413      	add	r3, r2
 8006460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	69ba      	ldr	r2, [r7, #24]
 8006468:	0151      	lsls	r1, r2, #5
 800646a:	69fa      	ldr	r2, [r7, #28]
 800646c:	440a      	add	r2, r1
 800646e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006472:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006476:	6013      	str	r3, [r2, #0]
 8006478:	e00f      	b.n	800649a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	69fb      	ldr	r3, [r7, #28]
 8006480:	4413      	add	r3, r2
 8006482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	0151      	lsls	r1, r2, #5
 800648c:	69fa      	ldr	r2, [r7, #28]
 800648e:	440a      	add	r2, r1
 8006490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006498:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	68d9      	ldr	r1, [r3, #12]
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	781a      	ldrb	r2, [r3, #0]
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	b298      	uxth	r0, r3
 80064a8:	79fb      	ldrb	r3, [r7, #7]
 80064aa:	9300      	str	r3, [sp, #0]
 80064ac:	4603      	mov	r3, r0
 80064ae:	68f8      	ldr	r0, [r7, #12]
 80064b0:	f000 fa2b 	bl	800690a <USB_WritePacket>
 80064b4:	e0ce      	b.n	8006654 <USB_EPStartXfer+0x478>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	015a      	lsls	r2, r3, #5
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	4413      	add	r3, r2
 80064be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c2:	691b      	ldr	r3, [r3, #16]
 80064c4:	69ba      	ldr	r2, [r7, #24]
 80064c6:	0151      	lsls	r1, r2, #5
 80064c8:	69fa      	ldr	r2, [r7, #28]
 80064ca:	440a      	add	r2, r1
 80064cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064d0:	0cdb      	lsrs	r3, r3, #19
 80064d2:	04db      	lsls	r3, r3, #19
 80064d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80064d6:	69bb      	ldr	r3, [r7, #24]
 80064d8:	015a      	lsls	r2, r3, #5
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	4413      	add	r3, r2
 80064de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	69ba      	ldr	r2, [r7, #24]
 80064e6:	0151      	lsls	r1, r2, #5
 80064e8:	69fa      	ldr	r2, [r7, #28]
 80064ea:	440a      	add	r2, r1
 80064ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	695b      	ldr	r3, [r3, #20]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d126      	bne.n	8006550 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006502:	69bb      	ldr	r3, [r7, #24]
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	4413      	add	r3, r2
 800650a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800650e:	691a      	ldr	r2, [r3, #16]
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006518:	69b9      	ldr	r1, [r7, #24]
 800651a:	0148      	lsls	r0, r1, #5
 800651c:	69f9      	ldr	r1, [r7, #28]
 800651e:	4401      	add	r1, r0
 8006520:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006524:	4313      	orrs	r3, r2
 8006526:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	015a      	lsls	r2, r3, #5
 800652c:	69fb      	ldr	r3, [r7, #28]
 800652e:	4413      	add	r3, r2
 8006530:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	69ba      	ldr	r2, [r7, #24]
 8006538:	0151      	lsls	r1, r2, #5
 800653a:	69fa      	ldr	r2, [r7, #28]
 800653c:	440a      	add	r2, r1
 800653e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006542:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006546:	6113      	str	r3, [r2, #16]
 8006548:	e036      	b.n	80065b8 <USB_EPStartXfer+0x3dc>
 800654a:	bf00      	nop
 800654c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	695a      	ldr	r2, [r3, #20]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	4413      	add	r3, r2
 800655a:	1e5a      	subs	r2, r3, #1
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	fbb2 f3f3 	udiv	r3, r2, r3
 8006564:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	015a      	lsls	r2, r3, #5
 800656a:	69fb      	ldr	r3, [r7, #28]
 800656c:	4413      	add	r3, r2
 800656e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006572:	691a      	ldr	r2, [r3, #16]
 8006574:	8afb      	ldrh	r3, [r7, #22]
 8006576:	04d9      	lsls	r1, r3, #19
 8006578:	4b39      	ldr	r3, [pc, #228]	; (8006660 <USB_EPStartXfer+0x484>)
 800657a:	400b      	ands	r3, r1
 800657c:	69b9      	ldr	r1, [r7, #24]
 800657e:	0148      	lsls	r0, r1, #5
 8006580:	69f9      	ldr	r1, [r7, #28]
 8006582:	4401      	add	r1, r0
 8006584:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006588:	4313      	orrs	r3, r2
 800658a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	4413      	add	r3, r2
 8006594:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006598:	691a      	ldr	r2, [r3, #16]
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	689b      	ldr	r3, [r3, #8]
 800659e:	8af9      	ldrh	r1, [r7, #22]
 80065a0:	fb01 f303 	mul.w	r3, r1, r3
 80065a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065a8:	69b9      	ldr	r1, [r7, #24]
 80065aa:	0148      	lsls	r0, r1, #5
 80065ac:	69f9      	ldr	r1, [r7, #28]
 80065ae:	4401      	add	r1, r0
 80065b0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80065b4:	4313      	orrs	r3, r2
 80065b6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80065b8:	79fb      	ldrb	r3, [r7, #7]
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d10d      	bne.n	80065da <USB_EPStartXfer+0x3fe>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d009      	beq.n	80065da <USB_EPStartXfer+0x3fe>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	68d9      	ldr	r1, [r3, #12]
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	015a      	lsls	r2, r3, #5
 80065ce:	69fb      	ldr	r3, [r7, #28]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065d6:	460a      	mov	r2, r1
 80065d8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	78db      	ldrb	r3, [r3, #3]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d128      	bne.n	8006634 <USB_EPStartXfer+0x458>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d110      	bne.n	8006614 <USB_EPStartXfer+0x438>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80065f2:	69bb      	ldr	r3, [r7, #24]
 80065f4:	015a      	lsls	r2, r3, #5
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	4413      	add	r3, r2
 80065fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	69ba      	ldr	r2, [r7, #24]
 8006602:	0151      	lsls	r1, r2, #5
 8006604:	69fa      	ldr	r2, [r7, #28]
 8006606:	440a      	add	r2, r1
 8006608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800660c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006610:	6013      	str	r3, [r2, #0]
 8006612:	e00f      	b.n	8006634 <USB_EPStartXfer+0x458>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	015a      	lsls	r2, r3, #5
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	4413      	add	r3, r2
 800661c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	69ba      	ldr	r2, [r7, #24]
 8006624:	0151      	lsls	r1, r2, #5
 8006626:	69fa      	ldr	r2, [r7, #28]
 8006628:	440a      	add	r2, r1
 800662a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800662e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006632:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006634:	69bb      	ldr	r3, [r7, #24]
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	4413      	add	r3, r2
 800663c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	69ba      	ldr	r2, [r7, #24]
 8006644:	0151      	lsls	r1, r2, #5
 8006646:	69fa      	ldr	r2, [r7, #28]
 8006648:	440a      	add	r2, r1
 800664a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800664e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006652:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3720      	adds	r7, #32
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	1ff80000 	.word	0x1ff80000

08006664 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006664:	b480      	push	{r7}
 8006666:	b087      	sub	sp, #28
 8006668:	af00      	add	r7, sp, #0
 800666a:	60f8      	str	r0, [r7, #12]
 800666c:	60b9      	str	r1, [r7, #8]
 800666e:	4613      	mov	r3, r2
 8006670:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006676:	68bb      	ldr	r3, [r7, #8]
 8006678:	781b      	ldrb	r3, [r3, #0]
 800667a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800667c:	68bb      	ldr	r3, [r7, #8]
 800667e:	785b      	ldrb	r3, [r3, #1]
 8006680:	2b01      	cmp	r3, #1
 8006682:	f040 80cd 	bne.w	8006820 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	695b      	ldr	r3, [r3, #20]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d132      	bne.n	80066f4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	015a      	lsls	r2, r3, #5
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	4413      	add	r3, r2
 8006696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	0151      	lsls	r1, r2, #5
 80066a0:	697a      	ldr	r2, [r7, #20]
 80066a2:	440a      	add	r2, r1
 80066a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066b0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	015a      	lsls	r2, r3, #5
 80066b6:	697b      	ldr	r3, [r7, #20]
 80066b8:	4413      	add	r3, r2
 80066ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066be:	691b      	ldr	r3, [r3, #16]
 80066c0:	693a      	ldr	r2, [r7, #16]
 80066c2:	0151      	lsls	r1, r2, #5
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	440a      	add	r2, r1
 80066c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066d0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	015a      	lsls	r2, r3, #5
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	4413      	add	r3, r2
 80066da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066de:	691b      	ldr	r3, [r3, #16]
 80066e0:	693a      	ldr	r2, [r7, #16]
 80066e2:	0151      	lsls	r1, r2, #5
 80066e4:	697a      	ldr	r2, [r7, #20]
 80066e6:	440a      	add	r2, r1
 80066e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ec:	0cdb      	lsrs	r3, r3, #19
 80066ee:	04db      	lsls	r3, r3, #19
 80066f0:	6113      	str	r3, [r2, #16]
 80066f2:	e04e      	b.n	8006792 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	015a      	lsls	r2, r3, #5
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	4413      	add	r3, r2
 80066fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006700:	691b      	ldr	r3, [r3, #16]
 8006702:	693a      	ldr	r2, [r7, #16]
 8006704:	0151      	lsls	r1, r2, #5
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	440a      	add	r2, r1
 800670a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800670e:	0cdb      	lsrs	r3, r3, #19
 8006710:	04db      	lsls	r3, r3, #19
 8006712:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006714:	693b      	ldr	r3, [r7, #16]
 8006716:	015a      	lsls	r2, r3, #5
 8006718:	697b      	ldr	r3, [r7, #20]
 800671a:	4413      	add	r3, r2
 800671c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	693a      	ldr	r2, [r7, #16]
 8006724:	0151      	lsls	r1, r2, #5
 8006726:	697a      	ldr	r2, [r7, #20]
 8006728:	440a      	add	r2, r1
 800672a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800672e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006732:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006736:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	695a      	ldr	r2, [r3, #20]
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	429a      	cmp	r2, r3
 8006742:	d903      	bls.n	800674c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	689a      	ldr	r2, [r3, #8]
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800674c:	693b      	ldr	r3, [r7, #16]
 800674e:	015a      	lsls	r2, r3, #5
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	4413      	add	r3, r2
 8006754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	693a      	ldr	r2, [r7, #16]
 800675c:	0151      	lsls	r1, r2, #5
 800675e:	697a      	ldr	r2, [r7, #20]
 8006760:	440a      	add	r2, r1
 8006762:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006766:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800676a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800676c:	693b      	ldr	r3, [r7, #16]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	4413      	add	r3, r2
 8006774:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006778:	691a      	ldr	r2, [r3, #16]
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	695b      	ldr	r3, [r3, #20]
 800677e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006782:	6939      	ldr	r1, [r7, #16]
 8006784:	0148      	lsls	r0, r1, #5
 8006786:	6979      	ldr	r1, [r7, #20]
 8006788:	4401      	add	r1, r0
 800678a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800678e:	4313      	orrs	r3, r2
 8006790:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006792:	79fb      	ldrb	r3, [r7, #7]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d11e      	bne.n	80067d6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	691b      	ldr	r3, [r3, #16]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d009      	beq.n	80067b4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ac:	461a      	mov	r2, r3
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80067b4:	693b      	ldr	r3, [r7, #16]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	693a      	ldr	r2, [r7, #16]
 80067c4:	0151      	lsls	r1, r2, #5
 80067c6:	697a      	ldr	r2, [r7, #20]
 80067c8:	440a      	add	r2, r1
 80067ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067d2:	6013      	str	r3, [r2, #0]
 80067d4:	e092      	b.n	80068fc <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	015a      	lsls	r2, r3, #5
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	4413      	add	r3, r2
 80067de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	693a      	ldr	r2, [r7, #16]
 80067e6:	0151      	lsls	r1, r2, #5
 80067e8:	697a      	ldr	r2, [r7, #20]
 80067ea:	440a      	add	r2, r1
 80067ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80067f4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80067f6:	68bb      	ldr	r3, [r7, #8]
 80067f8:	695b      	ldr	r3, [r3, #20]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d07e      	beq.n	80068fc <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	f003 030f 	and.w	r3, r3, #15
 800680e:	2101      	movs	r1, #1
 8006810:	fa01 f303 	lsl.w	r3, r1, r3
 8006814:	6979      	ldr	r1, [r7, #20]
 8006816:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800681a:	4313      	orrs	r3, r2
 800681c:	634b      	str	r3, [r1, #52]	; 0x34
 800681e:	e06d      	b.n	80068fc <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	4413      	add	r3, r2
 8006828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800682c:	691b      	ldr	r3, [r3, #16]
 800682e:	693a      	ldr	r2, [r7, #16]
 8006830:	0151      	lsls	r1, r2, #5
 8006832:	697a      	ldr	r2, [r7, #20]
 8006834:	440a      	add	r2, r1
 8006836:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800683a:	0cdb      	lsrs	r3, r3, #19
 800683c:	04db      	lsls	r3, r3, #19
 800683e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	015a      	lsls	r2, r3, #5
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	4413      	add	r3, r2
 8006848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800684c:	691b      	ldr	r3, [r3, #16]
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	0151      	lsls	r1, r2, #5
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	440a      	add	r2, r1
 8006856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800685a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800685e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006862:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	695b      	ldr	r3, [r3, #20]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d003      	beq.n	8006874 <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	689a      	ldr	r2, [r3, #8]
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	4413      	add	r3, r2
 800687c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006880:	691b      	ldr	r3, [r3, #16]
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	0151      	lsls	r1, r2, #5
 8006886:	697a      	ldr	r2, [r7, #20]
 8006888:	440a      	add	r2, r1
 800688a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800688e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006892:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	015a      	lsls	r2, r3, #5
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	4413      	add	r3, r2
 800689c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068a0:	691a      	ldr	r2, [r3, #16]
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068aa:	6939      	ldr	r1, [r7, #16]
 80068ac:	0148      	lsls	r0, r1, #5
 80068ae:	6979      	ldr	r1, [r7, #20]
 80068b0:	4401      	add	r1, r0
 80068b2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80068b6:	4313      	orrs	r3, r2
 80068b8:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80068ba:	79fb      	ldrb	r3, [r7, #7]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d10d      	bne.n	80068dc <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	68db      	ldr	r3, [r3, #12]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d009      	beq.n	80068dc <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	68d9      	ldr	r1, [r3, #12]
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	015a      	lsls	r2, r3, #5
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	4413      	add	r3, r2
 80068d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068d8:	460a      	mov	r2, r1
 80068da:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	015a      	lsls	r2, r3, #5
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	693a      	ldr	r2, [r7, #16]
 80068ec:	0151      	lsls	r1, r2, #5
 80068ee:	697a      	ldr	r2, [r7, #20]
 80068f0:	440a      	add	r2, r1
 80068f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068f6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	371c      	adds	r7, #28
 8006902:	46bd      	mov	sp, r7
 8006904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006908:	4770      	bx	lr

0800690a <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800690a:	b480      	push	{r7}
 800690c:	b089      	sub	sp, #36	; 0x24
 800690e:	af00      	add	r7, sp, #0
 8006910:	60f8      	str	r0, [r7, #12]
 8006912:	60b9      	str	r1, [r7, #8]
 8006914:	4611      	mov	r1, r2
 8006916:	461a      	mov	r2, r3
 8006918:	460b      	mov	r3, r1
 800691a:	71fb      	strb	r3, [r7, #7]
 800691c:	4613      	mov	r3, r2
 800691e:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8006924:	68bb      	ldr	r3, [r7, #8]
 8006926:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8006928:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800692c:	2b00      	cmp	r3, #0
 800692e:	d11a      	bne.n	8006966 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006930:	88bb      	ldrh	r3, [r7, #4]
 8006932:	3303      	adds	r3, #3
 8006934:	089b      	lsrs	r3, r3, #2
 8006936:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006938:	2300      	movs	r3, #0
 800693a:	61bb      	str	r3, [r7, #24]
 800693c:	e00f      	b.n	800695e <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800693e:	79fb      	ldrb	r3, [r7, #7]
 8006940:	031a      	lsls	r2, r3, #12
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	4413      	add	r3, r2
 8006946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800694a:	461a      	mov	r2, r3
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006952:	69fb      	ldr	r3, [r7, #28]
 8006954:	3304      	adds	r3, #4
 8006956:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	3301      	adds	r3, #1
 800695c:	61bb      	str	r3, [r7, #24]
 800695e:	69ba      	ldr	r2, [r7, #24]
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	429a      	cmp	r2, r3
 8006964:	d3eb      	bcc.n	800693e <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3724      	adds	r7, #36	; 0x24
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006974:	b480      	push	{r7}
 8006976:	b089      	sub	sp, #36	; 0x24
 8006978:	af00      	add	r7, sp, #0
 800697a:	60f8      	str	r0, [r7, #12]
 800697c:	60b9      	str	r1, [r7, #8]
 800697e:	4613      	mov	r3, r2
 8006980:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800698a:	88fb      	ldrh	r3, [r7, #6]
 800698c:	3303      	adds	r3, #3
 800698e:	089b      	lsrs	r3, r3, #2
 8006990:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8006992:	2300      	movs	r3, #0
 8006994:	61bb      	str	r3, [r7, #24]
 8006996:	e00b      	b.n	80069b0 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	69fb      	ldr	r3, [r7, #28]
 80069a2:	601a      	str	r2, [r3, #0]
    pDest++;
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	3304      	adds	r3, #4
 80069a8:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	3301      	adds	r3, #1
 80069ae:	61bb      	str	r3, [r7, #24]
 80069b0:	69ba      	ldr	r2, [r7, #24]
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d3ef      	bcc.n	8006998 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 80069b8:	69fb      	ldr	r3, [r7, #28]
}
 80069ba:	4618      	mov	r0, r3
 80069bc:	3724      	adds	r7, #36	; 0x24
 80069be:	46bd      	mov	sp, r7
 80069c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c4:	4770      	bx	lr

080069c6 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069c6:	b480      	push	{r7}
 80069c8:	b085      	sub	sp, #20
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
 80069ce:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	785b      	ldrb	r3, [r3, #1]
 80069de:	2b01      	cmp	r3, #1
 80069e0:	d12c      	bne.n	8006a3c <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80069e2:	68bb      	ldr	r3, [r7, #8]
 80069e4:	015a      	lsls	r2, r3, #5
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	db12      	blt.n	8006a1a <USB_EPSetStall+0x54>
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d00f      	beq.n	8006a1a <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	015a      	lsls	r2, r3, #5
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	4413      	add	r3, r2
 8006a02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	0151      	lsls	r1, r2, #5
 8006a0c:	68fa      	ldr	r2, [r7, #12]
 8006a0e:	440a      	add	r2, r1
 8006a10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a18:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	015a      	lsls	r2, r3, #5
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	4413      	add	r3, r2
 8006a22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68ba      	ldr	r2, [r7, #8]
 8006a2a:	0151      	lsls	r1, r2, #5
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	440a      	add	r2, r1
 8006a30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a34:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a38:	6013      	str	r3, [r2, #0]
 8006a3a:	e02b      	b.n	8006a94 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	015a      	lsls	r2, r3, #5
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	db12      	blt.n	8006a74 <USB_EPSetStall+0xae>
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00f      	beq.n	8006a74 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	015a      	lsls	r2, r3, #5
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	68ba      	ldr	r2, [r7, #8]
 8006a64:	0151      	lsls	r1, r2, #5
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	440a      	add	r2, r1
 8006a6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a72:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006a74:	68bb      	ldr	r3, [r7, #8]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	0151      	lsls	r1, r2, #5
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	440a      	add	r2, r1
 8006a8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a8e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a92:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3714      	adds	r7, #20
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa0:	4770      	bx	lr

08006aa2 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006aa2:	b480      	push	{r7}
 8006aa4:	b085      	sub	sp, #20
 8006aa6:	af00      	add	r7, sp, #0
 8006aa8:	6078      	str	r0, [r7, #4]
 8006aaa:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	785b      	ldrb	r3, [r3, #1]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d128      	bne.n	8006b10 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	015a      	lsls	r2, r3, #5
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68ba      	ldr	r2, [r7, #8]
 8006ace:	0151      	lsls	r1, r2, #5
 8006ad0:	68fa      	ldr	r2, [r7, #12]
 8006ad2:	440a      	add	r2, r1
 8006ad4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ad8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006adc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	78db      	ldrb	r3, [r3, #3]
 8006ae2:	2b03      	cmp	r3, #3
 8006ae4:	d003      	beq.n	8006aee <USB_EPClearStall+0x4c>
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	78db      	ldrb	r3, [r3, #3]
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d138      	bne.n	8006b60 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	015a      	lsls	r2, r3, #5
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	4413      	add	r3, r2
 8006af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68ba      	ldr	r2, [r7, #8]
 8006afe:	0151      	lsls	r1, r2, #5
 8006b00:	68fa      	ldr	r2, [r7, #12]
 8006b02:	440a      	add	r2, r1
 8006b04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b0c:	6013      	str	r3, [r2, #0]
 8006b0e:	e027      	b.n	8006b60 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	015a      	lsls	r2, r3, #5
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	4413      	add	r3, r2
 8006b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	0151      	lsls	r1, r2, #5
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	440a      	add	r2, r1
 8006b26:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b2e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	78db      	ldrb	r3, [r3, #3]
 8006b34:	2b03      	cmp	r3, #3
 8006b36:	d003      	beq.n	8006b40 <USB_EPClearStall+0x9e>
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	78db      	ldrb	r3, [r3, #3]
 8006b3c:	2b02      	cmp	r3, #2
 8006b3e:	d10f      	bne.n	8006b60 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	015a      	lsls	r2, r3, #5
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	4413      	add	r3, r2
 8006b48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	0151      	lsls	r1, r2, #5
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	440a      	add	r2, r1
 8006b56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b5e:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006b60:	2300      	movs	r3, #0
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006b6e:	b480      	push	{r7}
 8006b70:	b085      	sub	sp, #20
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
 8006b76:	460b      	mov	r3, r1
 8006b78:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	68fa      	ldr	r2, [r7, #12]
 8006b88:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b8c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006b90:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	78fb      	ldrb	r3, [r7, #3]
 8006b9c:	011b      	lsls	r3, r3, #4
 8006b9e:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006ba2:	68f9      	ldr	r1, [r7, #12]
 8006ba4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ba8:	4313      	orrs	r3, r2
 8006baa:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006bac:	2300      	movs	r3, #0
}
 8006bae:	4618      	mov	r0, r3
 8006bb0:	3714      	adds	r7, #20
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb8:	4770      	bx	lr

08006bba <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006bba:	b580      	push	{r7, lr}
 8006bbc:	b084      	sub	sp, #16
 8006bbe:	af00      	add	r7, sp, #0
 8006bc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bd4:	f023 0302 	bic.w	r3, r3, #2
 8006bd8:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006bda:	2003      	movs	r0, #3
 8006bdc:	f7fb fb5a 	bl	8002294 <HAL_Delay>

  return HAL_OK;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3710      	adds	r7, #16
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}

08006bea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006bea:	b580      	push	{r7, lr}
 8006bec:	b084      	sub	sp, #16
 8006bee:	af00      	add	r7, sp, #0
 8006bf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	68fa      	ldr	r2, [r7, #12]
 8006c00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c04:	f043 0302 	orr.w	r3, r3, #2
 8006c08:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8006c0a:	2003      	movs	r0, #3
 8006c0c:	f7fb fb42 	bl	8002294 <HAL_Delay>

  return HAL_OK;
 8006c10:	2300      	movs	r3, #0
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3710      	adds	r7, #16
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}

08006c1a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006c1a:	b480      	push	{r7}
 8006c1c:	b085      	sub	sp, #20
 8006c1e:	af00      	add	r7, sp, #0
 8006c20:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	695b      	ldr	r3, [r3, #20]
 8006c26:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	699b      	ldr	r3, [r3, #24]
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	4013      	ands	r3, r2
 8006c30:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006c32:	68fb      	ldr	r3, [r7, #12]
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3714      	adds	r7, #20
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr

08006c40 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	68ba      	ldr	r2, [r7, #8]
 8006c60:	4013      	ands	r3, r2
 8006c62:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	0c1b      	lsrs	r3, r3, #16
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3714      	adds	r7, #20
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c86:	699b      	ldr	r3, [r3, #24]
 8006c88:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c90:	69db      	ldr	r3, [r3, #28]
 8006c92:	68ba      	ldr	r2, [r7, #8]
 8006c94:	4013      	ands	r3, r2
 8006c96:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	b29b      	uxth	r3, r3
}
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	3714      	adds	r7, #20
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006cb8:	78fb      	ldrb	r3, [r7, #3]
 8006cba:	015a      	lsls	r2, r3, #5
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	4413      	add	r3, r2
 8006cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cce:	695b      	ldr	r3, [r3, #20]
 8006cd0:	68ba      	ldr	r2, [r7, #8]
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006cd6:	68bb      	ldr	r3, [r7, #8]
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b087      	sub	sp, #28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
 8006cec:	460b      	mov	r3, r1
 8006cee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006cf4:	697b      	ldr	r3, [r7, #20]
 8006cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cfa:	691b      	ldr	r3, [r3, #16]
 8006cfc:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d06:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006d08:	78fb      	ldrb	r3, [r7, #3]
 8006d0a:	f003 030f 	and.w	r3, r3, #15
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	fa22 f303 	lsr.w	r3, r2, r3
 8006d14:	01db      	lsls	r3, r3, #7
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	693a      	ldr	r2, [r7, #16]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006d1e:	78fb      	ldrb	r3, [r7, #3]
 8006d20:	015a      	lsls	r2, r3, #5
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	4413      	add	r3, r2
 8006d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	693a      	ldr	r2, [r7, #16]
 8006d2e:	4013      	ands	r3, r2
 8006d30:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d32:	68bb      	ldr	r3, [r7, #8]
}
 8006d34:	4618      	mov	r0, r3
 8006d36:	371c      	adds	r7, #28
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b083      	sub	sp, #12
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	695b      	ldr	r3, [r3, #20]
 8006d4c:	f003 0301 	and.w	r3, r3, #1
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	370c      	adds	r7, #12
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr

08006d5c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	b085      	sub	sp, #20
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d76:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006d7a:	f023 0307 	bic.w	r3, r3, #7
 8006d7e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	68fa      	ldr	r2, [r7, #12]
 8006d8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d92:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d94:	2300      	movs	r3, #0
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3714      	adds	r7, #20
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da0:	4770      	bx	lr
	...

08006da4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b087      	sub	sp, #28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	460b      	mov	r3, r1
 8006dae:	607a      	str	r2, [r7, #4]
 8006db0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	333c      	adds	r3, #60	; 0x3c
 8006dba:	3304      	adds	r3, #4
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006dc0:	693b      	ldr	r3, [r7, #16]
 8006dc2:	4a26      	ldr	r2, [pc, #152]	; (8006e5c <USB_EP0_OutStart+0xb8>)
 8006dc4:	4293      	cmp	r3, r2
 8006dc6:	d90a      	bls.n	8006dde <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006dd4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006dd8:	d101      	bne.n	8006dde <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	e037      	b.n	8006e4e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006de4:	461a      	mov	r2, r3
 8006de6:	2300      	movs	r3, #0
 8006de8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006df8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006dfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e04:	691b      	ldr	r3, [r3, #16]
 8006e06:	697a      	ldr	r2, [r7, #20]
 8006e08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e0c:	f043 0318 	orr.w	r3, r3, #24
 8006e10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	697a      	ldr	r2, [r7, #20]
 8006e1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e20:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006e24:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006e26:	7afb      	ldrb	r3, [r7, #11]
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	d10f      	bne.n	8006e4c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006e2c:	697b      	ldr	r3, [r7, #20]
 8006e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e32:	461a      	mov	r2, r3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e46:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006e4a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e4c:	2300      	movs	r3, #0
}
 8006e4e:	4618      	mov	r0, r3
 8006e50:	371c      	adds	r7, #28
 8006e52:	46bd      	mov	sp, r7
 8006e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e58:	4770      	bx	lr
 8006e5a:	bf00      	nop
 8006e5c:	4f54300a 	.word	0x4f54300a

08006e60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	60fb      	str	r3, [r7, #12]
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	4a13      	ldr	r2, [pc, #76]	; (8006ec4 <USB_CoreReset+0x64>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d901      	bls.n	8006e7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e01b      	b.n	8006eb6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	daf2      	bge.n	8006e6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e86:	2300      	movs	r3, #0
 8006e88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	f043 0201 	orr.w	r2, r3, #1
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	60fb      	str	r3, [r7, #12]
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	4a09      	ldr	r2, [pc, #36]	; (8006ec4 <USB_CoreReset+0x64>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d901      	bls.n	8006ea8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e006      	b.n	8006eb6 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d0f0      	beq.n	8006e96 <USB_CoreReset+0x36>

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	00030d40 	.word	0x00030d40

08006ec8 <USBD_MIDI_Init>:
  // IN endpoint descriptor
  0x09, 0x05, MIDI_IN_EP, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00,
  0x05, 0x25, 0x01, 0x01, 0x03,
};

static uint8_t USBD_MIDI_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	70fb      	strb	r3, [r7, #3]
  pInstance = pdev;
 8006ed4:	4a0c      	ldr	r2, [pc, #48]	; (8006f08 <USBD_MIDI_Init+0x40>)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	6013      	str	r3, [r2, #0]
  USBD_LL_OpenEP(pdev,MIDI_IN_EP,USBD_EP_TYPE_BULK,MIDI_DATA_IN_PACKET_SIZE);
 8006eda:	2340      	movs	r3, #64	; 0x40
 8006edc:	2202      	movs	r2, #2
 8006ede:	2181      	movs	r1, #129	; 0x81
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f001 fd88 	bl	80089f6 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,MIDI_OUT_EP,USBD_EP_TYPE_BULK,MIDI_DATA_OUT_PACKET_SIZE);
 8006ee6:	2340      	movs	r3, #64	; 0x40
 8006ee8:	2202      	movs	r2, #2
 8006eea:	2101      	movs	r1, #1
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f001 fd82 	bl	80089f6 <USBD_LL_OpenEP>
  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 8006ef2:	2340      	movs	r3, #64	; 0x40
 8006ef4:	4a05      	ldr	r2, [pc, #20]	; (8006f0c <USBD_MIDI_Init+0x44>)
 8006ef6:	2101      	movs	r1, #1
 8006ef8:	6878      	ldr	r0, [r7, #4]
 8006efa:	f001 fe6b 	bl	8008bd4 <USBD_LL_PrepareReceive>
  return 0;
 8006efe:	2300      	movs	r3, #0
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3708      	adds	r7, #8
 8006f04:	46bd      	mov	sp, r7
 8006f06:	bd80      	pop	{r7, pc}
 8006f08:	2000068c 	.word	0x2000068c
 8006f0c:	200007a8 	.word	0x200007a8

08006f10 <USBD_MIDI_DeInit>:

static uint8_t USBD_MIDI_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx){
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b082      	sub	sp, #8
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	460b      	mov	r3, r1
 8006f1a:	70fb      	strb	r3, [r7, #3]
  pInstance = NULL;
 8006f1c:	4b07      	ldr	r3, [pc, #28]	; (8006f3c <USBD_MIDI_DeInit+0x2c>)
 8006f1e:	2200      	movs	r2, #0
 8006f20:	601a      	str	r2, [r3, #0]
  USBD_LL_CloseEP(pdev,MIDI_IN_EP);
 8006f22:	2181      	movs	r1, #129	; 0x81
 8006f24:	6878      	ldr	r0, [r7, #4]
 8006f26:	f001 fd8c 	bl	8008a42 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,MIDI_OUT_EP);
 8006f2a:	2101      	movs	r1, #1
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f001 fd88 	bl	8008a42 <USBD_LL_CloseEP>
  return 0;
 8006f32:	2300      	movs	r3, #0
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3708      	adds	r7, #8
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}
 8006f3c:	2000068c 	.word	0x2000068c

08006f40 <USBD_MIDI_DataIn>:

//midi data incoming to host
static uint8_t USBD_MIDI_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum){
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	460b      	mov	r3, r1
 8006f4a:	70fb      	strb	r3, [r7, #3]

  if (USB_Tx_State == 1){
 8006f4c:	4b06      	ldr	r3, [pc, #24]	; (8006f68 <USBD_MIDI_DataIn+0x28>)
 8006f4e:	781b      	ldrb	r3, [r3, #0]
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d102      	bne.n	8006f5a <USBD_MIDI_DataIn+0x1a>
    USB_Tx_State = 0;
 8006f54:	4b04      	ldr	r3, [pc, #16]	; (8006f68 <USBD_MIDI_DataIn+0x28>)
 8006f56:	2200      	movs	r2, #0
 8006f58:	701a      	strb	r2, [r3, #0]
  }

  return USBD_OK;
 8006f5a:	2300      	movs	r3, #0
}
 8006f5c:	4618      	mov	r0, r3
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr
 8006f68:	2000069c 	.word	0x2000069c

08006f6c <USBD_MIDI_DataOut>:

//midi data outcoming from host
static uint8_t  USBD_MIDI_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{      
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	460b      	mov	r3, r1
 8006f76:	70fb      	strb	r3, [r7, #3]
  uint16_t USB_Rx_Cnt;

  USBD_MIDI_ItfTypeDef *pmidi;
  pmidi = (USBD_MIDI_ItfTypeDef *)(pdev->pUserData);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8006f7e:	60fb      	str	r3, [r7, #12]

  USB_Rx_Cnt = ((PCD_HandleTypeDef*)pdev->pData)->OUT_ep[epnum].xfer_count;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	f8d3 12c4 	ldr.w	r1, [r3, #708]	; 0x2c4
 8006f86:	78fa      	ldrb	r2, [r7, #3]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	00db      	lsls	r3, r3, #3
 8006f8c:	1a9b      	subs	r3, r3, r2
 8006f8e:	009b      	lsls	r3, r3, #2
 8006f90:	440b      	add	r3, r1
 8006f92:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	817b      	strh	r3, [r7, #10]

  pmidi->pIf_MidiRx((uint8_t *)&USB_Rx_Buffer, USB_Rx_Cnt);
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	897a      	ldrh	r2, [r7, #10]
 8006fa0:	4611      	mov	r1, r2
 8006fa2:	4806      	ldr	r0, [pc, #24]	; (8006fbc <USBD_MIDI_DataOut+0x50>)
 8006fa4:	4798      	blx	r3

  USBD_LL_PrepareReceive(pdev,MIDI_OUT_EP,(uint8_t*)(USB_Rx_Buffer),MIDI_DATA_OUT_PACKET_SIZE);
 8006fa6:	2340      	movs	r3, #64	; 0x40
 8006fa8:	4a04      	ldr	r2, [pc, #16]	; (8006fbc <USBD_MIDI_DataOut+0x50>)
 8006faa:	2101      	movs	r1, #1
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f001 fe11 	bl	8008bd4 <USBD_LL_PrepareReceive>
  return USBD_OK;
 8006fb2:	2300      	movs	r3, #0
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}
 8006fbc:	200007a8 	.word	0x200007a8

08006fc0 <USBD_MIDI_SendPacket>:

void USBD_MIDI_SendPacket (){
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
  uint16_t USB_Tx_ptr;
  uint16_t USB_Tx_length;

  if(USB_Tx_State != 1){
 8006fc6:	4b30      	ldr	r3, [pc, #192]	; (8007088 <USBD_MIDI_SendPacket+0xc8>)
 8006fc8:	781b      	ldrb	r3, [r3, #0]
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d059      	beq.n	8007082 <USBD_MIDI_SendPacket+0xc2>
    if (APP_Rx_ptr_out == APP_RX_DATA_SIZE){
 8006fce:	4b2f      	ldr	r3, [pc, #188]	; (800708c <USBD_MIDI_SendPacket+0xcc>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fd6:	d102      	bne.n	8006fde <USBD_MIDI_SendPacket+0x1e>
      APP_Rx_ptr_out = 0;
 8006fd8:	4b2c      	ldr	r3, [pc, #176]	; (800708c <USBD_MIDI_SendPacket+0xcc>)
 8006fda:	2200      	movs	r2, #0
 8006fdc:	601a      	str	r2, [r3, #0]
    }

    if(APP_Rx_ptr_out == APP_Rx_ptr_in){
 8006fde:	4b2b      	ldr	r3, [pc, #172]	; (800708c <USBD_MIDI_SendPacket+0xcc>)
 8006fe0:	681a      	ldr	r2, [r3, #0]
 8006fe2:	4b2b      	ldr	r3, [pc, #172]	; (8007090 <USBD_MIDI_SendPacket+0xd0>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d103      	bne.n	8006ff2 <USBD_MIDI_SendPacket+0x32>
      USB_Tx_State = 0;
 8006fea:	4b27      	ldr	r3, [pc, #156]	; (8007088 <USBD_MIDI_SendPacket+0xc8>)
 8006fec:	2200      	movs	r2, #0
 8006fee:	701a      	strb	r2, [r3, #0]
      return;
 8006ff0:	e047      	b.n	8007082 <USBD_MIDI_SendPacket+0xc2>
    }

    if(APP_Rx_ptr_out > APP_Rx_ptr_in){
 8006ff2:	4b26      	ldr	r3, [pc, #152]	; (800708c <USBD_MIDI_SendPacket+0xcc>)
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	4b26      	ldr	r3, [pc, #152]	; (8007090 <USBD_MIDI_SendPacket+0xd0>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	429a      	cmp	r2, r3
 8006ffc:	d906      	bls.n	800700c <USBD_MIDI_SendPacket+0x4c>
      APP_Rx_length = APP_RX_DATA_SIZE - APP_Rx_ptr_out;
 8006ffe:	4b23      	ldr	r3, [pc, #140]	; (800708c <USBD_MIDI_SendPacket+0xcc>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007006:	4a23      	ldr	r2, [pc, #140]	; (8007094 <USBD_MIDI_SendPacket+0xd4>)
 8007008:	6013      	str	r3, [r2, #0]
 800700a:	e006      	b.n	800701a <USBD_MIDI_SendPacket+0x5a>
    }else{
      APP_Rx_length = APP_Rx_ptr_in - APP_Rx_ptr_out;
 800700c:	4b20      	ldr	r3, [pc, #128]	; (8007090 <USBD_MIDI_SendPacket+0xd0>)
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	4b1e      	ldr	r3, [pc, #120]	; (800708c <USBD_MIDI_SendPacket+0xcc>)
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	1ad3      	subs	r3, r2, r3
 8007016:	4a1f      	ldr	r2, [pc, #124]	; (8007094 <USBD_MIDI_SendPacket+0xd4>)
 8007018:	6013      	str	r3, [r2, #0]
    }

    if (APP_Rx_length > MIDI_DATA_IN_PACKET_SIZE){
 800701a:	4b1e      	ldr	r3, [pc, #120]	; (8007094 <USBD_MIDI_SendPacket+0xd4>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2b40      	cmp	r3, #64	; 0x40
 8007020:	d90f      	bls.n	8007042 <USBD_MIDI_SendPacket+0x82>
      USB_Tx_ptr = APP_Rx_ptr_out;
 8007022:	4b1a      	ldr	r3, [pc, #104]	; (800708c <USBD_MIDI_SendPacket+0xcc>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = MIDI_DATA_IN_PACKET_SIZE;
 8007028:	2340      	movs	r3, #64	; 0x40
 800702a:	80bb      	strh	r3, [r7, #4]
      APP_Rx_ptr_out += MIDI_DATA_IN_PACKET_SIZE;
 800702c:	4b17      	ldr	r3, [pc, #92]	; (800708c <USBD_MIDI_SendPacket+0xcc>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	3340      	adds	r3, #64	; 0x40
 8007032:	4a16      	ldr	r2, [pc, #88]	; (800708c <USBD_MIDI_SendPacket+0xcc>)
 8007034:	6013      	str	r3, [r2, #0]
      APP_Rx_length -= MIDI_DATA_IN_PACKET_SIZE;
 8007036:	4b17      	ldr	r3, [pc, #92]	; (8007094 <USBD_MIDI_SendPacket+0xd4>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	3b40      	subs	r3, #64	; 0x40
 800703c:	4a15      	ldr	r2, [pc, #84]	; (8007094 <USBD_MIDI_SendPacket+0xd4>)
 800703e:	6013      	str	r3, [r2, #0]
 8007040:	e00f      	b.n	8007062 <USBD_MIDI_SendPacket+0xa2>
    }else{
      USB_Tx_ptr = APP_Rx_ptr_out;
 8007042:	4b12      	ldr	r3, [pc, #72]	; (800708c <USBD_MIDI_SendPacket+0xcc>)
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	80fb      	strh	r3, [r7, #6]
      USB_Tx_length = APP_Rx_length;
 8007048:	4b12      	ldr	r3, [pc, #72]	; (8007094 <USBD_MIDI_SendPacket+0xd4>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	80bb      	strh	r3, [r7, #4]
      APP_Rx_ptr_out += APP_Rx_length;
 800704e:	4b0f      	ldr	r3, [pc, #60]	; (800708c <USBD_MIDI_SendPacket+0xcc>)
 8007050:	681a      	ldr	r2, [r3, #0]
 8007052:	4b10      	ldr	r3, [pc, #64]	; (8007094 <USBD_MIDI_SendPacket+0xd4>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4413      	add	r3, r2
 8007058:	4a0c      	ldr	r2, [pc, #48]	; (800708c <USBD_MIDI_SendPacket+0xcc>)
 800705a:	6013      	str	r3, [r2, #0]
      APP_Rx_length = 0;
 800705c:	4b0d      	ldr	r3, [pc, #52]	; (8007094 <USBD_MIDI_SendPacket+0xd4>)
 800705e:	2200      	movs	r2, #0
 8007060:	601a      	str	r2, [r3, #0]
    }
    USB_Tx_State = 1;
 8007062:	4b09      	ldr	r3, [pc, #36]	; (8007088 <USBD_MIDI_SendPacket+0xc8>)
 8007064:	2201      	movs	r2, #1
 8007066:	701a      	strb	r2, [r3, #0]
    while(USBD_LL_Transmit(pInstance,
 8007068:	bf00      	nop
 800706a:	4b0b      	ldr	r3, [pc, #44]	; (8007098 <USBD_MIDI_SendPacket+0xd8>)
 800706c:	6818      	ldr	r0, [r3, #0]
    		MIDI_IN_EP,(uint8_t*)&APP_Rx_Buffer[USB_Tx_ptr],USB_Tx_length) != USBD_OK);
 800706e:	88fb      	ldrh	r3, [r7, #6]
    while(USBD_LL_Transmit(pInstance,
 8007070:	4a0a      	ldr	r2, [pc, #40]	; (800709c <USBD_MIDI_SendPacket+0xdc>)
 8007072:	441a      	add	r2, r3
 8007074:	88bb      	ldrh	r3, [r7, #4]
 8007076:	2181      	movs	r1, #129	; 0x81
 8007078:	f001 fd8b 	bl	8008b92 <USBD_LL_Transmit>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d1f3      	bne.n	800706a <USBD_MIDI_SendPacket+0xaa>
  }
}
 8007082:	3708      	adds	r7, #8
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	2000069c 	.word	0x2000069c
 800708c:	20000694 	.word	0x20000694
 8007090:	20000690 	.word	0x20000690
 8007094:	20000698 	.word	0x20000698
 8007098:	2000068c 	.word	0x2000068c
 800709c:	200007e8 	.word	0x200007e8

080070a0 <USBD_MIDI_GetCfgDesc>:

static uint8_t *USBD_MIDI_GetCfgDesc (uint16_t *length){
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_MIDI_CfgDesc);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2265      	movs	r2, #101	; 0x65
 80070ac:	801a      	strh	r2, [r3, #0]
  return USBD_MIDI_CfgDesc;
 80070ae:	4b03      	ldr	r3, [pc, #12]	; (80070bc <USBD_MIDI_GetCfgDesc+0x1c>)
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr
 80070bc:	20000118 	.word	0x20000118

080070c0 <USBD_MIDI_RegisterInterface>:
//  *length = sizeof (USBD_MIDI_DeviceQualifierDesc);
//  return USBD_MIDI_DeviceQualifierDesc;
//}

uint8_t USBD_MIDI_RegisterInterface(USBD_HandleTypeDef *pdev, USBD_MIDI_ItfTypeDef *fops)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  uint8_t ret = USBD_FAIL;
 80070ca:	2303      	movs	r3, #3
 80070cc:	73fb      	strb	r3, [r7, #15]
  
  if(fops != NULL){
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d005      	beq.n	80070e0 <USBD_MIDI_RegisterInterface+0x20>
    pdev->pUserData= fops;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
    ret = USBD_OK;    
 80070dc:	2300      	movs	r3, #0
 80070de:	73fb      	strb	r3, [r7, #15]
  }
  
  return ret;
 80070e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3714      	adds	r7, #20
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr

080070ee <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80070ee:	b580      	push	{r7, lr}
 80070f0:	b086      	sub	sp, #24
 80070f2:	af00      	add	r7, sp, #0
 80070f4:	60f8      	str	r0, [r7, #12]
 80070f6:	60b9      	str	r1, [r7, #8]
 80070f8:	4613      	mov	r3, r2
 80070fa:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8007102:	2303      	movs	r3, #3
 8007104:	e025      	b.n	8007152 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800710c:	2b00      	cmp	r3, #0
 800710e:	d003      	beq.n	8007118 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	2200      	movs	r2, #0
 8007114:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800711e:	2b00      	cmp	r3, #0
 8007120:	d003      	beq.n	800712a <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2200      	movs	r2, #0
 8007126:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d003      	beq.n	8007138 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	68ba      	ldr	r2, [r7, #8]
 8007134:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	79fa      	ldrb	r2, [r7, #7]
 8007144:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	f001 fbee 	bl	8008928 <USBD_LL_Init>
 800714c:	4603      	mov	r3, r0
 800714e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007150:	7dfb      	ldrb	r3, [r7, #23]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3718      	adds	r7, #24
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b084      	sub	sp, #16
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
 8007162:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007164:	2300      	movs	r3, #0
 8007166:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d101      	bne.n	8007172 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800716e:	2303      	movs	r3, #3
 8007170:	e010      	b.n	8007194 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	683a      	ldr	r2, [r7, #0]
 8007176:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007182:	f107 020e 	add.w	r2, r7, #14
 8007186:	4610      	mov	r0, r2
 8007188:	4798      	blx	r3
 800718a:	4602      	mov	r2, r0
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
#endif /* USE_USB_FS */


  return USBD_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b082      	sub	sp, #8
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f001 fc0b 	bl	80089c0 <USBD_LL_Start>
 80071aa:	4603      	mov	r3, r0
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	370c      	adds	r7, #12
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b084      	sub	sp, #16
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	460b      	mov	r3, r1
 80071d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80071d6:	2303      	movs	r3, #3
 80071d8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d009      	beq.n	80071f8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	78fa      	ldrb	r2, [r7, #3]
 80071ee:	4611      	mov	r1, r2
 80071f0:	6878      	ldr	r0, [r7, #4]
 80071f2:	4798      	blx	r3
 80071f4:	4603      	mov	r3, r0
 80071f6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80071f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3710      	adds	r7, #16
 80071fe:	46bd      	mov	sp, r7
 8007200:	bd80      	pop	{r7, pc}

08007202 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007202:	b580      	push	{r7, lr}
 8007204:	b082      	sub	sp, #8
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
 800720a:	460b      	mov	r3, r1
 800720c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007214:	2b00      	cmp	r3, #0
 8007216:	d007      	beq.n	8007228 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	78fa      	ldrb	r2, [r7, #3]
 8007222:	4611      	mov	r1, r2
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	4798      	blx	r3
  }

  return USBD_OK;
 8007228:	2300      	movs	r3, #0
}
 800722a:	4618      	mov	r0, r3
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}

08007232 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007232:	b580      	push	{r7, lr}
 8007234:	b084      	sub	sp, #16
 8007236:	af00      	add	r7, sp, #0
 8007238:	6078      	str	r0, [r7, #4]
 800723a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007242:	6839      	ldr	r1, [r7, #0]
 8007244:	4618      	mov	r0, r3
 8007246:	f000 ff2b 	bl	80080a0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2201      	movs	r2, #1
 800724e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007258:	461a      	mov	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007266:	f003 031f 	and.w	r3, r3, #31
 800726a:	2b01      	cmp	r3, #1
 800726c:	d00e      	beq.n	800728c <USBD_LL_SetupStage+0x5a>
 800726e:	2b01      	cmp	r3, #1
 8007270:	d302      	bcc.n	8007278 <USBD_LL_SetupStage+0x46>
 8007272:	2b02      	cmp	r3, #2
 8007274:	d014      	beq.n	80072a0 <USBD_LL_SetupStage+0x6e>
 8007276:	e01d      	b.n	80072b4 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fa17 	bl	80076b4 <USBD_StdDevReq>
 8007286:	4603      	mov	r3, r0
 8007288:	73fb      	strb	r3, [r7, #15]
      break;
 800728a:	e020      	b.n	80072ce <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007292:	4619      	mov	r1, r3
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f000 fa7b 	bl	8007790 <USBD_StdItfReq>
 800729a:	4603      	mov	r3, r0
 800729c:	73fb      	strb	r3, [r7, #15]
      break;
 800729e:	e016      	b.n	80072ce <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80072a6:	4619      	mov	r1, r3
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fab7 	bl	800781c <USBD_StdEPReq>
 80072ae:	4603      	mov	r3, r0
 80072b0:	73fb      	strb	r3, [r7, #15]
      break;
 80072b2:	e00c      	b.n	80072ce <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80072ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	4619      	mov	r1, r3
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f001 fbdc 	bl	8008a80 <USBD_LL_StallEP>
 80072c8:	4603      	mov	r3, r0
 80072ca:	73fb      	strb	r3, [r7, #15]
      break;
 80072cc:	bf00      	nop
  }

  return ret;
 80072ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3710      	adds	r7, #16
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b086      	sub	sp, #24
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	460b      	mov	r3, r1
 80072e2:	607a      	str	r2, [r7, #4]
 80072e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80072e6:	7afb      	ldrb	r3, [r7, #11]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d137      	bne.n	800735c <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80072f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80072fa:	2b03      	cmp	r3, #3
 80072fc:	d14a      	bne.n	8007394 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	689a      	ldr	r2, [r3, #8]
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	429a      	cmp	r2, r3
 8007308:	d913      	bls.n	8007332 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	689a      	ldr	r2, [r3, #8]
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	1ad2      	subs	r2, r2, r3
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	68da      	ldr	r2, [r3, #12]
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	4293      	cmp	r3, r2
 8007322:	bf28      	it	cs
 8007324:	4613      	movcs	r3, r2
 8007326:	461a      	mov	r2, r3
 8007328:	6879      	ldr	r1, [r7, #4]
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f000 ff8f 	bl	800824e <USBD_CtlContinueRx>
 8007330:	e030      	b.n	8007394 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	2b00      	cmp	r3, #0
 800733c:	d00a      	beq.n	8007354 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007344:	2b03      	cmp	r3, #3
 8007346:	d105      	bne.n	8007354 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800734e:	691b      	ldr	r3, [r3, #16]
 8007350:	68f8      	ldr	r0, [r7, #12]
 8007352:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8007354:	68f8      	ldr	r0, [r7, #12]
 8007356:	f000 ff8b 	bl	8008270 <USBD_CtlSendStatus>
 800735a:	e01b      	b.n	8007394 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007362:	699b      	ldr	r3, [r3, #24]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d013      	beq.n	8007390 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800736e:	2b03      	cmp	r3, #3
 8007370:	d10e      	bne.n	8007390 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	7afa      	ldrb	r2, [r7, #11]
 800737c:	4611      	mov	r1, r2
 800737e:	68f8      	ldr	r0, [r7, #12]
 8007380:	4798      	blx	r3
 8007382:	4603      	mov	r3, r0
 8007384:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8007386:	7dfb      	ldrb	r3, [r7, #23]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d003      	beq.n	8007394 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800738c:	7dfb      	ldrb	r3, [r7, #23]
 800738e:	e002      	b.n	8007396 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007390:	2303      	movs	r3, #3
 8007392:	e000      	b.n	8007396 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8007394:	2300      	movs	r3, #0
}
 8007396:	4618      	mov	r0, r3
 8007398:	3718      	adds	r7, #24
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800739e:	b580      	push	{r7, lr}
 80073a0:	b086      	sub	sp, #24
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	60f8      	str	r0, [r7, #12]
 80073a6:	460b      	mov	r3, r1
 80073a8:	607a      	str	r2, [r7, #4]
 80073aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80073ac:	7afb      	ldrb	r3, [r7, #11]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d16a      	bne.n	8007488 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	3314      	adds	r3, #20
 80073b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80073be:	2b02      	cmp	r3, #2
 80073c0:	d155      	bne.n	800746e <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	689a      	ldr	r2, [r3, #8]
 80073c6:	693b      	ldr	r3, [r7, #16]
 80073c8:	68db      	ldr	r3, [r3, #12]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d914      	bls.n	80073f8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	689a      	ldr	r2, [r3, #8]
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	68db      	ldr	r3, [r3, #12]
 80073d6:	1ad2      	subs	r2, r2, r3
 80073d8:	693b      	ldr	r3, [r7, #16]
 80073da:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	689b      	ldr	r3, [r3, #8]
 80073e0:	461a      	mov	r2, r3
 80073e2:	6879      	ldr	r1, [r7, #4]
 80073e4:	68f8      	ldr	r0, [r7, #12]
 80073e6:	f000 ff21 	bl	800822c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80073ea:	2300      	movs	r3, #0
 80073ec:	2200      	movs	r2, #0
 80073ee:	2100      	movs	r1, #0
 80073f0:	68f8      	ldr	r0, [r7, #12]
 80073f2:	f001 fbef 	bl	8008bd4 <USBD_LL_PrepareReceive>
 80073f6:	e03a      	b.n	800746e <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	68da      	ldr	r2, [r3, #12]
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	429a      	cmp	r2, r3
 8007402:	d11c      	bne.n	800743e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	685a      	ldr	r2, [r3, #4]
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800740c:	429a      	cmp	r2, r3
 800740e:	d316      	bcc.n	800743e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	685a      	ldr	r2, [r3, #4]
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800741a:	429a      	cmp	r2, r3
 800741c:	d20f      	bcs.n	800743e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800741e:	2200      	movs	r2, #0
 8007420:	2100      	movs	r1, #0
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f000 ff02 	bl	800822c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2200      	movs	r2, #0
 800742c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007430:	2300      	movs	r3, #0
 8007432:	2200      	movs	r2, #0
 8007434:	2100      	movs	r1, #0
 8007436:	68f8      	ldr	r0, [r7, #12]
 8007438:	f001 fbcc 	bl	8008bd4 <USBD_LL_PrepareReceive>
 800743c:	e017      	b.n	800746e <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007444:	68db      	ldr	r3, [r3, #12]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d00a      	beq.n	8007460 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8007450:	2b03      	cmp	r3, #3
 8007452:	d105      	bne.n	8007460 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007460:	2180      	movs	r1, #128	; 0x80
 8007462:	68f8      	ldr	r0, [r7, #12]
 8007464:	f001 fb0c 	bl	8008a80 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f000 ff14 	bl	8008296 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007474:	2b01      	cmp	r3, #1
 8007476:	d123      	bne.n	80074c0 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f7ff fe9b 	bl	80071b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007486:	e01b      	b.n	80074c0 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800748e:	695b      	ldr	r3, [r3, #20]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d013      	beq.n	80074bc <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800749a:	2b03      	cmp	r3, #3
 800749c:	d10e      	bne.n	80074bc <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074a4:	695b      	ldr	r3, [r3, #20]
 80074a6:	7afa      	ldrb	r2, [r7, #11]
 80074a8:	4611      	mov	r1, r2
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	4798      	blx	r3
 80074ae:	4603      	mov	r3, r0
 80074b0:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80074b2:	7dfb      	ldrb	r3, [r7, #23]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d003      	beq.n	80074c0 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80074b8:	7dfb      	ldrb	r3, [r7, #23]
 80074ba:	e002      	b.n	80074c2 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80074bc:	2303      	movs	r3, #3
 80074be:	e000      	b.n	80074c2 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b082      	sub	sp, #8
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2200      	movs	r2, #0
 80074de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2200      	movs	r2, #0
 80074e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2200      	movs	r2, #0
 80074ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d009      	beq.n	800750e <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	687a      	ldr	r2, [r7, #4]
 8007504:	6852      	ldr	r2, [r2, #4]
 8007506:	b2d2      	uxtb	r2, r2
 8007508:	4611      	mov	r1, r2
 800750a:	6878      	ldr	r0, [r7, #4]
 800750c:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800750e:	2340      	movs	r3, #64	; 0x40
 8007510:	2200      	movs	r2, #0
 8007512:	2100      	movs	r1, #0
 8007514:	6878      	ldr	r0, [r7, #4]
 8007516:	f001 fa6e 	bl	80089f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2240      	movs	r2, #64	; 0x40
 8007526:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800752a:	2340      	movs	r3, #64	; 0x40
 800752c:	2200      	movs	r2, #0
 800752e:	2180      	movs	r1, #128	; 0x80
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f001 fa60 	bl	80089f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2201      	movs	r2, #1
 800753a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2240      	movs	r2, #64	; 0x40
 8007540:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
 8007554:	460b      	mov	r3, r1
 8007556:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	78fa      	ldrb	r2, [r7, #3]
 800755c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800755e:	2300      	movs	r3, #0
}
 8007560:	4618      	mov	r0, r3
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr

0800756c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2204      	movs	r2, #4
 8007584:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	370c      	adds	r7, #12
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr

08007596 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007596:	b480      	push	{r7}
 8007598:	b083      	sub	sp, #12
 800759a:	af00      	add	r7, sp, #0
 800759c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075a4:	2b04      	cmp	r3, #4
 80075a6:	d105      	bne.n	80075b4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80075c2:	b580      	push	{r7, lr}
 80075c4:	b082      	sub	sp, #8
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075d0:	2b03      	cmp	r3, #3
 80075d2:	d10b      	bne.n	80075ec <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075da:	69db      	ldr	r3, [r3, #28]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d005      	beq.n	80075ec <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075e6:	69db      	ldr	r3, [r3, #28]
 80075e8:	6878      	ldr	r0, [r7, #4]
 80075ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80075ec:	2300      	movs	r3, #0
}
 80075ee:	4618      	mov	r0, r3
 80075f0:	3708      	adds	r7, #8
 80075f2:	46bd      	mov	sp, r7
 80075f4:	bd80      	pop	{r7, pc}

080075f6 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80075f6:	b480      	push	{r7}
 80075f8:	b083      	sub	sp, #12
 80075fa:	af00      	add	r7, sp, #0
 80075fc:	6078      	str	r0, [r7, #4]
 80075fe:	460b      	mov	r3, r1
 8007600:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8007602:	2300      	movs	r3, #0
}
 8007604:	4618      	mov	r0, r3
 8007606:	370c      	adds	r7, #12
 8007608:	46bd      	mov	sp, r7
 800760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760e:	4770      	bx	lr

08007610 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007610:	b480      	push	{r7}
 8007612:	b083      	sub	sp, #12
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
 8007618:	460b      	mov	r3, r1
 800761a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800761c:	2300      	movs	r3, #0
}
 800761e:	4618      	mov	r0, r3
 8007620:	370c      	adds	r7, #12
 8007622:	46bd      	mov	sp, r7
 8007624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007628:	4770      	bx	lr

0800762a <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800762a:	b480      	push	{r7}
 800762c:	b083      	sub	sp, #12
 800762e:	af00      	add	r7, sp, #0
 8007630:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	370c      	adds	r7, #12
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2201      	movs	r2, #1
 800764c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007656:	2b00      	cmp	r3, #0
 8007658:	d009      	beq.n	800766e <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	6852      	ldr	r2, [r2, #4]
 8007666:	b2d2      	uxtb	r2, r2
 8007668:	4611      	mov	r1, r2
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	4798      	blx	r3
  }

  return USBD_OK;
 800766e:	2300      	movs	r3, #0
}
 8007670:	4618      	mov	r0, r3
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007678:	b480      	push	{r7}
 800767a:	b087      	sub	sp, #28
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	3301      	adds	r3, #1
 800768e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	781b      	ldrb	r3, [r3, #0]
 8007694:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007696:	8a3b      	ldrh	r3, [r7, #16]
 8007698:	021b      	lsls	r3, r3, #8
 800769a:	b21a      	sxth	r2, r3
 800769c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80076a0:	4313      	orrs	r3, r2
 80076a2:	b21b      	sxth	r3, r3
 80076a4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80076a6:	89fb      	ldrh	r3, [r7, #14]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	371c      	adds	r7, #28
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80076be:	2300      	movs	r3, #0
 80076c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	781b      	ldrb	r3, [r3, #0]
 80076c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80076ca:	2b20      	cmp	r3, #32
 80076cc:	d004      	beq.n	80076d8 <USBD_StdDevReq+0x24>
 80076ce:	2b40      	cmp	r3, #64	; 0x40
 80076d0:	d002      	beq.n	80076d8 <USBD_StdDevReq+0x24>
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00a      	beq.n	80076ec <USBD_StdDevReq+0x38>
 80076d6:	e050      	b.n	800777a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	6839      	ldr	r1, [r7, #0]
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	4798      	blx	r3
 80076e6:	4603      	mov	r3, r0
 80076e8:	73fb      	strb	r3, [r7, #15]
    break;
 80076ea:	e04b      	b.n	8007784 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80076ec:	683b      	ldr	r3, [r7, #0]
 80076ee:	785b      	ldrb	r3, [r3, #1]
 80076f0:	2b09      	cmp	r3, #9
 80076f2:	d83c      	bhi.n	800776e <USBD_StdDevReq+0xba>
 80076f4:	a201      	add	r2, pc, #4	; (adr r2, 80076fc <USBD_StdDevReq+0x48>)
 80076f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076fa:	bf00      	nop
 80076fc:	08007751 	.word	0x08007751
 8007700:	08007765 	.word	0x08007765
 8007704:	0800776f 	.word	0x0800776f
 8007708:	0800775b 	.word	0x0800775b
 800770c:	0800776f 	.word	0x0800776f
 8007710:	0800772f 	.word	0x0800772f
 8007714:	08007725 	.word	0x08007725
 8007718:	0800776f 	.word	0x0800776f
 800771c:	08007747 	.word	0x08007747
 8007720:	08007739 	.word	0x08007739
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 f9ce 	bl	8007ac8 <USBD_GetDescriptor>
      break;
 800772c:	e024      	b.n	8007778 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800772e:	6839      	ldr	r1, [r7, #0]
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 fb33 	bl	8007d9c <USBD_SetAddress>
      break;
 8007736:	e01f      	b.n	8007778 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8007738:	6839      	ldr	r1, [r7, #0]
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fb70 	bl	8007e20 <USBD_SetConfig>
 8007740:	4603      	mov	r3, r0
 8007742:	73fb      	strb	r3, [r7, #15]
      break;
 8007744:	e018      	b.n	8007778 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8007746:	6839      	ldr	r1, [r7, #0]
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fc0d 	bl	8007f68 <USBD_GetConfig>
      break;
 800774e:	e013      	b.n	8007778 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8007750:	6839      	ldr	r1, [r7, #0]
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fc3c 	bl	8007fd0 <USBD_GetStatus>
      break;
 8007758:	e00e      	b.n	8007778 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800775a:	6839      	ldr	r1, [r7, #0]
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 fc6a 	bl	8008036 <USBD_SetFeature>
      break;
 8007762:	e009      	b.n	8007778 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8007764:	6839      	ldr	r1, [r7, #0]
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 fc79 	bl	800805e <USBD_ClrFeature>
      break;
 800776c:	e004      	b.n	8007778 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800776e:	6839      	ldr	r1, [r7, #0]
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fccf 	bl	8008114 <USBD_CtlError>
      break;
 8007776:	bf00      	nop
    }
    break;
 8007778:	e004      	b.n	8007784 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800777a:	6839      	ldr	r1, [r7, #0]
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 fcc9 	bl	8008114 <USBD_CtlError>
    break;
 8007782:	bf00      	nop
  }

  return ret;
 8007784:	7bfb      	ldrb	r3, [r7, #15]
}
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop

08007790 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007790:	b580      	push	{r7, lr}
 8007792:	b084      	sub	sp, #16
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800779a:	2300      	movs	r3, #0
 800779c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800779e:	683b      	ldr	r3, [r7, #0]
 80077a0:	781b      	ldrb	r3, [r3, #0]
 80077a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80077a6:	2b20      	cmp	r3, #32
 80077a8:	d003      	beq.n	80077b2 <USBD_StdItfReq+0x22>
 80077aa:	2b40      	cmp	r3, #64	; 0x40
 80077ac:	d001      	beq.n	80077b2 <USBD_StdItfReq+0x22>
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d12a      	bne.n	8007808 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077b8:	3b01      	subs	r3, #1
 80077ba:	2b02      	cmp	r3, #2
 80077bc:	d81d      	bhi.n	80077fa <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	889b      	ldrh	r3, [r3, #4]
 80077c2:	b2db      	uxtb	r3, r3
 80077c4:	2b02      	cmp	r3, #2
 80077c6:	d813      	bhi.n	80077f0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80077ce:	689b      	ldr	r3, [r3, #8]
 80077d0:	6839      	ldr	r1, [r7, #0]
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	4798      	blx	r3
 80077d6:	4603      	mov	r3, r0
 80077d8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	88db      	ldrh	r3, [r3, #6]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d110      	bne.n	8007804 <USBD_StdItfReq+0x74>
 80077e2:	7bfb      	ldrb	r3, [r7, #15]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d10d      	bne.n	8007804 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 fd41 	bl	8008270 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80077ee:	e009      	b.n	8007804 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80077f0:	6839      	ldr	r1, [r7, #0]
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fc8e 	bl	8008114 <USBD_CtlError>
      break;
 80077f8:	e004      	b.n	8007804 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80077fa:	6839      	ldr	r1, [r7, #0]
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fc89 	bl	8008114 <USBD_CtlError>
      break;
 8007802:	e000      	b.n	8007806 <USBD_StdItfReq+0x76>
      break;
 8007804:	bf00      	nop
    }
    break;
 8007806:	e004      	b.n	8007812 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8007808:	6839      	ldr	r1, [r7, #0]
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fc82 	bl	8008114 <USBD_CtlError>
    break;
 8007810:	bf00      	nop
  }

  return ret;
 8007812:	7bfb      	ldrb	r3, [r7, #15]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b084      	sub	sp, #16
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007826:	2300      	movs	r3, #0
 8007828:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	889b      	ldrh	r3, [r3, #4]
 800782e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	781b      	ldrb	r3, [r3, #0]
 8007834:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007838:	2b20      	cmp	r3, #32
 800783a:	d004      	beq.n	8007846 <USBD_StdEPReq+0x2a>
 800783c:	2b40      	cmp	r3, #64	; 0x40
 800783e:	d002      	beq.n	8007846 <USBD_StdEPReq+0x2a>
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00a      	beq.n	800785a <USBD_StdEPReq+0x3e>
 8007844:	e135      	b.n	8007ab2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	6839      	ldr	r1, [r7, #0]
 8007850:	6878      	ldr	r0, [r7, #4]
 8007852:	4798      	blx	r3
 8007854:	4603      	mov	r3, r0
 8007856:	73fb      	strb	r3, [r7, #15]
    break;
 8007858:	e130      	b.n	8007abc <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	785b      	ldrb	r3, [r3, #1]
 800785e:	2b01      	cmp	r3, #1
 8007860:	d03e      	beq.n	80078e0 <USBD_StdEPReq+0xc4>
 8007862:	2b03      	cmp	r3, #3
 8007864:	d002      	beq.n	800786c <USBD_StdEPReq+0x50>
 8007866:	2b00      	cmp	r3, #0
 8007868:	d077      	beq.n	800795a <USBD_StdEPReq+0x13e>
 800786a:	e11c      	b.n	8007aa6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007872:	2b02      	cmp	r3, #2
 8007874:	d002      	beq.n	800787c <USBD_StdEPReq+0x60>
 8007876:	2b03      	cmp	r3, #3
 8007878:	d015      	beq.n	80078a6 <USBD_StdEPReq+0x8a>
 800787a:	e02b      	b.n	80078d4 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800787c:	7bbb      	ldrb	r3, [r7, #14]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d00c      	beq.n	800789c <USBD_StdEPReq+0x80>
 8007882:	7bbb      	ldrb	r3, [r7, #14]
 8007884:	2b80      	cmp	r3, #128	; 0x80
 8007886:	d009      	beq.n	800789c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8007888:	7bbb      	ldrb	r3, [r7, #14]
 800788a:	4619      	mov	r1, r3
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f001 f8f7 	bl	8008a80 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007892:	2180      	movs	r1, #128	; 0x80
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f001 f8f3 	bl	8008a80 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800789a:	e020      	b.n	80078de <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800789c:	6839      	ldr	r1, [r7, #0]
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f000 fc38 	bl	8008114 <USBD_CtlError>
        break;
 80078a4:	e01b      	b.n	80078de <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	885b      	ldrh	r3, [r3, #2]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10e      	bne.n	80078cc <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80078ae:	7bbb      	ldrb	r3, [r7, #14]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00b      	beq.n	80078cc <USBD_StdEPReq+0xb0>
 80078b4:	7bbb      	ldrb	r3, [r7, #14]
 80078b6:	2b80      	cmp	r3, #128	; 0x80
 80078b8:	d008      	beq.n	80078cc <USBD_StdEPReq+0xb0>
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	88db      	ldrh	r3, [r3, #6]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d104      	bne.n	80078cc <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80078c2:	7bbb      	ldrb	r3, [r7, #14]
 80078c4:	4619      	mov	r1, r3
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f001 f8da 	bl	8008a80 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80078cc:	6878      	ldr	r0, [r7, #4]
 80078ce:	f000 fccf 	bl	8008270 <USBD_CtlSendStatus>

        break;
 80078d2:	e004      	b.n	80078de <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80078d4:	6839      	ldr	r1, [r7, #0]
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f000 fc1c 	bl	8008114 <USBD_CtlError>
        break;
 80078dc:	bf00      	nop
      }
      break;
 80078de:	e0e7      	b.n	8007ab0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078e6:	2b02      	cmp	r3, #2
 80078e8:	d002      	beq.n	80078f0 <USBD_StdEPReq+0xd4>
 80078ea:	2b03      	cmp	r3, #3
 80078ec:	d015      	beq.n	800791a <USBD_StdEPReq+0xfe>
 80078ee:	e02d      	b.n	800794c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80078f0:	7bbb      	ldrb	r3, [r7, #14]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00c      	beq.n	8007910 <USBD_StdEPReq+0xf4>
 80078f6:	7bbb      	ldrb	r3, [r7, #14]
 80078f8:	2b80      	cmp	r3, #128	; 0x80
 80078fa:	d009      	beq.n	8007910 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80078fc:	7bbb      	ldrb	r3, [r7, #14]
 80078fe:	4619      	mov	r1, r3
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f001 f8bd 	bl	8008a80 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007906:	2180      	movs	r1, #128	; 0x80
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	f001 f8b9 	bl	8008a80 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800790e:	e023      	b.n	8007958 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8007910:	6839      	ldr	r1, [r7, #0]
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fbfe 	bl	8008114 <USBD_CtlError>
        break;
 8007918:	e01e      	b.n	8007958 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	885b      	ldrh	r3, [r3, #2]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d119      	bne.n	8007956 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8007922:	7bbb      	ldrb	r3, [r7, #14]
 8007924:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007928:	2b00      	cmp	r3, #0
 800792a:	d004      	beq.n	8007936 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800792c:	7bbb      	ldrb	r3, [r7, #14]
 800792e:	4619      	mov	r1, r3
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f001 f8c4 	bl	8008abe <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 fc9a 	bl	8008270 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	4798      	blx	r3
        }
        break;
 800794a:	e004      	b.n	8007956 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800794c:	6839      	ldr	r1, [r7, #0]
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f000 fbe0 	bl	8008114 <USBD_CtlError>
        break;
 8007954:	e000      	b.n	8007958 <USBD_StdEPReq+0x13c>
        break;
 8007956:	bf00      	nop
      }
      break;
 8007958:	e0aa      	b.n	8007ab0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007960:	2b02      	cmp	r3, #2
 8007962:	d002      	beq.n	800796a <USBD_StdEPReq+0x14e>
 8007964:	2b03      	cmp	r3, #3
 8007966:	d032      	beq.n	80079ce <USBD_StdEPReq+0x1b2>
 8007968:	e097      	b.n	8007a9a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800796a:	7bbb      	ldrb	r3, [r7, #14]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d007      	beq.n	8007980 <USBD_StdEPReq+0x164>
 8007970:	7bbb      	ldrb	r3, [r7, #14]
 8007972:	2b80      	cmp	r3, #128	; 0x80
 8007974:	d004      	beq.n	8007980 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8007976:	6839      	ldr	r1, [r7, #0]
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f000 fbcb 	bl	8008114 <USBD_CtlError>
          break;
 800797e:	e091      	b.n	8007aa4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007980:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007984:	2b00      	cmp	r3, #0
 8007986:	da0b      	bge.n	80079a0 <USBD_StdEPReq+0x184>
 8007988:	7bbb      	ldrb	r3, [r7, #14]
 800798a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800798e:	4613      	mov	r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	009b      	lsls	r3, r3, #2
 8007996:	3310      	adds	r3, #16
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	4413      	add	r3, r2
 800799c:	3304      	adds	r3, #4
 800799e:	e00b      	b.n	80079b8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80079a0:	7bbb      	ldrb	r3, [r7, #14]
 80079a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80079a6:	4613      	mov	r3, r2
 80079a8:	009b      	lsls	r3, r3, #2
 80079aa:	4413      	add	r3, r2
 80079ac:	009b      	lsls	r3, r3, #2
 80079ae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80079b2:	687a      	ldr	r2, [r7, #4]
 80079b4:	4413      	add	r3, r2
 80079b6:	3304      	adds	r3, #4
 80079b8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	2200      	movs	r2, #0
 80079be:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	2202      	movs	r2, #2
 80079c4:	4619      	mov	r1, r3
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 fc15 	bl	80081f6 <USBD_CtlSendData>
        break;
 80079cc:	e06a      	b.n	8007aa4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 80079ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	da11      	bge.n	80079fa <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80079d6:	7bbb      	ldrb	r3, [r7, #14]
 80079d8:	f003 020f 	and.w	r2, r3, #15
 80079dc:	6879      	ldr	r1, [r7, #4]
 80079de:	4613      	mov	r3, r2
 80079e0:	009b      	lsls	r3, r3, #2
 80079e2:	4413      	add	r3, r2
 80079e4:	009b      	lsls	r3, r3, #2
 80079e6:	440b      	add	r3, r1
 80079e8:	3324      	adds	r3, #36	; 0x24
 80079ea:	881b      	ldrh	r3, [r3, #0]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d117      	bne.n	8007a20 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 80079f0:	6839      	ldr	r1, [r7, #0]
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	f000 fb8e 	bl	8008114 <USBD_CtlError>
            break;
 80079f8:	e054      	b.n	8007aa4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80079fa:	7bbb      	ldrb	r3, [r7, #14]
 80079fc:	f003 020f 	and.w	r2, r3, #15
 8007a00:	6879      	ldr	r1, [r7, #4]
 8007a02:	4613      	mov	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	009b      	lsls	r3, r3, #2
 8007a0a:	440b      	add	r3, r1
 8007a0c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007a10:	881b      	ldrh	r3, [r3, #0]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d104      	bne.n	8007a20 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8007a16:	6839      	ldr	r1, [r7, #0]
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f000 fb7b 	bl	8008114 <USBD_CtlError>
            break;
 8007a1e:	e041      	b.n	8007aa4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	da0b      	bge.n	8007a40 <USBD_StdEPReq+0x224>
 8007a28:	7bbb      	ldrb	r3, [r7, #14]
 8007a2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007a2e:	4613      	mov	r3, r2
 8007a30:	009b      	lsls	r3, r3, #2
 8007a32:	4413      	add	r3, r2
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	3310      	adds	r3, #16
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	3304      	adds	r3, #4
 8007a3e:	e00b      	b.n	8007a58 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8007a40:	7bbb      	ldrb	r3, [r7, #14]
 8007a42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007a46:	4613      	mov	r3, r2
 8007a48:	009b      	lsls	r3, r3, #2
 8007a4a:	4413      	add	r3, r2
 8007a4c:	009b      	lsls	r3, r3, #2
 8007a4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	4413      	add	r3, r2
 8007a56:	3304      	adds	r3, #4
 8007a58:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007a5a:	7bbb      	ldrb	r3, [r7, #14]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d002      	beq.n	8007a66 <USBD_StdEPReq+0x24a>
 8007a60:	7bbb      	ldrb	r3, [r7, #14]
 8007a62:	2b80      	cmp	r3, #128	; 0x80
 8007a64:	d103      	bne.n	8007a6e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	601a      	str	r2, [r3, #0]
 8007a6c:	e00e      	b.n	8007a8c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007a6e:	7bbb      	ldrb	r3, [r7, #14]
 8007a70:	4619      	mov	r1, r3
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f001 f842 	bl	8008afc <USBD_LL_IsStallEP>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d003      	beq.n	8007a86 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	2201      	movs	r2, #1
 8007a82:	601a      	str	r2, [r3, #0]
 8007a84:	e002      	b.n	8007a8c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8007a86:	68bb      	ldr	r3, [r7, #8]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007a8c:	68bb      	ldr	r3, [r7, #8]
 8007a8e:	2202      	movs	r2, #2
 8007a90:	4619      	mov	r1, r3
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f000 fbaf 	bl	80081f6 <USBD_CtlSendData>
          break;
 8007a98:	e004      	b.n	8007aa4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8007a9a:	6839      	ldr	r1, [r7, #0]
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 fb39 	bl	8008114 <USBD_CtlError>
        break;
 8007aa2:	bf00      	nop
      }
      break;
 8007aa4:	e004      	b.n	8007ab0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8007aa6:	6839      	ldr	r1, [r7, #0]
 8007aa8:	6878      	ldr	r0, [r7, #4]
 8007aaa:	f000 fb33 	bl	8008114 <USBD_CtlError>
      break;
 8007aae:	bf00      	nop
    }
    break;
 8007ab0:	e004      	b.n	8007abc <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 fb2d 	bl	8008114 <USBD_CtlError>
    break;
 8007aba:	bf00      	nop
  }

  return ret;
 8007abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
	...

08007ac8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
 8007ad0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007ada:	2300      	movs	r3, #0
 8007adc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	885b      	ldrh	r3, [r3, #2]
 8007ae2:	0a1b      	lsrs	r3, r3, #8
 8007ae4:	b29b      	uxth	r3, r3
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	2b06      	cmp	r3, #6
 8007aea:	f200 8128 	bhi.w	8007d3e <USBD_GetDescriptor+0x276>
 8007aee:	a201      	add	r2, pc, #4	; (adr r2, 8007af4 <USBD_GetDescriptor+0x2c>)
 8007af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af4:	08007b11 	.word	0x08007b11
 8007af8:	08007b29 	.word	0x08007b29
 8007afc:	08007b69 	.word	0x08007b69
 8007b00:	08007d3f 	.word	0x08007d3f
 8007b04:	08007d3f 	.word	0x08007d3f
 8007b08:	08007cdf 	.word	0x08007cdf
 8007b0c:	08007d0b 	.word	0x08007d0b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	687a      	ldr	r2, [r7, #4]
 8007b1a:	7c12      	ldrb	r2, [r2, #16]
 8007b1c:	f107 0108 	add.w	r1, r7, #8
 8007b20:	4610      	mov	r0, r2
 8007b22:	4798      	blx	r3
 8007b24:	60f8      	str	r0, [r7, #12]
    break;
 8007b26:	e112      	b.n	8007d4e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	7c1b      	ldrb	r3, [r3, #16]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d10d      	bne.n	8007b4c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b38:	f107 0208 	add.w	r2, r7, #8
 8007b3c:	4610      	mov	r0, r2
 8007b3e:	4798      	blx	r3
 8007b40:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	3301      	adds	r3, #1
 8007b46:	2202      	movs	r2, #2
 8007b48:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8007b4a:	e100      	b.n	8007d4e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b54:	f107 0208 	add.w	r2, r7, #8
 8007b58:	4610      	mov	r0, r2
 8007b5a:	4798      	blx	r3
 8007b5c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	3301      	adds	r3, #1
 8007b62:	2202      	movs	r2, #2
 8007b64:	701a      	strb	r2, [r3, #0]
    break;
 8007b66:	e0f2      	b.n	8007d4e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	885b      	ldrh	r3, [r3, #2]
 8007b6c:	b2db      	uxtb	r3, r3
 8007b6e:	2b05      	cmp	r3, #5
 8007b70:	f200 80ac 	bhi.w	8007ccc <USBD_GetDescriptor+0x204>
 8007b74:	a201      	add	r2, pc, #4	; (adr r2, 8007b7c <USBD_GetDescriptor+0xb4>)
 8007b76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b7a:	bf00      	nop
 8007b7c:	08007b95 	.word	0x08007b95
 8007b80:	08007bc9 	.word	0x08007bc9
 8007b84:	08007bfd 	.word	0x08007bfd
 8007b88:	08007c31 	.word	0x08007c31
 8007b8c:	08007c65 	.word	0x08007c65
 8007b90:	08007c99 	.word	0x08007c99
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d00b      	beq.n	8007bb8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	687a      	ldr	r2, [r7, #4]
 8007baa:	7c12      	ldrb	r2, [r2, #16]
 8007bac:	f107 0108 	add.w	r1, r7, #8
 8007bb0:	4610      	mov	r0, r2
 8007bb2:	4798      	blx	r3
 8007bb4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bb6:	e091      	b.n	8007cdc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007bb8:	6839      	ldr	r1, [r7, #0]
 8007bba:	6878      	ldr	r0, [r7, #4]
 8007bbc:	f000 faaa 	bl	8008114 <USBD_CtlError>
        err++;
 8007bc0:	7afb      	ldrb	r3, [r7, #11]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	72fb      	strb	r3, [r7, #11]
      break;
 8007bc6:	e089      	b.n	8007cdc <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bce:	689b      	ldr	r3, [r3, #8]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00b      	beq.n	8007bec <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	687a      	ldr	r2, [r7, #4]
 8007bde:	7c12      	ldrb	r2, [r2, #16]
 8007be0:	f107 0108 	add.w	r1, r7, #8
 8007be4:	4610      	mov	r0, r2
 8007be6:	4798      	blx	r3
 8007be8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007bea:	e077      	b.n	8007cdc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007bec:	6839      	ldr	r1, [r7, #0]
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f000 fa90 	bl	8008114 <USBD_CtlError>
        err++;
 8007bf4:	7afb      	ldrb	r3, [r7, #11]
 8007bf6:	3301      	adds	r3, #1
 8007bf8:	72fb      	strb	r3, [r7, #11]
      break;
 8007bfa:	e06f      	b.n	8007cdc <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d00b      	beq.n	8007c20 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	687a      	ldr	r2, [r7, #4]
 8007c12:	7c12      	ldrb	r2, [r2, #16]
 8007c14:	f107 0108 	add.w	r1, r7, #8
 8007c18:	4610      	mov	r0, r2
 8007c1a:	4798      	blx	r3
 8007c1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c1e:	e05d      	b.n	8007cdc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007c20:	6839      	ldr	r1, [r7, #0]
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fa76 	bl	8008114 <USBD_CtlError>
        err++;
 8007c28:	7afb      	ldrb	r3, [r7, #11]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	72fb      	strb	r3, [r7, #11]
      break;
 8007c2e:	e055      	b.n	8007cdc <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c36:	691b      	ldr	r3, [r3, #16]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00b      	beq.n	8007c54 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	687a      	ldr	r2, [r7, #4]
 8007c46:	7c12      	ldrb	r2, [r2, #16]
 8007c48:	f107 0108 	add.w	r1, r7, #8
 8007c4c:	4610      	mov	r0, r2
 8007c4e:	4798      	blx	r3
 8007c50:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c52:	e043      	b.n	8007cdc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007c54:	6839      	ldr	r1, [r7, #0]
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fa5c 	bl	8008114 <USBD_CtlError>
        err++;
 8007c5c:	7afb      	ldrb	r3, [r7, #11]
 8007c5e:	3301      	adds	r3, #1
 8007c60:	72fb      	strb	r3, [r7, #11]
      break;
 8007c62:	e03b      	b.n	8007cdc <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c6a:	695b      	ldr	r3, [r3, #20]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d00b      	beq.n	8007c88 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c76:	695b      	ldr	r3, [r3, #20]
 8007c78:	687a      	ldr	r2, [r7, #4]
 8007c7a:	7c12      	ldrb	r2, [r2, #16]
 8007c7c:	f107 0108 	add.w	r1, r7, #8
 8007c80:	4610      	mov	r0, r2
 8007c82:	4798      	blx	r3
 8007c84:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007c86:	e029      	b.n	8007cdc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007c88:	6839      	ldr	r1, [r7, #0]
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fa42 	bl	8008114 <USBD_CtlError>
        err++;
 8007c90:	7afb      	ldrb	r3, [r7, #11]
 8007c92:	3301      	adds	r3, #1
 8007c94:	72fb      	strb	r3, [r7, #11]
      break;
 8007c96:	e021      	b.n	8007cdc <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d00b      	beq.n	8007cbc <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007caa:	699b      	ldr	r3, [r3, #24]
 8007cac:	687a      	ldr	r2, [r7, #4]
 8007cae:	7c12      	ldrb	r2, [r2, #16]
 8007cb0:	f107 0108 	add.w	r1, r7, #8
 8007cb4:	4610      	mov	r0, r2
 8007cb6:	4798      	blx	r3
 8007cb8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007cba:	e00f      	b.n	8007cdc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8007cbc:	6839      	ldr	r1, [r7, #0]
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 fa28 	bl	8008114 <USBD_CtlError>
        err++;
 8007cc4:	7afb      	ldrb	r3, [r7, #11]
 8007cc6:	3301      	adds	r3, #1
 8007cc8:	72fb      	strb	r3, [r7, #11]
      break;
 8007cca:	e007      	b.n	8007cdc <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8007ccc:	6839      	ldr	r1, [r7, #0]
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 fa20 	bl	8008114 <USBD_CtlError>
      err++;
 8007cd4:	7afb      	ldrb	r3, [r7, #11]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8007cda:	bf00      	nop
    }
    break;
 8007cdc:	e037      	b.n	8007d4e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	7c1b      	ldrb	r3, [r3, #16]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d109      	bne.n	8007cfa <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cee:	f107 0208 	add.w	r2, r7, #8
 8007cf2:	4610      	mov	r0, r2
 8007cf4:	4798      	blx	r3
 8007cf6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007cf8:	e029      	b.n	8007d4e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007cfa:	6839      	ldr	r1, [r7, #0]
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f000 fa09 	bl	8008114 <USBD_CtlError>
      err++;
 8007d02:	7afb      	ldrb	r3, [r7, #11]
 8007d04:	3301      	adds	r3, #1
 8007d06:	72fb      	strb	r3, [r7, #11]
    break;
 8007d08:	e021      	b.n	8007d4e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	7c1b      	ldrb	r3, [r3, #16]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10d      	bne.n	8007d2e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d1a:	f107 0208 	add.w	r2, r7, #8
 8007d1e:	4610      	mov	r0, r2
 8007d20:	4798      	blx	r3
 8007d22:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	3301      	adds	r3, #1
 8007d28:	2207      	movs	r2, #7
 8007d2a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8007d2c:	e00f      	b.n	8007d4e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8007d2e:	6839      	ldr	r1, [r7, #0]
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 f9ef 	bl	8008114 <USBD_CtlError>
      err++;
 8007d36:	7afb      	ldrb	r3, [r7, #11]
 8007d38:	3301      	adds	r3, #1
 8007d3a:	72fb      	strb	r3, [r7, #11]
    break;
 8007d3c:	e007      	b.n	8007d4e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8007d3e:	6839      	ldr	r1, [r7, #0]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f9e7 	bl	8008114 <USBD_CtlError>
    err++;
 8007d46:	7afb      	ldrb	r3, [r7, #11]
 8007d48:	3301      	adds	r3, #1
 8007d4a:	72fb      	strb	r3, [r7, #11]
    break;
 8007d4c:	bf00      	nop
  }

  if (err != 0U)
 8007d4e:	7afb      	ldrb	r3, [r7, #11]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d11e      	bne.n	8007d92 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	88db      	ldrh	r3, [r3, #6]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d016      	beq.n	8007d8a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8007d5c:	893b      	ldrh	r3, [r7, #8]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d00e      	beq.n	8007d80 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	88da      	ldrh	r2, [r3, #6]
 8007d66:	893b      	ldrh	r3, [r7, #8]
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	bf28      	it	cs
 8007d6c:	4613      	movcs	r3, r2
 8007d6e:	b29b      	uxth	r3, r3
 8007d70:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8007d72:	893b      	ldrh	r3, [r7, #8]
 8007d74:	461a      	mov	r2, r3
 8007d76:	68f9      	ldr	r1, [r7, #12]
 8007d78:	6878      	ldr	r0, [r7, #4]
 8007d7a:	f000 fa3c 	bl	80081f6 <USBD_CtlSendData>
 8007d7e:	e009      	b.n	8007d94 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8007d80:	6839      	ldr	r1, [r7, #0]
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f9c6 	bl	8008114 <USBD_CtlError>
 8007d88:	e004      	b.n	8007d94 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fa70 	bl	8008270 <USBD_CtlSendStatus>
 8007d90:	e000      	b.n	8007d94 <USBD_GetDescriptor+0x2cc>
    return;
 8007d92:	bf00      	nop
    }
  }
}
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}
 8007d9a:	bf00      	nop

08007d9c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007da6:	683b      	ldr	r3, [r7, #0]
 8007da8:	889b      	ldrh	r3, [r3, #4]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d130      	bne.n	8007e10 <USBD_SetAddress+0x74>
 8007dae:	683b      	ldr	r3, [r7, #0]
 8007db0:	88db      	ldrh	r3, [r3, #6]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d12c      	bne.n	8007e10 <USBD_SetAddress+0x74>
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	885b      	ldrh	r3, [r3, #2]
 8007dba:	2b7f      	cmp	r3, #127	; 0x7f
 8007dbc:	d828      	bhi.n	8007e10 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	885b      	ldrh	r3, [r3, #2]
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007dc8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007dd0:	2b03      	cmp	r3, #3
 8007dd2:	d104      	bne.n	8007dde <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8007dd4:	6839      	ldr	r1, [r7, #0]
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	f000 f99c 	bl	8008114 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ddc:	e01c      	b.n	8007e18 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	7bfa      	ldrb	r2, [r7, #15]
 8007de2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007de6:	7bfb      	ldrb	r3, [r7, #15]
 8007de8:	4619      	mov	r1, r3
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 feb2 	bl	8008b54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007df0:	6878      	ldr	r0, [r7, #4]
 8007df2:	f000 fa3d 	bl	8008270 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007df6:	7bfb      	ldrb	r3, [r7, #15]
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d004      	beq.n	8007e06 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2202      	movs	r2, #2
 8007e00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e04:	e008      	b.n	8007e18 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e0e:	e003      	b.n	8007e18 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007e10:	6839      	ldr	r1, [r7, #0]
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f000 f97e 	bl	8008114 <USBD_CtlError>
  }
}
 8007e18:	bf00      	nop
 8007e1a:	3710      	adds	r7, #16
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	885b      	ldrh	r3, [r3, #2]
 8007e32:	b2da      	uxtb	r2, r3
 8007e34:	4b4b      	ldr	r3, [pc, #300]	; (8007f64 <USBD_SetConfig+0x144>)
 8007e36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007e38:	4b4a      	ldr	r3, [pc, #296]	; (8007f64 <USBD_SetConfig+0x144>)
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d905      	bls.n	8007e4c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007e40:	6839      	ldr	r1, [r7, #0]
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f000 f966 	bl	8008114 <USBD_CtlError>
    return USBD_FAIL;
 8007e48:	2303      	movs	r3, #3
 8007e4a:	e087      	b.n	8007f5c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d002      	beq.n	8007e5c <USBD_SetConfig+0x3c>
 8007e56:	2b03      	cmp	r3, #3
 8007e58:	d025      	beq.n	8007ea6 <USBD_SetConfig+0x86>
 8007e5a:	e071      	b.n	8007f40 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8007e5c:	4b41      	ldr	r3, [pc, #260]	; (8007f64 <USBD_SetConfig+0x144>)
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d01c      	beq.n	8007e9e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8007e64:	4b3f      	ldr	r3, [pc, #252]	; (8007f64 <USBD_SetConfig+0x144>)
 8007e66:	781b      	ldrb	r3, [r3, #0]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007e6e:	4b3d      	ldr	r3, [pc, #244]	; (8007f64 <USBD_SetConfig+0x144>)
 8007e70:	781b      	ldrb	r3, [r3, #0]
 8007e72:	4619      	mov	r1, r3
 8007e74:	6878      	ldr	r0, [r7, #4]
 8007e76:	f7ff f9a8 	bl	80071ca <USBD_SetClassConfig>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8007e7e:	7bfb      	ldrb	r3, [r7, #15]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d004      	beq.n	8007e8e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8007e84:	6839      	ldr	r1, [r7, #0]
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 f944 	bl	8008114 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007e8c:	e065      	b.n	8007f5a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f9ee 	bl	8008270 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2203      	movs	r2, #3
 8007e98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007e9c:	e05d      	b.n	8007f5a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007e9e:	6878      	ldr	r0, [r7, #4]
 8007ea0:	f000 f9e6 	bl	8008270 <USBD_CtlSendStatus>
    break;
 8007ea4:	e059      	b.n	8007f5a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8007ea6:	4b2f      	ldr	r3, [pc, #188]	; (8007f64 <USBD_SetConfig+0x144>)
 8007ea8:	781b      	ldrb	r3, [r3, #0]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d112      	bne.n	8007ed4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	2202      	movs	r2, #2
 8007eb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8007eb6:	4b2b      	ldr	r3, [pc, #172]	; (8007f64 <USBD_SetConfig+0x144>)
 8007eb8:	781b      	ldrb	r3, [r3, #0]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007ec0:	4b28      	ldr	r3, [pc, #160]	; (8007f64 <USBD_SetConfig+0x144>)
 8007ec2:	781b      	ldrb	r3, [r3, #0]
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f7ff f99b 	bl	8007202 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8007ecc:	6878      	ldr	r0, [r7, #4]
 8007ece:	f000 f9cf 	bl	8008270 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8007ed2:	e042      	b.n	8007f5a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8007ed4:	4b23      	ldr	r3, [pc, #140]	; (8007f64 <USBD_SetConfig+0x144>)
 8007ed6:	781b      	ldrb	r3, [r3, #0]
 8007ed8:	461a      	mov	r2, r3
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d02a      	beq.n	8007f38 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	4619      	mov	r1, r3
 8007eea:	6878      	ldr	r0, [r7, #4]
 8007eec:	f7ff f989 	bl	8007202 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8007ef0:	4b1c      	ldr	r3, [pc, #112]	; (8007f64 <USBD_SetConfig+0x144>)
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8007efa:	4b1a      	ldr	r3, [pc, #104]	; (8007f64 <USBD_SetConfig+0x144>)
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	4619      	mov	r1, r3
 8007f00:	6878      	ldr	r0, [r7, #4]
 8007f02:	f7ff f962 	bl	80071ca <USBD_SetClassConfig>
 8007f06:	4603      	mov	r3, r0
 8007f08:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 8007f0a:	7bfb      	ldrb	r3, [r7, #15]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d00f      	beq.n	8007f30 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8007f10:	6839      	ldr	r1, [r7, #0]
 8007f12:	6878      	ldr	r0, [r7, #4]
 8007f14:	f000 f8fe 	bl	8008114 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	685b      	ldr	r3, [r3, #4]
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	4619      	mov	r1, r3
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f7ff f96e 	bl	8007202 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2202      	movs	r2, #2
 8007f2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8007f2e:	e014      	b.n	8007f5a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f000 f99d 	bl	8008270 <USBD_CtlSendStatus>
    break;
 8007f36:	e010      	b.n	8007f5a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 f999 	bl	8008270 <USBD_CtlSendStatus>
    break;
 8007f3e:	e00c      	b.n	8007f5a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8007f40:	6839      	ldr	r1, [r7, #0]
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f000 f8e6 	bl	8008114 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007f48:	4b06      	ldr	r3, [pc, #24]	; (8007f64 <USBD_SetConfig+0x144>)
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	6878      	ldr	r0, [r7, #4]
 8007f50:	f7ff f957 	bl	8007202 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8007f54:	2303      	movs	r3, #3
 8007f56:	73fb      	strb	r3, [r7, #15]
    break;
 8007f58:	bf00      	nop
  }

  return ret;
 8007f5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}
 8007f64:	2000069d 	.word	0x2000069d

08007f68 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	88db      	ldrh	r3, [r3, #6]
 8007f76:	2b01      	cmp	r3, #1
 8007f78:	d004      	beq.n	8007f84 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007f7a:	6839      	ldr	r1, [r7, #0]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f000 f8c9 	bl	8008114 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8007f82:	e021      	b.n	8007fc8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	db17      	blt.n	8007fbe <USBD_GetConfig+0x56>
 8007f8e:	2b02      	cmp	r3, #2
 8007f90:	dd02      	ble.n	8007f98 <USBD_GetConfig+0x30>
 8007f92:	2b03      	cmp	r3, #3
 8007f94:	d00b      	beq.n	8007fae <USBD_GetConfig+0x46>
 8007f96:	e012      	b.n	8007fbe <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	3308      	adds	r3, #8
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	4619      	mov	r1, r3
 8007fa6:	6878      	ldr	r0, [r7, #4]
 8007fa8:	f000 f925 	bl	80081f6 <USBD_CtlSendData>
      break;
 8007fac:	e00c      	b.n	8007fc8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	3304      	adds	r3, #4
 8007fb2:	2201      	movs	r2, #1
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f91d 	bl	80081f6 <USBD_CtlSendData>
      break;
 8007fbc:	e004      	b.n	8007fc8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 8007fbe:	6839      	ldr	r1, [r7, #0]
 8007fc0:	6878      	ldr	r0, [r7, #4]
 8007fc2:	f000 f8a7 	bl	8008114 <USBD_CtlError>
      break;
 8007fc6:	bf00      	nop
}
 8007fc8:	bf00      	nop
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b082      	sub	sp, #8
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fe0:	3b01      	subs	r3, #1
 8007fe2:	2b02      	cmp	r3, #2
 8007fe4:	d81e      	bhi.n	8008024 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	88db      	ldrh	r3, [r3, #6]
 8007fea:	2b02      	cmp	r3, #2
 8007fec:	d004      	beq.n	8007ff8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 8007fee:	6839      	ldr	r1, [r7, #0]
 8007ff0:	6878      	ldr	r0, [r7, #4]
 8007ff2:	f000 f88f 	bl	8008114 <USBD_CtlError>
      break;
 8007ff6:	e01a      	b.n	800802e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008004:	2b00      	cmp	r3, #0
 8008006:	d005      	beq.n	8008014 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	68db      	ldr	r3, [r3, #12]
 800800c:	f043 0202 	orr.w	r2, r3, #2
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	330c      	adds	r3, #12
 8008018:	2202      	movs	r2, #2
 800801a:	4619      	mov	r1, r3
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 f8ea 	bl	80081f6 <USBD_CtlSendData>
    break;
 8008022:	e004      	b.n	800802e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8008024:	6839      	ldr	r1, [r7, #0]
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f874 	bl	8008114 <USBD_CtlError>
    break;
 800802c:	bf00      	nop
  }
}
 800802e:	bf00      	nop
 8008030:	3708      	adds	r7, #8
 8008032:	46bd      	mov	sp, r7
 8008034:	bd80      	pop	{r7, pc}

08008036 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b082      	sub	sp, #8
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	885b      	ldrh	r3, [r3, #2]
 8008044:	2b01      	cmp	r3, #1
 8008046:	d106      	bne.n	8008056 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f90d 	bl	8008270 <USBD_CtlSendStatus>
  }
}
 8008056:	bf00      	nop
 8008058:	3708      	adds	r7, #8
 800805a:	46bd      	mov	sp, r7
 800805c:	bd80      	pop	{r7, pc}

0800805e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800805e:	b580      	push	{r7, lr}
 8008060:	b082      	sub	sp, #8
 8008062:	af00      	add	r7, sp, #0
 8008064:	6078      	str	r0, [r7, #4]
 8008066:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800806e:	3b01      	subs	r3, #1
 8008070:	2b02      	cmp	r3, #2
 8008072:	d80b      	bhi.n	800808c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	885b      	ldrh	r3, [r3, #2]
 8008078:	2b01      	cmp	r3, #1
 800807a:	d10c      	bne.n	8008096 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2200      	movs	r2, #0
 8008080:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f000 f8f3 	bl	8008270 <USBD_CtlSendStatus>
      }
      break;
 800808a:	e004      	b.n	8008096 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800808c:	6839      	ldr	r1, [r7, #0]
 800808e:	6878      	ldr	r0, [r7, #4]
 8008090:	f000 f840 	bl	8008114 <USBD_CtlError>
      break;
 8008094:	e000      	b.n	8008098 <USBD_ClrFeature+0x3a>
      break;
 8008096:	bf00      	nop
  }
}
 8008098:	bf00      	nop
 800809a:	3708      	adds	r7, #8
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}

080080a0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	6078      	str	r0, [r7, #4]
 80080a8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	781a      	ldrb	r2, [r3, #0]
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	3301      	adds	r3, #1
 80080ba:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	781a      	ldrb	r2, [r3, #0]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	3301      	adds	r3, #1
 80080c8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80080ca:	68f8      	ldr	r0, [r7, #12]
 80080cc:	f7ff fad4 	bl	8007678 <SWAPBYTE>
 80080d0:	4603      	mov	r3, r0
 80080d2:	461a      	mov	r2, r3
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	3301      	adds	r3, #1
 80080dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	3301      	adds	r3, #1
 80080e2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80080e4:	68f8      	ldr	r0, [r7, #12]
 80080e6:	f7ff fac7 	bl	8007678 <SWAPBYTE>
 80080ea:	4603      	mov	r3, r0
 80080ec:	461a      	mov	r2, r3
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	3301      	adds	r3, #1
 80080f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	3301      	adds	r3, #1
 80080fc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80080fe:	68f8      	ldr	r0, [r7, #12]
 8008100:	f7ff faba 	bl	8007678 <SWAPBYTE>
 8008104:	4603      	mov	r3, r0
 8008106:	461a      	mov	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	80da      	strh	r2, [r3, #6]
}
 800810c:	bf00      	nop
 800810e:	3710      	adds	r7, #16
 8008110:	46bd      	mov	sp, r7
 8008112:	bd80      	pop	{r7, pc}

08008114 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800811e:	2180      	movs	r1, #128	; 0x80
 8008120:	6878      	ldr	r0, [r7, #4]
 8008122:	f000 fcad 	bl	8008a80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008126:	2100      	movs	r1, #0
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 fca9 	bl	8008a80 <USBD_LL_StallEP>
}
 800812e:	bf00      	nop
 8008130:	3708      	adds	r7, #8
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}

08008136 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008136:	b580      	push	{r7, lr}
 8008138:	b086      	sub	sp, #24
 800813a:	af00      	add	r7, sp, #0
 800813c:	60f8      	str	r0, [r7, #12]
 800813e:	60b9      	str	r1, [r7, #8]
 8008140:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008142:	2300      	movs	r3, #0
 8008144:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d036      	beq.n	80081ba <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008150:	6938      	ldr	r0, [r7, #16]
 8008152:	f000 f836 	bl	80081c2 <USBD_GetLen>
 8008156:	4603      	mov	r3, r0
 8008158:	3301      	adds	r3, #1
 800815a:	b29b      	uxth	r3, r3
 800815c:	005b      	lsls	r3, r3, #1
 800815e:	b29a      	uxth	r2, r3
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008164:	7dfb      	ldrb	r3, [r7, #23]
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	4413      	add	r3, r2
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	7812      	ldrb	r2, [r2, #0]
 800816e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008170:	7dfb      	ldrb	r3, [r7, #23]
 8008172:	3301      	adds	r3, #1
 8008174:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008176:	7dfb      	ldrb	r3, [r7, #23]
 8008178:	68ba      	ldr	r2, [r7, #8]
 800817a:	4413      	add	r3, r2
 800817c:	2203      	movs	r2, #3
 800817e:	701a      	strb	r2, [r3, #0]
  idx++;
 8008180:	7dfb      	ldrb	r3, [r7, #23]
 8008182:	3301      	adds	r3, #1
 8008184:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008186:	e013      	b.n	80081b0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008188:	7dfb      	ldrb	r3, [r7, #23]
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	4413      	add	r3, r2
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	7812      	ldrb	r2, [r2, #0]
 8008192:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008194:	693b      	ldr	r3, [r7, #16]
 8008196:	3301      	adds	r3, #1
 8008198:	613b      	str	r3, [r7, #16]
    idx++;
 800819a:	7dfb      	ldrb	r3, [r7, #23]
 800819c:	3301      	adds	r3, #1
 800819e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80081a0:	7dfb      	ldrb	r3, [r7, #23]
 80081a2:	68ba      	ldr	r2, [r7, #8]
 80081a4:	4413      	add	r3, r2
 80081a6:	2200      	movs	r2, #0
 80081a8:	701a      	strb	r2, [r3, #0]
    idx++;
 80081aa:	7dfb      	ldrb	r3, [r7, #23]
 80081ac:	3301      	adds	r3, #1
 80081ae:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80081b0:	693b      	ldr	r3, [r7, #16]
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d1e7      	bne.n	8008188 <USBD_GetString+0x52>
 80081b8:	e000      	b.n	80081bc <USBD_GetString+0x86>
    return;
 80081ba:	bf00      	nop
  }
}
 80081bc:	3718      	adds	r7, #24
 80081be:	46bd      	mov	sp, r7
 80081c0:	bd80      	pop	{r7, pc}

080081c2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80081c2:	b480      	push	{r7}
 80081c4:	b085      	sub	sp, #20
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80081ca:	2300      	movs	r3, #0
 80081cc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80081d2:	e005      	b.n	80081e0 <USBD_GetLen+0x1e>
  {
    len++;
 80081d4:	7bfb      	ldrb	r3, [r7, #15]
 80081d6:	3301      	adds	r3, #1
 80081d8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	3301      	adds	r3, #1
 80081de:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	781b      	ldrb	r3, [r3, #0]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d1f5      	bne.n	80081d4 <USBD_GetLen+0x12>
  }

  return len;
 80081e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3714      	adds	r7, #20
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr

080081f6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80081f6:	b580      	push	{r7, lr}
 80081f8:	b084      	sub	sp, #16
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	60f8      	str	r0, [r7, #12]
 80081fe:	60b9      	str	r1, [r7, #8]
 8008200:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2202      	movs	r2, #2
 8008206:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	687a      	ldr	r2, [r7, #4]
 800820e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	687a      	ldr	r2, [r7, #4]
 8008214:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	68ba      	ldr	r2, [r7, #8]
 800821a:	2100      	movs	r1, #0
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f000 fcb8 	bl	8008b92 <USBD_LL_Transmit>

  return USBD_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3710      	adds	r7, #16
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}

0800822c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	68ba      	ldr	r2, [r7, #8]
 800823c:	2100      	movs	r1, #0
 800823e:	68f8      	ldr	r0, [r7, #12]
 8008240:	f000 fca7 	bl	8008b92 <USBD_LL_Transmit>

  return USBD_OK;
 8008244:	2300      	movs	r3, #0
}
 8008246:	4618      	mov	r0, r3
 8008248:	3710      	adds	r7, #16
 800824a:	46bd      	mov	sp, r7
 800824c:	bd80      	pop	{r7, pc}

0800824e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800824e:	b580      	push	{r7, lr}
 8008250:	b084      	sub	sp, #16
 8008252:	af00      	add	r7, sp, #0
 8008254:	60f8      	str	r0, [r7, #12]
 8008256:	60b9      	str	r1, [r7, #8]
 8008258:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	2100      	movs	r1, #0
 8008260:	68f8      	ldr	r0, [r7, #12]
 8008262:	f000 fcb7 	bl	8008bd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3710      	adds	r7, #16
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}

08008270 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b082      	sub	sp, #8
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2204      	movs	r2, #4
 800827c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008280:	2300      	movs	r3, #0
 8008282:	2200      	movs	r2, #0
 8008284:	2100      	movs	r1, #0
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fc83 	bl	8008b92 <USBD_LL_Transmit>

  return USBD_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b082      	sub	sp, #8
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2205      	movs	r2, #5
 80082a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80082a6:	2300      	movs	r3, #0
 80082a8:	2200      	movs	r2, #0
 80082aa:	2100      	movs	r1, #0
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fc91 	bl	8008bd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80082b2:	2300      	movs	r3, #0
}
 80082b4:	4618      	mov	r0, r3
 80082b6:	3708      	adds	r7, #8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}

080082bc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80082c0:	2200      	movs	r2, #0
 80082c2:	490b      	ldr	r1, [pc, #44]	; (80082f0 <MX_USB_DEVICE_Init+0x34>)
 80082c4:	480b      	ldr	r0, [pc, #44]	; (80082f4 <MX_USB_DEVICE_Init+0x38>)
 80082c6:	f7fe ff12 	bl	80070ee <USBD_Init>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80082d0:	f7f9 fb9e 	bl	8001a10 <Error_Handler>
//  {
//    Error_Handler();
//  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
	USBD_RegisterClass(&hUsbDeviceFS, &USBD_MIDI);
 80082d4:	4908      	ldr	r1, [pc, #32]	; (80082f8 <MX_USB_DEVICE_Init+0x3c>)
 80082d6:	4807      	ldr	r0, [pc, #28]	; (80082f4 <MX_USB_DEVICE_Init+0x38>)
 80082d8:	f7fe ff3f 	bl	800715a <USBD_RegisterClass>

	USBD_MIDI_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 80082dc:	4907      	ldr	r1, [pc, #28]	; (80082fc <MX_USB_DEVICE_Init+0x40>)
 80082de:	4805      	ldr	r0, [pc, #20]	; (80082f4 <MX_USB_DEVICE_Init+0x38>)
 80082e0:	f7fe feee 	bl	80070c0 <USBD_MIDI_RegisterInterface>

	USBD_Start(&hUsbDeviceFS);
 80082e4:	4803      	ldr	r0, [pc, #12]	; (80082f4 <MX_USB_DEVICE_Init+0x38>)
 80082e6:	f7fe ff59 	bl	800719c <USBD_Start>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80082ea:	bf00      	nop
 80082ec:	bd80      	pop	{r7, pc}
 80082ee:	bf00      	nop
 80082f0:	20000180 	.word	0x20000180
 80082f4:	200008e8 	.word	0x200008e8
 80082f8:	200000e0 	.word	0x200000e0
 80082fc:	200001e0 	.word	0x200001e0

08008300 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008300:	b480      	push	{r7}
 8008302:	b083      	sub	sp, #12
 8008304:	af00      	add	r7, sp, #0
 8008306:	4603      	mov	r3, r0
 8008308:	6039      	str	r1, [r7, #0]
 800830a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	2212      	movs	r2, #18
 8008310:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008312:	4b03      	ldr	r3, [pc, #12]	; (8008320 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008314:	4618      	mov	r0, r3
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr
 8008320:	2000019c 	.word	0x2000019c

08008324 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	4603      	mov	r3, r0
 800832c:	6039      	str	r1, [r7, #0]
 800832e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	2204      	movs	r2, #4
 8008334:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008336:	4b03      	ldr	r3, [pc, #12]	; (8008344 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008338:	4618      	mov	r0, r3
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr
 8008344:	200001b0 	.word	0x200001b0

08008348 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b082      	sub	sp, #8
 800834c:	af00      	add	r7, sp, #0
 800834e:	4603      	mov	r3, r0
 8008350:	6039      	str	r1, [r7, #0]
 8008352:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008354:	79fb      	ldrb	r3, [r7, #7]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d105      	bne.n	8008366 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800835a:	683a      	ldr	r2, [r7, #0]
 800835c:	4907      	ldr	r1, [pc, #28]	; (800837c <USBD_FS_ProductStrDescriptor+0x34>)
 800835e:	4808      	ldr	r0, [pc, #32]	; (8008380 <USBD_FS_ProductStrDescriptor+0x38>)
 8008360:	f7ff fee9 	bl	8008136 <USBD_GetString>
 8008364:	e004      	b.n	8008370 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008366:	683a      	ldr	r2, [r7, #0]
 8008368:	4904      	ldr	r1, [pc, #16]	; (800837c <USBD_FS_ProductStrDescriptor+0x34>)
 800836a:	4805      	ldr	r0, [pc, #20]	; (8008380 <USBD_FS_ProductStrDescriptor+0x38>)
 800836c:	f7ff fee3 	bl	8008136 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008370:	4b02      	ldr	r3, [pc, #8]	; (800837c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008372:	4618      	mov	r0, r3
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop
 800837c:	20000bb8 	.word	0x20000bb8
 8008380:	08008e8c 	.word	0x08008e8c

08008384 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b082      	sub	sp, #8
 8008388:	af00      	add	r7, sp, #0
 800838a:	4603      	mov	r3, r0
 800838c:	6039      	str	r1, [r7, #0]
 800838e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008390:	683a      	ldr	r2, [r7, #0]
 8008392:	4904      	ldr	r1, [pc, #16]	; (80083a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008394:	4804      	ldr	r0, [pc, #16]	; (80083a8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008396:	f7ff fece 	bl	8008136 <USBD_GetString>
  return USBD_StrDesc;
 800839a:	4b02      	ldr	r3, [pc, #8]	; (80083a4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800839c:	4618      	mov	r0, r3
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}
 80083a4:	20000bb8 	.word	0x20000bb8
 80083a8:	08008e8c 	.word	0x08008e8c

080083ac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	4603      	mov	r3, r0
 80083b4:	6039      	str	r1, [r7, #0]
 80083b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	221a      	movs	r2, #26
 80083bc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80083be:	f000 f843 	bl	8008448 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80083c2:	4b02      	ldr	r3, [pc, #8]	; (80083cc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3708      	adds	r7, #8
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	200001b4 	.word	0x200001b4

080083d0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80083d0:	b580      	push	{r7, lr}
 80083d2:	b082      	sub	sp, #8
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	4603      	mov	r3, r0
 80083d8:	6039      	str	r1, [r7, #0]
 80083da:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80083dc:	79fb      	ldrb	r3, [r7, #7]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d105      	bne.n	80083ee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80083e2:	683a      	ldr	r2, [r7, #0]
 80083e4:	4907      	ldr	r1, [pc, #28]	; (8008404 <USBD_FS_ConfigStrDescriptor+0x34>)
 80083e6:	4808      	ldr	r0, [pc, #32]	; (8008408 <USBD_FS_ConfigStrDescriptor+0x38>)
 80083e8:	f7ff fea5 	bl	8008136 <USBD_GetString>
 80083ec:	e004      	b.n	80083f8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80083ee:	683a      	ldr	r2, [r7, #0]
 80083f0:	4904      	ldr	r1, [pc, #16]	; (8008404 <USBD_FS_ConfigStrDescriptor+0x34>)
 80083f2:	4805      	ldr	r0, [pc, #20]	; (8008408 <USBD_FS_ConfigStrDescriptor+0x38>)
 80083f4:	f7ff fe9f 	bl	8008136 <USBD_GetString>
  }
  return USBD_StrDesc;
 80083f8:	4b02      	ldr	r3, [pc, #8]	; (8008404 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	20000bb8 	.word	0x20000bb8
 8008408:	08008ea0 	.word	0x08008ea0

0800840c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b082      	sub	sp, #8
 8008410:	af00      	add	r7, sp, #0
 8008412:	4603      	mov	r3, r0
 8008414:	6039      	str	r1, [r7, #0]
 8008416:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008418:	79fb      	ldrb	r3, [r7, #7]
 800841a:	2b00      	cmp	r3, #0
 800841c:	d105      	bne.n	800842a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800841e:	683a      	ldr	r2, [r7, #0]
 8008420:	4907      	ldr	r1, [pc, #28]	; (8008440 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008422:	4808      	ldr	r0, [pc, #32]	; (8008444 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008424:	f7ff fe87 	bl	8008136 <USBD_GetString>
 8008428:	e004      	b.n	8008434 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800842a:	683a      	ldr	r2, [r7, #0]
 800842c:	4904      	ldr	r1, [pc, #16]	; (8008440 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800842e:	4805      	ldr	r0, [pc, #20]	; (8008444 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008430:	f7ff fe81 	bl	8008136 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008434:	4b02      	ldr	r3, [pc, #8]	; (8008440 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008436:	4618      	mov	r0, r3
 8008438:	3708      	adds	r7, #8
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}
 800843e:	bf00      	nop
 8008440:	20000bb8 	.word	0x20000bb8
 8008444:	08008eb8 	.word	0x08008eb8

08008448 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b084      	sub	sp, #16
 800844c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800844e:	4b0f      	ldr	r3, [pc, #60]	; (800848c <Get_SerialNum+0x44>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008454:	4b0e      	ldr	r3, [pc, #56]	; (8008490 <Get_SerialNum+0x48>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800845a:	4b0e      	ldr	r3, [pc, #56]	; (8008494 <Get_SerialNum+0x4c>)
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	4413      	add	r3, r2
 8008466:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d009      	beq.n	8008482 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800846e:	2208      	movs	r2, #8
 8008470:	4909      	ldr	r1, [pc, #36]	; (8008498 <Get_SerialNum+0x50>)
 8008472:	68f8      	ldr	r0, [r7, #12]
 8008474:	f000 f814 	bl	80084a0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008478:	2204      	movs	r2, #4
 800847a:	4908      	ldr	r1, [pc, #32]	; (800849c <Get_SerialNum+0x54>)
 800847c:	68b8      	ldr	r0, [r7, #8]
 800847e:	f000 f80f 	bl	80084a0 <IntToUnicode>
  }
}
 8008482:	bf00      	nop
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}
 800848a:	bf00      	nop
 800848c:	1fff7a10 	.word	0x1fff7a10
 8008490:	1fff7a14 	.word	0x1fff7a14
 8008494:	1fff7a18 	.word	0x1fff7a18
 8008498:	200001b6 	.word	0x200001b6
 800849c:	200001c6 	.word	0x200001c6

080084a0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b087      	sub	sp, #28
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	4613      	mov	r3, r2
 80084ac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80084ae:	2300      	movs	r3, #0
 80084b0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80084b2:	2300      	movs	r3, #0
 80084b4:	75fb      	strb	r3, [r7, #23]
 80084b6:	e027      	b.n	8008508 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	0f1b      	lsrs	r3, r3, #28
 80084bc:	2b09      	cmp	r3, #9
 80084be:	d80b      	bhi.n	80084d8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	0f1b      	lsrs	r3, r3, #28
 80084c4:	b2da      	uxtb	r2, r3
 80084c6:	7dfb      	ldrb	r3, [r7, #23]
 80084c8:	005b      	lsls	r3, r3, #1
 80084ca:	4619      	mov	r1, r3
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	440b      	add	r3, r1
 80084d0:	3230      	adds	r2, #48	; 0x30
 80084d2:	b2d2      	uxtb	r2, r2
 80084d4:	701a      	strb	r2, [r3, #0]
 80084d6:	e00a      	b.n	80084ee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	0f1b      	lsrs	r3, r3, #28
 80084dc:	b2da      	uxtb	r2, r3
 80084de:	7dfb      	ldrb	r3, [r7, #23]
 80084e0:	005b      	lsls	r3, r3, #1
 80084e2:	4619      	mov	r1, r3
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	440b      	add	r3, r1
 80084e8:	3237      	adds	r2, #55	; 0x37
 80084ea:	b2d2      	uxtb	r2, r2
 80084ec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	011b      	lsls	r3, r3, #4
 80084f2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80084f4:	7dfb      	ldrb	r3, [r7, #23]
 80084f6:	005b      	lsls	r3, r3, #1
 80084f8:	3301      	adds	r3, #1
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	4413      	add	r3, r2
 80084fe:	2200      	movs	r2, #0
 8008500:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008502:	7dfb      	ldrb	r3, [r7, #23]
 8008504:	3301      	adds	r3, #1
 8008506:	75fb      	strb	r3, [r7, #23]
 8008508:	7dfa      	ldrb	r2, [r7, #23]
 800850a:	79fb      	ldrb	r3, [r7, #7]
 800850c:	429a      	cmp	r2, r3
 800850e:	d3d3      	bcc.n	80084b8 <IntToUnicode+0x18>
  }
}
 8008510:	bf00      	nop
 8008512:	371c      	adds	r7, #28
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <MIDI_DataRx>:
};

uint8_t flag_sendMidi = 0;

uint16_t MIDI_DataRx(uint8_t *msg, uint16_t length)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b084      	sub	sp, #16
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	460b      	mov	r3, r1
 8008526:	807b      	strh	r3, [r7, #2]
  //uint8_t chan = msg[0] & 0x0F;
  uint8_t msgtype = msg[0] & 0xF0;
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	781b      	ldrb	r3, [r3, #0]
 800852c:	f023 030f 	bic.w	r3, r3, #15
 8008530:	73fb      	strb	r3, [r7, #15]
  uint8_t b1 =  msg[2];
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	789b      	ldrb	r3, [r3, #2]
 8008536:	73bb      	strb	r3, [r7, #14]
  uint8_t b2 =  msg[3];
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	78db      	ldrb	r3, [r3, #3]
 800853c:	737b      	strb	r3, [r7, #13]
 // uint16_t b = ((b2 & 0x7F) << 7) | (b1 & 0x7F);
 
  switch (msgtype)
 800853e:	7bfb      	ldrb	r3, [r7, #15]
 8008540:	2bb0      	cmp	r3, #176	; 0xb0
 8008542:	d01c      	beq.n	800857e <MIDI_DataRx+0x62>
 8008544:	2bb0      	cmp	r3, #176	; 0xb0
 8008546:	dc05      	bgt.n	8008554 <MIDI_DataRx+0x38>
 8008548:	2b90      	cmp	r3, #144	; 0x90
 800854a:	d01a      	beq.n	8008582 <MIDI_DataRx+0x66>
 800854c:	2ba0      	cmp	r3, #160	; 0xa0
 800854e:	d01a      	beq.n	8008586 <MIDI_DataRx+0x6a>
 8008550:	2b80      	cmp	r3, #128	; 0x80
	  //key = b1;
	  //velocity = b2;
	  //notepos = key - 8 + transpose;
	  //stop_note(notepos);
	  //HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7); //blink LED
	  break;
 8008552:	e01f      	b.n	8008594 <MIDI_DataRx+0x78>
  switch (msgtype)
 8008554:	2bd0      	cmp	r3, #208	; 0xd0
 8008556:	d018      	beq.n	800858a <MIDI_DataRx+0x6e>
 8008558:	2bd0      	cmp	r3, #208	; 0xd0
 800855a:	dc01      	bgt.n	8008560 <MIDI_DataRx+0x44>
 800855c:	2bc0      	cmp	r3, #192	; 0xc0
							break;
					}*/
	  break;
  case 0xC0:
	  //data = b1;
	  break;
 800855e:	e019      	b.n	8008594 <MIDI_DataRx+0x78>
  switch (msgtype)
 8008560:	2be0      	cmp	r3, #224	; 0xe0
 8008562:	d014      	beq.n	800858e <MIDI_DataRx+0x72>
 8008564:	2bf0      	cmp	r3, #240	; 0xf0
 8008566:	d115      	bne.n	8008594 <MIDI_DataRx+0x78>
  case 0xE0:
	  //data = b2;
	  //		bend = data;
	  break;
  case 0xF0: {
	  if((b1 == 0x7E) && (b2 == 0x7F)) {
 8008568:	7bbb      	ldrb	r3, [r7, #14]
 800856a:	2b7e      	cmp	r3, #126	; 0x7e
 800856c:	d111      	bne.n	8008592 <MIDI_DataRx+0x76>
 800856e:	7b7b      	ldrb	r3, [r7, #13]
 8008570:	2b7f      	cmp	r3, #127	; 0x7f
 8008572:	d10e      	bne.n	8008592 <MIDI_DataRx+0x76>
		  MIDI_DataTx(SysexID, 15);
 8008574:	210f      	movs	r1, #15
 8008576:	480a      	ldr	r0, [pc, #40]	; (80085a0 <MIDI_DataRx+0x84>)
 8008578:	f000 f814 	bl	80085a4 <MIDI_DataTx>
	  }
	  break;
 800857c:	e009      	b.n	8008592 <MIDI_DataRx+0x76>
	  break;
 800857e:	bf00      	nop
 8008580:	e008      	b.n	8008594 <MIDI_DataRx+0x78>
	  break;
 8008582:	bf00      	nop
 8008584:	e006      	b.n	8008594 <MIDI_DataRx+0x78>
	  break;
 8008586:	bf00      	nop
 8008588:	e004      	b.n	8008594 <MIDI_DataRx+0x78>
	  break;
 800858a:	bf00      	nop
 800858c:	e002      	b.n	8008594 <MIDI_DataRx+0x78>
	  break;
 800858e:	bf00      	nop
 8008590:	e000      	b.n	8008594 <MIDI_DataRx+0x78>
	  break;
 8008592:	bf00      	nop
  }
  }
  return 0;
 8008594:	2300      	movs	r3, #0
}
 8008596:	4618      	mov	r0, r3
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	200001d0 	.word	0x200001d0

080085a4 <MIDI_DataTx>:

uint16_t MIDI_DataTx(uint8_t *msg, uint16_t length)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
 80085ac:	460b      	mov	r3, r1
 80085ae:	807b      	strh	r3, [r7, #2]
  uint32_t i = 0;
 80085b0:	2300      	movs	r3, #0
 80085b2:	60fb      	str	r3, [r7, #12]
  while (i < length) {
 80085b4:	e017      	b.n	80085e6 <MIDI_DataTx+0x42>
    APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	441a      	add	r2, r3
 80085bc:	4b0f      	ldr	r3, [pc, #60]	; (80085fc <MIDI_DataTx+0x58>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	7811      	ldrb	r1, [r2, #0]
 80085c2:	4a0f      	ldr	r2, [pc, #60]	; (8008600 <MIDI_DataTx+0x5c>)
 80085c4:	54d1      	strb	r1, [r2, r3]
    APP_Rx_ptr_in++;
 80085c6:	4b0d      	ldr	r3, [pc, #52]	; (80085fc <MIDI_DataTx+0x58>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	3301      	adds	r3, #1
 80085cc:	4a0b      	ldr	r2, [pc, #44]	; (80085fc <MIDI_DataTx+0x58>)
 80085ce:	6013      	str	r3, [r2, #0]
    i++;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	3301      	adds	r3, #1
 80085d4:	60fb      	str	r3, [r7, #12]
    if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 80085d6:	4b09      	ldr	r3, [pc, #36]	; (80085fc <MIDI_DataTx+0x58>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085de:	d102      	bne.n	80085e6 <MIDI_DataTx+0x42>
      APP_Rx_ptr_in = 0;
 80085e0:	4b06      	ldr	r3, [pc, #24]	; (80085fc <MIDI_DataTx+0x58>)
 80085e2:	2200      	movs	r2, #0
 80085e4:	601a      	str	r2, [r3, #0]
  while (i < length) {
 80085e6:	887b      	ldrh	r3, [r7, #2]
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d3e3      	bcc.n	80085b6 <MIDI_DataTx+0x12>
    }
  }
  USBD_MIDI_SendPacket();
 80085ee:	f7fe fce7 	bl	8006fc0 <USBD_MIDI_SendPacket>
  return USBD_OK;
 80085f2:	2300      	movs	r3, #0
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3710      	adds	r7, #16
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}
 80085fc:	20000690 	.word	0x20000690
 8008600:	200007e8 	.word	0x200007e8

08008604 <MIDI_SendBuffer>:

uint16_t MIDI_SendBuffer(uint8_t *msg, uint16_t length){
 8008604:	b480      	push	{r7}
 8008606:	b085      	sub	sp, #20
 8008608:	af00      	add	r7, sp, #0
 800860a:	6078      	str	r0, [r7, #4]
 800860c:	460b      	mov	r3, r1
 800860e:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8008610:	2300      	movs	r3, #0
 8008612:	60fb      	str	r3, [r7, #12]
	while (i < length) {
 8008614:	e017      	b.n	8008646 <MIDI_SendBuffer+0x42>
		APP_Rx_Buffer[APP_Rx_ptr_in] = *(msg + i);
 8008616:	687a      	ldr	r2, [r7, #4]
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	441a      	add	r2, r3
 800861c:	4b11      	ldr	r3, [pc, #68]	; (8008664 <MIDI_SendBuffer+0x60>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	7811      	ldrb	r1, [r2, #0]
 8008622:	4a11      	ldr	r2, [pc, #68]	; (8008668 <MIDI_SendBuffer+0x64>)
 8008624:	54d1      	strb	r1, [r2, r3]
		APP_Rx_ptr_in++;
 8008626:	4b0f      	ldr	r3, [pc, #60]	; (8008664 <MIDI_SendBuffer+0x60>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	3301      	adds	r3, #1
 800862c:	4a0d      	ldr	r2, [pc, #52]	; (8008664 <MIDI_SendBuffer+0x60>)
 800862e:	6013      	str	r3, [r2, #0]
		i++;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	3301      	adds	r3, #1
 8008634:	60fb      	str	r3, [r7, #12]
		if (APP_Rx_ptr_in == APP_RX_DATA_SIZE) {
 8008636:	4b0b      	ldr	r3, [pc, #44]	; (8008664 <MIDI_SendBuffer+0x60>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800863e:	d102      	bne.n	8008646 <MIDI_SendBuffer+0x42>
			APP_Rx_ptr_in = 0;
 8008640:	4b08      	ldr	r3, [pc, #32]	; (8008664 <MIDI_SendBuffer+0x60>)
 8008642:	2200      	movs	r2, #0
 8008644:	601a      	str	r2, [r3, #0]
	while (i < length) {
 8008646:	887b      	ldrh	r3, [r7, #2]
 8008648:	68fa      	ldr	r2, [r7, #12]
 800864a:	429a      	cmp	r2, r3
 800864c:	d3e3      	bcc.n	8008616 <MIDI_SendBuffer+0x12>
		}
	}
	flag_sendMidi = 1;
 800864e:	4b07      	ldr	r3, [pc, #28]	; (800866c <MIDI_SendBuffer+0x68>)
 8008650:	2201      	movs	r2, #1
 8008652:	701a      	strb	r2, [r3, #0]
  return USBD_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3714      	adds	r7, #20
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop
 8008664:	20000690 	.word	0x20000690
 8008668:	200007e8 	.word	0x200007e8
 800866c:	2000069e 	.word	0x2000069e

08008670 <MIDI_SendCheck>:

void MIDI_SendCheck(void){
 8008670:	b580      	push	{r7, lr}
 8008672:	af00      	add	r7, sp, #0
	if (flag_sendMidi != 0){
 8008674:	4b07      	ldr	r3, [pc, #28]	; (8008694 <MIDI_SendCheck+0x24>)
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d008      	beq.n	800868e <MIDI_SendCheck+0x1e>
		if (USB_Tx_State == 0){
 800867c:	4b06      	ldr	r3, [pc, #24]	; (8008698 <MIDI_SendCheck+0x28>)
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d104      	bne.n	800868e <MIDI_SendCheck+0x1e>
			USBD_MIDI_SendPacket();
 8008684:	f7fe fc9c 	bl	8006fc0 <USBD_MIDI_SendPacket>
			flag_sendMidi = 0;
 8008688:	4b02      	ldr	r3, [pc, #8]	; (8008694 <MIDI_SendCheck+0x24>)
 800868a:	2200      	movs	r2, #0
 800868c:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800868e:	bf00      	nop
 8008690:	bd80      	pop	{r7, pc}
 8008692:	bf00      	nop
 8008694:	2000069e 	.word	0x2000069e
 8008698:	2000069c 	.word	0x2000069c

0800869c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b08a      	sub	sp, #40	; 0x28
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086a4:	f107 0314 	add.w	r3, r7, #20
 80086a8:	2200      	movs	r2, #0
 80086aa:	601a      	str	r2, [r3, #0]
 80086ac:	605a      	str	r2, [r3, #4]
 80086ae:	609a      	str	r2, [r3, #8]
 80086b0:	60da      	str	r2, [r3, #12]
 80086b2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086bc:	d13a      	bne.n	8008734 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086be:	2300      	movs	r3, #0
 80086c0:	613b      	str	r3, [r7, #16]
 80086c2:	4b1e      	ldr	r3, [pc, #120]	; (800873c <HAL_PCD_MspInit+0xa0>)
 80086c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086c6:	4a1d      	ldr	r2, [pc, #116]	; (800873c <HAL_PCD_MspInit+0xa0>)
 80086c8:	f043 0301 	orr.w	r3, r3, #1
 80086cc:	6313      	str	r3, [r2, #48]	; 0x30
 80086ce:	4b1b      	ldr	r3, [pc, #108]	; (800873c <HAL_PCD_MspInit+0xa0>)
 80086d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086d2:	f003 0301 	and.w	r3, r3, #1
 80086d6:	613b      	str	r3, [r7, #16]
 80086d8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80086da:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80086de:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086e0:	2302      	movs	r3, #2
 80086e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086e4:	2300      	movs	r3, #0
 80086e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086e8:	2303      	movs	r3, #3
 80086ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80086ec:	230a      	movs	r3, #10
 80086ee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086f0:	f107 0314 	add.w	r3, r7, #20
 80086f4:	4619      	mov	r1, r3
 80086f6:	4812      	ldr	r0, [pc, #72]	; (8008740 <HAL_PCD_MspInit+0xa4>)
 80086f8:	f7f9 ff6e 	bl	80025d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80086fc:	4b0f      	ldr	r3, [pc, #60]	; (800873c <HAL_PCD_MspInit+0xa0>)
 80086fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008700:	4a0e      	ldr	r2, [pc, #56]	; (800873c <HAL_PCD_MspInit+0xa0>)
 8008702:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008706:	6353      	str	r3, [r2, #52]	; 0x34
 8008708:	2300      	movs	r3, #0
 800870a:	60fb      	str	r3, [r7, #12]
 800870c:	4b0b      	ldr	r3, [pc, #44]	; (800873c <HAL_PCD_MspInit+0xa0>)
 800870e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008710:	4a0a      	ldr	r2, [pc, #40]	; (800873c <HAL_PCD_MspInit+0xa0>)
 8008712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008716:	6453      	str	r3, [r2, #68]	; 0x44
 8008718:	4b08      	ldr	r3, [pc, #32]	; (800873c <HAL_PCD_MspInit+0xa0>)
 800871a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800871c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008720:	60fb      	str	r3, [r7, #12]
 8008722:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008724:	2200      	movs	r2, #0
 8008726:	2100      	movs	r1, #0
 8008728:	2043      	movs	r0, #67	; 0x43
 800872a:	f7f9 feb0 	bl	800248e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800872e:	2043      	movs	r0, #67	; 0x43
 8008730:	f7f9 fec9 	bl	80024c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008734:	bf00      	nop
 8008736:	3728      	adds	r7, #40	; 0x28
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}
 800873c:	40023800 	.word	0x40023800
 8008740:	40020000 	.word	0x40020000

08008744 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008758:	4619      	mov	r1, r3
 800875a:	4610      	mov	r0, r2
 800875c:	f7fe fd69 	bl	8007232 <USBD_LL_SetupStage>
}
 8008760:	bf00      	nop
 8008762:	3708      	adds	r7, #8
 8008764:	46bd      	mov	sp, r7
 8008766:	bd80      	pop	{r7, pc}

08008768 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b082      	sub	sp, #8
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
 8008770:	460b      	mov	r3, r1
 8008772:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800877a:	78fa      	ldrb	r2, [r7, #3]
 800877c:	6879      	ldr	r1, [r7, #4]
 800877e:	4613      	mov	r3, r2
 8008780:	00db      	lsls	r3, r3, #3
 8008782:	1a9b      	subs	r3, r3, r2
 8008784:	009b      	lsls	r3, r3, #2
 8008786:	440b      	add	r3, r1
 8008788:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	78fb      	ldrb	r3, [r7, #3]
 8008790:	4619      	mov	r1, r3
 8008792:	f7fe fda1 	bl	80072d8 <USBD_LL_DataOutStage>
}
 8008796:	bf00      	nop
 8008798:	3708      	adds	r7, #8
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b082      	sub	sp, #8
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
 80087a6:	460b      	mov	r3, r1
 80087a8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80087b0:	78fa      	ldrb	r2, [r7, #3]
 80087b2:	6879      	ldr	r1, [r7, #4]
 80087b4:	4613      	mov	r3, r2
 80087b6:	00db      	lsls	r3, r3, #3
 80087b8:	1a9b      	subs	r3, r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	440b      	add	r3, r1
 80087be:	3348      	adds	r3, #72	; 0x48
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	78fb      	ldrb	r3, [r7, #3]
 80087c4:	4619      	mov	r1, r3
 80087c6:	f7fe fdea 	bl	800739e <USBD_LL_DataInStage>
}
 80087ca:	bf00      	nop
 80087cc:	3708      	adds	r7, #8
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}

080087d2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087d2:	b580      	push	{r7, lr}
 80087d4:	b082      	sub	sp, #8
 80087d6:	af00      	add	r7, sp, #0
 80087d8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7fe feee 	bl	80075c2 <USBD_LL_SOF>
}
 80087e6:	bf00      	nop
 80087e8:	3708      	adds	r7, #8
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}

080087ee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087ee:	b580      	push	{r7, lr}
 80087f0:	b084      	sub	sp, #16
 80087f2:	af00      	add	r7, sp, #0
 80087f4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80087f6:	2301      	movs	r3, #1
 80087f8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d102      	bne.n	8008808 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8008802:	2300      	movs	r3, #0
 8008804:	73fb      	strb	r3, [r7, #15]
 8008806:	e008      	b.n	800881a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	2b02      	cmp	r3, #2
 800880e:	d102      	bne.n	8008816 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8008810:	2301      	movs	r3, #1
 8008812:	73fb      	strb	r3, [r7, #15]
 8008814:	e001      	b.n	800881a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8008816:	f7f9 f8fb 	bl	8001a10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008820:	7bfa      	ldrb	r2, [r7, #15]
 8008822:	4611      	mov	r1, r2
 8008824:	4618      	mov	r0, r3
 8008826:	f7fe fe91 	bl	800754c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8008830:	4618      	mov	r0, r3
 8008832:	f7fe fe4a 	bl	80074ca <USBD_LL_Reset>
}
 8008836:	bf00      	nop
 8008838:	3710      	adds	r7, #16
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
	...

08008840 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b082      	sub	sp, #8
 8008844:	af00      	add	r7, sp, #0
 8008846:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800884e:	4618      	mov	r0, r3
 8008850:	f7fe fe8c 	bl	800756c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	687a      	ldr	r2, [r7, #4]
 8008860:	6812      	ldr	r2, [r2, #0]
 8008862:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008866:	f043 0301 	orr.w	r3, r3, #1
 800886a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6a1b      	ldr	r3, [r3, #32]
 8008870:	2b00      	cmp	r3, #0
 8008872:	d005      	beq.n	8008880 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008874:	4b04      	ldr	r3, [pc, #16]	; (8008888 <HAL_PCD_SuspendCallback+0x48>)
 8008876:	691b      	ldr	r3, [r3, #16]
 8008878:	4a03      	ldr	r2, [pc, #12]	; (8008888 <HAL_PCD_SuspendCallback+0x48>)
 800887a:	f043 0306 	orr.w	r3, r3, #6
 800887e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008880:	bf00      	nop
 8008882:	3708      	adds	r7, #8
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}
 8008888:	e000ed00 	.word	0xe000ed00

0800888c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b082      	sub	sp, #8
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800889a:	4618      	mov	r0, r3
 800889c:	f7fe fe7b 	bl	8007596 <USBD_LL_Resume>
}
 80088a0:	bf00      	nop
 80088a2:	3708      	adds	r7, #8
 80088a4:	46bd      	mov	sp, r7
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b082      	sub	sp, #8
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	460b      	mov	r3, r1
 80088b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088ba:	78fa      	ldrb	r2, [r7, #3]
 80088bc:	4611      	mov	r1, r2
 80088be:	4618      	mov	r0, r3
 80088c0:	f7fe fea6 	bl	8007610 <USBD_LL_IsoOUTIncomplete>
}
 80088c4:	bf00      	nop
 80088c6:	3708      	adds	r7, #8
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
 80088d4:	460b      	mov	r3, r1
 80088d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088de:	78fa      	ldrb	r2, [r7, #3]
 80088e0:	4611      	mov	r1, r2
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fe fe87 	bl	80075f6 <USBD_LL_IsoINIncomplete>
}
 80088e8:	bf00      	nop
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80088fe:	4618      	mov	r0, r3
 8008900:	f7fe fe93 	bl	800762a <USBD_LL_DevConnected>
}
 8008904:	bf00      	nop
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}

0800890c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800890c:	b580      	push	{r7, lr}
 800890e:	b082      	sub	sp, #8
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800891a:	4618      	mov	r0, r3
 800891c:	f7fe fe90 	bl	8007640 <USBD_LL_DevDisconnected>
}
 8008920:	bf00      	nop
 8008922:	3708      	adds	r7, #8
 8008924:	46bd      	mov	sp, r7
 8008926:	bd80      	pop	{r7, pc}

08008928 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b082      	sub	sp, #8
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	781b      	ldrb	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d13c      	bne.n	80089b2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008938:	4a20      	ldr	r2, [pc, #128]	; (80089bc <USBD_LL_Init+0x94>)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	4a1e      	ldr	r2, [pc, #120]	; (80089bc <USBD_LL_Init+0x94>)
 8008944:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008948:	4b1c      	ldr	r3, [pc, #112]	; (80089bc <USBD_LL_Init+0x94>)
 800894a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800894e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008950:	4b1a      	ldr	r3, [pc, #104]	; (80089bc <USBD_LL_Init+0x94>)
 8008952:	2204      	movs	r2, #4
 8008954:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008956:	4b19      	ldr	r3, [pc, #100]	; (80089bc <USBD_LL_Init+0x94>)
 8008958:	2202      	movs	r2, #2
 800895a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800895c:	4b17      	ldr	r3, [pc, #92]	; (80089bc <USBD_LL_Init+0x94>)
 800895e:	2200      	movs	r2, #0
 8008960:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008962:	4b16      	ldr	r3, [pc, #88]	; (80089bc <USBD_LL_Init+0x94>)
 8008964:	2202      	movs	r2, #2
 8008966:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008968:	4b14      	ldr	r3, [pc, #80]	; (80089bc <USBD_LL_Init+0x94>)
 800896a:	2200      	movs	r2, #0
 800896c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800896e:	4b13      	ldr	r3, [pc, #76]	; (80089bc <USBD_LL_Init+0x94>)
 8008970:	2200      	movs	r2, #0
 8008972:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008974:	4b11      	ldr	r3, [pc, #68]	; (80089bc <USBD_LL_Init+0x94>)
 8008976:	2200      	movs	r2, #0
 8008978:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800897a:	4b10      	ldr	r3, [pc, #64]	; (80089bc <USBD_LL_Init+0x94>)
 800897c:	2200      	movs	r2, #0
 800897e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008980:	4b0e      	ldr	r3, [pc, #56]	; (80089bc <USBD_LL_Init+0x94>)
 8008982:	2200      	movs	r2, #0
 8008984:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008986:	480d      	ldr	r0, [pc, #52]	; (80089bc <USBD_LL_Init+0x94>)
 8008988:	f7fa fdd0 	bl	800352c <HAL_PCD_Init>
 800898c:	4603      	mov	r3, r0
 800898e:	2b00      	cmp	r3, #0
 8008990:	d001      	beq.n	8008996 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008992:	f7f9 f83d 	bl	8001a10 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008996:	2180      	movs	r1, #128	; 0x80
 8008998:	4808      	ldr	r0, [pc, #32]	; (80089bc <USBD_LL_Init+0x94>)
 800899a:	f7fb ff16 	bl	80047ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800899e:	2240      	movs	r2, #64	; 0x40
 80089a0:	2100      	movs	r1, #0
 80089a2:	4806      	ldr	r0, [pc, #24]	; (80089bc <USBD_LL_Init+0x94>)
 80089a4:	f7fb feca 	bl	800473c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80089a8:	2280      	movs	r2, #128	; 0x80
 80089aa:	2101      	movs	r1, #1
 80089ac:	4803      	ldr	r0, [pc, #12]	; (80089bc <USBD_LL_Init+0x94>)
 80089ae:	f7fb fec5 	bl	800473c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80089b2:	2300      	movs	r3, #0
}
 80089b4:	4618      	mov	r0, r3
 80089b6:	3708      	adds	r7, #8
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	20000db8 	.word	0x20000db8

080089c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80089c8:	2300      	movs	r3, #0
 80089ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80089cc:	2300      	movs	r3, #0
 80089ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fa fec5 	bl	8003766 <HAL_PCD_Start>
 80089dc:	4603      	mov	r3, r0
 80089de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80089e0:	7bfb      	ldrb	r3, [r7, #15]
 80089e2:	4618      	mov	r0, r3
 80089e4:	f000 f918 	bl	8008c18 <USBD_Get_USB_Status>
 80089e8:	4603      	mov	r3, r0
 80089ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80089ee:	4618      	mov	r0, r3
 80089f0:	3710      	adds	r7, #16
 80089f2:	46bd      	mov	sp, r7
 80089f4:	bd80      	pop	{r7, pc}

080089f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80089f6:	b580      	push	{r7, lr}
 80089f8:	b084      	sub	sp, #16
 80089fa:	af00      	add	r7, sp, #0
 80089fc:	6078      	str	r0, [r7, #4]
 80089fe:	4608      	mov	r0, r1
 8008a00:	4611      	mov	r1, r2
 8008a02:	461a      	mov	r2, r3
 8008a04:	4603      	mov	r3, r0
 8008a06:	70fb      	strb	r3, [r7, #3]
 8008a08:	460b      	mov	r3, r1
 8008a0a:	70bb      	strb	r3, [r7, #2]
 8008a0c:	4613      	mov	r3, r2
 8008a0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a10:	2300      	movs	r3, #0
 8008a12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a14:	2300      	movs	r3, #0
 8008a16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008a1e:	78bb      	ldrb	r3, [r7, #2]
 8008a20:	883a      	ldrh	r2, [r7, #0]
 8008a22:	78f9      	ldrb	r1, [r7, #3]
 8008a24:	f7fb faa9 	bl	8003f7a <HAL_PCD_EP_Open>
 8008a28:	4603      	mov	r3, r0
 8008a2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a2c:	7bfb      	ldrb	r3, [r7, #15]
 8008a2e:	4618      	mov	r0, r3
 8008a30:	f000 f8f2 	bl	8008c18 <USBD_Get_USB_Status>
 8008a34:	4603      	mov	r3, r0
 8008a36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a38:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3710      	adds	r7, #16
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}

08008a42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a42:	b580      	push	{r7, lr}
 8008a44:	b084      	sub	sp, #16
 8008a46:	af00      	add	r7, sp, #0
 8008a48:	6078      	str	r0, [r7, #4]
 8008a4a:	460b      	mov	r3, r1
 8008a4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a52:	2300      	movs	r3, #0
 8008a54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a5c:	78fa      	ldrb	r2, [r7, #3]
 8008a5e:	4611      	mov	r1, r2
 8008a60:	4618      	mov	r0, r3
 8008a62:	f7fb faf2 	bl	800404a <HAL_PCD_EP_Close>
 8008a66:	4603      	mov	r3, r0
 8008a68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a6a:	7bfb      	ldrb	r3, [r7, #15]
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f000 f8d3 	bl	8008c18 <USBD_Get_USB_Status>
 8008a72:	4603      	mov	r3, r0
 8008a74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a76:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	3710      	adds	r7, #16
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	bd80      	pop	{r7, pc}

08008a80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	460b      	mov	r3, r1
 8008a8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a90:	2300      	movs	r3, #0
 8008a92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008a9a:	78fa      	ldrb	r2, [r7, #3]
 8008a9c:	4611      	mov	r1, r2
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f7fb fbb2 	bl	8004208 <HAL_PCD_EP_SetStall>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008aa8:	7bfb      	ldrb	r3, [r7, #15]
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f000 f8b4 	bl	8008c18 <USBD_Get_USB_Status>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ab4:	7bbb      	ldrb	r3, [r7, #14]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}

08008abe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008abe:	b580      	push	{r7, lr}
 8008ac0:	b084      	sub	sp, #16
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	6078      	str	r0, [r7, #4]
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aca:	2300      	movs	r3, #0
 8008acc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008ad8:	78fa      	ldrb	r2, [r7, #3]
 8008ada:	4611      	mov	r1, r2
 8008adc:	4618      	mov	r0, r3
 8008ade:	f7fb fbf7 	bl	80042d0 <HAL_PCD_EP_ClrStall>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008ae6:	7bfb      	ldrb	r3, [r7, #15]
 8008ae8:	4618      	mov	r0, r3
 8008aea:	f000 f895 	bl	8008c18 <USBD_Get_USB_Status>
 8008aee:	4603      	mov	r3, r0
 8008af0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008af2:	7bbb      	ldrb	r3, [r7, #14]
}
 8008af4:	4618      	mov	r0, r3
 8008af6:	3710      	adds	r7, #16
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}

08008afc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008afc:	b480      	push	{r7}
 8008afe:	b085      	sub	sp, #20
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
 8008b04:	460b      	mov	r3, r1
 8008b06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008b10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	da0b      	bge.n	8008b30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008b18:	78fb      	ldrb	r3, [r7, #3]
 8008b1a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b1e:	68f9      	ldr	r1, [r7, #12]
 8008b20:	4613      	mov	r3, r2
 8008b22:	00db      	lsls	r3, r3, #3
 8008b24:	1a9b      	subs	r3, r3, r2
 8008b26:	009b      	lsls	r3, r3, #2
 8008b28:	440b      	add	r3, r1
 8008b2a:	333e      	adds	r3, #62	; 0x3e
 8008b2c:	781b      	ldrb	r3, [r3, #0]
 8008b2e:	e00b      	b.n	8008b48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008b30:	78fb      	ldrb	r3, [r7, #3]
 8008b32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008b36:	68f9      	ldr	r1, [r7, #12]
 8008b38:	4613      	mov	r3, r2
 8008b3a:	00db      	lsls	r3, r3, #3
 8008b3c:	1a9b      	subs	r3, r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	440b      	add	r3, r1
 8008b42:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008b46:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3714      	adds	r7, #20
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr

08008b54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b084      	sub	sp, #16
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b60:	2300      	movs	r3, #0
 8008b62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8008b6e:	78fa      	ldrb	r2, [r7, #3]
 8008b70:	4611      	mov	r1, r2
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7fb f9dc 	bl	8003f30 <HAL_PCD_SetAddress>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f000 f84a 	bl	8008c18 <USBD_Get_USB_Status>
 8008b84:	4603      	mov	r3, r0
 8008b86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b88:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3710      	adds	r7, #16
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b086      	sub	sp, #24
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	60f8      	str	r0, [r7, #12]
 8008b9a:	607a      	str	r2, [r7, #4]
 8008b9c:	603b      	str	r3, [r7, #0]
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ba6:	2300      	movs	r3, #0
 8008ba8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008bb0:	7af9      	ldrb	r1, [r7, #11]
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	f7fb fadd 	bl	8004174 <HAL_PCD_EP_Transmit>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008bbe:	7dfb      	ldrb	r3, [r7, #23]
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	f000 f829 	bl	8008c18 <USBD_Get_USB_Status>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008bca:	7dbb      	ldrb	r3, [r7, #22]
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3718      	adds	r7, #24
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008bd4:	b580      	push	{r7, lr}
 8008bd6:	b086      	sub	sp, #24
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	60f8      	str	r0, [r7, #12]
 8008bdc:	607a      	str	r2, [r7, #4]
 8008bde:	603b      	str	r3, [r7, #0]
 8008be0:	460b      	mov	r3, r1
 8008be2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008be4:	2300      	movs	r3, #0
 8008be6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008be8:	2300      	movs	r3, #0
 8008bea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8008bf2:	7af9      	ldrb	r1, [r7, #11]
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	687a      	ldr	r2, [r7, #4]
 8008bf8:	f7fb fa71 	bl	80040de <HAL_PCD_EP_Receive>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c00:	7dfb      	ldrb	r3, [r7, #23]
 8008c02:	4618      	mov	r0, r3
 8008c04:	f000 f808 	bl	8008c18 <USBD_Get_USB_Status>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c0c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3718      	adds	r7, #24
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
	...

08008c18 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	4603      	mov	r3, r0
 8008c20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c22:	2300      	movs	r3, #0
 8008c24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008c26:	79fb      	ldrb	r3, [r7, #7]
 8008c28:	2b03      	cmp	r3, #3
 8008c2a:	d817      	bhi.n	8008c5c <USBD_Get_USB_Status+0x44>
 8008c2c:	a201      	add	r2, pc, #4	; (adr r2, 8008c34 <USBD_Get_USB_Status+0x1c>)
 8008c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c32:	bf00      	nop
 8008c34:	08008c45 	.word	0x08008c45
 8008c38:	08008c4b 	.word	0x08008c4b
 8008c3c:	08008c51 	.word	0x08008c51
 8008c40:	08008c57 	.word	0x08008c57
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008c44:	2300      	movs	r3, #0
 8008c46:	73fb      	strb	r3, [r7, #15]
    break;
 8008c48:	e00b      	b.n	8008c62 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008c4a:	2303      	movs	r3, #3
 8008c4c:	73fb      	strb	r3, [r7, #15]
    break;
 8008c4e:	e008      	b.n	8008c62 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008c50:	2301      	movs	r3, #1
 8008c52:	73fb      	strb	r3, [r7, #15]
    break;
 8008c54:	e005      	b.n	8008c62 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008c56:	2303      	movs	r3, #3
 8008c58:	73fb      	strb	r3, [r7, #15]
    break;
 8008c5a:	e002      	b.n	8008c62 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008c5c:	2303      	movs	r3, #3
 8008c5e:	73fb      	strb	r3, [r7, #15]
    break;
 8008c60:	bf00      	nop
  }
  return usb_status;
 8008c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c64:	4618      	mov	r0, r3
 8008c66:	3714      	adds	r7, #20
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr

08008c70 <__libc_init_array>:
 8008c70:	b570      	push	{r4, r5, r6, lr}
 8008c72:	4e0d      	ldr	r6, [pc, #52]	; (8008ca8 <__libc_init_array+0x38>)
 8008c74:	4c0d      	ldr	r4, [pc, #52]	; (8008cac <__libc_init_array+0x3c>)
 8008c76:	1ba4      	subs	r4, r4, r6
 8008c78:	10a4      	asrs	r4, r4, #2
 8008c7a:	2500      	movs	r5, #0
 8008c7c:	42a5      	cmp	r5, r4
 8008c7e:	d109      	bne.n	8008c94 <__libc_init_array+0x24>
 8008c80:	4e0b      	ldr	r6, [pc, #44]	; (8008cb0 <__libc_init_array+0x40>)
 8008c82:	4c0c      	ldr	r4, [pc, #48]	; (8008cb4 <__libc_init_array+0x44>)
 8008c84:	f000 f820 	bl	8008cc8 <_init>
 8008c88:	1ba4      	subs	r4, r4, r6
 8008c8a:	10a4      	asrs	r4, r4, #2
 8008c8c:	2500      	movs	r5, #0
 8008c8e:	42a5      	cmp	r5, r4
 8008c90:	d105      	bne.n	8008c9e <__libc_init_array+0x2e>
 8008c92:	bd70      	pop	{r4, r5, r6, pc}
 8008c94:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008c98:	4798      	blx	r3
 8008c9a:	3501      	adds	r5, #1
 8008c9c:	e7ee      	b.n	8008c7c <__libc_init_array+0xc>
 8008c9e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ca2:	4798      	blx	r3
 8008ca4:	3501      	adds	r5, #1
 8008ca6:	e7f2      	b.n	8008c8e <__libc_init_array+0x1e>
 8008ca8:	08009abc 	.word	0x08009abc
 8008cac:	08009abc 	.word	0x08009abc
 8008cb0:	08009abc 	.word	0x08009abc
 8008cb4:	08009ac0 	.word	0x08009ac0

08008cb8 <memset>:
 8008cb8:	4402      	add	r2, r0
 8008cba:	4603      	mov	r3, r0
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d100      	bne.n	8008cc2 <memset+0xa>
 8008cc0:	4770      	bx	lr
 8008cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8008cc6:	e7f9      	b.n	8008cbc <memset+0x4>

08008cc8 <_init>:
 8008cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cca:	bf00      	nop
 8008ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cce:	bc08      	pop	{r3}
 8008cd0:	469e      	mov	lr, r3
 8008cd2:	4770      	bx	lr

08008cd4 <_fini>:
 8008cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cd6:	bf00      	nop
 8008cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008cda:	bc08      	pop	{r3}
 8008cdc:	469e      	mov	lr, r3
 8008cde:	4770      	bx	lr
